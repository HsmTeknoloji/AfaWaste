
AfaWaste.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008210  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000544  080082d0  080082d0  000182d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008814  08008814  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08008814  08008814  00018814  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800881c  0800881c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800881c  0800881c  0001881c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008820  08008820  00018820  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08008824  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000074c  20000070  08008894  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200007bc  08008894  000207bc  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001d379  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000038a4  00000000  00000000  0003d411  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011c8  00000000  00000000  00040cb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001040  00000000  00000000  00041e80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000182a8  00000000  00000000  00042ec0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017e74  00000000  00000000  0005b168  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008f011  00000000  00000000  00072fdc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00101fed  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000430c  00000000  00000000  00102040  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000070 	.word	0x20000070
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080082b8 	.word	0x080082b8

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000074 	.word	0x20000074
 8000104:	080082b8 	.word	0x080082b8

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	; 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f8f0 	bl	8000404 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			; (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__divsi3>:
 8000230:	4603      	mov	r3, r0
 8000232:	430b      	orrs	r3, r1
 8000234:	d47f      	bmi.n	8000336 <__divsi3+0x106>
 8000236:	2200      	movs	r2, #0
 8000238:	0843      	lsrs	r3, r0, #1
 800023a:	428b      	cmp	r3, r1
 800023c:	d374      	bcc.n	8000328 <__divsi3+0xf8>
 800023e:	0903      	lsrs	r3, r0, #4
 8000240:	428b      	cmp	r3, r1
 8000242:	d35f      	bcc.n	8000304 <__divsi3+0xd4>
 8000244:	0a03      	lsrs	r3, r0, #8
 8000246:	428b      	cmp	r3, r1
 8000248:	d344      	bcc.n	80002d4 <__divsi3+0xa4>
 800024a:	0b03      	lsrs	r3, r0, #12
 800024c:	428b      	cmp	r3, r1
 800024e:	d328      	bcc.n	80002a2 <__divsi3+0x72>
 8000250:	0c03      	lsrs	r3, r0, #16
 8000252:	428b      	cmp	r3, r1
 8000254:	d30d      	bcc.n	8000272 <__divsi3+0x42>
 8000256:	22ff      	movs	r2, #255	; 0xff
 8000258:	0209      	lsls	r1, r1, #8
 800025a:	ba12      	rev	r2, r2
 800025c:	0c03      	lsrs	r3, r0, #16
 800025e:	428b      	cmp	r3, r1
 8000260:	d302      	bcc.n	8000268 <__divsi3+0x38>
 8000262:	1212      	asrs	r2, r2, #8
 8000264:	0209      	lsls	r1, r1, #8
 8000266:	d065      	beq.n	8000334 <__divsi3+0x104>
 8000268:	0b03      	lsrs	r3, r0, #12
 800026a:	428b      	cmp	r3, r1
 800026c:	d319      	bcc.n	80002a2 <__divsi3+0x72>
 800026e:	e000      	b.n	8000272 <__divsi3+0x42>
 8000270:	0a09      	lsrs	r1, r1, #8
 8000272:	0bc3      	lsrs	r3, r0, #15
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x4c>
 8000278:	03cb      	lsls	r3, r1, #15
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0b83      	lsrs	r3, r0, #14
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x58>
 8000284:	038b      	lsls	r3, r1, #14
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0b43      	lsrs	r3, r0, #13
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x64>
 8000290:	034b      	lsls	r3, r1, #13
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0b03      	lsrs	r3, r0, #12
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x70>
 800029c:	030b      	lsls	r3, r1, #12
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0ac3      	lsrs	r3, r0, #11
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x7c>
 80002a8:	02cb      	lsls	r3, r1, #11
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0a83      	lsrs	r3, r0, #10
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x88>
 80002b4:	028b      	lsls	r3, r1, #10
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0a43      	lsrs	r3, r0, #9
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x94>
 80002c0:	024b      	lsls	r3, r1, #9
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0a03      	lsrs	r3, r0, #8
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0xa0>
 80002cc:	020b      	lsls	r3, r1, #8
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	d2cd      	bcs.n	8000270 <__divsi3+0x40>
 80002d4:	09c3      	lsrs	r3, r0, #7
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d301      	bcc.n	80002de <__divsi3+0xae>
 80002da:	01cb      	lsls	r3, r1, #7
 80002dc:	1ac0      	subs	r0, r0, r3
 80002de:	4152      	adcs	r2, r2
 80002e0:	0983      	lsrs	r3, r0, #6
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xba>
 80002e6:	018b      	lsls	r3, r1, #6
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	0943      	lsrs	r3, r0, #5
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xc6>
 80002f2:	014b      	lsls	r3, r1, #5
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0903      	lsrs	r3, r0, #4
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xd2>
 80002fe:	010b      	lsls	r3, r1, #4
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	08c3      	lsrs	r3, r0, #3
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xde>
 800030a:	00cb      	lsls	r3, r1, #3
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0883      	lsrs	r3, r0, #2
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xea>
 8000316:	008b      	lsls	r3, r1, #2
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0843      	lsrs	r3, r0, #1
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xf6>
 8000322:	004b      	lsls	r3, r1, #1
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	1a41      	subs	r1, r0, r1
 800032a:	d200      	bcs.n	800032e <__divsi3+0xfe>
 800032c:	4601      	mov	r1, r0
 800032e:	4152      	adcs	r2, r2
 8000330:	4610      	mov	r0, r2
 8000332:	4770      	bx	lr
 8000334:	e05d      	b.n	80003f2 <__divsi3+0x1c2>
 8000336:	0fca      	lsrs	r2, r1, #31
 8000338:	d000      	beq.n	800033c <__divsi3+0x10c>
 800033a:	4249      	negs	r1, r1
 800033c:	1003      	asrs	r3, r0, #32
 800033e:	d300      	bcc.n	8000342 <__divsi3+0x112>
 8000340:	4240      	negs	r0, r0
 8000342:	4053      	eors	r3, r2
 8000344:	2200      	movs	r2, #0
 8000346:	469c      	mov	ip, r3
 8000348:	0903      	lsrs	r3, r0, #4
 800034a:	428b      	cmp	r3, r1
 800034c:	d32d      	bcc.n	80003aa <__divsi3+0x17a>
 800034e:	0a03      	lsrs	r3, r0, #8
 8000350:	428b      	cmp	r3, r1
 8000352:	d312      	bcc.n	800037a <__divsi3+0x14a>
 8000354:	22fc      	movs	r2, #252	; 0xfc
 8000356:	0189      	lsls	r1, r1, #6
 8000358:	ba12      	rev	r2, r2
 800035a:	0a03      	lsrs	r3, r0, #8
 800035c:	428b      	cmp	r3, r1
 800035e:	d30c      	bcc.n	800037a <__divsi3+0x14a>
 8000360:	0189      	lsls	r1, r1, #6
 8000362:	1192      	asrs	r2, r2, #6
 8000364:	428b      	cmp	r3, r1
 8000366:	d308      	bcc.n	800037a <__divsi3+0x14a>
 8000368:	0189      	lsls	r1, r1, #6
 800036a:	1192      	asrs	r2, r2, #6
 800036c:	428b      	cmp	r3, r1
 800036e:	d304      	bcc.n	800037a <__divsi3+0x14a>
 8000370:	0189      	lsls	r1, r1, #6
 8000372:	d03a      	beq.n	80003ea <__divsi3+0x1ba>
 8000374:	1192      	asrs	r2, r2, #6
 8000376:	e000      	b.n	800037a <__divsi3+0x14a>
 8000378:	0989      	lsrs	r1, r1, #6
 800037a:	09c3      	lsrs	r3, r0, #7
 800037c:	428b      	cmp	r3, r1
 800037e:	d301      	bcc.n	8000384 <__divsi3+0x154>
 8000380:	01cb      	lsls	r3, r1, #7
 8000382:	1ac0      	subs	r0, r0, r3
 8000384:	4152      	adcs	r2, r2
 8000386:	0983      	lsrs	r3, r0, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x160>
 800038c:	018b      	lsls	r3, r1, #6
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	0943      	lsrs	r3, r0, #5
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x16c>
 8000398:	014b      	lsls	r3, r1, #5
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0903      	lsrs	r3, r0, #4
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x178>
 80003a4:	010b      	lsls	r3, r1, #4
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	08c3      	lsrs	r3, r0, #3
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x184>
 80003b0:	00cb      	lsls	r3, r1, #3
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0883      	lsrs	r3, r0, #2
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x190>
 80003bc:	008b      	lsls	r3, r1, #2
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	d2d9      	bcs.n	8000378 <__divsi3+0x148>
 80003c4:	0843      	lsrs	r3, r0, #1
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d301      	bcc.n	80003ce <__divsi3+0x19e>
 80003ca:	004b      	lsls	r3, r1, #1
 80003cc:	1ac0      	subs	r0, r0, r3
 80003ce:	4152      	adcs	r2, r2
 80003d0:	1a41      	subs	r1, r0, r1
 80003d2:	d200      	bcs.n	80003d6 <__divsi3+0x1a6>
 80003d4:	4601      	mov	r1, r0
 80003d6:	4663      	mov	r3, ip
 80003d8:	4152      	adcs	r2, r2
 80003da:	105b      	asrs	r3, r3, #1
 80003dc:	4610      	mov	r0, r2
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x1b4>
 80003e0:	4240      	negs	r0, r0
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	d500      	bpl.n	80003e8 <__divsi3+0x1b8>
 80003e6:	4249      	negs	r1, r1
 80003e8:	4770      	bx	lr
 80003ea:	4663      	mov	r3, ip
 80003ec:	105b      	asrs	r3, r3, #1
 80003ee:	d300      	bcc.n	80003f2 <__divsi3+0x1c2>
 80003f0:	4240      	negs	r0, r0
 80003f2:	b501      	push	{r0, lr}
 80003f4:	2000      	movs	r0, #0
 80003f6:	f000 f805 	bl	8000404 <__aeabi_idiv0>
 80003fa:	bd02      	pop	{r1, pc}

080003fc <__aeabi_idivmod>:
 80003fc:	2900      	cmp	r1, #0
 80003fe:	d0f8      	beq.n	80003f2 <__divsi3+0x1c2>
 8000400:	e716      	b.n	8000230 <__divsi3>
 8000402:	4770      	bx	lr

08000404 <__aeabi_idiv0>:
 8000404:	4770      	bx	lr
 8000406:	46c0      	nop			; (mov r8, r8)

08000408 <__aeabi_uldivmod>:
 8000408:	2b00      	cmp	r3, #0
 800040a:	d111      	bne.n	8000430 <__aeabi_uldivmod+0x28>
 800040c:	2a00      	cmp	r2, #0
 800040e:	d10f      	bne.n	8000430 <__aeabi_uldivmod+0x28>
 8000410:	2900      	cmp	r1, #0
 8000412:	d100      	bne.n	8000416 <__aeabi_uldivmod+0xe>
 8000414:	2800      	cmp	r0, #0
 8000416:	d002      	beq.n	800041e <__aeabi_uldivmod+0x16>
 8000418:	2100      	movs	r1, #0
 800041a:	43c9      	mvns	r1, r1
 800041c:	1c08      	adds	r0, r1, #0
 800041e:	b407      	push	{r0, r1, r2}
 8000420:	4802      	ldr	r0, [pc, #8]	; (800042c <__aeabi_uldivmod+0x24>)
 8000422:	a102      	add	r1, pc, #8	; (adr r1, 800042c <__aeabi_uldivmod+0x24>)
 8000424:	1840      	adds	r0, r0, r1
 8000426:	9002      	str	r0, [sp, #8]
 8000428:	bd03      	pop	{r0, r1, pc}
 800042a:	46c0      	nop			; (mov r8, r8)
 800042c:	ffffffd9 	.word	0xffffffd9
 8000430:	b403      	push	{r0, r1}
 8000432:	4668      	mov	r0, sp
 8000434:	b501      	push	{r0, lr}
 8000436:	9802      	ldr	r0, [sp, #8]
 8000438:	f000 f846 	bl	80004c8 <__udivmoddi4>
 800043c:	9b01      	ldr	r3, [sp, #4]
 800043e:	469e      	mov	lr, r3
 8000440:	b002      	add	sp, #8
 8000442:	bc0c      	pop	{r2, r3}
 8000444:	4770      	bx	lr
 8000446:	46c0      	nop			; (mov r8, r8)

08000448 <__aeabi_lmul>:
 8000448:	b5f0      	push	{r4, r5, r6, r7, lr}
 800044a:	0415      	lsls	r5, r2, #16
 800044c:	0c2d      	lsrs	r5, r5, #16
 800044e:	000f      	movs	r7, r1
 8000450:	0001      	movs	r1, r0
 8000452:	002e      	movs	r6, r5
 8000454:	46c6      	mov	lr, r8
 8000456:	4684      	mov	ip, r0
 8000458:	0400      	lsls	r0, r0, #16
 800045a:	0c14      	lsrs	r4, r2, #16
 800045c:	0c00      	lsrs	r0, r0, #16
 800045e:	0c09      	lsrs	r1, r1, #16
 8000460:	4346      	muls	r6, r0
 8000462:	434d      	muls	r5, r1
 8000464:	4360      	muls	r0, r4
 8000466:	4361      	muls	r1, r4
 8000468:	1940      	adds	r0, r0, r5
 800046a:	0c34      	lsrs	r4, r6, #16
 800046c:	1824      	adds	r4, r4, r0
 800046e:	b500      	push	{lr}
 8000470:	42a5      	cmp	r5, r4
 8000472:	d903      	bls.n	800047c <__aeabi_lmul+0x34>
 8000474:	2080      	movs	r0, #128	; 0x80
 8000476:	0240      	lsls	r0, r0, #9
 8000478:	4680      	mov	r8, r0
 800047a:	4441      	add	r1, r8
 800047c:	0c25      	lsrs	r5, r4, #16
 800047e:	186d      	adds	r5, r5, r1
 8000480:	4661      	mov	r1, ip
 8000482:	4359      	muls	r1, r3
 8000484:	437a      	muls	r2, r7
 8000486:	0430      	lsls	r0, r6, #16
 8000488:	1949      	adds	r1, r1, r5
 800048a:	0424      	lsls	r4, r4, #16
 800048c:	0c00      	lsrs	r0, r0, #16
 800048e:	1820      	adds	r0, r4, r0
 8000490:	1889      	adds	r1, r1, r2
 8000492:	bc80      	pop	{r7}
 8000494:	46b8      	mov	r8, r7
 8000496:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000498 <__aeabi_f2uiz>:
 8000498:	219e      	movs	r1, #158	; 0x9e
 800049a:	b510      	push	{r4, lr}
 800049c:	05c9      	lsls	r1, r1, #23
 800049e:	1c04      	adds	r4, r0, #0
 80004a0:	f000 fb3c 	bl	8000b1c <__aeabi_fcmpge>
 80004a4:	2800      	cmp	r0, #0
 80004a6:	d103      	bne.n	80004b0 <__aeabi_f2uiz+0x18>
 80004a8:	1c20      	adds	r0, r4, #0
 80004aa:	f000 faa1 	bl	80009f0 <__aeabi_f2iz>
 80004ae:	bd10      	pop	{r4, pc}
 80004b0:	219e      	movs	r1, #158	; 0x9e
 80004b2:	1c20      	adds	r0, r4, #0
 80004b4:	05c9      	lsls	r1, r1, #23
 80004b6:	f000 f8d3 	bl	8000660 <__aeabi_fsub>
 80004ba:	f000 fa99 	bl	80009f0 <__aeabi_f2iz>
 80004be:	2380      	movs	r3, #128	; 0x80
 80004c0:	061b      	lsls	r3, r3, #24
 80004c2:	469c      	mov	ip, r3
 80004c4:	4460      	add	r0, ip
 80004c6:	e7f2      	b.n	80004ae <__aeabi_f2uiz+0x16>

080004c8 <__udivmoddi4>:
 80004c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004ca:	4657      	mov	r7, sl
 80004cc:	464e      	mov	r6, r9
 80004ce:	4645      	mov	r5, r8
 80004d0:	46de      	mov	lr, fp
 80004d2:	b5e0      	push	{r5, r6, r7, lr}
 80004d4:	0004      	movs	r4, r0
 80004d6:	000d      	movs	r5, r1
 80004d8:	4692      	mov	sl, r2
 80004da:	4699      	mov	r9, r3
 80004dc:	b083      	sub	sp, #12
 80004de:	428b      	cmp	r3, r1
 80004e0:	d830      	bhi.n	8000544 <__udivmoddi4+0x7c>
 80004e2:	d02d      	beq.n	8000540 <__udivmoddi4+0x78>
 80004e4:	4649      	mov	r1, r9
 80004e6:	4650      	mov	r0, sl
 80004e8:	f000 fb40 	bl	8000b6c <__clzdi2>
 80004ec:	0029      	movs	r1, r5
 80004ee:	0006      	movs	r6, r0
 80004f0:	0020      	movs	r0, r4
 80004f2:	f000 fb3b 	bl	8000b6c <__clzdi2>
 80004f6:	1a33      	subs	r3, r6, r0
 80004f8:	4698      	mov	r8, r3
 80004fa:	3b20      	subs	r3, #32
 80004fc:	469b      	mov	fp, r3
 80004fe:	d433      	bmi.n	8000568 <__udivmoddi4+0xa0>
 8000500:	465a      	mov	r2, fp
 8000502:	4653      	mov	r3, sl
 8000504:	4093      	lsls	r3, r2
 8000506:	4642      	mov	r2, r8
 8000508:	001f      	movs	r7, r3
 800050a:	4653      	mov	r3, sl
 800050c:	4093      	lsls	r3, r2
 800050e:	001e      	movs	r6, r3
 8000510:	42af      	cmp	r7, r5
 8000512:	d83a      	bhi.n	800058a <__udivmoddi4+0xc2>
 8000514:	42af      	cmp	r7, r5
 8000516:	d100      	bne.n	800051a <__udivmoddi4+0x52>
 8000518:	e078      	b.n	800060c <__udivmoddi4+0x144>
 800051a:	465b      	mov	r3, fp
 800051c:	1ba4      	subs	r4, r4, r6
 800051e:	41bd      	sbcs	r5, r7
 8000520:	2b00      	cmp	r3, #0
 8000522:	da00      	bge.n	8000526 <__udivmoddi4+0x5e>
 8000524:	e075      	b.n	8000612 <__udivmoddi4+0x14a>
 8000526:	2200      	movs	r2, #0
 8000528:	2300      	movs	r3, #0
 800052a:	9200      	str	r2, [sp, #0]
 800052c:	9301      	str	r3, [sp, #4]
 800052e:	2301      	movs	r3, #1
 8000530:	465a      	mov	r2, fp
 8000532:	4093      	lsls	r3, r2
 8000534:	9301      	str	r3, [sp, #4]
 8000536:	2301      	movs	r3, #1
 8000538:	4642      	mov	r2, r8
 800053a:	4093      	lsls	r3, r2
 800053c:	9300      	str	r3, [sp, #0]
 800053e:	e028      	b.n	8000592 <__udivmoddi4+0xca>
 8000540:	4282      	cmp	r2, r0
 8000542:	d9cf      	bls.n	80004e4 <__udivmoddi4+0x1c>
 8000544:	2200      	movs	r2, #0
 8000546:	2300      	movs	r3, #0
 8000548:	9200      	str	r2, [sp, #0]
 800054a:	9301      	str	r3, [sp, #4]
 800054c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800054e:	2b00      	cmp	r3, #0
 8000550:	d001      	beq.n	8000556 <__udivmoddi4+0x8e>
 8000552:	601c      	str	r4, [r3, #0]
 8000554:	605d      	str	r5, [r3, #4]
 8000556:	9800      	ldr	r0, [sp, #0]
 8000558:	9901      	ldr	r1, [sp, #4]
 800055a:	b003      	add	sp, #12
 800055c:	bcf0      	pop	{r4, r5, r6, r7}
 800055e:	46bb      	mov	fp, r7
 8000560:	46b2      	mov	sl, r6
 8000562:	46a9      	mov	r9, r5
 8000564:	46a0      	mov	r8, r4
 8000566:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000568:	4642      	mov	r2, r8
 800056a:	2320      	movs	r3, #32
 800056c:	1a9b      	subs	r3, r3, r2
 800056e:	4652      	mov	r2, sl
 8000570:	40da      	lsrs	r2, r3
 8000572:	4641      	mov	r1, r8
 8000574:	0013      	movs	r3, r2
 8000576:	464a      	mov	r2, r9
 8000578:	408a      	lsls	r2, r1
 800057a:	0017      	movs	r7, r2
 800057c:	4642      	mov	r2, r8
 800057e:	431f      	orrs	r7, r3
 8000580:	4653      	mov	r3, sl
 8000582:	4093      	lsls	r3, r2
 8000584:	001e      	movs	r6, r3
 8000586:	42af      	cmp	r7, r5
 8000588:	d9c4      	bls.n	8000514 <__udivmoddi4+0x4c>
 800058a:	2200      	movs	r2, #0
 800058c:	2300      	movs	r3, #0
 800058e:	9200      	str	r2, [sp, #0]
 8000590:	9301      	str	r3, [sp, #4]
 8000592:	4643      	mov	r3, r8
 8000594:	2b00      	cmp	r3, #0
 8000596:	d0d9      	beq.n	800054c <__udivmoddi4+0x84>
 8000598:	07fb      	lsls	r3, r7, #31
 800059a:	0872      	lsrs	r2, r6, #1
 800059c:	431a      	orrs	r2, r3
 800059e:	4646      	mov	r6, r8
 80005a0:	087b      	lsrs	r3, r7, #1
 80005a2:	e00e      	b.n	80005c2 <__udivmoddi4+0xfa>
 80005a4:	42ab      	cmp	r3, r5
 80005a6:	d101      	bne.n	80005ac <__udivmoddi4+0xe4>
 80005a8:	42a2      	cmp	r2, r4
 80005aa:	d80c      	bhi.n	80005c6 <__udivmoddi4+0xfe>
 80005ac:	1aa4      	subs	r4, r4, r2
 80005ae:	419d      	sbcs	r5, r3
 80005b0:	2001      	movs	r0, #1
 80005b2:	1924      	adds	r4, r4, r4
 80005b4:	416d      	adcs	r5, r5
 80005b6:	2100      	movs	r1, #0
 80005b8:	3e01      	subs	r6, #1
 80005ba:	1824      	adds	r4, r4, r0
 80005bc:	414d      	adcs	r5, r1
 80005be:	2e00      	cmp	r6, #0
 80005c0:	d006      	beq.n	80005d0 <__udivmoddi4+0x108>
 80005c2:	42ab      	cmp	r3, r5
 80005c4:	d9ee      	bls.n	80005a4 <__udivmoddi4+0xdc>
 80005c6:	3e01      	subs	r6, #1
 80005c8:	1924      	adds	r4, r4, r4
 80005ca:	416d      	adcs	r5, r5
 80005cc:	2e00      	cmp	r6, #0
 80005ce:	d1f8      	bne.n	80005c2 <__udivmoddi4+0xfa>
 80005d0:	9800      	ldr	r0, [sp, #0]
 80005d2:	9901      	ldr	r1, [sp, #4]
 80005d4:	465b      	mov	r3, fp
 80005d6:	1900      	adds	r0, r0, r4
 80005d8:	4169      	adcs	r1, r5
 80005da:	2b00      	cmp	r3, #0
 80005dc:	db24      	blt.n	8000628 <__udivmoddi4+0x160>
 80005de:	002b      	movs	r3, r5
 80005e0:	465a      	mov	r2, fp
 80005e2:	4644      	mov	r4, r8
 80005e4:	40d3      	lsrs	r3, r2
 80005e6:	002a      	movs	r2, r5
 80005e8:	40e2      	lsrs	r2, r4
 80005ea:	001c      	movs	r4, r3
 80005ec:	465b      	mov	r3, fp
 80005ee:	0015      	movs	r5, r2
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	db2a      	blt.n	800064a <__udivmoddi4+0x182>
 80005f4:	0026      	movs	r6, r4
 80005f6:	409e      	lsls	r6, r3
 80005f8:	0033      	movs	r3, r6
 80005fa:	0026      	movs	r6, r4
 80005fc:	4647      	mov	r7, r8
 80005fe:	40be      	lsls	r6, r7
 8000600:	0032      	movs	r2, r6
 8000602:	1a80      	subs	r0, r0, r2
 8000604:	4199      	sbcs	r1, r3
 8000606:	9000      	str	r0, [sp, #0]
 8000608:	9101      	str	r1, [sp, #4]
 800060a:	e79f      	b.n	800054c <__udivmoddi4+0x84>
 800060c:	42a3      	cmp	r3, r4
 800060e:	d8bc      	bhi.n	800058a <__udivmoddi4+0xc2>
 8000610:	e783      	b.n	800051a <__udivmoddi4+0x52>
 8000612:	4642      	mov	r2, r8
 8000614:	2320      	movs	r3, #32
 8000616:	2100      	movs	r1, #0
 8000618:	1a9b      	subs	r3, r3, r2
 800061a:	2200      	movs	r2, #0
 800061c:	9100      	str	r1, [sp, #0]
 800061e:	9201      	str	r2, [sp, #4]
 8000620:	2201      	movs	r2, #1
 8000622:	40da      	lsrs	r2, r3
 8000624:	9201      	str	r2, [sp, #4]
 8000626:	e786      	b.n	8000536 <__udivmoddi4+0x6e>
 8000628:	4642      	mov	r2, r8
 800062a:	2320      	movs	r3, #32
 800062c:	1a9b      	subs	r3, r3, r2
 800062e:	002a      	movs	r2, r5
 8000630:	4646      	mov	r6, r8
 8000632:	409a      	lsls	r2, r3
 8000634:	0023      	movs	r3, r4
 8000636:	40f3      	lsrs	r3, r6
 8000638:	4644      	mov	r4, r8
 800063a:	4313      	orrs	r3, r2
 800063c:	002a      	movs	r2, r5
 800063e:	40e2      	lsrs	r2, r4
 8000640:	001c      	movs	r4, r3
 8000642:	465b      	mov	r3, fp
 8000644:	0015      	movs	r5, r2
 8000646:	2b00      	cmp	r3, #0
 8000648:	dad4      	bge.n	80005f4 <__udivmoddi4+0x12c>
 800064a:	4642      	mov	r2, r8
 800064c:	002f      	movs	r7, r5
 800064e:	2320      	movs	r3, #32
 8000650:	0026      	movs	r6, r4
 8000652:	4097      	lsls	r7, r2
 8000654:	1a9b      	subs	r3, r3, r2
 8000656:	40de      	lsrs	r6, r3
 8000658:	003b      	movs	r3, r7
 800065a:	4333      	orrs	r3, r6
 800065c:	e7cd      	b.n	80005fa <__udivmoddi4+0x132>
 800065e:	46c0      	nop			; (mov r8, r8)

08000660 <__aeabi_fsub>:
 8000660:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000662:	4646      	mov	r6, r8
 8000664:	46d6      	mov	lr, sl
 8000666:	464f      	mov	r7, r9
 8000668:	0243      	lsls	r3, r0, #9
 800066a:	0a5b      	lsrs	r3, r3, #9
 800066c:	00da      	lsls	r2, r3, #3
 800066e:	4694      	mov	ip, r2
 8000670:	024a      	lsls	r2, r1, #9
 8000672:	b5c0      	push	{r6, r7, lr}
 8000674:	0044      	lsls	r4, r0, #1
 8000676:	0a56      	lsrs	r6, r2, #9
 8000678:	1c05      	adds	r5, r0, #0
 800067a:	46b0      	mov	r8, r6
 800067c:	0e24      	lsrs	r4, r4, #24
 800067e:	004e      	lsls	r6, r1, #1
 8000680:	0992      	lsrs	r2, r2, #6
 8000682:	001f      	movs	r7, r3
 8000684:	0020      	movs	r0, r4
 8000686:	4692      	mov	sl, r2
 8000688:	0fed      	lsrs	r5, r5, #31
 800068a:	0e36      	lsrs	r6, r6, #24
 800068c:	0fc9      	lsrs	r1, r1, #31
 800068e:	2eff      	cmp	r6, #255	; 0xff
 8000690:	d100      	bne.n	8000694 <__aeabi_fsub+0x34>
 8000692:	e07f      	b.n	8000794 <__aeabi_fsub+0x134>
 8000694:	2201      	movs	r2, #1
 8000696:	4051      	eors	r1, r2
 8000698:	428d      	cmp	r5, r1
 800069a:	d051      	beq.n	8000740 <__aeabi_fsub+0xe0>
 800069c:	1ba2      	subs	r2, r4, r6
 800069e:	4691      	mov	r9, r2
 80006a0:	2a00      	cmp	r2, #0
 80006a2:	dc00      	bgt.n	80006a6 <__aeabi_fsub+0x46>
 80006a4:	e07e      	b.n	80007a4 <__aeabi_fsub+0x144>
 80006a6:	2e00      	cmp	r6, #0
 80006a8:	d100      	bne.n	80006ac <__aeabi_fsub+0x4c>
 80006aa:	e099      	b.n	80007e0 <__aeabi_fsub+0x180>
 80006ac:	2cff      	cmp	r4, #255	; 0xff
 80006ae:	d100      	bne.n	80006b2 <__aeabi_fsub+0x52>
 80006b0:	e08c      	b.n	80007cc <__aeabi_fsub+0x16c>
 80006b2:	2380      	movs	r3, #128	; 0x80
 80006b4:	4652      	mov	r2, sl
 80006b6:	04db      	lsls	r3, r3, #19
 80006b8:	431a      	orrs	r2, r3
 80006ba:	4692      	mov	sl, r2
 80006bc:	464a      	mov	r2, r9
 80006be:	2301      	movs	r3, #1
 80006c0:	2a1b      	cmp	r2, #27
 80006c2:	dc08      	bgt.n	80006d6 <__aeabi_fsub+0x76>
 80006c4:	4653      	mov	r3, sl
 80006c6:	2120      	movs	r1, #32
 80006c8:	40d3      	lsrs	r3, r2
 80006ca:	1a89      	subs	r1, r1, r2
 80006cc:	4652      	mov	r2, sl
 80006ce:	408a      	lsls	r2, r1
 80006d0:	1e51      	subs	r1, r2, #1
 80006d2:	418a      	sbcs	r2, r1
 80006d4:	4313      	orrs	r3, r2
 80006d6:	4662      	mov	r2, ip
 80006d8:	1ad3      	subs	r3, r2, r3
 80006da:	015a      	lsls	r2, r3, #5
 80006dc:	d400      	bmi.n	80006e0 <__aeabi_fsub+0x80>
 80006de:	e0f3      	b.n	80008c8 <__aeabi_fsub+0x268>
 80006e0:	019b      	lsls	r3, r3, #6
 80006e2:	099e      	lsrs	r6, r3, #6
 80006e4:	0030      	movs	r0, r6
 80006e6:	f000 fa23 	bl	8000b30 <__clzsi2>
 80006ea:	3805      	subs	r0, #5
 80006ec:	4086      	lsls	r6, r0
 80006ee:	4284      	cmp	r4, r0
 80006f0:	dd00      	ble.n	80006f4 <__aeabi_fsub+0x94>
 80006f2:	e0f7      	b.n	80008e4 <__aeabi_fsub+0x284>
 80006f4:	0032      	movs	r2, r6
 80006f6:	1b04      	subs	r4, r0, r4
 80006f8:	2020      	movs	r0, #32
 80006fa:	3401      	adds	r4, #1
 80006fc:	40e2      	lsrs	r2, r4
 80006fe:	1b04      	subs	r4, r0, r4
 8000700:	40a6      	lsls	r6, r4
 8000702:	0033      	movs	r3, r6
 8000704:	1e5e      	subs	r6, r3, #1
 8000706:	41b3      	sbcs	r3, r6
 8000708:	2400      	movs	r4, #0
 800070a:	4313      	orrs	r3, r2
 800070c:	075a      	lsls	r2, r3, #29
 800070e:	d004      	beq.n	800071a <__aeabi_fsub+0xba>
 8000710:	220f      	movs	r2, #15
 8000712:	401a      	ands	r2, r3
 8000714:	2a04      	cmp	r2, #4
 8000716:	d000      	beq.n	800071a <__aeabi_fsub+0xba>
 8000718:	3304      	adds	r3, #4
 800071a:	015a      	lsls	r2, r3, #5
 800071c:	d400      	bmi.n	8000720 <__aeabi_fsub+0xc0>
 800071e:	e0d6      	b.n	80008ce <__aeabi_fsub+0x26e>
 8000720:	1c62      	adds	r2, r4, #1
 8000722:	2cfe      	cmp	r4, #254	; 0xfe
 8000724:	d100      	bne.n	8000728 <__aeabi_fsub+0xc8>
 8000726:	e0da      	b.n	80008de <__aeabi_fsub+0x27e>
 8000728:	019b      	lsls	r3, r3, #6
 800072a:	0a5f      	lsrs	r7, r3, #9
 800072c:	b2d0      	uxtb	r0, r2
 800072e:	05c0      	lsls	r0, r0, #23
 8000730:	4338      	orrs	r0, r7
 8000732:	07ed      	lsls	r5, r5, #31
 8000734:	4328      	orrs	r0, r5
 8000736:	bce0      	pop	{r5, r6, r7}
 8000738:	46ba      	mov	sl, r7
 800073a:	46b1      	mov	r9, r6
 800073c:	46a8      	mov	r8, r5
 800073e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000740:	1ba2      	subs	r2, r4, r6
 8000742:	4691      	mov	r9, r2
 8000744:	2a00      	cmp	r2, #0
 8000746:	dd63      	ble.n	8000810 <__aeabi_fsub+0x1b0>
 8000748:	2e00      	cmp	r6, #0
 800074a:	d100      	bne.n	800074e <__aeabi_fsub+0xee>
 800074c:	e099      	b.n	8000882 <__aeabi_fsub+0x222>
 800074e:	2cff      	cmp	r4, #255	; 0xff
 8000750:	d03c      	beq.n	80007cc <__aeabi_fsub+0x16c>
 8000752:	2380      	movs	r3, #128	; 0x80
 8000754:	4652      	mov	r2, sl
 8000756:	04db      	lsls	r3, r3, #19
 8000758:	431a      	orrs	r2, r3
 800075a:	4692      	mov	sl, r2
 800075c:	464a      	mov	r2, r9
 800075e:	2301      	movs	r3, #1
 8000760:	2a1b      	cmp	r2, #27
 8000762:	dc08      	bgt.n	8000776 <__aeabi_fsub+0x116>
 8000764:	4653      	mov	r3, sl
 8000766:	2120      	movs	r1, #32
 8000768:	40d3      	lsrs	r3, r2
 800076a:	1a89      	subs	r1, r1, r2
 800076c:	4652      	mov	r2, sl
 800076e:	408a      	lsls	r2, r1
 8000770:	1e51      	subs	r1, r2, #1
 8000772:	418a      	sbcs	r2, r1
 8000774:	4313      	orrs	r3, r2
 8000776:	4463      	add	r3, ip
 8000778:	015a      	lsls	r2, r3, #5
 800077a:	d400      	bmi.n	800077e <__aeabi_fsub+0x11e>
 800077c:	e0a4      	b.n	80008c8 <__aeabi_fsub+0x268>
 800077e:	3401      	adds	r4, #1
 8000780:	2cff      	cmp	r4, #255	; 0xff
 8000782:	d100      	bne.n	8000786 <__aeabi_fsub+0x126>
 8000784:	e0ab      	b.n	80008de <__aeabi_fsub+0x27e>
 8000786:	2201      	movs	r2, #1
 8000788:	4997      	ldr	r1, [pc, #604]	; (80009e8 <__aeabi_fsub+0x388>)
 800078a:	401a      	ands	r2, r3
 800078c:	085b      	lsrs	r3, r3, #1
 800078e:	400b      	ands	r3, r1
 8000790:	4313      	orrs	r3, r2
 8000792:	e7bb      	b.n	800070c <__aeabi_fsub+0xac>
 8000794:	2a00      	cmp	r2, #0
 8000796:	d032      	beq.n	80007fe <__aeabi_fsub+0x19e>
 8000798:	428d      	cmp	r5, r1
 800079a:	d035      	beq.n	8000808 <__aeabi_fsub+0x1a8>
 800079c:	22ff      	movs	r2, #255	; 0xff
 800079e:	4252      	negs	r2, r2
 80007a0:	4691      	mov	r9, r2
 80007a2:	44a1      	add	r9, r4
 80007a4:	464a      	mov	r2, r9
 80007a6:	2a00      	cmp	r2, #0
 80007a8:	d051      	beq.n	800084e <__aeabi_fsub+0x1ee>
 80007aa:	1b30      	subs	r0, r6, r4
 80007ac:	2c00      	cmp	r4, #0
 80007ae:	d000      	beq.n	80007b2 <__aeabi_fsub+0x152>
 80007b0:	e09c      	b.n	80008ec <__aeabi_fsub+0x28c>
 80007b2:	4663      	mov	r3, ip
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d100      	bne.n	80007ba <__aeabi_fsub+0x15a>
 80007b8:	e0df      	b.n	800097a <__aeabi_fsub+0x31a>
 80007ba:	3801      	subs	r0, #1
 80007bc:	2800      	cmp	r0, #0
 80007be:	d100      	bne.n	80007c2 <__aeabi_fsub+0x162>
 80007c0:	e0f7      	b.n	80009b2 <__aeabi_fsub+0x352>
 80007c2:	2eff      	cmp	r6, #255	; 0xff
 80007c4:	d000      	beq.n	80007c8 <__aeabi_fsub+0x168>
 80007c6:	e099      	b.n	80008fc <__aeabi_fsub+0x29c>
 80007c8:	000d      	movs	r5, r1
 80007ca:	4643      	mov	r3, r8
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d100      	bne.n	80007d2 <__aeabi_fsub+0x172>
 80007d0:	e085      	b.n	80008de <__aeabi_fsub+0x27e>
 80007d2:	2780      	movs	r7, #128	; 0x80
 80007d4:	03ff      	lsls	r7, r7, #15
 80007d6:	431f      	orrs	r7, r3
 80007d8:	027f      	lsls	r7, r7, #9
 80007da:	20ff      	movs	r0, #255	; 0xff
 80007dc:	0a7f      	lsrs	r7, r7, #9
 80007de:	e7a6      	b.n	800072e <__aeabi_fsub+0xce>
 80007e0:	4652      	mov	r2, sl
 80007e2:	2a00      	cmp	r2, #0
 80007e4:	d074      	beq.n	80008d0 <__aeabi_fsub+0x270>
 80007e6:	2201      	movs	r2, #1
 80007e8:	4252      	negs	r2, r2
 80007ea:	4690      	mov	r8, r2
 80007ec:	44c1      	add	r9, r8
 80007ee:	464a      	mov	r2, r9
 80007f0:	2a00      	cmp	r2, #0
 80007f2:	d100      	bne.n	80007f6 <__aeabi_fsub+0x196>
 80007f4:	e0c8      	b.n	8000988 <__aeabi_fsub+0x328>
 80007f6:	2cff      	cmp	r4, #255	; 0xff
 80007f8:	d000      	beq.n	80007fc <__aeabi_fsub+0x19c>
 80007fa:	e75f      	b.n	80006bc <__aeabi_fsub+0x5c>
 80007fc:	e7e6      	b.n	80007cc <__aeabi_fsub+0x16c>
 80007fe:	2201      	movs	r2, #1
 8000800:	4051      	eors	r1, r2
 8000802:	42a9      	cmp	r1, r5
 8000804:	d000      	beq.n	8000808 <__aeabi_fsub+0x1a8>
 8000806:	e749      	b.n	800069c <__aeabi_fsub+0x3c>
 8000808:	22ff      	movs	r2, #255	; 0xff
 800080a:	4252      	negs	r2, r2
 800080c:	4691      	mov	r9, r2
 800080e:	44a1      	add	r9, r4
 8000810:	464a      	mov	r2, r9
 8000812:	2a00      	cmp	r2, #0
 8000814:	d043      	beq.n	800089e <__aeabi_fsub+0x23e>
 8000816:	1b31      	subs	r1, r6, r4
 8000818:	2c00      	cmp	r4, #0
 800081a:	d100      	bne.n	800081e <__aeabi_fsub+0x1be>
 800081c:	e08c      	b.n	8000938 <__aeabi_fsub+0x2d8>
 800081e:	2eff      	cmp	r6, #255	; 0xff
 8000820:	d100      	bne.n	8000824 <__aeabi_fsub+0x1c4>
 8000822:	e092      	b.n	800094a <__aeabi_fsub+0x2ea>
 8000824:	2380      	movs	r3, #128	; 0x80
 8000826:	4662      	mov	r2, ip
 8000828:	04db      	lsls	r3, r3, #19
 800082a:	431a      	orrs	r2, r3
 800082c:	4694      	mov	ip, r2
 800082e:	2301      	movs	r3, #1
 8000830:	291b      	cmp	r1, #27
 8000832:	dc09      	bgt.n	8000848 <__aeabi_fsub+0x1e8>
 8000834:	2020      	movs	r0, #32
 8000836:	4663      	mov	r3, ip
 8000838:	4662      	mov	r2, ip
 800083a:	40cb      	lsrs	r3, r1
 800083c:	1a41      	subs	r1, r0, r1
 800083e:	408a      	lsls	r2, r1
 8000840:	0011      	movs	r1, r2
 8000842:	1e48      	subs	r0, r1, #1
 8000844:	4181      	sbcs	r1, r0
 8000846:	430b      	orrs	r3, r1
 8000848:	0034      	movs	r4, r6
 800084a:	4453      	add	r3, sl
 800084c:	e794      	b.n	8000778 <__aeabi_fsub+0x118>
 800084e:	22fe      	movs	r2, #254	; 0xfe
 8000850:	1c66      	adds	r6, r4, #1
 8000852:	4232      	tst	r2, r6
 8000854:	d164      	bne.n	8000920 <__aeabi_fsub+0x2c0>
 8000856:	2c00      	cmp	r4, #0
 8000858:	d000      	beq.n	800085c <__aeabi_fsub+0x1fc>
 800085a:	e082      	b.n	8000962 <__aeabi_fsub+0x302>
 800085c:	4663      	mov	r3, ip
 800085e:	2b00      	cmp	r3, #0
 8000860:	d100      	bne.n	8000864 <__aeabi_fsub+0x204>
 8000862:	e0ab      	b.n	80009bc <__aeabi_fsub+0x35c>
 8000864:	4653      	mov	r3, sl
 8000866:	2b00      	cmp	r3, #0
 8000868:	d100      	bne.n	800086c <__aeabi_fsub+0x20c>
 800086a:	e760      	b.n	800072e <__aeabi_fsub+0xce>
 800086c:	4663      	mov	r3, ip
 800086e:	4652      	mov	r2, sl
 8000870:	1a9b      	subs	r3, r3, r2
 8000872:	015a      	lsls	r2, r3, #5
 8000874:	d400      	bmi.n	8000878 <__aeabi_fsub+0x218>
 8000876:	e0aa      	b.n	80009ce <__aeabi_fsub+0x36e>
 8000878:	4663      	mov	r3, ip
 800087a:	4652      	mov	r2, sl
 800087c:	000d      	movs	r5, r1
 800087e:	1ad3      	subs	r3, r2, r3
 8000880:	e744      	b.n	800070c <__aeabi_fsub+0xac>
 8000882:	4652      	mov	r2, sl
 8000884:	2a00      	cmp	r2, #0
 8000886:	d023      	beq.n	80008d0 <__aeabi_fsub+0x270>
 8000888:	2201      	movs	r2, #1
 800088a:	4252      	negs	r2, r2
 800088c:	4690      	mov	r8, r2
 800088e:	44c1      	add	r9, r8
 8000890:	464a      	mov	r2, r9
 8000892:	2a00      	cmp	r2, #0
 8000894:	d075      	beq.n	8000982 <__aeabi_fsub+0x322>
 8000896:	2cff      	cmp	r4, #255	; 0xff
 8000898:	d000      	beq.n	800089c <__aeabi_fsub+0x23c>
 800089a:	e75f      	b.n	800075c <__aeabi_fsub+0xfc>
 800089c:	e796      	b.n	80007cc <__aeabi_fsub+0x16c>
 800089e:	26fe      	movs	r6, #254	; 0xfe
 80008a0:	3401      	adds	r4, #1
 80008a2:	4226      	tst	r6, r4
 80008a4:	d153      	bne.n	800094e <__aeabi_fsub+0x2ee>
 80008a6:	2800      	cmp	r0, #0
 80008a8:	d172      	bne.n	8000990 <__aeabi_fsub+0x330>
 80008aa:	4663      	mov	r3, ip
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d100      	bne.n	80008b2 <__aeabi_fsub+0x252>
 80008b0:	e093      	b.n	80009da <__aeabi_fsub+0x37a>
 80008b2:	4653      	mov	r3, sl
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	d100      	bne.n	80008ba <__aeabi_fsub+0x25a>
 80008b8:	e739      	b.n	800072e <__aeabi_fsub+0xce>
 80008ba:	4463      	add	r3, ip
 80008bc:	2400      	movs	r4, #0
 80008be:	015a      	lsls	r2, r3, #5
 80008c0:	d502      	bpl.n	80008c8 <__aeabi_fsub+0x268>
 80008c2:	4a4a      	ldr	r2, [pc, #296]	; (80009ec <__aeabi_fsub+0x38c>)
 80008c4:	3401      	adds	r4, #1
 80008c6:	4013      	ands	r3, r2
 80008c8:	075a      	lsls	r2, r3, #29
 80008ca:	d000      	beq.n	80008ce <__aeabi_fsub+0x26e>
 80008cc:	e720      	b.n	8000710 <__aeabi_fsub+0xb0>
 80008ce:	08db      	lsrs	r3, r3, #3
 80008d0:	2cff      	cmp	r4, #255	; 0xff
 80008d2:	d100      	bne.n	80008d6 <__aeabi_fsub+0x276>
 80008d4:	e77a      	b.n	80007cc <__aeabi_fsub+0x16c>
 80008d6:	025b      	lsls	r3, r3, #9
 80008d8:	0a5f      	lsrs	r7, r3, #9
 80008da:	b2e0      	uxtb	r0, r4
 80008dc:	e727      	b.n	800072e <__aeabi_fsub+0xce>
 80008de:	20ff      	movs	r0, #255	; 0xff
 80008e0:	2700      	movs	r7, #0
 80008e2:	e724      	b.n	800072e <__aeabi_fsub+0xce>
 80008e4:	4b41      	ldr	r3, [pc, #260]	; (80009ec <__aeabi_fsub+0x38c>)
 80008e6:	1a24      	subs	r4, r4, r0
 80008e8:	4033      	ands	r3, r6
 80008ea:	e70f      	b.n	800070c <__aeabi_fsub+0xac>
 80008ec:	2eff      	cmp	r6, #255	; 0xff
 80008ee:	d100      	bne.n	80008f2 <__aeabi_fsub+0x292>
 80008f0:	e76a      	b.n	80007c8 <__aeabi_fsub+0x168>
 80008f2:	2380      	movs	r3, #128	; 0x80
 80008f4:	4662      	mov	r2, ip
 80008f6:	04db      	lsls	r3, r3, #19
 80008f8:	431a      	orrs	r2, r3
 80008fa:	4694      	mov	ip, r2
 80008fc:	2301      	movs	r3, #1
 80008fe:	281b      	cmp	r0, #27
 8000900:	dc09      	bgt.n	8000916 <__aeabi_fsub+0x2b6>
 8000902:	2420      	movs	r4, #32
 8000904:	4663      	mov	r3, ip
 8000906:	4662      	mov	r2, ip
 8000908:	40c3      	lsrs	r3, r0
 800090a:	1a20      	subs	r0, r4, r0
 800090c:	4082      	lsls	r2, r0
 800090e:	0010      	movs	r0, r2
 8000910:	1e44      	subs	r4, r0, #1
 8000912:	41a0      	sbcs	r0, r4
 8000914:	4303      	orrs	r3, r0
 8000916:	4652      	mov	r2, sl
 8000918:	000d      	movs	r5, r1
 800091a:	0034      	movs	r4, r6
 800091c:	1ad3      	subs	r3, r2, r3
 800091e:	e6dc      	b.n	80006da <__aeabi_fsub+0x7a>
 8000920:	4663      	mov	r3, ip
 8000922:	4652      	mov	r2, sl
 8000924:	1a9e      	subs	r6, r3, r2
 8000926:	0173      	lsls	r3, r6, #5
 8000928:	d417      	bmi.n	800095a <__aeabi_fsub+0x2fa>
 800092a:	2e00      	cmp	r6, #0
 800092c:	d000      	beq.n	8000930 <__aeabi_fsub+0x2d0>
 800092e:	e6d9      	b.n	80006e4 <__aeabi_fsub+0x84>
 8000930:	2500      	movs	r5, #0
 8000932:	2000      	movs	r0, #0
 8000934:	2700      	movs	r7, #0
 8000936:	e6fa      	b.n	800072e <__aeabi_fsub+0xce>
 8000938:	4663      	mov	r3, ip
 800093a:	2b00      	cmp	r3, #0
 800093c:	d044      	beq.n	80009c8 <__aeabi_fsub+0x368>
 800093e:	3901      	subs	r1, #1
 8000940:	2900      	cmp	r1, #0
 8000942:	d04c      	beq.n	80009de <__aeabi_fsub+0x37e>
 8000944:	2eff      	cmp	r6, #255	; 0xff
 8000946:	d000      	beq.n	800094a <__aeabi_fsub+0x2ea>
 8000948:	e771      	b.n	800082e <__aeabi_fsub+0x1ce>
 800094a:	4643      	mov	r3, r8
 800094c:	e73e      	b.n	80007cc <__aeabi_fsub+0x16c>
 800094e:	2cff      	cmp	r4, #255	; 0xff
 8000950:	d0c5      	beq.n	80008de <__aeabi_fsub+0x27e>
 8000952:	4652      	mov	r2, sl
 8000954:	4462      	add	r2, ip
 8000956:	0853      	lsrs	r3, r2, #1
 8000958:	e7b6      	b.n	80008c8 <__aeabi_fsub+0x268>
 800095a:	4663      	mov	r3, ip
 800095c:	000d      	movs	r5, r1
 800095e:	1ad6      	subs	r6, r2, r3
 8000960:	e6c0      	b.n	80006e4 <__aeabi_fsub+0x84>
 8000962:	4662      	mov	r2, ip
 8000964:	2a00      	cmp	r2, #0
 8000966:	d116      	bne.n	8000996 <__aeabi_fsub+0x336>
 8000968:	4653      	mov	r3, sl
 800096a:	2b00      	cmp	r3, #0
 800096c:	d000      	beq.n	8000970 <__aeabi_fsub+0x310>
 800096e:	e72b      	b.n	80007c8 <__aeabi_fsub+0x168>
 8000970:	2780      	movs	r7, #128	; 0x80
 8000972:	2500      	movs	r5, #0
 8000974:	20ff      	movs	r0, #255	; 0xff
 8000976:	03ff      	lsls	r7, r7, #15
 8000978:	e6d9      	b.n	800072e <__aeabi_fsub+0xce>
 800097a:	000d      	movs	r5, r1
 800097c:	4643      	mov	r3, r8
 800097e:	0034      	movs	r4, r6
 8000980:	e7a6      	b.n	80008d0 <__aeabi_fsub+0x270>
 8000982:	4653      	mov	r3, sl
 8000984:	4463      	add	r3, ip
 8000986:	e6f7      	b.n	8000778 <__aeabi_fsub+0x118>
 8000988:	4663      	mov	r3, ip
 800098a:	4652      	mov	r2, sl
 800098c:	1a9b      	subs	r3, r3, r2
 800098e:	e6a4      	b.n	80006da <__aeabi_fsub+0x7a>
 8000990:	4662      	mov	r2, ip
 8000992:	2a00      	cmp	r2, #0
 8000994:	d0d9      	beq.n	800094a <__aeabi_fsub+0x2ea>
 8000996:	4652      	mov	r2, sl
 8000998:	2a00      	cmp	r2, #0
 800099a:	d100      	bne.n	800099e <__aeabi_fsub+0x33e>
 800099c:	e716      	b.n	80007cc <__aeabi_fsub+0x16c>
 800099e:	2280      	movs	r2, #128	; 0x80
 80009a0:	03d2      	lsls	r2, r2, #15
 80009a2:	4213      	tst	r3, r2
 80009a4:	d100      	bne.n	80009a8 <__aeabi_fsub+0x348>
 80009a6:	e711      	b.n	80007cc <__aeabi_fsub+0x16c>
 80009a8:	4640      	mov	r0, r8
 80009aa:	4210      	tst	r0, r2
 80009ac:	d000      	beq.n	80009b0 <__aeabi_fsub+0x350>
 80009ae:	e70d      	b.n	80007cc <__aeabi_fsub+0x16c>
 80009b0:	e70a      	b.n	80007c8 <__aeabi_fsub+0x168>
 80009b2:	4652      	mov	r2, sl
 80009b4:	000d      	movs	r5, r1
 80009b6:	0034      	movs	r4, r6
 80009b8:	1ad3      	subs	r3, r2, r3
 80009ba:	e68e      	b.n	80006da <__aeabi_fsub+0x7a>
 80009bc:	4653      	mov	r3, sl
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d008      	beq.n	80009d4 <__aeabi_fsub+0x374>
 80009c2:	000d      	movs	r5, r1
 80009c4:	4647      	mov	r7, r8
 80009c6:	e6b2      	b.n	800072e <__aeabi_fsub+0xce>
 80009c8:	4643      	mov	r3, r8
 80009ca:	0034      	movs	r4, r6
 80009cc:	e780      	b.n	80008d0 <__aeabi_fsub+0x270>
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d000      	beq.n	80009d4 <__aeabi_fsub+0x374>
 80009d2:	e779      	b.n	80008c8 <__aeabi_fsub+0x268>
 80009d4:	2500      	movs	r5, #0
 80009d6:	2700      	movs	r7, #0
 80009d8:	e6a9      	b.n	800072e <__aeabi_fsub+0xce>
 80009da:	4647      	mov	r7, r8
 80009dc:	e6a7      	b.n	800072e <__aeabi_fsub+0xce>
 80009de:	4653      	mov	r3, sl
 80009e0:	0034      	movs	r4, r6
 80009e2:	4463      	add	r3, ip
 80009e4:	e6c8      	b.n	8000778 <__aeabi_fsub+0x118>
 80009e6:	46c0      	nop			; (mov r8, r8)
 80009e8:	7dffffff 	.word	0x7dffffff
 80009ec:	fbffffff 	.word	0xfbffffff

080009f0 <__aeabi_f2iz>:
 80009f0:	0241      	lsls	r1, r0, #9
 80009f2:	0042      	lsls	r2, r0, #1
 80009f4:	0fc3      	lsrs	r3, r0, #31
 80009f6:	0a49      	lsrs	r1, r1, #9
 80009f8:	2000      	movs	r0, #0
 80009fa:	0e12      	lsrs	r2, r2, #24
 80009fc:	2a7e      	cmp	r2, #126	; 0x7e
 80009fe:	d903      	bls.n	8000a08 <__aeabi_f2iz+0x18>
 8000a00:	2a9d      	cmp	r2, #157	; 0x9d
 8000a02:	d902      	bls.n	8000a0a <__aeabi_f2iz+0x1a>
 8000a04:	4a09      	ldr	r2, [pc, #36]	; (8000a2c <__aeabi_f2iz+0x3c>)
 8000a06:	1898      	adds	r0, r3, r2
 8000a08:	4770      	bx	lr
 8000a0a:	2080      	movs	r0, #128	; 0x80
 8000a0c:	0400      	lsls	r0, r0, #16
 8000a0e:	4301      	orrs	r1, r0
 8000a10:	2a95      	cmp	r2, #149	; 0x95
 8000a12:	dc07      	bgt.n	8000a24 <__aeabi_f2iz+0x34>
 8000a14:	2096      	movs	r0, #150	; 0x96
 8000a16:	1a82      	subs	r2, r0, r2
 8000a18:	40d1      	lsrs	r1, r2
 8000a1a:	4248      	negs	r0, r1
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d1f3      	bne.n	8000a08 <__aeabi_f2iz+0x18>
 8000a20:	0008      	movs	r0, r1
 8000a22:	e7f1      	b.n	8000a08 <__aeabi_f2iz+0x18>
 8000a24:	3a96      	subs	r2, #150	; 0x96
 8000a26:	4091      	lsls	r1, r2
 8000a28:	e7f7      	b.n	8000a1a <__aeabi_f2iz+0x2a>
 8000a2a:	46c0      	nop			; (mov r8, r8)
 8000a2c:	7fffffff 	.word	0x7fffffff

08000a30 <__aeabi_i2f>:
 8000a30:	b570      	push	{r4, r5, r6, lr}
 8000a32:	2800      	cmp	r0, #0
 8000a34:	d013      	beq.n	8000a5e <__aeabi_i2f+0x2e>
 8000a36:	17c3      	asrs	r3, r0, #31
 8000a38:	18c5      	adds	r5, r0, r3
 8000a3a:	405d      	eors	r5, r3
 8000a3c:	0fc4      	lsrs	r4, r0, #31
 8000a3e:	0028      	movs	r0, r5
 8000a40:	f000 f876 	bl	8000b30 <__clzsi2>
 8000a44:	239e      	movs	r3, #158	; 0x9e
 8000a46:	0001      	movs	r1, r0
 8000a48:	1a1b      	subs	r3, r3, r0
 8000a4a:	2b96      	cmp	r3, #150	; 0x96
 8000a4c:	dc0f      	bgt.n	8000a6e <__aeabi_i2f+0x3e>
 8000a4e:	2808      	cmp	r0, #8
 8000a50:	dd01      	ble.n	8000a56 <__aeabi_i2f+0x26>
 8000a52:	3908      	subs	r1, #8
 8000a54:	408d      	lsls	r5, r1
 8000a56:	026d      	lsls	r5, r5, #9
 8000a58:	0a6d      	lsrs	r5, r5, #9
 8000a5a:	b2d8      	uxtb	r0, r3
 8000a5c:	e002      	b.n	8000a64 <__aeabi_i2f+0x34>
 8000a5e:	2400      	movs	r4, #0
 8000a60:	2000      	movs	r0, #0
 8000a62:	2500      	movs	r5, #0
 8000a64:	05c0      	lsls	r0, r0, #23
 8000a66:	4328      	orrs	r0, r5
 8000a68:	07e4      	lsls	r4, r4, #31
 8000a6a:	4320      	orrs	r0, r4
 8000a6c:	bd70      	pop	{r4, r5, r6, pc}
 8000a6e:	2b99      	cmp	r3, #153	; 0x99
 8000a70:	dd0b      	ble.n	8000a8a <__aeabi_i2f+0x5a>
 8000a72:	2205      	movs	r2, #5
 8000a74:	002e      	movs	r6, r5
 8000a76:	1a12      	subs	r2, r2, r0
 8000a78:	40d6      	lsrs	r6, r2
 8000a7a:	0002      	movs	r2, r0
 8000a7c:	321b      	adds	r2, #27
 8000a7e:	4095      	lsls	r5, r2
 8000a80:	0028      	movs	r0, r5
 8000a82:	1e45      	subs	r5, r0, #1
 8000a84:	41a8      	sbcs	r0, r5
 8000a86:	0035      	movs	r5, r6
 8000a88:	4305      	orrs	r5, r0
 8000a8a:	2905      	cmp	r1, #5
 8000a8c:	dd01      	ble.n	8000a92 <__aeabi_i2f+0x62>
 8000a8e:	1f4a      	subs	r2, r1, #5
 8000a90:	4095      	lsls	r5, r2
 8000a92:	002a      	movs	r2, r5
 8000a94:	4e08      	ldr	r6, [pc, #32]	; (8000ab8 <__aeabi_i2f+0x88>)
 8000a96:	4032      	ands	r2, r6
 8000a98:	0768      	lsls	r0, r5, #29
 8000a9a:	d009      	beq.n	8000ab0 <__aeabi_i2f+0x80>
 8000a9c:	200f      	movs	r0, #15
 8000a9e:	4028      	ands	r0, r5
 8000aa0:	2804      	cmp	r0, #4
 8000aa2:	d005      	beq.n	8000ab0 <__aeabi_i2f+0x80>
 8000aa4:	3204      	adds	r2, #4
 8000aa6:	0150      	lsls	r0, r2, #5
 8000aa8:	d502      	bpl.n	8000ab0 <__aeabi_i2f+0x80>
 8000aaa:	239f      	movs	r3, #159	; 0x9f
 8000aac:	4032      	ands	r2, r6
 8000aae:	1a5b      	subs	r3, r3, r1
 8000ab0:	0192      	lsls	r2, r2, #6
 8000ab2:	0a55      	lsrs	r5, r2, #9
 8000ab4:	b2d8      	uxtb	r0, r3
 8000ab6:	e7d5      	b.n	8000a64 <__aeabi_i2f+0x34>
 8000ab8:	fbffffff 	.word	0xfbffffff

08000abc <__aeabi_cfrcmple>:
 8000abc:	4684      	mov	ip, r0
 8000abe:	1c08      	adds	r0, r1, #0
 8000ac0:	4661      	mov	r1, ip
 8000ac2:	e7ff      	b.n	8000ac4 <__aeabi_cfcmpeq>

08000ac4 <__aeabi_cfcmpeq>:
 8000ac4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000ac6:	f000 f8d1 	bl	8000c6c <__lesf2>
 8000aca:	2800      	cmp	r0, #0
 8000acc:	d401      	bmi.n	8000ad2 <__aeabi_cfcmpeq+0xe>
 8000ace:	2100      	movs	r1, #0
 8000ad0:	42c8      	cmn	r0, r1
 8000ad2:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000ad4 <__aeabi_fcmpeq>:
 8000ad4:	b510      	push	{r4, lr}
 8000ad6:	f000 f855 	bl	8000b84 <__eqsf2>
 8000ada:	4240      	negs	r0, r0
 8000adc:	3001      	adds	r0, #1
 8000ade:	bd10      	pop	{r4, pc}

08000ae0 <__aeabi_fcmplt>:
 8000ae0:	b510      	push	{r4, lr}
 8000ae2:	f000 f8c3 	bl	8000c6c <__lesf2>
 8000ae6:	2800      	cmp	r0, #0
 8000ae8:	db01      	blt.n	8000aee <__aeabi_fcmplt+0xe>
 8000aea:	2000      	movs	r0, #0
 8000aec:	bd10      	pop	{r4, pc}
 8000aee:	2001      	movs	r0, #1
 8000af0:	bd10      	pop	{r4, pc}
 8000af2:	46c0      	nop			; (mov r8, r8)

08000af4 <__aeabi_fcmple>:
 8000af4:	b510      	push	{r4, lr}
 8000af6:	f000 f8b9 	bl	8000c6c <__lesf2>
 8000afa:	2800      	cmp	r0, #0
 8000afc:	dd01      	ble.n	8000b02 <__aeabi_fcmple+0xe>
 8000afe:	2000      	movs	r0, #0
 8000b00:	bd10      	pop	{r4, pc}
 8000b02:	2001      	movs	r0, #1
 8000b04:	bd10      	pop	{r4, pc}
 8000b06:	46c0      	nop			; (mov r8, r8)

08000b08 <__aeabi_fcmpgt>:
 8000b08:	b510      	push	{r4, lr}
 8000b0a:	f000 f863 	bl	8000bd4 <__gesf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	dc01      	bgt.n	8000b16 <__aeabi_fcmpgt+0xe>
 8000b12:	2000      	movs	r0, #0
 8000b14:	bd10      	pop	{r4, pc}
 8000b16:	2001      	movs	r0, #1
 8000b18:	bd10      	pop	{r4, pc}
 8000b1a:	46c0      	nop			; (mov r8, r8)

08000b1c <__aeabi_fcmpge>:
 8000b1c:	b510      	push	{r4, lr}
 8000b1e:	f000 f859 	bl	8000bd4 <__gesf2>
 8000b22:	2800      	cmp	r0, #0
 8000b24:	da01      	bge.n	8000b2a <__aeabi_fcmpge+0xe>
 8000b26:	2000      	movs	r0, #0
 8000b28:	bd10      	pop	{r4, pc}
 8000b2a:	2001      	movs	r0, #1
 8000b2c:	bd10      	pop	{r4, pc}
 8000b2e:	46c0      	nop			; (mov r8, r8)

08000b30 <__clzsi2>:
 8000b30:	211c      	movs	r1, #28
 8000b32:	2301      	movs	r3, #1
 8000b34:	041b      	lsls	r3, r3, #16
 8000b36:	4298      	cmp	r0, r3
 8000b38:	d301      	bcc.n	8000b3e <__clzsi2+0xe>
 8000b3a:	0c00      	lsrs	r0, r0, #16
 8000b3c:	3910      	subs	r1, #16
 8000b3e:	0a1b      	lsrs	r3, r3, #8
 8000b40:	4298      	cmp	r0, r3
 8000b42:	d301      	bcc.n	8000b48 <__clzsi2+0x18>
 8000b44:	0a00      	lsrs	r0, r0, #8
 8000b46:	3908      	subs	r1, #8
 8000b48:	091b      	lsrs	r3, r3, #4
 8000b4a:	4298      	cmp	r0, r3
 8000b4c:	d301      	bcc.n	8000b52 <__clzsi2+0x22>
 8000b4e:	0900      	lsrs	r0, r0, #4
 8000b50:	3904      	subs	r1, #4
 8000b52:	a202      	add	r2, pc, #8	; (adr r2, 8000b5c <__clzsi2+0x2c>)
 8000b54:	5c10      	ldrb	r0, [r2, r0]
 8000b56:	1840      	adds	r0, r0, r1
 8000b58:	4770      	bx	lr
 8000b5a:	46c0      	nop			; (mov r8, r8)
 8000b5c:	02020304 	.word	0x02020304
 8000b60:	01010101 	.word	0x01010101
	...

08000b6c <__clzdi2>:
 8000b6c:	b510      	push	{r4, lr}
 8000b6e:	2900      	cmp	r1, #0
 8000b70:	d103      	bne.n	8000b7a <__clzdi2+0xe>
 8000b72:	f7ff ffdd 	bl	8000b30 <__clzsi2>
 8000b76:	3020      	adds	r0, #32
 8000b78:	e002      	b.n	8000b80 <__clzdi2+0x14>
 8000b7a:	1c08      	adds	r0, r1, #0
 8000b7c:	f7ff ffd8 	bl	8000b30 <__clzsi2>
 8000b80:	bd10      	pop	{r4, pc}
 8000b82:	46c0      	nop			; (mov r8, r8)

08000b84 <__eqsf2>:
 8000b84:	b570      	push	{r4, r5, r6, lr}
 8000b86:	0042      	lsls	r2, r0, #1
 8000b88:	024e      	lsls	r6, r1, #9
 8000b8a:	004c      	lsls	r4, r1, #1
 8000b8c:	0245      	lsls	r5, r0, #9
 8000b8e:	0a6d      	lsrs	r5, r5, #9
 8000b90:	0e12      	lsrs	r2, r2, #24
 8000b92:	0fc3      	lsrs	r3, r0, #31
 8000b94:	0a76      	lsrs	r6, r6, #9
 8000b96:	0e24      	lsrs	r4, r4, #24
 8000b98:	0fc9      	lsrs	r1, r1, #31
 8000b9a:	2aff      	cmp	r2, #255	; 0xff
 8000b9c:	d00f      	beq.n	8000bbe <__eqsf2+0x3a>
 8000b9e:	2cff      	cmp	r4, #255	; 0xff
 8000ba0:	d011      	beq.n	8000bc6 <__eqsf2+0x42>
 8000ba2:	2001      	movs	r0, #1
 8000ba4:	42a2      	cmp	r2, r4
 8000ba6:	d000      	beq.n	8000baa <__eqsf2+0x26>
 8000ba8:	bd70      	pop	{r4, r5, r6, pc}
 8000baa:	42b5      	cmp	r5, r6
 8000bac:	d1fc      	bne.n	8000ba8 <__eqsf2+0x24>
 8000bae:	428b      	cmp	r3, r1
 8000bb0:	d00d      	beq.n	8000bce <__eqsf2+0x4a>
 8000bb2:	2a00      	cmp	r2, #0
 8000bb4:	d1f8      	bne.n	8000ba8 <__eqsf2+0x24>
 8000bb6:	0028      	movs	r0, r5
 8000bb8:	1e45      	subs	r5, r0, #1
 8000bba:	41a8      	sbcs	r0, r5
 8000bbc:	e7f4      	b.n	8000ba8 <__eqsf2+0x24>
 8000bbe:	2001      	movs	r0, #1
 8000bc0:	2d00      	cmp	r5, #0
 8000bc2:	d1f1      	bne.n	8000ba8 <__eqsf2+0x24>
 8000bc4:	e7eb      	b.n	8000b9e <__eqsf2+0x1a>
 8000bc6:	2001      	movs	r0, #1
 8000bc8:	2e00      	cmp	r6, #0
 8000bca:	d1ed      	bne.n	8000ba8 <__eqsf2+0x24>
 8000bcc:	e7e9      	b.n	8000ba2 <__eqsf2+0x1e>
 8000bce:	2000      	movs	r0, #0
 8000bd0:	e7ea      	b.n	8000ba8 <__eqsf2+0x24>
 8000bd2:	46c0      	nop			; (mov r8, r8)

08000bd4 <__gesf2>:
 8000bd4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000bd6:	0042      	lsls	r2, r0, #1
 8000bd8:	0246      	lsls	r6, r0, #9
 8000bda:	024d      	lsls	r5, r1, #9
 8000bdc:	004c      	lsls	r4, r1, #1
 8000bde:	0fc3      	lsrs	r3, r0, #31
 8000be0:	0a76      	lsrs	r6, r6, #9
 8000be2:	0e12      	lsrs	r2, r2, #24
 8000be4:	0a6d      	lsrs	r5, r5, #9
 8000be6:	0e24      	lsrs	r4, r4, #24
 8000be8:	0fc8      	lsrs	r0, r1, #31
 8000bea:	2aff      	cmp	r2, #255	; 0xff
 8000bec:	d01f      	beq.n	8000c2e <__gesf2+0x5a>
 8000bee:	2cff      	cmp	r4, #255	; 0xff
 8000bf0:	d010      	beq.n	8000c14 <__gesf2+0x40>
 8000bf2:	2a00      	cmp	r2, #0
 8000bf4:	d11f      	bne.n	8000c36 <__gesf2+0x62>
 8000bf6:	4271      	negs	r1, r6
 8000bf8:	4171      	adcs	r1, r6
 8000bfa:	2c00      	cmp	r4, #0
 8000bfc:	d101      	bne.n	8000c02 <__gesf2+0x2e>
 8000bfe:	2d00      	cmp	r5, #0
 8000c00:	d01e      	beq.n	8000c40 <__gesf2+0x6c>
 8000c02:	2900      	cmp	r1, #0
 8000c04:	d10e      	bne.n	8000c24 <__gesf2+0x50>
 8000c06:	4283      	cmp	r3, r0
 8000c08:	d01e      	beq.n	8000c48 <__gesf2+0x74>
 8000c0a:	2102      	movs	r1, #2
 8000c0c:	1e58      	subs	r0, r3, #1
 8000c0e:	4008      	ands	r0, r1
 8000c10:	3801      	subs	r0, #1
 8000c12:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000c14:	2d00      	cmp	r5, #0
 8000c16:	d126      	bne.n	8000c66 <__gesf2+0x92>
 8000c18:	2a00      	cmp	r2, #0
 8000c1a:	d1f4      	bne.n	8000c06 <__gesf2+0x32>
 8000c1c:	4271      	negs	r1, r6
 8000c1e:	4171      	adcs	r1, r6
 8000c20:	2900      	cmp	r1, #0
 8000c22:	d0f0      	beq.n	8000c06 <__gesf2+0x32>
 8000c24:	2800      	cmp	r0, #0
 8000c26:	d1f4      	bne.n	8000c12 <__gesf2+0x3e>
 8000c28:	2001      	movs	r0, #1
 8000c2a:	4240      	negs	r0, r0
 8000c2c:	e7f1      	b.n	8000c12 <__gesf2+0x3e>
 8000c2e:	2e00      	cmp	r6, #0
 8000c30:	d119      	bne.n	8000c66 <__gesf2+0x92>
 8000c32:	2cff      	cmp	r4, #255	; 0xff
 8000c34:	d0ee      	beq.n	8000c14 <__gesf2+0x40>
 8000c36:	2c00      	cmp	r4, #0
 8000c38:	d1e5      	bne.n	8000c06 <__gesf2+0x32>
 8000c3a:	2d00      	cmp	r5, #0
 8000c3c:	d1e3      	bne.n	8000c06 <__gesf2+0x32>
 8000c3e:	e7e4      	b.n	8000c0a <__gesf2+0x36>
 8000c40:	2000      	movs	r0, #0
 8000c42:	2e00      	cmp	r6, #0
 8000c44:	d0e5      	beq.n	8000c12 <__gesf2+0x3e>
 8000c46:	e7e0      	b.n	8000c0a <__gesf2+0x36>
 8000c48:	42a2      	cmp	r2, r4
 8000c4a:	dc05      	bgt.n	8000c58 <__gesf2+0x84>
 8000c4c:	dbea      	blt.n	8000c24 <__gesf2+0x50>
 8000c4e:	42ae      	cmp	r6, r5
 8000c50:	d802      	bhi.n	8000c58 <__gesf2+0x84>
 8000c52:	d3e7      	bcc.n	8000c24 <__gesf2+0x50>
 8000c54:	2000      	movs	r0, #0
 8000c56:	e7dc      	b.n	8000c12 <__gesf2+0x3e>
 8000c58:	4241      	negs	r1, r0
 8000c5a:	4141      	adcs	r1, r0
 8000c5c:	4248      	negs	r0, r1
 8000c5e:	2102      	movs	r1, #2
 8000c60:	4008      	ands	r0, r1
 8000c62:	3801      	subs	r0, #1
 8000c64:	e7d5      	b.n	8000c12 <__gesf2+0x3e>
 8000c66:	2002      	movs	r0, #2
 8000c68:	4240      	negs	r0, r0
 8000c6a:	e7d2      	b.n	8000c12 <__gesf2+0x3e>

08000c6c <__lesf2>:
 8000c6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c6e:	0042      	lsls	r2, r0, #1
 8000c70:	0246      	lsls	r6, r0, #9
 8000c72:	024d      	lsls	r5, r1, #9
 8000c74:	004c      	lsls	r4, r1, #1
 8000c76:	0fc3      	lsrs	r3, r0, #31
 8000c78:	0a76      	lsrs	r6, r6, #9
 8000c7a:	0e12      	lsrs	r2, r2, #24
 8000c7c:	0a6d      	lsrs	r5, r5, #9
 8000c7e:	0e24      	lsrs	r4, r4, #24
 8000c80:	0fc8      	lsrs	r0, r1, #31
 8000c82:	2aff      	cmp	r2, #255	; 0xff
 8000c84:	d00d      	beq.n	8000ca2 <__lesf2+0x36>
 8000c86:	2cff      	cmp	r4, #255	; 0xff
 8000c88:	d00f      	beq.n	8000caa <__lesf2+0x3e>
 8000c8a:	2a00      	cmp	r2, #0
 8000c8c:	d123      	bne.n	8000cd6 <__lesf2+0x6a>
 8000c8e:	4271      	negs	r1, r6
 8000c90:	4171      	adcs	r1, r6
 8000c92:	2c00      	cmp	r4, #0
 8000c94:	d10f      	bne.n	8000cb6 <__lesf2+0x4a>
 8000c96:	2d00      	cmp	r5, #0
 8000c98:	d10d      	bne.n	8000cb6 <__lesf2+0x4a>
 8000c9a:	2000      	movs	r0, #0
 8000c9c:	2e00      	cmp	r6, #0
 8000c9e:	d014      	beq.n	8000cca <__lesf2+0x5e>
 8000ca0:	e00d      	b.n	8000cbe <__lesf2+0x52>
 8000ca2:	2e00      	cmp	r6, #0
 8000ca4:	d110      	bne.n	8000cc8 <__lesf2+0x5c>
 8000ca6:	2cff      	cmp	r4, #255	; 0xff
 8000ca8:	d115      	bne.n	8000cd6 <__lesf2+0x6a>
 8000caa:	2d00      	cmp	r5, #0
 8000cac:	d10c      	bne.n	8000cc8 <__lesf2+0x5c>
 8000cae:	2a00      	cmp	r2, #0
 8000cb0:	d103      	bne.n	8000cba <__lesf2+0x4e>
 8000cb2:	4271      	negs	r1, r6
 8000cb4:	4171      	adcs	r1, r6
 8000cb6:	2900      	cmp	r1, #0
 8000cb8:	d108      	bne.n	8000ccc <__lesf2+0x60>
 8000cba:	4283      	cmp	r3, r0
 8000cbc:	d010      	beq.n	8000ce0 <__lesf2+0x74>
 8000cbe:	2102      	movs	r1, #2
 8000cc0:	1e58      	subs	r0, r3, #1
 8000cc2:	4008      	ands	r0, r1
 8000cc4:	3801      	subs	r0, #1
 8000cc6:	e000      	b.n	8000cca <__lesf2+0x5e>
 8000cc8:	2002      	movs	r0, #2
 8000cca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000ccc:	2800      	cmp	r0, #0
 8000cce:	d1fc      	bne.n	8000cca <__lesf2+0x5e>
 8000cd0:	2001      	movs	r0, #1
 8000cd2:	4240      	negs	r0, r0
 8000cd4:	e7f9      	b.n	8000cca <__lesf2+0x5e>
 8000cd6:	2c00      	cmp	r4, #0
 8000cd8:	d1ef      	bne.n	8000cba <__lesf2+0x4e>
 8000cda:	2d00      	cmp	r5, #0
 8000cdc:	d1ed      	bne.n	8000cba <__lesf2+0x4e>
 8000cde:	e7ee      	b.n	8000cbe <__lesf2+0x52>
 8000ce0:	42a2      	cmp	r2, r4
 8000ce2:	dc05      	bgt.n	8000cf0 <__lesf2+0x84>
 8000ce4:	dbf2      	blt.n	8000ccc <__lesf2+0x60>
 8000ce6:	42ae      	cmp	r6, r5
 8000ce8:	d802      	bhi.n	8000cf0 <__lesf2+0x84>
 8000cea:	d3ef      	bcc.n	8000ccc <__lesf2+0x60>
 8000cec:	2000      	movs	r0, #0
 8000cee:	e7ec      	b.n	8000cca <__lesf2+0x5e>
 8000cf0:	4241      	negs	r1, r0
 8000cf2:	4141      	adcs	r1, r0
 8000cf4:	4248      	negs	r0, r1
 8000cf6:	2102      	movs	r1, #2
 8000cf8:	4008      	ands	r0, r1
 8000cfa:	3801      	subs	r0, #1
 8000cfc:	e7e5      	b.n	8000cca <__lesf2+0x5e>
 8000cfe:	46c0      	nop			; (mov r8, r8)

08000d00 <MX_ADC_Init>:

ADC_HandleTypeDef hadc;

/* ADC init function */
void MX_ADC_Init(void)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b082      	sub	sp, #8
 8000d04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000d06:	003b      	movs	r3, r7
 8000d08:	0018      	movs	r0, r3
 8000d0a:	2308      	movs	r3, #8
 8000d0c:	001a      	movs	r2, r3
 8000d0e:	2100      	movs	r1, #0
 8000d10:	f006 fead 	bl	8007a6e <memset>
  /* USER CODE BEGIN ADC_Init 1 */

  /* USER CODE END ADC_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8000d14:	4b30      	ldr	r3, [pc, #192]	; (8000dd8 <MX_ADC_Init+0xd8>)
 8000d16:	4a31      	ldr	r2, [pc, #196]	; (8000ddc <MX_ADC_Init+0xdc>)
 8000d18:	601a      	str	r2, [r3, #0]
  hadc.Init.OversamplingMode = DISABLE;
 8000d1a:	4b2f      	ldr	r3, [pc, #188]	; (8000dd8 <MX_ADC_Init+0xd8>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000d20:	4b2d      	ldr	r3, [pc, #180]	; (8000dd8 <MX_ADC_Init+0xd8>)
 8000d22:	2280      	movs	r2, #128	; 0x80
 8000d24:	0612      	lsls	r2, r2, #24
 8000d26:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8000d28:	4b2b      	ldr	r3, [pc, #172]	; (8000dd8 <MX_ADC_Init+0xd8>)
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	609a      	str	r2, [r3, #8]
  hadc.Init.SamplingTime = ADC_SAMPLETIME_160CYCLES_5;
 8000d2e:	4b2a      	ldr	r3, [pc, #168]	; (8000dd8 <MX_ADC_Init+0xd8>)
 8000d30:	2207      	movs	r2, #7
 8000d32:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8000d34:	4b28      	ldr	r3, [pc, #160]	; (8000dd8 <MX_ADC_Init+0xd8>)
 8000d36:	2201      	movs	r2, #1
 8000d38:	611a      	str	r2, [r3, #16]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000d3a:	4b27      	ldr	r3, [pc, #156]	; (8000dd8 <MX_ADC_Init+0xd8>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	60da      	str	r2, [r3, #12]
  hadc.Init.ContinuousConvMode = DISABLE;
 8000d40:	4b25      	ldr	r3, [pc, #148]	; (8000dd8 <MX_ADC_Init+0xd8>)
 8000d42:	2220      	movs	r2, #32
 8000d44:	2100      	movs	r1, #0
 8000d46:	5499      	strb	r1, [r3, r2]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8000d48:	4b23      	ldr	r3, [pc, #140]	; (8000dd8 <MX_ADC_Init+0xd8>)
 8000d4a:	2221      	movs	r2, #33	; 0x21
 8000d4c:	2100      	movs	r1, #0
 8000d4e:	5499      	strb	r1, [r3, r2]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000d50:	4b21      	ldr	r3, [pc, #132]	; (8000dd8 <MX_ADC_Init+0xd8>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000d56:	4b20      	ldr	r3, [pc, #128]	; (8000dd8 <MX_ADC_Init+0xd8>)
 8000d58:	22c2      	movs	r2, #194	; 0xc2
 8000d5a:	32ff      	adds	r2, #255	; 0xff
 8000d5c:	625a      	str	r2, [r3, #36]	; 0x24
  hadc.Init.DMAContinuousRequests = DISABLE;
 8000d5e:	4b1e      	ldr	r3, [pc, #120]	; (8000dd8 <MX_ADC_Init+0xd8>)
 8000d60:	222c      	movs	r2, #44	; 0x2c
 8000d62:	2100      	movs	r1, #0
 8000d64:	5499      	strb	r1, [r3, r2]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000d66:	4b1c      	ldr	r3, [pc, #112]	; (8000dd8 <MX_ADC_Init+0xd8>)
 8000d68:	2204      	movs	r2, #4
 8000d6a:	615a      	str	r2, [r3, #20]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000d6c:	4b1a      	ldr	r3, [pc, #104]	; (8000dd8 <MX_ADC_Init+0xd8>)
 8000d6e:	2200      	movs	r2, #0
 8000d70:	631a      	str	r2, [r3, #48]	; 0x30
  hadc.Init.LowPowerAutoWait = DISABLE;
 8000d72:	4b19      	ldr	r3, [pc, #100]	; (8000dd8 <MX_ADC_Init+0xd8>)
 8000d74:	2200      	movs	r2, #0
 8000d76:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerFrequencyMode = DISABLE;
 8000d78:	4b17      	ldr	r3, [pc, #92]	; (8000dd8 <MX_ADC_Init+0xd8>)
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8000d7e:	4b16      	ldr	r3, [pc, #88]	; (8000dd8 <MX_ADC_Init+0xd8>)
 8000d80:	2200      	movs	r2, #0
 8000d82:	61da      	str	r2, [r3, #28]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8000d84:	4b14      	ldr	r3, [pc, #80]	; (8000dd8 <MX_ADC_Init+0xd8>)
 8000d86:	0018      	movs	r0, r3
 8000d88:	f002 ff6c 	bl	8003c64 <HAL_ADC_Init>
 8000d8c:	1e03      	subs	r3, r0, #0
 8000d8e:	d001      	beq.n	8000d94 <MX_ADC_Init+0x94>
  {
    Error_Handler();
 8000d90:	f002 fa6c 	bl	800326c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8000d94:	003b      	movs	r3, r7
 8000d96:	4a12      	ldr	r2, [pc, #72]	; (8000de0 <MX_ADC_Init+0xe0>)
 8000d98:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8000d9a:	003b      	movs	r3, r7
 8000d9c:	2280      	movs	r2, #128	; 0x80
 8000d9e:	0152      	lsls	r2, r2, #5
 8000da0:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000da2:	003a      	movs	r2, r7
 8000da4:	4b0c      	ldr	r3, [pc, #48]	; (8000dd8 <MX_ADC_Init+0xd8>)
 8000da6:	0011      	movs	r1, r2
 8000da8:	0018      	movs	r0, r3
 8000daa:	f003 fa19 	bl	80041e0 <HAL_ADC_ConfigChannel>
 8000dae:	1e03      	subs	r3, r0, #0
 8000db0:	d001      	beq.n	8000db6 <MX_ADC_Init+0xb6>
  {
    Error_Handler();
 8000db2:	f002 fa5b 	bl	800326c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 8000db6:	003b      	movs	r3, r7
 8000db8:	4a0a      	ldr	r2, [pc, #40]	; (8000de4 <MX_ADC_Init+0xe4>)
 8000dba:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000dbc:	003a      	movs	r2, r7
 8000dbe:	4b06      	ldr	r3, [pc, #24]	; (8000dd8 <MX_ADC_Init+0xd8>)
 8000dc0:	0011      	movs	r1, r2
 8000dc2:	0018      	movs	r0, r3
 8000dc4:	f003 fa0c 	bl	80041e0 <HAL_ADC_ConfigChannel>
 8000dc8:	1e03      	subs	r3, r0, #0
 8000dca:	d001      	beq.n	8000dd0 <MX_ADC_Init+0xd0>
  {
    Error_Handler();
 8000dcc:	f002 fa4e 	bl	800326c <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8000dd0:	46c0      	nop			; (mov r8, r8)
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	b002      	add	sp, #8
 8000dd6:	bd80      	pop	{r7, pc}
 8000dd8:	200000a8 	.word	0x200000a8
 8000ddc:	40012400 	.word	0x40012400
 8000de0:	48040000 	.word	0x48040000
 8000de4:	44020000 	.word	0x44020000

08000de8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b082      	sub	sp, #8
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]

  if(adcHandle->Instance==ADC1)
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	4a0a      	ldr	r2, [pc, #40]	; (8000e20 <HAL_ADC_MspInit+0x38>)
 8000df6:	4293      	cmp	r3, r2
 8000df8:	d10e      	bne.n	8000e18 <HAL_ADC_MspInit+0x30>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000dfa:	4b0a      	ldr	r3, [pc, #40]	; (8000e24 <HAL_ADC_MspInit+0x3c>)
 8000dfc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000dfe:	4b09      	ldr	r3, [pc, #36]	; (8000e24 <HAL_ADC_MspInit+0x3c>)
 8000e00:	2180      	movs	r1, #128	; 0x80
 8000e02:	0089      	lsls	r1, r1, #2
 8000e04:	430a      	orrs	r2, r1
 8000e06:	635a      	str	r2, [r3, #52]	; 0x34

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_COMP_IRQn, 0, 0);
 8000e08:	2200      	movs	r2, #0
 8000e0a:	2100      	movs	r1, #0
 8000e0c:	200c      	movs	r0, #12
 8000e0e:	f003 fba1 	bl	8004554 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_COMP_IRQn);
 8000e12:	200c      	movs	r0, #12
 8000e14:	f003 fbb3 	bl	800457e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000e18:	46c0      	nop			; (mov r8, r8)
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	b002      	add	sp, #8
 8000e1e:	bd80      	pop	{r7, pc}
 8000e20:	40012400 	.word	0x40012400
 8000e24:	40021000 	.word	0x40021000

08000e28 <HAL_ADC_ConvCpltCallback>:
  }
}

/* USER CODE BEGIN 1 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b086      	sub	sp, #24
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]
//		calcTemp = calcTemp / (int32_t)(*TEMP130_CAL_ADDR - *TEMP30_CAL_ADDR);
//		tempinC = calcTemp + 30;
//		HAL_ADC_Start_IT(hadc);
////	}

	if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC))
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	2204      	movs	r2, #4
 8000e38:	4013      	ands	r3, r2
 8000e3a:	2b04      	cmp	r3, #4
 8000e3c:	d111      	bne.n	8000e62 <HAL_ADC_ConvCpltCallback+0x3a>
	{
		adcParameters.adcRawData[adcParameters.adcIndx] = HAL_ADC_GetValue(hadc);
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	0018      	movs	r0, r3
 8000e42:	f003 f8f5 	bl	8004030 <HAL_ADC_GetValue>
 8000e46:	0001      	movs	r1, r0
 8000e48:	4b32      	ldr	r3, [pc, #200]	; (8000f14 <HAL_ADC_ConvCpltCallback+0xec>)
 8000e4a:	7b1b      	ldrb	r3, [r3, #12]
 8000e4c:	001a      	movs	r2, r3
 8000e4e:	b289      	uxth	r1, r1
 8000e50:	4b30      	ldr	r3, [pc, #192]	; (8000f14 <HAL_ADC_ConvCpltCallback+0xec>)
 8000e52:	0052      	lsls	r2, r2, #1
 8000e54:	52d1      	strh	r1, [r2, r3]
		adcParameters.adcIndx++;
 8000e56:	4b2f      	ldr	r3, [pc, #188]	; (8000f14 <HAL_ADC_ConvCpltCallback+0xec>)
 8000e58:	7b1b      	ldrb	r3, [r3, #12]
 8000e5a:	3301      	adds	r3, #1
 8000e5c:	b2da      	uxtb	r2, r3
 8000e5e:	4b2d      	ldr	r3, [pc, #180]	; (8000f14 <HAL_ADC_ConvCpltCallback+0xec>)
 8000e60:	731a      	strb	r2, [r3, #12]
	}

	if(adcParameters.adcIndx >= 2)
 8000e62:	4b2c      	ldr	r3, [pc, #176]	; (8000f14 <HAL_ADC_ConvCpltCallback+0xec>)
 8000e64:	7b1b      	ldrb	r3, [r3, #12]
 8000e66:	2b01      	cmp	r3, #1
 8000e68:	d94f      	bls.n	8000f0a <HAL_ADC_ConvCpltCallback+0xe2>
	{
		adcParameters.adcIndx = 0;
 8000e6a:	4b2a      	ldr	r3, [pc, #168]	; (8000f14 <HAL_ADC_ConvCpltCallback+0xec>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	731a      	strb	r2, [r3, #12]

		volatile int32_t tmpVal = 0;
 8000e70:	2300      	movs	r3, #0
 8000e72:	617b      	str	r3, [r7, #20]
		volatile int32_t volVal = 0;
 8000e74:	2300      	movs	r3, #0
 8000e76:	613b      	str	r3, [r7, #16]

		if((int32_t)adcParameters.adcRawData[0] > (int32_t)adcParameters.adcRawData[1])
 8000e78:	4b26      	ldr	r3, [pc, #152]	; (8000f14 <HAL_ADC_ConvCpltCallback+0xec>)
 8000e7a:	881a      	ldrh	r2, [r3, #0]
 8000e7c:	4b25      	ldr	r3, [pc, #148]	; (8000f14 <HAL_ADC_ConvCpltCallback+0xec>)
 8000e7e:	885b      	ldrh	r3, [r3, #2]
 8000e80:	429a      	cmp	r2, r3
 8000e82:	d906      	bls.n	8000e92 <HAL_ADC_ConvCpltCallback+0x6a>
		{
			tmpVal = (int32_t)adcParameters.adcRawData[1];
 8000e84:	4b23      	ldr	r3, [pc, #140]	; (8000f14 <HAL_ADC_ConvCpltCallback+0xec>)
 8000e86:	885b      	ldrh	r3, [r3, #2]
 8000e88:	617b      	str	r3, [r7, #20]
			volVal = (int32_t)adcParameters.adcRawData[0];
 8000e8a:	4b22      	ldr	r3, [pc, #136]	; (8000f14 <HAL_ADC_ConvCpltCallback+0xec>)
 8000e8c:	881b      	ldrh	r3, [r3, #0]
 8000e8e:	613b      	str	r3, [r7, #16]
 8000e90:	e005      	b.n	8000e9e <HAL_ADC_ConvCpltCallback+0x76>
		}
		else
		{
			tmpVal = (int32_t)adcParameters.adcRawData[0];
 8000e92:	4b20      	ldr	r3, [pc, #128]	; (8000f14 <HAL_ADC_ConvCpltCallback+0xec>)
 8000e94:	881b      	ldrh	r3, [r3, #0]
 8000e96:	617b      	str	r3, [r7, #20]
			volVal = (int32_t)adcParameters.adcRawData[1];
 8000e98:	4b1e      	ldr	r3, [pc, #120]	; (8000f14 <HAL_ADC_ConvCpltCallback+0xec>)
 8000e9a:	885b      	ldrh	r3, [r3, #2]
 8000e9c:	613b      	str	r3, [r7, #16]
		}

		adcParameters.supplyVoltage = 3300 * (*VREFINT_CAL_ADDR) / volVal;
 8000e9e:	4b1e      	ldr	r3, [pc, #120]	; (8000f18 <HAL_ADC_ConvCpltCallback+0xf0>)
 8000ea0:	881b      	ldrh	r3, [r3, #0]
 8000ea2:	001a      	movs	r2, r3
 8000ea4:	4b1d      	ldr	r3, [pc, #116]	; (8000f1c <HAL_ADC_ConvCpltCallback+0xf4>)
 8000ea6:	4353      	muls	r3, r2
 8000ea8:	693a      	ldr	r2, [r7, #16]
 8000eaa:	0011      	movs	r1, r2
 8000eac:	0018      	movs	r0, r3
 8000eae:	f7ff f9bf 	bl	8000230 <__divsi3>
 8000eb2:	0003      	movs	r3, r0
 8000eb4:	0018      	movs	r0, r3
 8000eb6:	f7ff fdbb 	bl	8000a30 <__aeabi_i2f>
 8000eba:	1c02      	adds	r2, r0, #0
 8000ebc:	4b15      	ldr	r3, [pc, #84]	; (8000f14 <HAL_ADC_ConvCpltCallback+0xec>)
 8000ebe:	609a      	str	r2, [r3, #8]

		volatile int32_t calcTemp = 0;
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	60fb      	str	r3, [r7, #12]
		calcTemp = (((int32_t)tmpVal) - (int32_t) *TEMP30_CAL_ADDR);
 8000ec4:	697b      	ldr	r3, [r7, #20]
 8000ec6:	4a16      	ldr	r2, [pc, #88]	; (8000f20 <HAL_ADC_ConvCpltCallback+0xf8>)
 8000ec8:	8812      	ldrh	r2, [r2, #0]
 8000eca:	1a9b      	subs	r3, r3, r2
 8000ecc:	60fb      	str	r3, [r7, #12]
		calcTemp = calcTemp * (int32_t)(130 - 30);
 8000ece:	68fb      	ldr	r3, [r7, #12]
 8000ed0:	2264      	movs	r2, #100	; 0x64
 8000ed2:	4353      	muls	r3, r2
 8000ed4:	60fb      	str	r3, [r7, #12]
		calcTemp = calcTemp / (int32_t)(*TEMP130_CAL_ADDR - *TEMP30_CAL_ADDR);
 8000ed6:	68fb      	ldr	r3, [r7, #12]
 8000ed8:	4a12      	ldr	r2, [pc, #72]	; (8000f24 <HAL_ADC_ConvCpltCallback+0xfc>)
 8000eda:	8812      	ldrh	r2, [r2, #0]
 8000edc:	0011      	movs	r1, r2
 8000ede:	4a10      	ldr	r2, [pc, #64]	; (8000f20 <HAL_ADC_ConvCpltCallback+0xf8>)
 8000ee0:	8812      	ldrh	r2, [r2, #0]
 8000ee2:	1a8a      	subs	r2, r1, r2
 8000ee4:	0011      	movs	r1, r2
 8000ee6:	0018      	movs	r0, r3
 8000ee8:	f7ff f9a2 	bl	8000230 <__divsi3>
 8000eec:	0003      	movs	r3, r0
 8000eee:	60fb      	str	r3, [r7, #12]
		adcParameters.tempCelcius = calcTemp + 30;
 8000ef0:	68fb      	ldr	r3, [r7, #12]
 8000ef2:	331e      	adds	r3, #30
 8000ef4:	001a      	movs	r2, r3
 8000ef6:	4b07      	ldr	r3, [pc, #28]	; (8000f14 <HAL_ADC_ConvCpltCallback+0xec>)
 8000ef8:	605a      	str	r2, [r3, #4]

		if(adcParameters.adcReadEnableFlag)
 8000efa:	4b06      	ldr	r3, [pc, #24]	; (8000f14 <HAL_ADC_ConvCpltCallback+0xec>)
 8000efc:	7b5b      	ldrb	r3, [r3, #13]
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d003      	beq.n	8000f0a <HAL_ADC_ConvCpltCallback+0xe2>
		{
			HAL_ADC_Start_IT(hadc);
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	0018      	movs	r0, r3
 8000f06:	f003 f821 	bl	8003f4c <HAL_ADC_Start_IT>
		}
	}

}
 8000f0a:	46c0      	nop			; (mov r8, r8)
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	b006      	add	sp, #24
 8000f10:	bd80      	pop	{r7, pc}
 8000f12:	46c0      	nop			; (mov r8, r8)
 8000f14:	20000098 	.word	0x20000098
 8000f18:	1ff80078 	.word	0x1ff80078
 8000f1c:	00000ce4 	.word	0x00000ce4
 8000f20:	1ff8007a 	.word	0x1ff8007a
 8000f24:	1ff8007e 	.word	0x1ff8007e

08000f28 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000f28:	b590      	push	{r4, r7, lr}
 8000f2a:	b089      	sub	sp, #36	; 0x24
 8000f2c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f2e:	240c      	movs	r4, #12
 8000f30:	193b      	adds	r3, r7, r4
 8000f32:	0018      	movs	r0, r3
 8000f34:	2314      	movs	r3, #20
 8000f36:	001a      	movs	r2, r3
 8000f38:	2100      	movs	r1, #0
 8000f3a:	f006 fd98 	bl	8007a6e <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f3e:	4b3c      	ldr	r3, [pc, #240]	; (8001030 <MX_GPIO_Init+0x108>)
 8000f40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000f42:	4b3b      	ldr	r3, [pc, #236]	; (8001030 <MX_GPIO_Init+0x108>)
 8000f44:	2101      	movs	r1, #1
 8000f46:	430a      	orrs	r2, r1
 8000f48:	62da      	str	r2, [r3, #44]	; 0x2c
 8000f4a:	4b39      	ldr	r3, [pc, #228]	; (8001030 <MX_GPIO_Init+0x108>)
 8000f4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f4e:	2201      	movs	r2, #1
 8000f50:	4013      	ands	r3, r2
 8000f52:	60bb      	str	r3, [r7, #8]
 8000f54:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f56:	4b36      	ldr	r3, [pc, #216]	; (8001030 <MX_GPIO_Init+0x108>)
 8000f58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000f5a:	4b35      	ldr	r3, [pc, #212]	; (8001030 <MX_GPIO_Init+0x108>)
 8000f5c:	2104      	movs	r1, #4
 8000f5e:	430a      	orrs	r2, r1
 8000f60:	62da      	str	r2, [r3, #44]	; 0x2c
 8000f62:	4b33      	ldr	r3, [pc, #204]	; (8001030 <MX_GPIO_Init+0x108>)
 8000f64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f66:	2204      	movs	r2, #4
 8000f68:	4013      	ands	r3, r2
 8000f6a:	607b      	str	r3, [r7, #4]
 8000f6c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f6e:	4b30      	ldr	r3, [pc, #192]	; (8001030 <MX_GPIO_Init+0x108>)
 8000f70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000f72:	4b2f      	ldr	r3, [pc, #188]	; (8001030 <MX_GPIO_Init+0x108>)
 8000f74:	2102      	movs	r1, #2
 8000f76:	430a      	orrs	r2, r1
 8000f78:	62da      	str	r2, [r3, #44]	; 0x2c
 8000f7a:	4b2d      	ldr	r3, [pc, #180]	; (8001030 <MX_GPIO_Init+0x108>)
 8000f7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f7e:	2202      	movs	r2, #2
 8000f80:	4013      	ands	r3, r2
 8000f82:	603b      	str	r3, [r7, #0]
 8000f84:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LTE_ENABLE_Pin|LTE_PWRKEY_Pin|AT_MODE_Pin, GPIO_PIN_RESET);
 8000f86:	23a0      	movs	r3, #160	; 0xa0
 8000f88:	05db      	lsls	r3, r3, #23
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	2113      	movs	r1, #19
 8000f8e:	0018      	movs	r0, r3
 8000f90:	f003 fd18 	bl	80049c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ULT_ENABLE_Pin|ULT_EMIT_Pin, GPIO_PIN_RESET);
 8000f94:	23c0      	movs	r3, #192	; 0xc0
 8000f96:	011b      	lsls	r3, r3, #4
 8000f98:	4826      	ldr	r0, [pc, #152]	; (8001034 <MX_GPIO_Init+0x10c>)
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	0019      	movs	r1, r3
 8000f9e:	f003 fd11 	bl	80049c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = LTE_ENABLE_Pin|LTE_PWRKEY_Pin|AT_MODE_Pin;
 8000fa2:	193b      	adds	r3, r7, r4
 8000fa4:	2213      	movs	r2, #19
 8000fa6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fa8:	193b      	adds	r3, r7, r4
 8000faa:	2201      	movs	r2, #1
 8000fac:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000fae:	193b      	adds	r3, r7, r4
 8000fb0:	2202      	movs	r2, #2
 8000fb2:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fb4:	193b      	adds	r3, r7, r4
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fba:	193a      	adds	r2, r7, r4
 8000fbc:	23a0      	movs	r3, #160	; 0xa0
 8000fbe:	05db      	lsls	r3, r3, #23
 8000fc0:	0011      	movs	r1, r2
 8000fc2:	0018      	movs	r0, r3
 8000fc4:	f003 fb80 	bl	80046c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = ULT_ENABLE_Pin|ULT_EMIT_Pin;
 8000fc8:	0021      	movs	r1, r4
 8000fca:	187b      	adds	r3, r7, r1
 8000fcc:	22c0      	movs	r2, #192	; 0xc0
 8000fce:	0112      	lsls	r2, r2, #4
 8000fd0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fd2:	000c      	movs	r4, r1
 8000fd4:	193b      	adds	r3, r7, r4
 8000fd6:	2201      	movs	r2, #1
 8000fd8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000fda:	193b      	adds	r3, r7, r4
 8000fdc:	2202      	movs	r2, #2
 8000fde:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fe0:	193b      	adds	r3, r7, r4
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fe6:	193b      	adds	r3, r7, r4
 8000fe8:	4a12      	ldr	r2, [pc, #72]	; (8001034 <MX_GPIO_Init+0x10c>)
 8000fea:	0019      	movs	r1, r3
 8000fec:	0010      	movs	r0, r2
 8000fee:	f003 fb6b 	bl	80046c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ULT_ECHO_Pin;
 8000ff2:	0021      	movs	r1, r4
 8000ff4:	187b      	adds	r3, r7, r1
 8000ff6:	2220      	movs	r2, #32
 8000ff8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000ffa:	187b      	adds	r3, r7, r1
 8000ffc:	2284      	movs	r2, #132	; 0x84
 8000ffe:	0392      	lsls	r2, r2, #14
 8001000:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001002:	187b      	adds	r3, r7, r1
 8001004:	2201      	movs	r2, #1
 8001006:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(ULT_ECHO_GPIO_Port, &GPIO_InitStruct);
 8001008:	187a      	adds	r2, r7, r1
 800100a:	23a0      	movs	r3, #160	; 0xa0
 800100c:	05db      	lsls	r3, r3, #23
 800100e:	0011      	movs	r1, r2
 8001010:	0018      	movs	r0, r3
 8001012:	f003 fb59 	bl	80046c8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8001016:	2200      	movs	r2, #0
 8001018:	2100      	movs	r1, #0
 800101a:	2007      	movs	r0, #7
 800101c:	f003 fa9a 	bl	8004554 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8001020:	2007      	movs	r0, #7
 8001022:	f003 faac 	bl	800457e <HAL_NVIC_EnableIRQ>

}
 8001026:	46c0      	nop			; (mov r8, r8)
 8001028:	46bd      	mov	sp, r7
 800102a:	b009      	add	sp, #36	; 0x24
 800102c:	bd90      	pop	{r4, r7, pc}
 800102e:	46c0      	nop			; (mov r8, r8)
 8001030:	40021000 	.word	0x40021000
 8001034:	50000400 	.word	0x50000400

08001038 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 2 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b082      	sub	sp, #8
 800103c:	af00      	add	r7, sp, #0
 800103e:	0002      	movs	r2, r0
 8001040:	1dbb      	adds	r3, r7, #6
 8001042:	801a      	strh	r2, [r3, #0]
	if(GPIO_Pin == ULT_ECHO_Pin)
 8001044:	1dbb      	adds	r3, r7, #6
 8001046:	881b      	ldrh	r3, [r3, #0]
 8001048:	2b20      	cmp	r3, #32
 800104a:	d109      	bne.n	8001060 <HAL_GPIO_EXTI_Callback+0x28>
	{
		if(usrParameters.usrReadyRead)
 800104c:	4b06      	ldr	r3, [pc, #24]	; (8001068 <HAL_GPIO_EXTI_Callback+0x30>)
 800104e:	785b      	ldrb	r3, [r3, #1]
 8001050:	2b00      	cmp	r3, #0
 8001052:	d005      	beq.n	8001060 <HAL_GPIO_EXTI_Callback+0x28>
		{
			usrParameters.measurementValue = __HAL_TIM_GET_COUNTER(&htim2);
 8001054:	4b05      	ldr	r3, [pc, #20]	; (800106c <HAL_GPIO_EXTI_Callback+0x34>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800105a:	b29a      	uxth	r2, r3
 800105c:	4b02      	ldr	r3, [pc, #8]	; (8001068 <HAL_GPIO_EXTI_Callback+0x30>)
 800105e:	809a      	strh	r2, [r3, #4]
		}
	}
}
 8001060:	46c0      	nop			; (mov r8, r8)
 8001062:	46bd      	mov	sp, r7
 8001064:	b002      	add	sp, #8
 8001066:	bd80      	pop	{r7, pc}
 8001068:	20000680 	.word	0x20000680
 800106c:	20000330 	.word	0x20000330

08001070 <LTEInitParams>:
#include "waste.h"

lteParams_typedef lteParameters;
lteMessages_typedef lteMessages;

void LTEInitParams() {
 8001070:	b580      	push	{r7, lr}
 8001072:	af00      	add	r7, sp, #0
	strcpy(lteMessages.AT, "AT\r");
 8001074:	4a8c      	ldr	r2, [pc, #560]	; (80012a8 <LTEInitParams+0x238>)
 8001076:	4b8d      	ldr	r3, [pc, #564]	; (80012ac <LTEInitParams+0x23c>)
 8001078:	0010      	movs	r0, r2
 800107a:	0019      	movs	r1, r3
 800107c:	2304      	movs	r3, #4
 800107e:	001a      	movs	r2, r3
 8001080:	f006 fcec 	bl	8007a5c <memcpy>
	strcpy(lteMessages.ATI, "ATI\r");
 8001084:	4b88      	ldr	r3, [pc, #544]	; (80012a8 <LTEInitParams+0x238>)
 8001086:	4a8a      	ldr	r2, [pc, #552]	; (80012b0 <LTEInitParams+0x240>)
 8001088:	3304      	adds	r3, #4
 800108a:	0011      	movs	r1, r2
 800108c:	2205      	movs	r2, #5
 800108e:	0018      	movs	r0, r3
 8001090:	f006 fce4 	bl	8007a5c <memcpy>
	strcpy(lteMessages.AT_QPOWD, "AT+QPOWD=1\r");
 8001094:	4b84      	ldr	r3, [pc, #528]	; (80012a8 <LTEInitParams+0x238>)
 8001096:	2209      	movs	r2, #9
 8001098:	4986      	ldr	r1, [pc, #536]	; (80012b4 <LTEInitParams+0x244>)
 800109a:	189b      	adds	r3, r3, r2
 800109c:	220c      	movs	r2, #12
 800109e:	0018      	movs	r0, r3
 80010a0:	f006 fcdc 	bl	8007a5c <memcpy>
	strcpy(lteMessages.AT_CGSN, "AT+CGSN\r");
 80010a4:	4b80      	ldr	r3, [pc, #512]	; (80012a8 <LTEInitParams+0x238>)
 80010a6:	2215      	movs	r2, #21
 80010a8:	4983      	ldr	r1, [pc, #524]	; (80012b8 <LTEInitParams+0x248>)
 80010aa:	189b      	adds	r3, r3, r2
 80010ac:	2209      	movs	r2, #9
 80010ae:	0018      	movs	r0, r3
 80010b0:	f006 fcd4 	bl	8007a5c <memcpy>
	strcpy(lteMessages.AT_QIOPEN, "AT+QIOPEN=1,0,\"TCP\",\"listener.aws.afatek.com.tr\",20000\r");
 80010b4:	4a81      	ldr	r2, [pc, #516]	; (80012bc <LTEInitParams+0x24c>)
 80010b6:	4b82      	ldr	r3, [pc, #520]	; (80012c0 <LTEInitParams+0x250>)
 80010b8:	0010      	movs	r0, r2
 80010ba:	0019      	movs	r1, r3
 80010bc:	2338      	movs	r3, #56	; 0x38
 80010be:	001a      	movs	r2, r3
 80010c0:	f006 fccc 	bl	8007a5c <memcpy>
	lteMessages.AT_QIOPEN[10] = ConvertIdToChar(lteParameters.contexId);
 80010c4:	4b7f      	ldr	r3, [pc, #508]	; (80012c4 <LTEInitParams+0x254>)
 80010c6:	22b7      	movs	r2, #183	; 0xb7
 80010c8:	5c9b      	ldrb	r3, [r3, r2]
 80010ca:	0018      	movs	r0, r3
 80010cc:	f000 fec4 	bl	8001e58 <ConvertIdToChar>
 80010d0:	0003      	movs	r3, r0
 80010d2:	0019      	movs	r1, r3
 80010d4:	4b74      	ldr	r3, [pc, #464]	; (80012a8 <LTEInitParams+0x238>)
 80010d6:	224d      	movs	r2, #77	; 0x4d
 80010d8:	5499      	strb	r1, [r3, r2]
	lteMessages.AT_QIOPEN[12] = ConvertIdToChar(lteParameters.sessionId);
 80010da:	4b7a      	ldr	r3, [pc, #488]	; (80012c4 <LTEInitParams+0x254>)
 80010dc:	22b8      	movs	r2, #184	; 0xb8
 80010de:	5c9b      	ldrb	r3, [r3, r2]
 80010e0:	0018      	movs	r0, r3
 80010e2:	f000 feb9 	bl	8001e58 <ConvertIdToChar>
 80010e6:	0003      	movs	r3, r0
 80010e8:	0019      	movs	r1, r3
 80010ea:	4b6f      	ldr	r3, [pc, #444]	; (80012a8 <LTEInitParams+0x238>)
 80010ec:	224f      	movs	r2, #79	; 0x4f
 80010ee:	5499      	strb	r1, [r3, r2]
	strcpy(lteMessages.AT_QISEND, "AT+QISEND=0,128\r");
 80010f0:	4a75      	ldr	r2, [pc, #468]	; (80012c8 <LTEInitParams+0x258>)
 80010f2:	4b76      	ldr	r3, [pc, #472]	; (80012cc <LTEInitParams+0x25c>)
 80010f4:	0010      	movs	r0, r2
 80010f6:	0019      	movs	r1, r3
 80010f8:	2311      	movs	r3, #17
 80010fa:	001a      	movs	r2, r3
 80010fc:	f006 fcae 	bl	8007a5c <memcpy>
	lteMessages.AT_QISEND[10] = ConvertIdToChar(lteParameters.sessionId);
 8001100:	4b70      	ldr	r3, [pc, #448]	; (80012c4 <LTEInitParams+0x254>)
 8001102:	22b8      	movs	r2, #184	; 0xb8
 8001104:	5c9b      	ldrb	r3, [r3, r2]
 8001106:	0018      	movs	r0, r3
 8001108:	f000 fea6 	bl	8001e58 <ConvertIdToChar>
 800110c:	0003      	movs	r3, r0
 800110e:	0019      	movs	r1, r3
 8001110:	4b65      	ldr	r3, [pc, #404]	; (80012a8 <LTEInitParams+0x238>)
 8001112:	2289      	movs	r2, #137	; 0x89
 8001114:	5499      	strb	r1, [r3, r2]
	strcpy(lteMessages.AT_QIRD, "AT+QIRD=0,50\r");
 8001116:	4a6e      	ldr	r2, [pc, #440]	; (80012d0 <LTEInitParams+0x260>)
 8001118:	4b6e      	ldr	r3, [pc, #440]	; (80012d4 <LTEInitParams+0x264>)
 800111a:	0010      	movs	r0, r2
 800111c:	0019      	movs	r1, r3
 800111e:	230e      	movs	r3, #14
 8001120:	001a      	movs	r2, r3
 8001122:	f006 fc9b 	bl	8007a5c <memcpy>
	lteMessages.AT_QIRD[8] = ConvertIdToChar(lteParameters.sessionId);
 8001126:	4b67      	ldr	r3, [pc, #412]	; (80012c4 <LTEInitParams+0x254>)
 8001128:	22b8      	movs	r2, #184	; 0xb8
 800112a:	5c9b      	ldrb	r3, [r3, r2]
 800112c:	0018      	movs	r0, r3
 800112e:	f000 fe93 	bl	8001e58 <ConvertIdToChar>
 8001132:	0003      	movs	r3, r0
 8001134:	0019      	movs	r1, r3
 8001136:	4b5c      	ldr	r3, [pc, #368]	; (80012a8 <LTEInitParams+0x238>)
 8001138:	2297      	movs	r2, #151	; 0x97
 800113a:	5499      	strb	r1, [r3, r2]
	strcpy(lteMessages.AT_QICLOSE, "AT+QICLOSE=0\r");
 800113c:	4b5a      	ldr	r3, [pc, #360]	; (80012a8 <LTEInitParams+0x238>)
 800113e:	229c      	movs	r2, #156	; 0x9c
 8001140:	4965      	ldr	r1, [pc, #404]	; (80012d8 <LTEInitParams+0x268>)
 8001142:	189b      	adds	r3, r3, r2
 8001144:	220e      	movs	r2, #14
 8001146:	0018      	movs	r0, r3
 8001148:	f006 fc88 	bl	8007a5c <memcpy>
	lteMessages.AT_QICLOSE[11] = ConvertIdToChar(lteParameters.sessionId);
 800114c:	4b5d      	ldr	r3, [pc, #372]	; (80012c4 <LTEInitParams+0x254>)
 800114e:	22b8      	movs	r2, #184	; 0xb8
 8001150:	5c9b      	ldrb	r3, [r3, r2]
 8001152:	0018      	movs	r0, r3
 8001154:	f000 fe80 	bl	8001e58 <ConvertIdToChar>
 8001158:	0003      	movs	r3, r0
 800115a:	0019      	movs	r1, r3
 800115c:	4b52      	ldr	r3, [pc, #328]	; (80012a8 <LTEInitParams+0x238>)
 800115e:	22a7      	movs	r2, #167	; 0xa7
 8001160:	5499      	strb	r1, [r3, r2]
	strcpy(lteMessages.AT_QIACT, "AT+QIACT=1\r");
 8001162:	4b51      	ldr	r3, [pc, #324]	; (80012a8 <LTEInitParams+0x238>)
 8001164:	22aa      	movs	r2, #170	; 0xaa
 8001166:	495d      	ldr	r1, [pc, #372]	; (80012dc <LTEInitParams+0x26c>)
 8001168:	189b      	adds	r3, r3, r2
 800116a:	220c      	movs	r2, #12
 800116c:	0018      	movs	r0, r3
 800116e:	f006 fc75 	bl	8007a5c <memcpy>
	lteMessages.AT_QIACT[9] = ConvertIdToChar(lteParameters.contexId);
 8001172:	4b54      	ldr	r3, [pc, #336]	; (80012c4 <LTEInitParams+0x254>)
 8001174:	22b7      	movs	r2, #183	; 0xb7
 8001176:	5c9b      	ldrb	r3, [r3, r2]
 8001178:	0018      	movs	r0, r3
 800117a:	f000 fe6d 	bl	8001e58 <ConvertIdToChar>
 800117e:	0003      	movs	r3, r0
 8001180:	0019      	movs	r1, r3
 8001182:	4b49      	ldr	r3, [pc, #292]	; (80012a8 <LTEInitParams+0x238>)
 8001184:	22b3      	movs	r2, #179	; 0xb3
 8001186:	5499      	strb	r1, [r3, r2]
	strcpy(lteMessages.AT_QIDEACT, "AT+QIDEACT=1\r");
 8001188:	4b47      	ldr	r3, [pc, #284]	; (80012a8 <LTEInitParams+0x238>)
 800118a:	22b6      	movs	r2, #182	; 0xb6
 800118c:	4954      	ldr	r1, [pc, #336]	; (80012e0 <LTEInitParams+0x270>)
 800118e:	189b      	adds	r3, r3, r2
 8001190:	220e      	movs	r2, #14
 8001192:	0018      	movs	r0, r3
 8001194:	f006 fc62 	bl	8007a5c <memcpy>
	lteMessages.AT_QIDEACT[11] = ConvertIdToChar(lteParameters.contexId);
 8001198:	4b4a      	ldr	r3, [pc, #296]	; (80012c4 <LTEInitParams+0x254>)
 800119a:	22b7      	movs	r2, #183	; 0xb7
 800119c:	5c9b      	ldrb	r3, [r3, r2]
 800119e:	0018      	movs	r0, r3
 80011a0:	f000 fe5a 	bl	8001e58 <ConvertIdToChar>
 80011a4:	0003      	movs	r3, r0
 80011a6:	0019      	movs	r1, r3
 80011a8:	4b3f      	ldr	r3, [pc, #252]	; (80012a8 <LTEInitParams+0x238>)
 80011aa:	22c1      	movs	r2, #193	; 0xc1
 80011ac:	5499      	strb	r1, [r3, r2]
	strcpy(lteMessages.AT_QICSGP, "AT+QICSGP=1,1,\"mgb\",\"\",\"\",3\r");
 80011ae:	4b3e      	ldr	r3, [pc, #248]	; (80012a8 <LTEInitParams+0x238>)
 80011b0:	22c4      	movs	r2, #196	; 0xc4
 80011b2:	494c      	ldr	r1, [pc, #304]	; (80012e4 <LTEInitParams+0x274>)
 80011b4:	189b      	adds	r3, r3, r2
 80011b6:	221d      	movs	r2, #29
 80011b8:	0018      	movs	r0, r3
 80011ba:	f006 fc4f 	bl	8007a5c <memcpy>
	lteMessages.AT_QICSGP[10] = ConvertIdToChar(lteParameters.contexId);
 80011be:	4b41      	ldr	r3, [pc, #260]	; (80012c4 <LTEInitParams+0x254>)
 80011c0:	22b7      	movs	r2, #183	; 0xb7
 80011c2:	5c9b      	ldrb	r3, [r3, r2]
 80011c4:	0018      	movs	r0, r3
 80011c6:	f000 fe47 	bl	8001e58 <ConvertIdToChar>
 80011ca:	0003      	movs	r3, r0
 80011cc:	0019      	movs	r1, r3
 80011ce:	4b36      	ldr	r3, [pc, #216]	; (80012a8 <LTEInitParams+0x238>)
 80011d0:	22ce      	movs	r2, #206	; 0xce
 80011d2:	5499      	strb	r1, [r3, r2]
	strcpy(lteMessages.AT_QGPS_ON, "AT+QGPS=1\r");
 80011d4:	4b34      	ldr	r3, [pc, #208]	; (80012a8 <LTEInitParams+0x238>)
 80011d6:	221e      	movs	r2, #30
 80011d8:	4943      	ldr	r1, [pc, #268]	; (80012e8 <LTEInitParams+0x278>)
 80011da:	189b      	adds	r3, r3, r2
 80011dc:	220b      	movs	r2, #11
 80011de:	0018      	movs	r0, r3
 80011e0:	f006 fc3c 	bl	8007a5c <memcpy>
	strcpy(lteMessages.AT_QGPS_OFF, "AT+QGPSEND\r");
 80011e4:	4b30      	ldr	r3, [pc, #192]	; (80012a8 <LTEInitParams+0x238>)
 80011e6:	2229      	movs	r2, #41	; 0x29
 80011e8:	4940      	ldr	r1, [pc, #256]	; (80012ec <LTEInitParams+0x27c>)
 80011ea:	189b      	adds	r3, r3, r2
 80011ec:	220c      	movs	r2, #12
 80011ee:	0018      	movs	r0, r3
 80011f0:	f006 fc34 	bl	8007a5c <memcpy>
	strcpy(lteMessages.AT_QGPSLOC, "AT+QGPSLOC=2\r");
 80011f4:	4b2c      	ldr	r3, [pc, #176]	; (80012a8 <LTEInitParams+0x238>)
 80011f6:	2235      	movs	r2, #53	; 0x35
 80011f8:	493d      	ldr	r1, [pc, #244]	; (80012f0 <LTEInitParams+0x280>)
 80011fa:	189b      	adds	r3, r3, r2
 80011fc:	220e      	movs	r2, #14
 80011fe:	0018      	movs	r0, r3
 8001200:	f006 fc2c 	bl	8007a5c <memcpy>
	strcpy(lteMessages.AT_CFUN, "AT+CFUN=1,1\r");
 8001204:	4b28      	ldr	r3, [pc, #160]	; (80012a8 <LTEInitParams+0x238>)
 8001206:	22e1      	movs	r2, #225	; 0xe1
 8001208:	493a      	ldr	r1, [pc, #232]	; (80012f4 <LTEInitParams+0x284>)
 800120a:	189b      	adds	r3, r3, r2
 800120c:	220d      	movs	r2, #13
 800120e:	0018      	movs	r0, r3
 8001210:	f006 fc24 	bl	8007a5c <memcpy>
	strcpy(lteMessages.AT_CFUNS, "AT+CFUN=0\r");
 8001214:	4b24      	ldr	r3, [pc, #144]	; (80012a8 <LTEInitParams+0x238>)
 8001216:	22ee      	movs	r2, #238	; 0xee
 8001218:	4937      	ldr	r1, [pc, #220]	; (80012f8 <LTEInitParams+0x288>)
 800121a:	189b      	adds	r3, r3, r2
 800121c:	220b      	movs	r2, #11
 800121e:	0018      	movs	r0, r3
 8001220:	f006 fc1c 	bl	8007a5c <memcpy>
	strcpy(lteMessages.AT_CIMI, "AT+CIMI\r");
 8001224:	4a20      	ldr	r2, [pc, #128]	; (80012a8 <LTEInitParams+0x238>)
 8001226:	2326      	movs	r3, #38	; 0x26
 8001228:	33ff      	adds	r3, #255	; 0xff
 800122a:	4934      	ldr	r1, [pc, #208]	; (80012fc <LTEInitParams+0x28c>)
 800122c:	18d3      	adds	r3, r2, r3
 800122e:	2209      	movs	r2, #9
 8001230:	0018      	movs	r0, r3
 8001232:	f006 fc13 	bl	8007a5c <memcpy>
	strcpy(lteMessages.AT_QGPSCFG, "AT+QGPSCFG=\"nmeasrc\",1\r");
 8001236:	4b1c      	ldr	r3, [pc, #112]	; (80012a8 <LTEInitParams+0x238>)
 8001238:	22f9      	movs	r2, #249	; 0xf9
 800123a:	4931      	ldr	r1, [pc, #196]	; (8001300 <LTEInitParams+0x290>)
 800123c:	189b      	adds	r3, r3, r2
 800123e:	2218      	movs	r2, #24
 8001240:	0018      	movs	r0, r3
 8001242:	f006 fc0b 	bl	8007a5c <memcpy>
	strcpy(lteMessages.AT_QGPSGNMEA, "AT+QGPSGNMEA=\"GGA\"\r");
 8001246:	4a18      	ldr	r2, [pc, #96]	; (80012a8 <LTEInitParams+0x238>)
 8001248:	2312      	movs	r3, #18
 800124a:	33ff      	adds	r3, #255	; 0xff
 800124c:	492d      	ldr	r1, [pc, #180]	; (8001304 <LTEInitParams+0x294>)
 800124e:	18d3      	adds	r3, r2, r3
 8001250:	2214      	movs	r2, #20
 8001252:	0018      	movs	r0, r3
 8001254:	f006 fc02 	bl	8007a5c <memcpy>
	strcpy(lteMessages.POWER_ON, "POWER_ON");
 8001258:	4a2b      	ldr	r2, [pc, #172]	; (8001308 <LTEInitParams+0x298>)
 800125a:	4b2c      	ldr	r3, [pc, #176]	; (800130c <LTEInitParams+0x29c>)
 800125c:	0010      	movs	r0, r2
 800125e:	0019      	movs	r1, r3
 8001260:	2309      	movs	r3, #9
 8001262:	001a      	movs	r2, r3
 8001264:	f006 fbfa 	bl	8007a5c <memcpy>
	strcpy(lteMessages.POWER_OFF, "POWER_OFF");
 8001268:	4a29      	ldr	r2, [pc, #164]	; (8001310 <LTEInitParams+0x2a0>)
 800126a:	4b2a      	ldr	r3, [pc, #168]	; (8001314 <LTEInitParams+0x2a4>)
 800126c:	0010      	movs	r0, r2
 800126e:	0019      	movs	r1, r3
 8001270:	230a      	movs	r3, #10
 8001272:	001a      	movs	r2, r3
 8001274:	f006 fbf2 	bl	8007a5c <memcpy>
	strcpy(lteMessages.SENDDATA, "SENDDATA");
 8001278:	4a27      	ldr	r2, [pc, #156]	; (8001318 <LTEInitParams+0x2a8>)
 800127a:	4b28      	ldr	r3, [pc, #160]	; (800131c <LTEInitParams+0x2ac>)
 800127c:	0010      	movs	r0, r2
 800127e:	0019      	movs	r1, r3
 8001280:	2309      	movs	r3, #9
 8001282:	001a      	movs	r2, r3
 8001284:	f006 fbea 	bl	8007a5c <memcpy>

	memset(lteParameters.latitudeData, '*', 11);
 8001288:	4b25      	ldr	r3, [pc, #148]	; (8001320 <LTEInitParams+0x2b0>)
 800128a:	220b      	movs	r2, #11
 800128c:	212a      	movs	r1, #42	; 0x2a
 800128e:	0018      	movs	r0, r3
 8001290:	f006 fbed 	bl	8007a6e <memset>
	memset(lteParameters.longitudeData, '*', 11);
 8001294:	4b23      	ldr	r3, [pc, #140]	; (8001324 <LTEInitParams+0x2b4>)
 8001296:	220b      	movs	r2, #11
 8001298:	212a      	movs	r1, #42	; 0x2a
 800129a:	0018      	movs	r0, r3
 800129c:	f006 fbe7 	bl	8007a6e <memset>
}
 80012a0:	46c0      	nop			; (mov r8, r8)
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bd80      	pop	{r7, pc}
 80012a6:	46c0      	nop			; (mov r8, r8)
 80012a8:	20000104 	.word	0x20000104
 80012ac:	080082d0 	.word	0x080082d0
 80012b0:	080082d4 	.word	0x080082d4
 80012b4:	080082dc 	.word	0x080082dc
 80012b8:	080082e8 	.word	0x080082e8
 80012bc:	20000147 	.word	0x20000147
 80012c0:	080082f4 	.word	0x080082f4
 80012c4:	2000024c 	.word	0x2000024c
 80012c8:	20000183 	.word	0x20000183
 80012cc:	0800832c 	.word	0x0800832c
 80012d0:	20000193 	.word	0x20000193
 80012d4:	08008340 	.word	0x08008340
 80012d8:	08008350 	.word	0x08008350
 80012dc:	08008360 	.word	0x08008360
 80012e0:	0800836c 	.word	0x0800836c
 80012e4:	0800837c 	.word	0x0800837c
 80012e8:	0800839c 	.word	0x0800839c
 80012ec:	080083a8 	.word	0x080083a8
 80012f0:	080083b4 	.word	0x080083b4
 80012f4:	080083c4 	.word	0x080083c4
 80012f8:	080083d4 	.word	0x080083d4
 80012fc:	080083e0 	.word	0x080083e0
 8001300:	080083ec 	.word	0x080083ec
 8001304:	08008404 	.word	0x08008404
 8001308:	2000023a 	.word	0x2000023a
 800130c:	08008418 	.word	0x08008418
 8001310:	20000242 	.word	0x20000242
 8001314:	08008424 	.word	0x08008424
 8001318:	20000232 	.word	0x20000232
 800131c:	08008430 	.word	0x08008430
 8001320:	2000026a 	.word	0x2000026a
 8001324:	20000275 	.word	0x20000275

08001328 <LTEPowerOn>:

void LTEPowerOn() {
 8001328:	b580      	push	{r7, lr}
 800132a:	af00      	add	r7, sp, #0

	DebugSendData("LTE Power On", 12);
 800132c:	4b12      	ldr	r3, [pc, #72]	; (8001378 <LTEPowerOn+0x50>)
 800132e:	210c      	movs	r1, #12
 8001330:	0018      	movs	r0, r3
 8001332:	f002 fb73 	bl	8003a1c <DebugSendData>
	LTEActiveBuffer();
 8001336:	f000 fbbb 	bl	8001ab0 <LTEActiveBuffer>
	HAL_GPIO_WritePin(LTE_PWRKEY_GPIO_Port, LTE_PWRKEY_Pin, GPIO_PIN_SET); // LTE module power key pressed
 800133a:	23a0      	movs	r3, #160	; 0xa0
 800133c:	05db      	lsls	r3, r3, #23
 800133e:	2201      	movs	r2, #1
 8001340:	2101      	movs	r1, #1
 8001342:	0018      	movs	r0, r3
 8001344:	f003 fb3e 	bl	80049c4 <HAL_GPIO_WritePin>
	HAL_Delay(LTE_PWRKEY_ENABLE_TIME); // Wait about 2000 ms for process
 8001348:	23fa      	movs	r3, #250	; 0xfa
 800134a:	00db      	lsls	r3, r3, #3
 800134c:	0018      	movs	r0, r3
 800134e:	f002 fc49 	bl	8003be4 <HAL_Delay>
	HAL_GPIO_WritePin(LTE_PWRKEY_GPIO_Port, LTE_PWRKEY_Pin, GPIO_PIN_RESET); // LTE module power key released
 8001352:	23a0      	movs	r3, #160	; 0xa0
 8001354:	05db      	lsls	r3, r3, #23
 8001356:	2200      	movs	r2, #0
 8001358:	2101      	movs	r1, #1
 800135a:	0018      	movs	r0, r3
 800135c:	f003 fb32 	bl	80049c4 <HAL_GPIO_WritePin>
	LTEResponseParserBuffer(60000, lteMessages.POWER_ON, sizeof(lteMessages.POWER_ON));
 8001360:	4b06      	ldr	r3, [pc, #24]	; (800137c <LTEPowerOn+0x54>)
 8001362:	4807      	ldr	r0, [pc, #28]	; (8001380 <LTEPowerOn+0x58>)
 8001364:	2208      	movs	r2, #8
 8001366:	0019      	movs	r1, r3
 8001368:	f000 fbfc 	bl	8001b64 <LTEResponseParserBuffer>
	LTEPassiveBuffer();
 800136c:	f000 fbbe 	bl	8001aec <LTEPassiveBuffer>
}
 8001370:	46c0      	nop			; (mov r8, r8)
 8001372:	46bd      	mov	sp, r7
 8001374:	bd80      	pop	{r7, pc}
 8001376:	46c0      	nop			; (mov r8, r8)
 8001378:	0800843c 	.word	0x0800843c
 800137c:	2000023a 	.word	0x2000023a
 8001380:	0000ea60 	.word	0x0000ea60

08001384 <LTEPowerOff>:

void LTEPowerOff() {
 8001384:	b580      	push	{r7, lr}
 8001386:	b082      	sub	sp, #8
 8001388:	af00      	add	r7, sp, #0

	DebugSendData("LTE Power Off", 13);
 800138a:	4b1d      	ldr	r3, [pc, #116]	; (8001400 <LTEPowerOff+0x7c>)
 800138c:	210d      	movs	r1, #13
 800138e:	0018      	movs	r0, r3
 8001390:	f002 fb44 	bl	8003a1c <DebugSendData>
	LTEActiveBuffer();
 8001394:	f000 fb8c 	bl	8001ab0 <LTEActiveBuffer>
	HAL_GPIO_WritePin(LTE_PWRKEY_GPIO_Port, LTE_PWRKEY_Pin, GPIO_PIN_SET); // LTE module power key pressed
 8001398:	23a0      	movs	r3, #160	; 0xa0
 800139a:	05db      	lsls	r3, r3, #23
 800139c:	2201      	movs	r2, #1
 800139e:	2101      	movs	r1, #1
 80013a0:	0018      	movs	r0, r3
 80013a2:	f003 fb0f 	bl	80049c4 <HAL_GPIO_WritePin>
	HAL_Delay(LTE_PWRKEY_DISABLE_TIME); // Wait about 2000 ms for process
 80013a6:	4b17      	ldr	r3, [pc, #92]	; (8001404 <LTEPowerOff+0x80>)
 80013a8:	0018      	movs	r0, r3
 80013aa:	f002 fc1b 	bl	8003be4 <HAL_Delay>
	HAL_GPIO_WritePin(LTE_PWRKEY_GPIO_Port, LTE_PWRKEY_Pin, GPIO_PIN_RESET); // LTE module power key released
 80013ae:	23a0      	movs	r3, #160	; 0xa0
 80013b0:	05db      	lsls	r3, r3, #23
 80013b2:	2200      	movs	r2, #0
 80013b4:	2101      	movs	r1, #1
 80013b6:	0018      	movs	r0, r3
 80013b8:	f003 fb04 	bl	80049c4 <HAL_GPIO_WritePin>
	for (int i = 0; i < 15; ++i) {
 80013bc:	2300      	movs	r3, #0
 80013be:	607b      	str	r3, [r7, #4]
 80013c0:	e014      	b.n	80013ec <LTEPowerOff+0x68>
		LTEResponseParserBuffer(2000, lteMessages.POWER_OFF, sizeof(lteMessages.POWER_OFF));
 80013c2:	4911      	ldr	r1, [pc, #68]	; (8001408 <LTEPowerOff+0x84>)
 80013c4:	23fa      	movs	r3, #250	; 0xfa
 80013c6:	00db      	lsls	r3, r3, #3
 80013c8:	2209      	movs	r2, #9
 80013ca:	0018      	movs	r0, r3
 80013cc:	f000 fbca 	bl	8001b64 <LTEResponseParserBuffer>
		if (lteParameters.uartResMessage == MESG_POWERDOWN) {
 80013d0:	4b0e      	ldr	r3, [pc, #56]	; (800140c <LTEPowerOff+0x88>)
 80013d2:	22b5      	movs	r2, #181	; 0xb5
 80013d4:	5c9b      	ldrb	r3, [r3, r2]
 80013d6:	2b02      	cmp	r3, #2
 80013d8:	d105      	bne.n	80013e6 <LTEPowerOff+0x62>
			DebugSendData("LTE Power Passive", 17);
 80013da:	4b0d      	ldr	r3, [pc, #52]	; (8001410 <LTEPowerOff+0x8c>)
 80013dc:	2111      	movs	r1, #17
 80013de:	0018      	movs	r0, r3
 80013e0:	f002 fb1c 	bl	8003a1c <DebugSendData>
			break;
 80013e4:	e005      	b.n	80013f2 <LTEPowerOff+0x6e>
	for (int i = 0; i < 15; ++i) {
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	3301      	adds	r3, #1
 80013ea:	607b      	str	r3, [r7, #4]
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	2b0e      	cmp	r3, #14
 80013f0:	dde7      	ble.n	80013c2 <LTEPowerOff+0x3e>
		}
	}
	LTEPassiveBuffer();
 80013f2:	f000 fb7b 	bl	8001aec <LTEPassiveBuffer>
}
 80013f6:	46c0      	nop			; (mov r8, r8)
 80013f8:	46bd      	mov	sp, r7
 80013fa:	b002      	add	sp, #8
 80013fc:	bd80      	pop	{r7, pc}
 80013fe:	46c0      	nop			; (mov r8, r8)
 8001400:	0800844c 	.word	0x0800844c
 8001404:	00001388 	.word	0x00001388
 8001408:	20000242 	.word	0x20000242
 800140c:	2000024c 	.word	0x2000024c
 8001410:	0800845c 	.word	0x0800845c

08001414 <LTEEnable>:

void LTEEnable() {
 8001414:	b580      	push	{r7, lr}
 8001416:	af00      	add	r7, sp, #0
	DebugSendData("LTE Enable", 10);
 8001418:	4b09      	ldr	r3, [pc, #36]	; (8001440 <LTEEnable+0x2c>)
 800141a:	210a      	movs	r1, #10
 800141c:	0018      	movs	r0, r3
 800141e:	f002 fafd 	bl	8003a1c <DebugSendData>
	HAL_GPIO_WritePin(LTE_ENABLE_GPIO_Port, LTE_ENABLE_Pin, GPIO_PIN_SET); // LTE module power key pressed
 8001422:	23a0      	movs	r3, #160	; 0xa0
 8001424:	05db      	lsls	r3, r3, #23
 8001426:	2201      	movs	r2, #1
 8001428:	2102      	movs	r1, #2
 800142a:	0018      	movs	r0, r3
 800142c:	f003 faca 	bl	80049c4 <HAL_GPIO_WritePin>
	HAL_Delay(1000);
 8001430:	23fa      	movs	r3, #250	; 0xfa
 8001432:	009b      	lsls	r3, r3, #2
 8001434:	0018      	movs	r0, r3
 8001436:	f002 fbd5 	bl	8003be4 <HAL_Delay>
}
 800143a:	46c0      	nop			; (mov r8, r8)
 800143c:	46bd      	mov	sp, r7
 800143e:	bd80      	pop	{r7, pc}
 8001440:	08008470 	.word	0x08008470

08001444 <LTEDisable>:

void LTEDisable() {
 8001444:	b580      	push	{r7, lr}
 8001446:	af00      	add	r7, sp, #0
	DebugSendData("LTE Disable", 11);
 8001448:	4b0b      	ldr	r3, [pc, #44]	; (8001478 <LTEDisable+0x34>)
 800144a:	210b      	movs	r1, #11
 800144c:	0018      	movs	r0, r3
 800144e:	f002 fae5 	bl	8003a1c <DebugSendData>
	HAL_GPIO_WritePin(LTE_ENABLE_GPIO_Port, LTE_ENABLE_Pin, GPIO_PIN_RESET); // LTE module power key pressed
 8001452:	23a0      	movs	r3, #160	; 0xa0
 8001454:	05db      	lsls	r3, r3, #23
 8001456:	2200      	movs	r2, #0
 8001458:	2102      	movs	r1, #2
 800145a:	0018      	movs	r0, r3
 800145c:	f003 fab2 	bl	80049c4 <HAL_GPIO_WritePin>
	HAL_Delay(1000);
 8001460:	23fa      	movs	r3, #250	; 0xfa
 8001462:	009b      	lsls	r3, r3, #2
 8001464:	0018      	movs	r0, r3
 8001466:	f002 fbbd 	bl	8003be4 <HAL_Delay>
	lteParameters.powerState=PWR_PASSIVE;
 800146a:	4b04      	ldr	r3, [pc, #16]	; (800147c <LTEDisable+0x38>)
 800146c:	22b6      	movs	r2, #182	; 0xb6
 800146e:	2101      	movs	r1, #1
 8001470:	5499      	strb	r1, [r3, r2]
}
 8001472:	46c0      	nop			; (mov r8, r8)
 8001474:	46bd      	mov	sp, r7
 8001476:	bd80      	pop	{r7, pc}
 8001478:	0800847c 	.word	0x0800847c
 800147c:	2000024c 	.word	0x2000024c

08001480 <LTEPowerOffWithUart>:
		}
	}
	LTEPassiveBuffer();
}

void LTEPowerOffWithUart() {
 8001480:	b590      	push	{r4, r7, lr}
 8001482:	b0a1      	sub	sp, #132	; 0x84
 8001484:	af20      	add	r7, sp, #128	; 0x80
	if (lteParameters.powerState == PWR_ACTIVE) {
 8001486:	4b15      	ldr	r3, [pc, #84]	; (80014dc <LTEPowerOffWithUart+0x5c>)
 8001488:	22b6      	movs	r2, #182	; 0xb6
 800148a:	5c9b      	ldrb	r3, [r3, r2]
 800148c:	2b02      	cmp	r3, #2
 800148e:	d121      	bne.n	80014d4 <LTEPowerOffWithUart+0x54>
		DebugSendData("LTE Power Off With Uart", 23);
 8001490:	4b13      	ldr	r3, [pc, #76]	; (80014e0 <LTEPowerOffWithUart+0x60>)
 8001492:	2117      	movs	r1, #23
 8001494:	0018      	movs	r0, r3
 8001496:	f002 fac1 	bl	8003a1c <DebugSendData>
		LTEActiveBuffer();
 800149a:	f000 fb09 	bl	8001ab0 <LTEActiveBuffer>
		LTESendData(huart1, lteMessages.AT_QPOWD, sizeof(lteMessages.AT_QPOWD));
 800149e:	4c11      	ldr	r4, [pc, #68]	; (80014e4 <LTEPowerOffWithUart+0x64>)
 80014a0:	230c      	movs	r3, #12
 80014a2:	931e      	str	r3, [sp, #120]	; 0x78
 80014a4:	4b10      	ldr	r3, [pc, #64]	; (80014e8 <LTEPowerOffWithUart+0x68>)
 80014a6:	931d      	str	r3, [sp, #116]	; 0x74
 80014a8:	466b      	mov	r3, sp
 80014aa:	0018      	movs	r0, r3
 80014ac:	0023      	movs	r3, r4
 80014ae:	3310      	adds	r3, #16
 80014b0:	2274      	movs	r2, #116	; 0x74
 80014b2:	0019      	movs	r1, r3
 80014b4:	f006 fad2 	bl	8007a5c <memcpy>
 80014b8:	6820      	ldr	r0, [r4, #0]
 80014ba:	6861      	ldr	r1, [r4, #4]
 80014bc:	68a2      	ldr	r2, [r4, #8]
 80014be:	68e3      	ldr	r3, [r4, #12]
 80014c0:	f000 fb32 	bl	8001b28 <LTESendData>
		LTEResponseParserBuffer(5000, lteMessages.AT_QPOWD, sizeof(lteMessages.AT_QPOWD));
 80014c4:	4b08      	ldr	r3, [pc, #32]	; (80014e8 <LTEPowerOffWithUart+0x68>)
 80014c6:	4809      	ldr	r0, [pc, #36]	; (80014ec <LTEPowerOffWithUart+0x6c>)
 80014c8:	220c      	movs	r2, #12
 80014ca:	0019      	movs	r1, r3
 80014cc:	f000 fb4a 	bl	8001b64 <LTEResponseParserBuffer>
		LTEPassiveBuffer();
 80014d0:	f000 fb0c 	bl	8001aec <LTEPassiveBuffer>
	}
}
 80014d4:	46c0      	nop			; (mov r8, r8)
 80014d6:	46bd      	mov	sp, r7
 80014d8:	b001      	add	sp, #4
 80014da:	bd90      	pop	{r4, r7, pc}
 80014dc:	2000024c 	.word	0x2000024c
 80014e0:	080084b0 	.word	0x080084b0
 80014e4:	20000474 	.word	0x20000474
 80014e8:	2000010d 	.word	0x2000010d
 80014ec:	00001388 	.word	0x00001388

080014f0 <LTEGetIMEI>:

void LTEGetIMEI() {
 80014f0:	b590      	push	{r4, r7, lr}
 80014f2:	b0a3      	sub	sp, #140	; 0x8c
 80014f4:	af20      	add	r7, sp, #128	; 0x80
	DebugSendData("LTE Get IMEI", 12);
 80014f6:	4b1b      	ldr	r3, [pc, #108]	; (8001564 <LTEGetIMEI+0x74>)
 80014f8:	210c      	movs	r1, #12
 80014fa:	0018      	movs	r0, r3
 80014fc:	f002 fa8e 	bl	8003a1c <DebugSendData>
	LTEActiveBuffer();
 8001500:	f000 fad6 	bl	8001ab0 <LTEActiveBuffer>
	LTESendData(huart1, lteMessages.AT_CGSN, sizeof(lteMessages.AT_CGSN));
 8001504:	4c18      	ldr	r4, [pc, #96]	; (8001568 <LTEGetIMEI+0x78>)
 8001506:	2309      	movs	r3, #9
 8001508:	931e      	str	r3, [sp, #120]	; 0x78
 800150a:	4b18      	ldr	r3, [pc, #96]	; (800156c <LTEGetIMEI+0x7c>)
 800150c:	931d      	str	r3, [sp, #116]	; 0x74
 800150e:	466b      	mov	r3, sp
 8001510:	0018      	movs	r0, r3
 8001512:	0023      	movs	r3, r4
 8001514:	3310      	adds	r3, #16
 8001516:	2274      	movs	r2, #116	; 0x74
 8001518:	0019      	movs	r1, r3
 800151a:	f006 fa9f 	bl	8007a5c <memcpy>
 800151e:	6820      	ldr	r0, [r4, #0]
 8001520:	6861      	ldr	r1, [r4, #4]
 8001522:	68a2      	ldr	r2, [r4, #8]
 8001524:	68e3      	ldr	r3, [r4, #12]
 8001526:	f000 faff 	bl	8001b28 <LTESendData>
	for (int i = 0; i < 5; ++i) {
 800152a:	2300      	movs	r3, #0
 800152c:	607b      	str	r3, [r7, #4]
 800152e:	e00e      	b.n	800154e <LTEGetIMEI+0x5e>
		LTEResponseParserBuffer(2000, lteMessages.AT_CGSN, sizeof(lteMessages.AT_CGSN));
 8001530:	490e      	ldr	r1, [pc, #56]	; (800156c <LTEGetIMEI+0x7c>)
 8001532:	23fa      	movs	r3, #250	; 0xfa
 8001534:	00db      	lsls	r3, r3, #3
 8001536:	2209      	movs	r2, #9
 8001538:	0018      	movs	r0, r3
 800153a:	f000 fb13 	bl	8001b64 <LTEResponseParserBuffer>
		if (lteParameters.uartResHeader == HEAD_OK) {
 800153e:	4b0c      	ldr	r3, [pc, #48]	; (8001570 <LTEGetIMEI+0x80>)
 8001540:	22b4      	movs	r2, #180	; 0xb4
 8001542:	5c9b      	ldrb	r3, [r3, r2]
 8001544:	2b02      	cmp	r3, #2
 8001546:	d006      	beq.n	8001556 <LTEGetIMEI+0x66>
	for (int i = 0; i < 5; ++i) {
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	3301      	adds	r3, #1
 800154c:	607b      	str	r3, [r7, #4]
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	2b04      	cmp	r3, #4
 8001552:	dded      	ble.n	8001530 <LTEGetIMEI+0x40>
 8001554:	e000      	b.n	8001558 <LTEGetIMEI+0x68>
			break;
 8001556:	46c0      	nop			; (mov r8, r8)
		}
	}
	LTEPassiveBuffer();
 8001558:	f000 fac8 	bl	8001aec <LTEPassiveBuffer>
}
 800155c:	46c0      	nop			; (mov r8, r8)
 800155e:	46bd      	mov	sp, r7
 8001560:	b003      	add	sp, #12
 8001562:	bd90      	pop	{r4, r7, pc}
 8001564:	080084c8 	.word	0x080084c8
 8001568:	20000474 	.word	0x20000474
 800156c:	20000119 	.word	0x20000119
 8001570:	2000024c 	.word	0x2000024c

08001574 <LTEGetImsi>:

void LTEGetImsi() {
 8001574:	b590      	push	{r4, r7, lr}
 8001576:	b0a3      	sub	sp, #140	; 0x8c
 8001578:	af20      	add	r7, sp, #128	; 0x80
	DebugSendData("LTE Get IMSI", 12);
 800157a:	4b1b      	ldr	r3, [pc, #108]	; (80015e8 <LTEGetImsi+0x74>)
 800157c:	210c      	movs	r1, #12
 800157e:	0018      	movs	r0, r3
 8001580:	f002 fa4c 	bl	8003a1c <DebugSendData>
	LTEActiveBuffer();
 8001584:	f000 fa94 	bl	8001ab0 <LTEActiveBuffer>
	LTESendData(huart1, lteMessages.AT_CIMI, sizeof(lteMessages.AT_CIMI));
 8001588:	4c18      	ldr	r4, [pc, #96]	; (80015ec <LTEGetImsi+0x78>)
 800158a:	2309      	movs	r3, #9
 800158c:	931e      	str	r3, [sp, #120]	; 0x78
 800158e:	4b18      	ldr	r3, [pc, #96]	; (80015f0 <LTEGetImsi+0x7c>)
 8001590:	931d      	str	r3, [sp, #116]	; 0x74
 8001592:	466b      	mov	r3, sp
 8001594:	0018      	movs	r0, r3
 8001596:	0023      	movs	r3, r4
 8001598:	3310      	adds	r3, #16
 800159a:	2274      	movs	r2, #116	; 0x74
 800159c:	0019      	movs	r1, r3
 800159e:	f006 fa5d 	bl	8007a5c <memcpy>
 80015a2:	6820      	ldr	r0, [r4, #0]
 80015a4:	6861      	ldr	r1, [r4, #4]
 80015a6:	68a2      	ldr	r2, [r4, #8]
 80015a8:	68e3      	ldr	r3, [r4, #12]
 80015aa:	f000 fabd 	bl	8001b28 <LTESendData>
	for (int i = 0; i < 5; ++i) {
 80015ae:	2300      	movs	r3, #0
 80015b0:	607b      	str	r3, [r7, #4]
 80015b2:	e00e      	b.n	80015d2 <LTEGetImsi+0x5e>
		LTEResponseParserBuffer(2000, lteMessages.AT_CIMI, sizeof(lteMessages.AT_CIMI));
 80015b4:	490e      	ldr	r1, [pc, #56]	; (80015f0 <LTEGetImsi+0x7c>)
 80015b6:	23fa      	movs	r3, #250	; 0xfa
 80015b8:	00db      	lsls	r3, r3, #3
 80015ba:	2209      	movs	r2, #9
 80015bc:	0018      	movs	r0, r3
 80015be:	f000 fad1 	bl	8001b64 <LTEResponseParserBuffer>
		if (lteParameters.uartResHeader == HEAD_OK) {
 80015c2:	4b0c      	ldr	r3, [pc, #48]	; (80015f4 <LTEGetImsi+0x80>)
 80015c4:	22b4      	movs	r2, #180	; 0xb4
 80015c6:	5c9b      	ldrb	r3, [r3, r2]
 80015c8:	2b02      	cmp	r3, #2
 80015ca:	d006      	beq.n	80015da <LTEGetImsi+0x66>
	for (int i = 0; i < 5; ++i) {
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	3301      	adds	r3, #1
 80015d0:	607b      	str	r3, [r7, #4]
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	2b04      	cmp	r3, #4
 80015d6:	dded      	ble.n	80015b4 <LTEGetImsi+0x40>
 80015d8:	e000      	b.n	80015dc <LTEGetImsi+0x68>
			break;
 80015da:	46c0      	nop			; (mov r8, r8)
		}
	}
	LTEPassiveBuffer();
 80015dc:	f000 fa86 	bl	8001aec <LTEPassiveBuffer>
}
 80015e0:	46c0      	nop			; (mov r8, r8)
 80015e2:	46bd      	mov	sp, r7
 80015e4:	b003      	add	sp, #12
 80015e6:	bd90      	pop	{r4, r7, pc}
 80015e8:	080084d8 	.word	0x080084d8
 80015ec:	20000474 	.word	0x20000474
 80015f0:	20000229 	.word	0x20000229
 80015f4:	2000024c 	.word	0x2000024c

080015f8 <LTEOpenConnection>:

void LTEOpenConnection() {
 80015f8:	b590      	push	{r4, r7, lr}
 80015fa:	b0a3      	sub	sp, #140	; 0x8c
 80015fc:	af20      	add	r7, sp, #128	; 0x80
	DebugSendData("LTE Open Connection", 19);
 80015fe:	4b1b      	ldr	r3, [pc, #108]	; (800166c <LTEOpenConnection+0x74>)
 8001600:	2113      	movs	r1, #19
 8001602:	0018      	movs	r0, r3
 8001604:	f002 fa0a 	bl	8003a1c <DebugSendData>
	LTEActiveBuffer();
 8001608:	f000 fa52 	bl	8001ab0 <LTEActiveBuffer>
	LTESendData(huart1, lteMessages.AT_QIOPEN, sizeof(lteMessages.AT_QIOPEN));
 800160c:	4c18      	ldr	r4, [pc, #96]	; (8001670 <LTEOpenConnection+0x78>)
 800160e:	233c      	movs	r3, #60	; 0x3c
 8001610:	931e      	str	r3, [sp, #120]	; 0x78
 8001612:	4b18      	ldr	r3, [pc, #96]	; (8001674 <LTEOpenConnection+0x7c>)
 8001614:	931d      	str	r3, [sp, #116]	; 0x74
 8001616:	466b      	mov	r3, sp
 8001618:	0018      	movs	r0, r3
 800161a:	0023      	movs	r3, r4
 800161c:	3310      	adds	r3, #16
 800161e:	2274      	movs	r2, #116	; 0x74
 8001620:	0019      	movs	r1, r3
 8001622:	f006 fa1b 	bl	8007a5c <memcpy>
 8001626:	6820      	ldr	r0, [r4, #0]
 8001628:	6861      	ldr	r1, [r4, #4]
 800162a:	68a2      	ldr	r2, [r4, #8]
 800162c:	68e3      	ldr	r3, [r4, #12]
 800162e:	f000 fa7b 	bl	8001b28 <LTESendData>
	for (int i = 0; i < 5; ++i) {
 8001632:	2300      	movs	r3, #0
 8001634:	607b      	str	r3, [r7, #4]
 8001636:	e00e      	b.n	8001656 <LTEOpenConnection+0x5e>
		LTEResponseParserBuffer(2000, lteMessages.AT_QIOPEN, sizeof(lteMessages.AT_QIOPEN));
 8001638:	490e      	ldr	r1, [pc, #56]	; (8001674 <LTEOpenConnection+0x7c>)
 800163a:	23fa      	movs	r3, #250	; 0xfa
 800163c:	00db      	lsls	r3, r3, #3
 800163e:	223c      	movs	r2, #60	; 0x3c
 8001640:	0018      	movs	r0, r3
 8001642:	f000 fa8f 	bl	8001b64 <LTEResponseParserBuffer>
		if (lteParameters.uartResHeader == HEAD_OK) {
 8001646:	4b0c      	ldr	r3, [pc, #48]	; (8001678 <LTEOpenConnection+0x80>)
 8001648:	22b4      	movs	r2, #180	; 0xb4
 800164a:	5c9b      	ldrb	r3, [r3, r2]
 800164c:	2b02      	cmp	r3, #2
 800164e:	d006      	beq.n	800165e <LTEOpenConnection+0x66>
	for (int i = 0; i < 5; ++i) {
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	3301      	adds	r3, #1
 8001654:	607b      	str	r3, [r7, #4]
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	2b04      	cmp	r3, #4
 800165a:	dded      	ble.n	8001638 <LTEOpenConnection+0x40>
 800165c:	e000      	b.n	8001660 <LTEOpenConnection+0x68>
			break;
 800165e:	46c0      	nop			; (mov r8, r8)
		}
	}
	LTEPassiveBuffer();
 8001660:	f000 fa44 	bl	8001aec <LTEPassiveBuffer>
}
 8001664:	46c0      	nop			; (mov r8, r8)
 8001666:	46bd      	mov	sp, r7
 8001668:	b003      	add	sp, #12
 800166a:	bd90      	pop	{r4, r7, pc}
 800166c:	080084e8 	.word	0x080084e8
 8001670:	20000474 	.word	0x20000474
 8001674:	20000147 	.word	0x20000147
 8001678:	2000024c 	.word	0x2000024c

0800167c <LTEPrepToSendData>:

void LTEPrepToSendData() {
 800167c:	b590      	push	{r4, r7, lr}
 800167e:	b0a3      	sub	sp, #140	; 0x8c
 8001680:	af20      	add	r7, sp, #128	; 0x80
	DebugSendData("LTE Prep To Send Data", 21);
 8001682:	4b1b      	ldr	r3, [pc, #108]	; (80016f0 <LTEPrepToSendData+0x74>)
 8001684:	2115      	movs	r1, #21
 8001686:	0018      	movs	r0, r3
 8001688:	f002 f9c8 	bl	8003a1c <DebugSendData>
	LTEActiveBuffer();
 800168c:	f000 fa10 	bl	8001ab0 <LTEActiveBuffer>
	LTESendData(huart1, lteMessages.AT_QISEND, sizeof(lteMessages.AT_QISEND));
 8001690:	4c18      	ldr	r4, [pc, #96]	; (80016f4 <LTEPrepToSendData+0x78>)
 8001692:	2310      	movs	r3, #16
 8001694:	931e      	str	r3, [sp, #120]	; 0x78
 8001696:	4b18      	ldr	r3, [pc, #96]	; (80016f8 <LTEPrepToSendData+0x7c>)
 8001698:	931d      	str	r3, [sp, #116]	; 0x74
 800169a:	466b      	mov	r3, sp
 800169c:	0018      	movs	r0, r3
 800169e:	0023      	movs	r3, r4
 80016a0:	3310      	adds	r3, #16
 80016a2:	2274      	movs	r2, #116	; 0x74
 80016a4:	0019      	movs	r1, r3
 80016a6:	f006 f9d9 	bl	8007a5c <memcpy>
 80016aa:	6820      	ldr	r0, [r4, #0]
 80016ac:	6861      	ldr	r1, [r4, #4]
 80016ae:	68a2      	ldr	r2, [r4, #8]
 80016b0:	68e3      	ldr	r3, [r4, #12]
 80016b2:	f000 fa39 	bl	8001b28 <LTESendData>
	for (int i = 0; i < 5; ++i) {
 80016b6:	2300      	movs	r3, #0
 80016b8:	607b      	str	r3, [r7, #4]
 80016ba:	e00e      	b.n	80016da <LTEPrepToSendData+0x5e>
		LTEResponseParserBuffer(2000, lteMessages.AT_QISEND, sizeof(lteMessages.AT_QISEND));
 80016bc:	490e      	ldr	r1, [pc, #56]	; (80016f8 <LTEPrepToSendData+0x7c>)
 80016be:	23fa      	movs	r3, #250	; 0xfa
 80016c0:	00db      	lsls	r3, r3, #3
 80016c2:	2210      	movs	r2, #16
 80016c4:	0018      	movs	r0, r3
 80016c6:	f000 fa4d 	bl	8001b64 <LTEResponseParserBuffer>
		if (lteParameters.uartResHeader == HEAD_OK) {
 80016ca:	4b0c      	ldr	r3, [pc, #48]	; (80016fc <LTEPrepToSendData+0x80>)
 80016cc:	22b4      	movs	r2, #180	; 0xb4
 80016ce:	5c9b      	ldrb	r3, [r3, r2]
 80016d0:	2b02      	cmp	r3, #2
 80016d2:	d006      	beq.n	80016e2 <LTEPrepToSendData+0x66>
	for (int i = 0; i < 5; ++i) {
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	3301      	adds	r3, #1
 80016d8:	607b      	str	r3, [r7, #4]
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	2b04      	cmp	r3, #4
 80016de:	dded      	ble.n	80016bc <LTEPrepToSendData+0x40>
 80016e0:	e000      	b.n	80016e4 <LTEPrepToSendData+0x68>
			break;
 80016e2:	46c0      	nop			; (mov r8, r8)
		}
	}
	LTEPassiveBuffer();
 80016e4:	f000 fa02 	bl	8001aec <LTEPassiveBuffer>
}
 80016e8:	46c0      	nop			; (mov r8, r8)
 80016ea:	46bd      	mov	sp, r7
 80016ec:	b003      	add	sp, #12
 80016ee:	bd90      	pop	{r4, r7, pc}
 80016f0:	080084fc 	.word	0x080084fc
 80016f4:	20000474 	.word	0x20000474
 80016f8:	20000183 	.word	0x20000183
 80016fc:	2000024c 	.word	0x2000024c

08001700 <LTEAt>:

void LTEAt() {
 8001700:	b590      	push	{r4, r7, lr}
 8001702:	b0a3      	sub	sp, #140	; 0x8c
 8001704:	af20      	add	r7, sp, #128	; 0x80
	DebugSendData("LTE At", 6);
 8001706:	4b1b      	ldr	r3, [pc, #108]	; (8001774 <LTEAt+0x74>)
 8001708:	2106      	movs	r1, #6
 800170a:	0018      	movs	r0, r3
 800170c:	f002 f986 	bl	8003a1c <DebugSendData>
	LTEActiveBuffer();
 8001710:	f000 f9ce 	bl	8001ab0 <LTEActiveBuffer>
	LTESendData(huart1, lteMessages.AT, sizeof(lteMessages.AT));
 8001714:	4c18      	ldr	r4, [pc, #96]	; (8001778 <LTEAt+0x78>)
 8001716:	2304      	movs	r3, #4
 8001718:	931e      	str	r3, [sp, #120]	; 0x78
 800171a:	4b18      	ldr	r3, [pc, #96]	; (800177c <LTEAt+0x7c>)
 800171c:	931d      	str	r3, [sp, #116]	; 0x74
 800171e:	466b      	mov	r3, sp
 8001720:	0018      	movs	r0, r3
 8001722:	0023      	movs	r3, r4
 8001724:	3310      	adds	r3, #16
 8001726:	2274      	movs	r2, #116	; 0x74
 8001728:	0019      	movs	r1, r3
 800172a:	f006 f997 	bl	8007a5c <memcpy>
 800172e:	6820      	ldr	r0, [r4, #0]
 8001730:	6861      	ldr	r1, [r4, #4]
 8001732:	68a2      	ldr	r2, [r4, #8]
 8001734:	68e3      	ldr	r3, [r4, #12]
 8001736:	f000 f9f7 	bl	8001b28 <LTESendData>
	for (int i = 0; i < 5; ++i) {
 800173a:	2300      	movs	r3, #0
 800173c:	607b      	str	r3, [r7, #4]
 800173e:	e00e      	b.n	800175e <LTEAt+0x5e>
		LTEResponseParserBuffer(2000, lteMessages.AT, sizeof(lteMessages.AT));
 8001740:	490e      	ldr	r1, [pc, #56]	; (800177c <LTEAt+0x7c>)
 8001742:	23fa      	movs	r3, #250	; 0xfa
 8001744:	00db      	lsls	r3, r3, #3
 8001746:	2204      	movs	r2, #4
 8001748:	0018      	movs	r0, r3
 800174a:	f000 fa0b 	bl	8001b64 <LTEResponseParserBuffer>
		if (lteParameters.uartResHeader == HEAD_OK) {
 800174e:	4b0c      	ldr	r3, [pc, #48]	; (8001780 <LTEAt+0x80>)
 8001750:	22b4      	movs	r2, #180	; 0xb4
 8001752:	5c9b      	ldrb	r3, [r3, r2]
 8001754:	2b02      	cmp	r3, #2
 8001756:	d006      	beq.n	8001766 <LTEAt+0x66>
	for (int i = 0; i < 5; ++i) {
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	3301      	adds	r3, #1
 800175c:	607b      	str	r3, [r7, #4]
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	2b04      	cmp	r3, #4
 8001762:	dded      	ble.n	8001740 <LTEAt+0x40>
 8001764:	e000      	b.n	8001768 <LTEAt+0x68>
			break;
 8001766:	46c0      	nop			; (mov r8, r8)
		}
	}
	LTEPassiveBuffer();
 8001768:	f000 f9c0 	bl	8001aec <LTEPassiveBuffer>
}
 800176c:	46c0      	nop			; (mov r8, r8)
 800176e:	46bd      	mov	sp, r7
 8001770:	b003      	add	sp, #12
 8001772:	bd90      	pop	{r4, r7, pc}
 8001774:	08008514 	.word	0x08008514
 8001778:	20000474 	.word	0x20000474
 800177c:	20000104 	.word	0x20000104
 8001780:	2000024c 	.word	0x2000024c

08001784 <LTECloseConnection>:

void LTECloseConnection() {
 8001784:	b590      	push	{r4, r7, lr}
 8001786:	b0a3      	sub	sp, #140	; 0x8c
 8001788:	af20      	add	r7, sp, #128	; 0x80
	DebugSendData("LTE Close Connection", 20);
 800178a:	4b1b      	ldr	r3, [pc, #108]	; (80017f8 <LTECloseConnection+0x74>)
 800178c:	2114      	movs	r1, #20
 800178e:	0018      	movs	r0, r3
 8001790:	f002 f944 	bl	8003a1c <DebugSendData>
	LTEActiveBuffer();
 8001794:	f000 f98c 	bl	8001ab0 <LTEActiveBuffer>
	LTESendData(huart1, lteMessages.AT_QICLOSE, sizeof(lteMessages.AT_QICLOSE));
 8001798:	4c18      	ldr	r4, [pc, #96]	; (80017fc <LTECloseConnection+0x78>)
 800179a:	230e      	movs	r3, #14
 800179c:	931e      	str	r3, [sp, #120]	; 0x78
 800179e:	4b18      	ldr	r3, [pc, #96]	; (8001800 <LTECloseConnection+0x7c>)
 80017a0:	931d      	str	r3, [sp, #116]	; 0x74
 80017a2:	466b      	mov	r3, sp
 80017a4:	0018      	movs	r0, r3
 80017a6:	0023      	movs	r3, r4
 80017a8:	3310      	adds	r3, #16
 80017aa:	2274      	movs	r2, #116	; 0x74
 80017ac:	0019      	movs	r1, r3
 80017ae:	f006 f955 	bl	8007a5c <memcpy>
 80017b2:	6820      	ldr	r0, [r4, #0]
 80017b4:	6861      	ldr	r1, [r4, #4]
 80017b6:	68a2      	ldr	r2, [r4, #8]
 80017b8:	68e3      	ldr	r3, [r4, #12]
 80017ba:	f000 f9b5 	bl	8001b28 <LTESendData>
	for (int i = 0; i < 5; ++i) {
 80017be:	2300      	movs	r3, #0
 80017c0:	607b      	str	r3, [r7, #4]
 80017c2:	e00e      	b.n	80017e2 <LTECloseConnection+0x5e>
		LTEResponseParserBuffer(2000, lteMessages.AT_QICLOSE, sizeof(lteMessages.AT_QICLOSE));
 80017c4:	490e      	ldr	r1, [pc, #56]	; (8001800 <LTECloseConnection+0x7c>)
 80017c6:	23fa      	movs	r3, #250	; 0xfa
 80017c8:	00db      	lsls	r3, r3, #3
 80017ca:	220e      	movs	r2, #14
 80017cc:	0018      	movs	r0, r3
 80017ce:	f000 f9c9 	bl	8001b64 <LTEResponseParserBuffer>
		if (lteParameters.uartResHeader == HEAD_OK) {
 80017d2:	4b0c      	ldr	r3, [pc, #48]	; (8001804 <LTECloseConnection+0x80>)
 80017d4:	22b4      	movs	r2, #180	; 0xb4
 80017d6:	5c9b      	ldrb	r3, [r3, r2]
 80017d8:	2b02      	cmp	r3, #2
 80017da:	d006      	beq.n	80017ea <LTECloseConnection+0x66>
	for (int i = 0; i < 5; ++i) {
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	3301      	adds	r3, #1
 80017e0:	607b      	str	r3, [r7, #4]
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	2b04      	cmp	r3, #4
 80017e6:	dded      	ble.n	80017c4 <LTECloseConnection+0x40>
 80017e8:	e000      	b.n	80017ec <LTECloseConnection+0x68>
			break;
 80017ea:	46c0      	nop			; (mov r8, r8)
		}
	}
	LTEPassiveBuffer();
 80017ec:	f000 f97e 	bl	8001aec <LTEPassiveBuffer>
}
 80017f0:	46c0      	nop			; (mov r8, r8)
 80017f2:	46bd      	mov	sp, r7
 80017f4:	b003      	add	sp, #12
 80017f6:	bd90      	pop	{r4, r7, pc}
 80017f8:	0800851c 	.word	0x0800851c
 80017fc:	20000474 	.word	0x20000474
 8001800:	200001a0 	.word	0x200001a0
 8001804:	2000024c 	.word	0x2000024c

08001808 <LTEPdpOpen>:

void LTEPdpOpen() {
 8001808:	b590      	push	{r4, r7, lr}
 800180a:	b0a3      	sub	sp, #140	; 0x8c
 800180c:	af20      	add	r7, sp, #128	; 0x80
	DebugSendData("LTE Pdp Open", 12);
 800180e:	4b1b      	ldr	r3, [pc, #108]	; (800187c <LTEPdpOpen+0x74>)
 8001810:	210c      	movs	r1, #12
 8001812:	0018      	movs	r0, r3
 8001814:	f002 f902 	bl	8003a1c <DebugSendData>
	LTEActiveBuffer();
 8001818:	f000 f94a 	bl	8001ab0 <LTEActiveBuffer>
	LTESendData(huart1, lteMessages.AT_QIACT, sizeof(lteMessages.AT_QIACT));
 800181c:	4c18      	ldr	r4, [pc, #96]	; (8001880 <LTEPdpOpen+0x78>)
 800181e:	230c      	movs	r3, #12
 8001820:	931e      	str	r3, [sp, #120]	; 0x78
 8001822:	4b18      	ldr	r3, [pc, #96]	; (8001884 <LTEPdpOpen+0x7c>)
 8001824:	931d      	str	r3, [sp, #116]	; 0x74
 8001826:	466b      	mov	r3, sp
 8001828:	0018      	movs	r0, r3
 800182a:	0023      	movs	r3, r4
 800182c:	3310      	adds	r3, #16
 800182e:	2274      	movs	r2, #116	; 0x74
 8001830:	0019      	movs	r1, r3
 8001832:	f006 f913 	bl	8007a5c <memcpy>
 8001836:	6820      	ldr	r0, [r4, #0]
 8001838:	6861      	ldr	r1, [r4, #4]
 800183a:	68a2      	ldr	r2, [r4, #8]
 800183c:	68e3      	ldr	r3, [r4, #12]
 800183e:	f000 f973 	bl	8001b28 <LTESendData>
	for (int i = 0; i < 5; ++i) {
 8001842:	2300      	movs	r3, #0
 8001844:	607b      	str	r3, [r7, #4]
 8001846:	e00e      	b.n	8001866 <LTEPdpOpen+0x5e>
		LTEResponseParserBuffer(2000, lteMessages.AT_QIACT, sizeof(lteMessages.AT_QIACT));
 8001848:	490e      	ldr	r1, [pc, #56]	; (8001884 <LTEPdpOpen+0x7c>)
 800184a:	23fa      	movs	r3, #250	; 0xfa
 800184c:	00db      	lsls	r3, r3, #3
 800184e:	220c      	movs	r2, #12
 8001850:	0018      	movs	r0, r3
 8001852:	f000 f987 	bl	8001b64 <LTEResponseParserBuffer>
		if (lteParameters.uartResHeader == HEAD_OK) {
 8001856:	4b0c      	ldr	r3, [pc, #48]	; (8001888 <LTEPdpOpen+0x80>)
 8001858:	22b4      	movs	r2, #180	; 0xb4
 800185a:	5c9b      	ldrb	r3, [r3, r2]
 800185c:	2b02      	cmp	r3, #2
 800185e:	d006      	beq.n	800186e <LTEPdpOpen+0x66>
	for (int i = 0; i < 5; ++i) {
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	3301      	adds	r3, #1
 8001864:	607b      	str	r3, [r7, #4]
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	2b04      	cmp	r3, #4
 800186a:	dded      	ble.n	8001848 <LTEPdpOpen+0x40>
 800186c:	e000      	b.n	8001870 <LTEPdpOpen+0x68>
			break;
 800186e:	46c0      	nop			; (mov r8, r8)
		}
	}
	LTEPassiveBuffer();
 8001870:	f000 f93c 	bl	8001aec <LTEPassiveBuffer>
}
 8001874:	46c0      	nop			; (mov r8, r8)
 8001876:	46bd      	mov	sp, r7
 8001878:	b003      	add	sp, #12
 800187a:	bd90      	pop	{r4, r7, pc}
 800187c:	08008534 	.word	0x08008534
 8001880:	20000474 	.word	0x20000474
 8001884:	200001ae 	.word	0x200001ae
 8001888:	2000024c 	.word	0x2000024c

0800188c <LTEPdpClose>:

void LTEPdpClose() {
 800188c:	b590      	push	{r4, r7, lr}
 800188e:	b0a3      	sub	sp, #140	; 0x8c
 8001890:	af20      	add	r7, sp, #128	; 0x80
	DebugSendData("LTE Pdp Close", 13);
 8001892:	4b1b      	ldr	r3, [pc, #108]	; (8001900 <LTEPdpClose+0x74>)
 8001894:	210d      	movs	r1, #13
 8001896:	0018      	movs	r0, r3
 8001898:	f002 f8c0 	bl	8003a1c <DebugSendData>
	LTEActiveBuffer();
 800189c:	f000 f908 	bl	8001ab0 <LTEActiveBuffer>
	LTESendData(huart1, lteMessages.AT_QIDEACT, sizeof(lteMessages.AT_QIDEACT));
 80018a0:	4c18      	ldr	r4, [pc, #96]	; (8001904 <LTEPdpClose+0x78>)
 80018a2:	230e      	movs	r3, #14
 80018a4:	931e      	str	r3, [sp, #120]	; 0x78
 80018a6:	4b18      	ldr	r3, [pc, #96]	; (8001908 <LTEPdpClose+0x7c>)
 80018a8:	931d      	str	r3, [sp, #116]	; 0x74
 80018aa:	466b      	mov	r3, sp
 80018ac:	0018      	movs	r0, r3
 80018ae:	0023      	movs	r3, r4
 80018b0:	3310      	adds	r3, #16
 80018b2:	2274      	movs	r2, #116	; 0x74
 80018b4:	0019      	movs	r1, r3
 80018b6:	f006 f8d1 	bl	8007a5c <memcpy>
 80018ba:	6820      	ldr	r0, [r4, #0]
 80018bc:	6861      	ldr	r1, [r4, #4]
 80018be:	68a2      	ldr	r2, [r4, #8]
 80018c0:	68e3      	ldr	r3, [r4, #12]
 80018c2:	f000 f931 	bl	8001b28 <LTESendData>
	for (int i = 0; i < 5; ++i) {
 80018c6:	2300      	movs	r3, #0
 80018c8:	607b      	str	r3, [r7, #4]
 80018ca:	e00e      	b.n	80018ea <LTEPdpClose+0x5e>
		LTEResponseParserBuffer(2000, lteMessages.AT_QIDEACT, sizeof(lteMessages.AT_QIDEACT));
 80018cc:	490e      	ldr	r1, [pc, #56]	; (8001908 <LTEPdpClose+0x7c>)
 80018ce:	23fa      	movs	r3, #250	; 0xfa
 80018d0:	00db      	lsls	r3, r3, #3
 80018d2:	220e      	movs	r2, #14
 80018d4:	0018      	movs	r0, r3
 80018d6:	f000 f945 	bl	8001b64 <LTEResponseParserBuffer>
		if (lteParameters.uartResHeader == HEAD_OK) {
 80018da:	4b0c      	ldr	r3, [pc, #48]	; (800190c <LTEPdpClose+0x80>)
 80018dc:	22b4      	movs	r2, #180	; 0xb4
 80018de:	5c9b      	ldrb	r3, [r3, r2]
 80018e0:	2b02      	cmp	r3, #2
 80018e2:	d006      	beq.n	80018f2 <LTEPdpClose+0x66>
	for (int i = 0; i < 5; ++i) {
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	3301      	adds	r3, #1
 80018e8:	607b      	str	r3, [r7, #4]
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	2b04      	cmp	r3, #4
 80018ee:	dded      	ble.n	80018cc <LTEPdpClose+0x40>
 80018f0:	e000      	b.n	80018f4 <LTEPdpClose+0x68>
			break;
 80018f2:	46c0      	nop			; (mov r8, r8)
		}
	}
	LTEPassiveBuffer();
 80018f4:	f000 f8fa 	bl	8001aec <LTEPassiveBuffer>
}
 80018f8:	46c0      	nop			; (mov r8, r8)
 80018fa:	46bd      	mov	sp, r7
 80018fc:	b003      	add	sp, #12
 80018fe:	bd90      	pop	{r4, r7, pc}
 8001900:	08008544 	.word	0x08008544
 8001904:	20000474 	.word	0x20000474
 8001908:	200001ba 	.word	0x200001ba
 800190c:	2000024c 	.word	0x2000024c

08001910 <LTEPdpConfigure>:

void LTEPdpConfigure() {
 8001910:	b590      	push	{r4, r7, lr}
 8001912:	b0a3      	sub	sp, #140	; 0x8c
 8001914:	af20      	add	r7, sp, #128	; 0x80
	DebugSendData("LTE Pdp Configure", 17);
 8001916:	4b1b      	ldr	r3, [pc, #108]	; (8001984 <LTEPdpConfigure+0x74>)
 8001918:	2111      	movs	r1, #17
 800191a:	0018      	movs	r0, r3
 800191c:	f002 f87e 	bl	8003a1c <DebugSendData>
	LTEActiveBuffer();
 8001920:	f000 f8c6 	bl	8001ab0 <LTEActiveBuffer>
	LTESendData(huart1, lteMessages.AT_QICSGP, sizeof(lteMessages.AT_QICSGP));
 8001924:	4c18      	ldr	r4, [pc, #96]	; (8001988 <LTEPdpConfigure+0x78>)
 8001926:	231d      	movs	r3, #29
 8001928:	931e      	str	r3, [sp, #120]	; 0x78
 800192a:	4b18      	ldr	r3, [pc, #96]	; (800198c <LTEPdpConfigure+0x7c>)
 800192c:	931d      	str	r3, [sp, #116]	; 0x74
 800192e:	466b      	mov	r3, sp
 8001930:	0018      	movs	r0, r3
 8001932:	0023      	movs	r3, r4
 8001934:	3310      	adds	r3, #16
 8001936:	2274      	movs	r2, #116	; 0x74
 8001938:	0019      	movs	r1, r3
 800193a:	f006 f88f 	bl	8007a5c <memcpy>
 800193e:	6820      	ldr	r0, [r4, #0]
 8001940:	6861      	ldr	r1, [r4, #4]
 8001942:	68a2      	ldr	r2, [r4, #8]
 8001944:	68e3      	ldr	r3, [r4, #12]
 8001946:	f000 f8ef 	bl	8001b28 <LTESendData>
	for (int i = 0; i < 5; ++i) {
 800194a:	2300      	movs	r3, #0
 800194c:	607b      	str	r3, [r7, #4]
 800194e:	e00e      	b.n	800196e <LTEPdpConfigure+0x5e>
		LTEResponseParserBuffer(2000, lteMessages.AT_QICSGP, sizeof(lteMessages.AT_QICSGP));
 8001950:	490e      	ldr	r1, [pc, #56]	; (800198c <LTEPdpConfigure+0x7c>)
 8001952:	23fa      	movs	r3, #250	; 0xfa
 8001954:	00db      	lsls	r3, r3, #3
 8001956:	221d      	movs	r2, #29
 8001958:	0018      	movs	r0, r3
 800195a:	f000 f903 	bl	8001b64 <LTEResponseParserBuffer>
		if (lteParameters.uartResHeader == HEAD_OK) {
 800195e:	4b0c      	ldr	r3, [pc, #48]	; (8001990 <LTEPdpConfigure+0x80>)
 8001960:	22b4      	movs	r2, #180	; 0xb4
 8001962:	5c9b      	ldrb	r3, [r3, r2]
 8001964:	2b02      	cmp	r3, #2
 8001966:	d006      	beq.n	8001976 <LTEPdpConfigure+0x66>
	for (int i = 0; i < 5; ++i) {
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	3301      	adds	r3, #1
 800196c:	607b      	str	r3, [r7, #4]
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	2b04      	cmp	r3, #4
 8001972:	dded      	ble.n	8001950 <LTEPdpConfigure+0x40>
 8001974:	e000      	b.n	8001978 <LTEPdpConfigure+0x68>
			break;
 8001976:	46c0      	nop			; (mov r8, r8)
		}
	}
	LTEPassiveBuffer();
 8001978:	f000 f8b8 	bl	8001aec <LTEPassiveBuffer>
}
 800197c:	46c0      	nop			; (mov r8, r8)
 800197e:	46bd      	mov	sp, r7
 8001980:	b003      	add	sp, #12
 8001982:	bd90      	pop	{r4, r7, pc}
 8001984:	08008554 	.word	0x08008554
 8001988:	20000474 	.word	0x20000474
 800198c:	200001c8 	.word	0x200001c8
 8001990:	2000024c 	.word	0x2000024c

08001994 <LTESendMsg>:

void LTESendMsg() {
 8001994:	b590      	push	{r4, r7, lr}
 8001996:	b0a3      	sub	sp, #140	; 0x8c
 8001998:	af20      	add	r7, sp, #128	; 0x80
	DebugSendData("LTE Send Msg", 12);
 800199a:	4b1e      	ldr	r3, [pc, #120]	; (8001a14 <LTESendMsg+0x80>)
 800199c:	210c      	movs	r1, #12
 800199e:	0018      	movs	r0, r3
 80019a0:	f002 f83c 	bl	8003a1c <DebugSendData>
	wasteParameters.gpsAlarm=0;
 80019a4:	4b1c      	ldr	r3, [pc, #112]	; (8001a18 <LTESendMsg+0x84>)
 80019a6:	2200      	movs	r2, #0
 80019a8:	721a      	strb	r2, [r3, #8]
	LTEActiveBuffer();
 80019aa:	f000 f881 	bl	8001ab0 <LTEActiveBuffer>
	LTESendData(huart1, lteParameters.msgToSend, 128);
 80019ae:	4c1b      	ldr	r4, [pc, #108]	; (8001a1c <LTESendMsg+0x88>)
 80019b0:	2380      	movs	r3, #128	; 0x80
 80019b2:	931e      	str	r3, [sp, #120]	; 0x78
 80019b4:	4b1a      	ldr	r3, [pc, #104]	; (8001a20 <LTESendMsg+0x8c>)
 80019b6:	931d      	str	r3, [sp, #116]	; 0x74
 80019b8:	466b      	mov	r3, sp
 80019ba:	0018      	movs	r0, r3
 80019bc:	0023      	movs	r3, r4
 80019be:	3310      	adds	r3, #16
 80019c0:	2274      	movs	r2, #116	; 0x74
 80019c2:	0019      	movs	r1, r3
 80019c4:	f006 f84a 	bl	8007a5c <memcpy>
 80019c8:	6820      	ldr	r0, [r4, #0]
 80019ca:	6861      	ldr	r1, [r4, #4]
 80019cc:	68a2      	ldr	r2, [r4, #8]
 80019ce:	68e3      	ldr	r3, [r4, #12]
 80019d0:	f000 f8aa 	bl	8001b28 <LTESendData>
	for (int i = 0; i < 10; ++i) {
 80019d4:	2300      	movs	r3, #0
 80019d6:	607b      	str	r3, [r7, #4]
 80019d8:	e012      	b.n	8001a00 <LTESendMsg+0x6c>
		LTEResponseParserBuffer(2000, lteMessages.SENDDATA, sizeof(lteMessages.SENDDATA));
 80019da:	4912      	ldr	r1, [pc, #72]	; (8001a24 <LTESendMsg+0x90>)
 80019dc:	23fa      	movs	r3, #250	; 0xfa
 80019de:	00db      	lsls	r3, r3, #3
 80019e0:	2208      	movs	r2, #8
 80019e2:	0018      	movs	r0, r3
 80019e4:	f000 f8be 	bl	8001b64 <LTEResponseParserBuffer>
		if (lteParameters.uartResHeader == HEAD_OK) {
 80019e8:	4b0f      	ldr	r3, [pc, #60]	; (8001a28 <LTESendMsg+0x94>)
 80019ea:	22b4      	movs	r2, #180	; 0xb4
 80019ec:	5c9b      	ldrb	r3, [r3, r2]
 80019ee:	2b02      	cmp	r3, #2
 80019f0:	d103      	bne.n	80019fa <LTESendMsg+0x66>
			wasteParameters.preDataSendError=0;
 80019f2:	4b09      	ldr	r3, [pc, #36]	; (8001a18 <LTESendMsg+0x84>)
 80019f4:	2200      	movs	r2, #0
 80019f6:	71da      	strb	r2, [r3, #7]
			break;
 80019f8:	e005      	b.n	8001a06 <LTESendMsg+0x72>
	for (int i = 0; i < 10; ++i) {
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	3301      	adds	r3, #1
 80019fe:	607b      	str	r3, [r7, #4]
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	2b09      	cmp	r3, #9
 8001a04:	dde9      	ble.n	80019da <LTESendMsg+0x46>
		}
	}
	LTEPassiveBuffer();
 8001a06:	f000 f871 	bl	8001aec <LTEPassiveBuffer>
}
 8001a0a:	46c0      	nop			; (mov r8, r8)
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	b003      	add	sp, #12
 8001a10:	bd90      	pop	{r4, r7, pc}
 8001a12:	46c0      	nop			; (mov r8, r8)
 8001a14:	08008568 	.word	0x08008568
 8001a18:	2000079c 	.word	0x2000079c
 8001a1c:	20000474 	.word	0x20000474
 8001a20:	20000280 	.word	0x20000280
 8001a24:	20000232 	.word	0x20000232
 8001a28:	2000024c 	.word	0x2000024c

08001a2c <LTEReceiveMsg>:

void LTEReceiveMsg() {
 8001a2c:	b590      	push	{r4, r7, lr}
 8001a2e:	b0a3      	sub	sp, #140	; 0x8c
 8001a30:	af20      	add	r7, sp, #128	; 0x80
	DebugSendData("LTE Receive Msg", 15);
 8001a32:	4b1b      	ldr	r3, [pc, #108]	; (8001aa0 <LTEReceiveMsg+0x74>)
 8001a34:	210f      	movs	r1, #15
 8001a36:	0018      	movs	r0, r3
 8001a38:	f001 fff0 	bl	8003a1c <DebugSendData>
	LTEActiveBuffer();
 8001a3c:	f000 f838 	bl	8001ab0 <LTEActiveBuffer>
	LTESendData(huart1, lteMessages.AT_QIRD, sizeof(lteMessages.AT_QIRD));
 8001a40:	4c18      	ldr	r4, [pc, #96]	; (8001aa4 <LTEReceiveMsg+0x78>)
 8001a42:	230d      	movs	r3, #13
 8001a44:	931e      	str	r3, [sp, #120]	; 0x78
 8001a46:	4b18      	ldr	r3, [pc, #96]	; (8001aa8 <LTEReceiveMsg+0x7c>)
 8001a48:	931d      	str	r3, [sp, #116]	; 0x74
 8001a4a:	466b      	mov	r3, sp
 8001a4c:	0018      	movs	r0, r3
 8001a4e:	0023      	movs	r3, r4
 8001a50:	3310      	adds	r3, #16
 8001a52:	2274      	movs	r2, #116	; 0x74
 8001a54:	0019      	movs	r1, r3
 8001a56:	f006 f801 	bl	8007a5c <memcpy>
 8001a5a:	6820      	ldr	r0, [r4, #0]
 8001a5c:	6861      	ldr	r1, [r4, #4]
 8001a5e:	68a2      	ldr	r2, [r4, #8]
 8001a60:	68e3      	ldr	r3, [r4, #12]
 8001a62:	f000 f861 	bl	8001b28 <LTESendData>
	for (int i = 0; i < 5; ++i) {
 8001a66:	2300      	movs	r3, #0
 8001a68:	607b      	str	r3, [r7, #4]
 8001a6a:	e00e      	b.n	8001a8a <LTEReceiveMsg+0x5e>
		LTEResponseParserBuffer(2000, lteMessages.AT_QIRD, sizeof(lteMessages.AT_QIRD));
 8001a6c:	490e      	ldr	r1, [pc, #56]	; (8001aa8 <LTEReceiveMsg+0x7c>)
 8001a6e:	23fa      	movs	r3, #250	; 0xfa
 8001a70:	00db      	lsls	r3, r3, #3
 8001a72:	220d      	movs	r2, #13
 8001a74:	0018      	movs	r0, r3
 8001a76:	f000 f875 	bl	8001b64 <LTEResponseParserBuffer>
		if (lteParameters.uartResHeader == HEAD_OK) {
 8001a7a:	4b0c      	ldr	r3, [pc, #48]	; (8001aac <LTEReceiveMsg+0x80>)
 8001a7c:	22b4      	movs	r2, #180	; 0xb4
 8001a7e:	5c9b      	ldrb	r3, [r3, r2]
 8001a80:	2b02      	cmp	r3, #2
 8001a82:	d006      	beq.n	8001a92 <LTEReceiveMsg+0x66>
	for (int i = 0; i < 5; ++i) {
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	3301      	adds	r3, #1
 8001a88:	607b      	str	r3, [r7, #4]
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	2b04      	cmp	r3, #4
 8001a8e:	dded      	ble.n	8001a6c <LTEReceiveMsg+0x40>
 8001a90:	e000      	b.n	8001a94 <LTEReceiveMsg+0x68>
			break;
 8001a92:	46c0      	nop			; (mov r8, r8)
		}
	}
	LTEPassiveBuffer();
 8001a94:	f000 f82a 	bl	8001aec <LTEPassiveBuffer>
}
 8001a98:	46c0      	nop			; (mov r8, r8)
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	b003      	add	sp, #12
 8001a9e:	bd90      	pop	{r4, r7, pc}
 8001aa0:	08008578 	.word	0x08008578
 8001aa4:	20000474 	.word	0x20000474
 8001aa8:	20000193 	.word	0x20000193
 8001aac:	2000024c 	.word	0x2000024c

08001ab0 <LTEActiveBuffer>:

void LTEActiveBuffer() {
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	af00      	add	r7, sp, #0
	uartLTEParameters.active = 0;
 8001ab4:	4a0c      	ldr	r2, [pc, #48]	; (8001ae8 <LTEActiveBuffer+0x38>)
 8001ab6:	2381      	movs	r3, #129	; 0x81
 8001ab8:	005b      	lsls	r3, r3, #1
 8001aba:	2100      	movs	r1, #0
 8001abc:	54d1      	strb	r1, [r2, r3]
	uartLTEParameters.rxDataCounter = 0;
 8001abe:	4a0a      	ldr	r2, [pc, #40]	; (8001ae8 <LTEActiveBuffer+0x38>)
 8001ac0:	2302      	movs	r3, #2
 8001ac2:	33ff      	adds	r3, #255	; 0xff
 8001ac4:	2100      	movs	r1, #0
 8001ac6:	54d1      	strb	r1, [r2, r3]
	memset(uartLTEParameters.rxBuffer, '*', 256);
 8001ac8:	2380      	movs	r3, #128	; 0x80
 8001aca:	005a      	lsls	r2, r3, #1
 8001acc:	4b06      	ldr	r3, [pc, #24]	; (8001ae8 <LTEActiveBuffer+0x38>)
 8001ace:	212a      	movs	r1, #42	; 0x2a
 8001ad0:	0018      	movs	r0, r3
 8001ad2:	f005 ffcc 	bl	8007a6e <memset>
	uartLTEParameters.active = 1;
 8001ad6:	4a04      	ldr	r2, [pc, #16]	; (8001ae8 <LTEActiveBuffer+0x38>)
 8001ad8:	2381      	movs	r3, #129	; 0x81
 8001ada:	005b      	lsls	r3, r3, #1
 8001adc:	2101      	movs	r1, #1
 8001ade:	54d1      	strb	r1, [r2, r3]
}
 8001ae0:	46c0      	nop			; (mov r8, r8)
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	bd80      	pop	{r7, pc}
 8001ae6:	46c0      	nop			; (mov r8, r8)
 8001ae8:	200004f8 	.word	0x200004f8

08001aec <LTEPassiveBuffer>:
void LTEPassiveBuffer() {
 8001aec:	b580      	push	{r7, lr}
 8001aee:	af00      	add	r7, sp, #0
	uartLTEParameters.active = 0;
 8001af0:	4a0c      	ldr	r2, [pc, #48]	; (8001b24 <LTEPassiveBuffer+0x38>)
 8001af2:	2381      	movs	r3, #129	; 0x81
 8001af4:	005b      	lsls	r3, r3, #1
 8001af6:	2100      	movs	r1, #0
 8001af8:	54d1      	strb	r1, [r2, r3]
	memset(uartLTEParameters.rxBuffer, '*', 256);
 8001afa:	2380      	movs	r3, #128	; 0x80
 8001afc:	005a      	lsls	r2, r3, #1
 8001afe:	4b09      	ldr	r3, [pc, #36]	; (8001b24 <LTEPassiveBuffer+0x38>)
 8001b00:	212a      	movs	r1, #42	; 0x2a
 8001b02:	0018      	movs	r0, r3
 8001b04:	f005 ffb3 	bl	8007a6e <memset>
	uartLTEParameters.rxDataCounter = 0;
 8001b08:	4a06      	ldr	r2, [pc, #24]	; (8001b24 <LTEPassiveBuffer+0x38>)
 8001b0a:	2302      	movs	r3, #2
 8001b0c:	33ff      	adds	r3, #255	; 0xff
 8001b0e:	2100      	movs	r1, #0
 8001b10:	54d1      	strb	r1, [r2, r3]
	uartLTEParameters.active = 0;
 8001b12:	4a04      	ldr	r2, [pc, #16]	; (8001b24 <LTEPassiveBuffer+0x38>)
 8001b14:	2381      	movs	r3, #129	; 0x81
 8001b16:	005b      	lsls	r3, r3, #1
 8001b18:	2100      	movs	r1, #0
 8001b1a:	54d1      	strb	r1, [r2, r3]
}
 8001b1c:	46c0      	nop			; (mov r8, r8)
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bd80      	pop	{r7, pc}
 8001b22:	46c0      	nop			; (mov r8, r8)
 8001b24:	200004f8 	.word	0x200004f8

08001b28 <LTESendData>:
void LTESendData(UART_HandleTypeDef uartObj, char msg[], uint8_t msgSize) {
 8001b28:	b084      	sub	sp, #16
 8001b2a:	b5b0      	push	{r4, r5, r7, lr}
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	2510      	movs	r5, #16
 8001b30:	197c      	adds	r4, r7, r5
 8001b32:	6020      	str	r0, [r4, #0]
 8001b34:	6061      	str	r1, [r4, #4]
 8001b36:	60a2      	str	r2, [r4, #8]
 8001b38:	60e3      	str	r3, [r4, #12]
	HAL_UART_Transmit(&uartObj, (uint8_t*) msg, msgSize, HAL_MAX_DELAY); // Send message to the module
 8001b3a:	2388      	movs	r3, #136	; 0x88
 8001b3c:	2210      	movs	r2, #16
 8001b3e:	4694      	mov	ip, r2
 8001b40:	44bc      	add	ip, r7
 8001b42:	4463      	add	r3, ip
 8001b44:	781b      	ldrb	r3, [r3, #0]
 8001b46:	b29a      	uxth	r2, r3
 8001b48:	2301      	movs	r3, #1
 8001b4a:	425b      	negs	r3, r3
 8001b4c:	2194      	movs	r1, #148	; 0x94
 8001b4e:	1879      	adds	r1, r7, r1
 8001b50:	6809      	ldr	r1, [r1, #0]
 8001b52:	1978      	adds	r0, r7, r5
 8001b54:	f004 fc10 	bl	8006378 <HAL_UART_Transmit>
}
 8001b58:	46c0      	nop			; (mov r8, r8)
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bcb0      	pop	{r4, r5, r7}
 8001b5e:	bc08      	pop	{r3}
 8001b60:	b004      	add	sp, #16
 8001b62:	4718      	bx	r3

08001b64 <LTEResponseParserBuffer>:
void LTEResponseParserBuffer(uint32_t delay, char msg[], uint8_t msgSize) {
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b086      	sub	sp, #24
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	60f8      	str	r0, [r7, #12]
 8001b6c:	60b9      	str	r1, [r7, #8]
 8001b6e:	1dfb      	adds	r3, r7, #7
 8001b70:	701a      	strb	r2, [r3, #0]
	lteParameters.uartResHeader = HEAD_NONE;
 8001b72:	4b63      	ldr	r3, [pc, #396]	; (8001d00 <LTEResponseParserBuffer+0x19c>)
 8001b74:	22b4      	movs	r2, #180	; 0xb4
 8001b76:	2101      	movs	r1, #1
 8001b78:	5499      	strb	r1, [r3, r2]
	lteParameters.uartResMessage = MESG_NONE;
 8001b7a:	4b61      	ldr	r3, [pc, #388]	; (8001d00 <LTEResponseParserBuffer+0x19c>)
 8001b7c:	22b5      	movs	r2, #181	; 0xb5
 8001b7e:	2101      	movs	r1, #1
 8001b80:	5499      	strb	r1, [r3, r2]
	HAL_Delay(delay);
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	0018      	movs	r0, r3
 8001b86:	f002 f82d 	bl	8003be4 <HAL_Delay>
	DebugSendData(uartLTEParameters.rxBuffer, 196);
 8001b8a:	4b5e      	ldr	r3, [pc, #376]	; (8001d04 <LTEResponseParserBuffer+0x1a0>)
 8001b8c:	21c4      	movs	r1, #196	; 0xc4
 8001b8e:	0018      	movs	r0, r3
 8001b90:	f001 ff44 	bl	8003a1c <DebugSendData>
	SearchStatu();
 8001b94:	f000 f918 	bl	8001dc8 <SearchStatu>
	if (lteParameters.uartResHeader == HEAD_NONE) {
 8001b98:	4b59      	ldr	r3, [pc, #356]	; (8001d00 <LTEResponseParserBuffer+0x19c>)
 8001b9a:	22b4      	movs	r2, #180	; 0xb4
 8001b9c:	5c9b      	ldrb	r3, [r3, r2]
 8001b9e:	2b01      	cmp	r3, #1
 8001ba0:	d105      	bne.n	8001bae <LTEResponseParserBuffer+0x4a>
		DebugSendData("Header : None", 13);
 8001ba2:	4b59      	ldr	r3, [pc, #356]	; (8001d08 <LTEResponseParserBuffer+0x1a4>)
 8001ba4:	210d      	movs	r1, #13
 8001ba6:	0018      	movs	r0, r3
 8001ba8:	f001 ff38 	bl	8003a1c <DebugSendData>
 8001bac:	e031      	b.n	8001c12 <LTEResponseParserBuffer+0xae>
	} else if (lteParameters.uartResHeader == HEAD_OK) {
 8001bae:	4b54      	ldr	r3, [pc, #336]	; (8001d00 <LTEResponseParserBuffer+0x19c>)
 8001bb0:	22b4      	movs	r2, #180	; 0xb4
 8001bb2:	5c9b      	ldrb	r3, [r3, r2]
 8001bb4:	2b02      	cmp	r3, #2
 8001bb6:	d109      	bne.n	8001bcc <LTEResponseParserBuffer+0x68>
		lteParameters.powerState=PWR_ACTIVE;
 8001bb8:	4b51      	ldr	r3, [pc, #324]	; (8001d00 <LTEResponseParserBuffer+0x19c>)
 8001bba:	22b6      	movs	r2, #182	; 0xb6
 8001bbc:	2102      	movs	r1, #2
 8001bbe:	5499      	strb	r1, [r3, r2]
		DebugSendData("Header : OK", 12);
 8001bc0:	4b52      	ldr	r3, [pc, #328]	; (8001d0c <LTEResponseParserBuffer+0x1a8>)
 8001bc2:	210c      	movs	r1, #12
 8001bc4:	0018      	movs	r0, r3
 8001bc6:	f001 ff29 	bl	8003a1c <DebugSendData>
 8001bca:	e022      	b.n	8001c12 <LTEResponseParserBuffer+0xae>
	} else if (lteParameters.uartResHeader == HEAD_ERROR) {
 8001bcc:	4b4c      	ldr	r3, [pc, #304]	; (8001d00 <LTEResponseParserBuffer+0x19c>)
 8001bce:	22b4      	movs	r2, #180	; 0xb4
 8001bd0:	5c9b      	ldrb	r3, [r3, r2]
 8001bd2:	2b03      	cmp	r3, #3
 8001bd4:	d109      	bne.n	8001bea <LTEResponseParserBuffer+0x86>
		lteParameters.powerState=PWR_ACTIVE;
 8001bd6:	4b4a      	ldr	r3, [pc, #296]	; (8001d00 <LTEResponseParserBuffer+0x19c>)
 8001bd8:	22b6      	movs	r2, #182	; 0xb6
 8001bda:	2102      	movs	r1, #2
 8001bdc:	5499      	strb	r1, [r3, r2]
		DebugSendData("Header : Error", 14);
 8001bde:	4b4c      	ldr	r3, [pc, #304]	; (8001d10 <LTEResponseParserBuffer+0x1ac>)
 8001be0:	210e      	movs	r1, #14
 8001be2:	0018      	movs	r0, r3
 8001be4:	f001 ff1a 	bl	8003a1c <DebugSendData>
 8001be8:	e013      	b.n	8001c12 <LTEResponseParserBuffer+0xae>
	} else if (lteParameters.uartResHeader == HEAD_READY) {
 8001bea:	4b45      	ldr	r3, [pc, #276]	; (8001d00 <LTEResponseParserBuffer+0x19c>)
 8001bec:	22b4      	movs	r2, #180	; 0xb4
 8001bee:	5c9b      	ldrb	r3, [r3, r2]
 8001bf0:	2b04      	cmp	r3, #4
 8001bf2:	d109      	bne.n	8001c08 <LTEResponseParserBuffer+0xa4>
		lteParameters.powerState=PWR_ACTIVE;
 8001bf4:	4b42      	ldr	r3, [pc, #264]	; (8001d00 <LTEResponseParserBuffer+0x19c>)
 8001bf6:	22b6      	movs	r2, #182	; 0xb6
 8001bf8:	2102      	movs	r1, #2
 8001bfa:	5499      	strb	r1, [r3, r2]
		DebugSendData("Header : Ready", 14);
 8001bfc:	4b45      	ldr	r3, [pc, #276]	; (8001d14 <LTEResponseParserBuffer+0x1b0>)
 8001bfe:	210e      	movs	r1, #14
 8001c00:	0018      	movs	r0, r3
 8001c02:	f001 ff0b 	bl	8003a1c <DebugSendData>
 8001c06:	e004      	b.n	8001c12 <LTEResponseParserBuffer+0xae>
	} else {
		DebugSendData("Header : Not Found", 18);
 8001c08:	4b43      	ldr	r3, [pc, #268]	; (8001d18 <LTEResponseParserBuffer+0x1b4>)
 8001c0a:	2112      	movs	r1, #18
 8001c0c:	0018      	movs	r0, r3
 8001c0e:	f001 ff05 	bl	8003a1c <DebugSendData>
	}

	if (msg == lteMessages.AT_CGSN) {
 8001c12:	68ba      	ldr	r2, [r7, #8]
 8001c14:	4b41      	ldr	r3, [pc, #260]	; (8001d1c <LTEResponseParserBuffer+0x1b8>)
 8001c16:	429a      	cmp	r2, r3
 8001c18:	d116      	bne.n	8001c48 <LTEResponseParserBuffer+0xe4>
		if (lteParameters.uartResHeader == HEAD_OK) {
 8001c1a:	4b39      	ldr	r3, [pc, #228]	; (8001d00 <LTEResponseParserBuffer+0x19c>)
 8001c1c:	22b4      	movs	r2, #180	; 0xb4
 8001c1e:	5c9b      	ldrb	r3, [r3, r2]
 8001c20:	2b02      	cmp	r3, #2
 8001c22:	d111      	bne.n	8001c48 <LTEResponseParserBuffer+0xe4>
			for (int i = 0; i < 15; ++i) {
 8001c24:	2300      	movs	r3, #0
 8001c26:	617b      	str	r3, [r7, #20]
 8001c28:	e00b      	b.n	8001c42 <LTEResponseParserBuffer+0xde>
				lteParameters.imeiNum[i] = uartLTEParameters.rxBuffer[sizeof(lteMessages.AT_CGSN) + 1 + i];
 8001c2a:	697b      	ldr	r3, [r7, #20]
 8001c2c:	330a      	adds	r3, #10
 8001c2e:	4a35      	ldr	r2, [pc, #212]	; (8001d04 <LTEResponseParserBuffer+0x1a0>)
 8001c30:	5cd1      	ldrb	r1, [r2, r3]
 8001c32:	4a33      	ldr	r2, [pc, #204]	; (8001d00 <LTEResponseParserBuffer+0x19c>)
 8001c34:	697b      	ldr	r3, [r7, #20]
 8001c36:	18d3      	adds	r3, r2, r3
 8001c38:	1c0a      	adds	r2, r1, #0
 8001c3a:	701a      	strb	r2, [r3, #0]
			for (int i = 0; i < 15; ++i) {
 8001c3c:	697b      	ldr	r3, [r7, #20]
 8001c3e:	3301      	adds	r3, #1
 8001c40:	617b      	str	r3, [r7, #20]
 8001c42:	697b      	ldr	r3, [r7, #20]
 8001c44:	2b0e      	cmp	r3, #14
 8001c46:	ddf0      	ble.n	8001c2a <LTEResponseParserBuffer+0xc6>
			}
		} else {
		}
	}

	if (msg == lteMessages.AT_CIMI) {
 8001c48:	68ba      	ldr	r2, [r7, #8]
 8001c4a:	4b35      	ldr	r3, [pc, #212]	; (8001d20 <LTEResponseParserBuffer+0x1bc>)
 8001c4c:	429a      	cmp	r2, r3
 8001c4e:	d117      	bne.n	8001c80 <LTEResponseParserBuffer+0x11c>
		if (lteParameters.uartResHeader == HEAD_OK) {
 8001c50:	4b2b      	ldr	r3, [pc, #172]	; (8001d00 <LTEResponseParserBuffer+0x19c>)
 8001c52:	22b4      	movs	r2, #180	; 0xb4
 8001c54:	5c9b      	ldrb	r3, [r3, r2]
 8001c56:	2b02      	cmp	r3, #2
 8001c58:	d112      	bne.n	8001c80 <LTEResponseParserBuffer+0x11c>
			for (int i = 0; i < 15; ++i) {
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	613b      	str	r3, [r7, #16]
 8001c5e:	e00c      	b.n	8001c7a <LTEResponseParserBuffer+0x116>
				lteParameters.imsiNum[i] = uartLTEParameters.rxBuffer[sizeof(lteMessages.AT_CIMI) + 1 + i];
 8001c60:	693b      	ldr	r3, [r7, #16]
 8001c62:	330a      	adds	r3, #10
 8001c64:	4a27      	ldr	r2, [pc, #156]	; (8001d04 <LTEResponseParserBuffer+0x1a0>)
 8001c66:	5cd1      	ldrb	r1, [r2, r3]
 8001c68:	4a25      	ldr	r2, [pc, #148]	; (8001d00 <LTEResponseParserBuffer+0x19c>)
 8001c6a:	693b      	ldr	r3, [r7, #16]
 8001c6c:	18d3      	adds	r3, r2, r3
 8001c6e:	330f      	adds	r3, #15
 8001c70:	1c0a      	adds	r2, r1, #0
 8001c72:	701a      	strb	r2, [r3, #0]
			for (int i = 0; i < 15; ++i) {
 8001c74:	693b      	ldr	r3, [r7, #16]
 8001c76:	3301      	adds	r3, #1
 8001c78:	613b      	str	r3, [r7, #16]
 8001c7a:	693b      	ldr	r3, [r7, #16]
 8001c7c:	2b0e      	cmp	r3, #14
 8001c7e:	ddef      	ble.n	8001c60 <LTEResponseParserBuffer+0xfc>
			}
		} else {
		}
	}

	if (msg == lteMessages.AT_QIRD) {
 8001c80:	68ba      	ldr	r2, [r7, #8]
 8001c82:	4b28      	ldr	r3, [pc, #160]	; (8001d24 <LTEResponseParserBuffer+0x1c0>)
 8001c84:	429a      	cmp	r2, r3
 8001c86:	d116      	bne.n	8001cb6 <LTEResponseParserBuffer+0x152>
		if (SearchMessage(0, "AGPS", 4)) {
 8001c88:	4b27      	ldr	r3, [pc, #156]	; (8001d28 <LTEResponseParserBuffer+0x1c4>)
 8001c8a:	2204      	movs	r2, #4
 8001c8c:	0019      	movs	r1, r3
 8001c8e:	2000      	movs	r0, #0
 8001c90:	f000 f85a 	bl	8001d48 <SearchMessage>
 8001c94:	1e03      	subs	r3, r0, #0
 8001c96:	d00e      	beq.n	8001cb6 <LTEResponseParserBuffer+0x152>
			lteParameters.uartResMessage = MESG_AGPS;
 8001c98:	4b19      	ldr	r3, [pc, #100]	; (8001d00 <LTEResponseParserBuffer+0x19c>)
 8001c9a:	22b5      	movs	r2, #181	; 0xb5
 8001c9c:	2103      	movs	r1, #3
 8001c9e:	5499      	strb	r1, [r3, r2]
			wasteParameters.gpsAlarm=1;
 8001ca0:	4b22      	ldr	r3, [pc, #136]	; (8001d2c <LTEResponseParserBuffer+0x1c8>)
 8001ca2:	2201      	movs	r2, #1
 8001ca4:	721a      	strb	r2, [r3, #8]
			wasteParameters.gpsAlarmCount = 0;
 8001ca6:	4b21      	ldr	r3, [pc, #132]	; (8001d2c <LTEResponseParserBuffer+0x1c8>)
 8001ca8:	2200      	movs	r2, #0
 8001caa:	725a      	strb	r2, [r3, #9]
			DebugSendData("Message : Gps Alarm", 20);
 8001cac:	4b20      	ldr	r3, [pc, #128]	; (8001d30 <LTEResponseParserBuffer+0x1cc>)
 8001cae:	2114      	movs	r1, #20
 8001cb0:	0018      	movs	r0, r3
 8001cb2:	f001 feb3 	bl	8003a1c <DebugSendData>
		}
	}

	if (msg == lteMessages.AT_QPOWD || msg == lteMessages.POWER_ON || msg == lteMessages.POWER_OFF) {
 8001cb6:	68ba      	ldr	r2, [r7, #8]
 8001cb8:	4b1e      	ldr	r3, [pc, #120]	; (8001d34 <LTEResponseParserBuffer+0x1d0>)
 8001cba:	429a      	cmp	r2, r3
 8001cbc:	d007      	beq.n	8001cce <LTEResponseParserBuffer+0x16a>
 8001cbe:	68ba      	ldr	r2, [r7, #8]
 8001cc0:	4b1d      	ldr	r3, [pc, #116]	; (8001d38 <LTEResponseParserBuffer+0x1d4>)
 8001cc2:	429a      	cmp	r2, r3
 8001cc4:	d003      	beq.n	8001cce <LTEResponseParserBuffer+0x16a>
 8001cc6:	68ba      	ldr	r2, [r7, #8]
 8001cc8:	4b1c      	ldr	r3, [pc, #112]	; (8001d3c <LTEResponseParserBuffer+0x1d8>)
 8001cca:	429a      	cmp	r2, r3
 8001ccc:	d114      	bne.n	8001cf8 <LTEResponseParserBuffer+0x194>
		if (SearchMessage(0, "DOWN", 4)) {
 8001cce:	4b1c      	ldr	r3, [pc, #112]	; (8001d40 <LTEResponseParserBuffer+0x1dc>)
 8001cd0:	2204      	movs	r2, #4
 8001cd2:	0019      	movs	r1, r3
 8001cd4:	2000      	movs	r0, #0
 8001cd6:	f000 f837 	bl	8001d48 <SearchMessage>
 8001cda:	1e03      	subs	r3, r0, #0
 8001cdc:	d00c      	beq.n	8001cf8 <LTEResponseParserBuffer+0x194>
			lteParameters.uartResMessage = MESG_POWERDOWN;
 8001cde:	4b08      	ldr	r3, [pc, #32]	; (8001d00 <LTEResponseParserBuffer+0x19c>)
 8001ce0:	22b5      	movs	r2, #181	; 0xb5
 8001ce2:	2102      	movs	r1, #2
 8001ce4:	5499      	strb	r1, [r3, r2]
			lteParameters.powerState=PWR_PASSIVE;
 8001ce6:	4b06      	ldr	r3, [pc, #24]	; (8001d00 <LTEResponseParserBuffer+0x19c>)
 8001ce8:	22b6      	movs	r2, #182	; 0xb6
 8001cea:	2101      	movs	r1, #1
 8001cec:	5499      	strb	r1, [r3, r2]
			DebugSendData("Message : Power Down", 20);
 8001cee:	4b15      	ldr	r3, [pc, #84]	; (8001d44 <LTEResponseParserBuffer+0x1e0>)
 8001cf0:	2114      	movs	r1, #20
 8001cf2:	0018      	movs	r0, r3
 8001cf4:	f001 fe92 	bl	8003a1c <DebugSendData>
		}
	}
}
 8001cf8:	46c0      	nop			; (mov r8, r8)
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	b006      	add	sp, #24
 8001cfe:	bd80      	pop	{r7, pc}
 8001d00:	2000024c 	.word	0x2000024c
 8001d04:	200004f8 	.word	0x200004f8
 8001d08:	08008588 	.word	0x08008588
 8001d0c:	08008598 	.word	0x08008598
 8001d10:	080085a4 	.word	0x080085a4
 8001d14:	080085b4 	.word	0x080085b4
 8001d18:	080085c4 	.word	0x080085c4
 8001d1c:	20000119 	.word	0x20000119
 8001d20:	20000229 	.word	0x20000229
 8001d24:	20000193 	.word	0x20000193
 8001d28:	080085d8 	.word	0x080085d8
 8001d2c:	2000079c 	.word	0x2000079c
 8001d30:	080085e0 	.word	0x080085e0
 8001d34:	2000010d 	.word	0x2000010d
 8001d38:	2000023a 	.word	0x2000023a
 8001d3c:	20000242 	.word	0x20000242
 8001d40:	080085f4 	.word	0x080085f4
 8001d44:	080085fc 	.word	0x080085fc

08001d48 <SearchMessage>:

uint8_t SearchMessage(uint8_t startInd, char msg[], uint8_t msgSize) {
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b084      	sub	sp, #16
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6039      	str	r1, [r7, #0]
 8001d50:	0011      	movs	r1, r2
 8001d52:	1dfb      	adds	r3, r7, #7
 8001d54:	1c02      	adds	r2, r0, #0
 8001d56:	701a      	strb	r2, [r3, #0]
 8001d58:	1dbb      	adds	r3, r7, #6
 8001d5a:	1c0a      	adds	r2, r1, #0
 8001d5c:	701a      	strb	r2, [r3, #0]
	uint8_t msgInd = 0;
 8001d5e:	230f      	movs	r3, #15
 8001d60:	18fb      	adds	r3, r7, r3
 8001d62:	2200      	movs	r2, #0
 8001d64:	701a      	strb	r2, [r3, #0]
	for (int i = startInd; i < sizeof(uartLTEParameters.rxBuffer); ++i) {
 8001d66:	1dfb      	adds	r3, r7, #7
 8001d68:	781b      	ldrb	r3, [r3, #0]
 8001d6a:	60bb      	str	r3, [r7, #8]
 8001d6c:	e021      	b.n	8001db2 <SearchMessage+0x6a>
		if (uartLTEParameters.rxBuffer[i] == msg[msgInd]) {
 8001d6e:	4a15      	ldr	r2, [pc, #84]	; (8001dc4 <SearchMessage+0x7c>)
 8001d70:	68bb      	ldr	r3, [r7, #8]
 8001d72:	18d3      	adds	r3, r2, r3
 8001d74:	781a      	ldrb	r2, [r3, #0]
 8001d76:	200f      	movs	r0, #15
 8001d78:	183b      	adds	r3, r7, r0
 8001d7a:	781b      	ldrb	r3, [r3, #0]
 8001d7c:	6839      	ldr	r1, [r7, #0]
 8001d7e:	18cb      	adds	r3, r1, r3
 8001d80:	781b      	ldrb	r3, [r3, #0]
 8001d82:	429a      	cmp	r2, r3
 8001d84:	d105      	bne.n	8001d92 <SearchMessage+0x4a>
			msgInd++;
 8001d86:	183b      	adds	r3, r7, r0
 8001d88:	781a      	ldrb	r2, [r3, #0]
 8001d8a:	183b      	adds	r3, r7, r0
 8001d8c:	3201      	adds	r2, #1
 8001d8e:	701a      	strb	r2, [r3, #0]
 8001d90:	e003      	b.n	8001d9a <SearchMessage+0x52>
		} else {
			msgInd = 0;
 8001d92:	230f      	movs	r3, #15
 8001d94:	18fb      	adds	r3, r7, r3
 8001d96:	2200      	movs	r2, #0
 8001d98:	701a      	strb	r2, [r3, #0]
		}

		if (msgInd == msgSize) {
 8001d9a:	230f      	movs	r3, #15
 8001d9c:	18fa      	adds	r2, r7, r3
 8001d9e:	1dbb      	adds	r3, r7, #6
 8001da0:	7812      	ldrb	r2, [r2, #0]
 8001da2:	781b      	ldrb	r3, [r3, #0]
 8001da4:	429a      	cmp	r2, r3
 8001da6:	d101      	bne.n	8001dac <SearchMessage+0x64>
			return 1;
 8001da8:	2301      	movs	r3, #1
 8001daa:	e006      	b.n	8001dba <SearchMessage+0x72>
	for (int i = startInd; i < sizeof(uartLTEParameters.rxBuffer); ++i) {
 8001dac:	68bb      	ldr	r3, [r7, #8]
 8001dae:	3301      	adds	r3, #1
 8001db0:	60bb      	str	r3, [r7, #8]
 8001db2:	68bb      	ldr	r3, [r7, #8]
 8001db4:	2bff      	cmp	r3, #255	; 0xff
 8001db6:	d9da      	bls.n	8001d6e <SearchMessage+0x26>
		}
	}

	return 0;
 8001db8:	2300      	movs	r3, #0
}
 8001dba:	0018      	movs	r0, r3
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	b004      	add	sp, #16
 8001dc0:	bd80      	pop	{r7, pc}
 8001dc2:	46c0      	nop			; (mov r8, r8)
 8001dc4:	200004f8 	.word	0x200004f8

08001dc8 <SearchStatu>:

void SearchStatu() {
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b084      	sub	sp, #16
 8001dcc:	af00      	add	r7, sp, #0
	lteParameters.uartResHeader = HEAD_NONE;
 8001dce:	4b1e      	ldr	r3, [pc, #120]	; (8001e48 <SearchStatu+0x80>)
 8001dd0:	22b4      	movs	r2, #180	; 0xb4
 8001dd2:	2101      	movs	r1, #1
 8001dd4:	5499      	strb	r1, [r3, r2]

	char msgOk[] = "OK";
 8001dd6:	200c      	movs	r0, #12
 8001dd8:	183b      	adds	r3, r7, r0
 8001dda:	4a1c      	ldr	r2, [pc, #112]	; (8001e4c <SearchStatu+0x84>)
 8001ddc:	8811      	ldrh	r1, [r2, #0]
 8001dde:	8019      	strh	r1, [r3, #0]
 8001de0:	7892      	ldrb	r2, [r2, #2]
 8001de2:	709a      	strb	r2, [r3, #2]
	char msgErr[] = "ERROR";
 8001de4:	1d3b      	adds	r3, r7, #4
 8001de6:	4a1a      	ldr	r2, [pc, #104]	; (8001e50 <SearchStatu+0x88>)
 8001de8:	6811      	ldr	r1, [r2, #0]
 8001dea:	6019      	str	r1, [r3, #0]
 8001dec:	8892      	ldrh	r2, [r2, #4]
 8001dee:	809a      	strh	r2, [r3, #4]
	char msgRdy[] = "RDY";
 8001df0:	003b      	movs	r3, r7
 8001df2:	4a18      	ldr	r2, [pc, #96]	; (8001e54 <SearchStatu+0x8c>)
 8001df4:	601a      	str	r2, [r3, #0]

	if (SearchMessage(0, msgOk, 2))
 8001df6:	183b      	adds	r3, r7, r0
 8001df8:	2202      	movs	r2, #2
 8001dfa:	0019      	movs	r1, r3
 8001dfc:	2000      	movs	r0, #0
 8001dfe:	f7ff ffa3 	bl	8001d48 <SearchMessage>
 8001e02:	1e03      	subs	r3, r0, #0
 8001e04:	d003      	beq.n	8001e0e <SearchStatu+0x46>
		lteParameters.uartResHeader = HEAD_OK;
 8001e06:	4b10      	ldr	r3, [pc, #64]	; (8001e48 <SearchStatu+0x80>)
 8001e08:	22b4      	movs	r2, #180	; 0xb4
 8001e0a:	2102      	movs	r1, #2
 8001e0c:	5499      	strb	r1, [r3, r2]
	if (SearchMessage(0, msgErr, 5))
 8001e0e:	1d3b      	adds	r3, r7, #4
 8001e10:	2205      	movs	r2, #5
 8001e12:	0019      	movs	r1, r3
 8001e14:	2000      	movs	r0, #0
 8001e16:	f7ff ff97 	bl	8001d48 <SearchMessage>
 8001e1a:	1e03      	subs	r3, r0, #0
 8001e1c:	d003      	beq.n	8001e26 <SearchStatu+0x5e>
		lteParameters.uartResHeader = HEAD_ERROR;
 8001e1e:	4b0a      	ldr	r3, [pc, #40]	; (8001e48 <SearchStatu+0x80>)
 8001e20:	22b4      	movs	r2, #180	; 0xb4
 8001e22:	2103      	movs	r1, #3
 8001e24:	5499      	strb	r1, [r3, r2]
	if (SearchMessage(0, msgRdy, 3))
 8001e26:	003b      	movs	r3, r7
 8001e28:	2203      	movs	r2, #3
 8001e2a:	0019      	movs	r1, r3
 8001e2c:	2000      	movs	r0, #0
 8001e2e:	f7ff ff8b 	bl	8001d48 <SearchMessage>
 8001e32:	1e03      	subs	r3, r0, #0
 8001e34:	d003      	beq.n	8001e3e <SearchStatu+0x76>
		lteParameters.uartResHeader = HEAD_READY;
 8001e36:	4b04      	ldr	r3, [pc, #16]	; (8001e48 <SearchStatu+0x80>)
 8001e38:	22b4      	movs	r2, #180	; 0xb4
 8001e3a:	2104      	movs	r1, #4
 8001e3c:	5499      	strb	r1, [r3, r2]
}
 8001e3e:	46c0      	nop			; (mov r8, r8)
 8001e40:	46bd      	mov	sp, r7
 8001e42:	b004      	add	sp, #16
 8001e44:	bd80      	pop	{r7, pc}
 8001e46:	46c0      	nop			; (mov r8, r8)
 8001e48:	2000024c 	.word	0x2000024c
 8001e4c:	08008614 	.word	0x08008614
 8001e50:	08008618 	.word	0x08008618
 8001e54:	00594452 	.word	0x00594452

08001e58 <ConvertIdToChar>:

char ConvertIdToChar(uint8_t id) {
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b084      	sub	sp, #16
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	0002      	movs	r2, r0
 8001e60:	1dfb      	adds	r3, r7, #7
 8001e62:	701a      	strb	r2, [r3, #0]
	char retVal = '1';
 8001e64:	230f      	movs	r3, #15
 8001e66:	18fb      	adds	r3, r7, r3
 8001e68:	2231      	movs	r2, #49	; 0x31
 8001e6a:	701a      	strb	r2, [r3, #0]
	switch (id) {
 8001e6c:	1dfb      	adds	r3, r7, #7
 8001e6e:	781b      	ldrb	r3, [r3, #0]
 8001e70:	2b09      	cmp	r3, #9
 8001e72:	d836      	bhi.n	8001ee2 <ConvertIdToChar+0x8a>
 8001e74:	009a      	lsls	r2, r3, #2
 8001e76:	4b1f      	ldr	r3, [pc, #124]	; (8001ef4 <ConvertIdToChar+0x9c>)
 8001e78:	18d3      	adds	r3, r2, r3
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	469f      	mov	pc, r3
	case 0:
		retVal = '0';
 8001e7e:	230f      	movs	r3, #15
 8001e80:	18fb      	adds	r3, r7, r3
 8001e82:	2230      	movs	r2, #48	; 0x30
 8001e84:	701a      	strb	r2, [r3, #0]
		break;
 8001e86:	e02d      	b.n	8001ee4 <ConvertIdToChar+0x8c>
	case 1:
		retVal = '1';
 8001e88:	230f      	movs	r3, #15
 8001e8a:	18fb      	adds	r3, r7, r3
 8001e8c:	2231      	movs	r2, #49	; 0x31
 8001e8e:	701a      	strb	r2, [r3, #0]
		break;
 8001e90:	e028      	b.n	8001ee4 <ConvertIdToChar+0x8c>
	case 2:
		retVal = '2';
 8001e92:	230f      	movs	r3, #15
 8001e94:	18fb      	adds	r3, r7, r3
 8001e96:	2232      	movs	r2, #50	; 0x32
 8001e98:	701a      	strb	r2, [r3, #0]
		break;
 8001e9a:	e023      	b.n	8001ee4 <ConvertIdToChar+0x8c>
	case 3:
		retVal = '3';
 8001e9c:	230f      	movs	r3, #15
 8001e9e:	18fb      	adds	r3, r7, r3
 8001ea0:	2233      	movs	r2, #51	; 0x33
 8001ea2:	701a      	strb	r2, [r3, #0]
		break;
 8001ea4:	e01e      	b.n	8001ee4 <ConvertIdToChar+0x8c>
	case 4:
		retVal = '4';
 8001ea6:	230f      	movs	r3, #15
 8001ea8:	18fb      	adds	r3, r7, r3
 8001eaa:	2234      	movs	r2, #52	; 0x34
 8001eac:	701a      	strb	r2, [r3, #0]
		break;
 8001eae:	e019      	b.n	8001ee4 <ConvertIdToChar+0x8c>
	case 5:
		retVal = '5';
 8001eb0:	230f      	movs	r3, #15
 8001eb2:	18fb      	adds	r3, r7, r3
 8001eb4:	2235      	movs	r2, #53	; 0x35
 8001eb6:	701a      	strb	r2, [r3, #0]
		break;
 8001eb8:	e014      	b.n	8001ee4 <ConvertIdToChar+0x8c>
	case 6:
		retVal = '6';
 8001eba:	230f      	movs	r3, #15
 8001ebc:	18fb      	adds	r3, r7, r3
 8001ebe:	2236      	movs	r2, #54	; 0x36
 8001ec0:	701a      	strb	r2, [r3, #0]
		break;
 8001ec2:	e00f      	b.n	8001ee4 <ConvertIdToChar+0x8c>
	case 7:
		retVal = '7';
 8001ec4:	230f      	movs	r3, #15
 8001ec6:	18fb      	adds	r3, r7, r3
 8001ec8:	2237      	movs	r2, #55	; 0x37
 8001eca:	701a      	strb	r2, [r3, #0]
		break;
 8001ecc:	e00a      	b.n	8001ee4 <ConvertIdToChar+0x8c>
	case 8:
		retVal = '8';
 8001ece:	230f      	movs	r3, #15
 8001ed0:	18fb      	adds	r3, r7, r3
 8001ed2:	2238      	movs	r2, #56	; 0x38
 8001ed4:	701a      	strb	r2, [r3, #0]
		break;
 8001ed6:	e005      	b.n	8001ee4 <ConvertIdToChar+0x8c>
	case 9:
		retVal = '9';
 8001ed8:	230f      	movs	r3, #15
 8001eda:	18fb      	adds	r3, r7, r3
 8001edc:	2239      	movs	r2, #57	; 0x39
 8001ede:	701a      	strb	r2, [r3, #0]
		break;
 8001ee0:	e000      	b.n	8001ee4 <ConvertIdToChar+0x8c>
	default:
		break;
 8001ee2:	46c0      	nop			; (mov r8, r8)
	}
	return retVal;
 8001ee4:	230f      	movs	r3, #15
 8001ee6:	18fb      	adds	r3, r7, r3
 8001ee8:	781b      	ldrb	r3, [r3, #0]
}
 8001eea:	0018      	movs	r0, r3
 8001eec:	46bd      	mov	sp, r7
 8001eee:	b004      	add	sp, #16
 8001ef0:	bd80      	pop	{r7, pc}
 8001ef2:	46c0      	nop			; (mov r8, r8)
 8001ef4:	0800874c 	.word	0x0800874c

08001ef8 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001efc:	f001 fe02 	bl	8003b04 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001f00:	f000 f842 	bl	8001f88 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001f04:	f7ff f810 	bl	8000f28 <MX_GPIO_Init>
	MX_RTC_Init();
 8001f08:	f001 f9b6 	bl	8003278 <MX_RTC_Init>
	MX_TIM2_Init();
 8001f0c:	f001 fabe 	bl	800348c <MX_TIM2_Init>
	MX_USART1_UART_Init();
 8001f10:	f001 fb40 	bl	8003594 <MX_USART1_UART_Init>
	MX_USART2_UART_Init();
 8001f14:	f001 fb6e 	bl	80035f4 <MX_USART2_UART_Init>
	MX_ADC_Init();
 8001f18:	f7fe fef2 	bl	8000d00 <MX_ADC_Init>
	/* USER CODE BEGIN 2 */
	UartSettings();
 8001f1c:	f001 fc20 	bl	8003760 <UartSettings>
	WasteInit();
 8001f20:	f001 fd24 	bl	800396c <WasteInit>

	HAL_Delay(5000);
 8001f24:	4b13      	ldr	r3, [pc, #76]	; (8001f74 <main+0x7c>)
 8001f26:	0018      	movs	r0, r3
 8001f28:	f001 fe5c 	bl	8003be4 <HAL_Delay>
	DebugSendData("Start App", 9);
 8001f2c:	4b12      	ldr	r3, [pc, #72]	; (8001f78 <main+0x80>)
 8001f2e:	2109      	movs	r1, #9
 8001f30:	0018      	movs	r0, r3
 8001f32:	f001 fd73 	bl	8003a1c <DebugSendData>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		DebugSendData("While Start", 11);
 8001f36:	4b11      	ldr	r3, [pc, #68]	; (8001f7c <main+0x84>)
 8001f38:	210b      	movs	r1, #11
 8001f3a:	0018      	movs	r0, r3
 8001f3c:	f001 fd6e 	bl	8003a1c <DebugSendData>
		HAL_Delay(1000);
 8001f40:	23fa      	movs	r3, #250	; 0xfa
 8001f42:	009b      	lsls	r3, r3, #2
 8001f44:	0018      	movs	r0, r3
 8001f46:	f001 fe4d 	bl	8003be4 <HAL_Delay>
		if (rtcParameters.wakeUpFlag) {
 8001f4a:	4b0d      	ldr	r3, [pc, #52]	; (8001f80 <main+0x88>)
 8001f4c:	781b      	ldrb	r3, [r3, #0]
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d001      	beq.n	8001f56 <main+0x5e>
			MainProc();
 8001f52:	f000 f895 	bl	8002080 <MainProc>
		}
		rtcParameters.wakeUpFlag = 0;
 8001f56:	4b0a      	ldr	r3, [pc, #40]	; (8001f80 <main+0x88>)
 8001f58:	2200      	movs	r2, #0
 8001f5a:	701a      	strb	r2, [r3, #0]
		DebugSendData("Sleep Mode", 10);
 8001f5c:	4b09      	ldr	r3, [pc, #36]	; (8001f84 <main+0x8c>)
 8001f5e:	210a      	movs	r1, #10
 8001f60:	0018      	movs	r0, r3
 8001f62:	f001 fd5b 	bl	8003a1c <DebugSendData>
		HAL_SuspendTick();
 8001f66:	f001 fe61 	bl	8003c2c <HAL_SuspendTick>
		HAL_PWR_EnterSTOPMode( PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 8001f6a:	2101      	movs	r1, #1
 8001f6c:	2001      	movs	r0, #1
 8001f6e:	f002 fd71 	bl	8004a54 <HAL_PWR_EnterSTOPMode>
		DebugSendData("While Start", 11);
 8001f72:	e7e0      	b.n	8001f36 <main+0x3e>
 8001f74:	00001388 	.word	0x00001388
 8001f78:	08008620 	.word	0x08008620
 8001f7c:	0800862c 	.word	0x0800862c
 8001f80:	20000308 	.word	0x20000308
 8001f84:	08008638 	.word	0x08008638

08001f88 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8001f88:	b590      	push	{r4, r7, lr}
 8001f8a:	b09d      	sub	sp, #116	; 0x74
 8001f8c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8001f8e:	2438      	movs	r4, #56	; 0x38
 8001f90:	193b      	adds	r3, r7, r4
 8001f92:	0018      	movs	r0, r3
 8001f94:	2338      	movs	r3, #56	; 0x38
 8001f96:	001a      	movs	r2, r3
 8001f98:	2100      	movs	r1, #0
 8001f9a:	f005 fd68 	bl	8007a6e <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8001f9e:	2324      	movs	r3, #36	; 0x24
 8001fa0:	18fb      	adds	r3, r7, r3
 8001fa2:	0018      	movs	r0, r3
 8001fa4:	2314      	movs	r3, #20
 8001fa6:	001a      	movs	r2, r3
 8001fa8:	2100      	movs	r1, #0
 8001faa:	f005 fd60 	bl	8007a6e <memset>
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 8001fae:	003b      	movs	r3, r7
 8001fb0:	0018      	movs	r0, r3
 8001fb2:	2324      	movs	r3, #36	; 0x24
 8001fb4:	001a      	movs	r2, r3
 8001fb6:	2100      	movs	r1, #0
 8001fb8:	f005 fd59 	bl	8007a6e <memset>

	/** Configure the main internal regulator output voltage
	 */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001fbc:	4b2d      	ldr	r3, [pc, #180]	; (8002074 <SystemClock_Config+0xec>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	4a2d      	ldr	r2, [pc, #180]	; (8002078 <SystemClock_Config+0xf0>)
 8001fc2:	401a      	ands	r2, r3
 8001fc4:	4b2b      	ldr	r3, [pc, #172]	; (8002074 <SystemClock_Config+0xec>)
 8001fc6:	2180      	movs	r1, #128	; 0x80
 8001fc8:	0109      	lsls	r1, r1, #4
 8001fca:	430a      	orrs	r2, r1
 8001fcc:	601a      	str	r2, [r3, #0]
	/** Configure LSE Drive Capability
	 */
	HAL_PWR_EnableBkUpAccess();
 8001fce:	f002 fd33 	bl	8004a38 <HAL_PWR_EnableBkUpAccess>
	__HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001fd2:	4b2a      	ldr	r3, [pc, #168]	; (800207c <SystemClock_Config+0xf4>)
 8001fd4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001fd6:	4b29      	ldr	r3, [pc, #164]	; (800207c <SystemClock_Config+0xf4>)
 8001fd8:	4927      	ldr	r1, [pc, #156]	; (8002078 <SystemClock_Config+0xf0>)
 8001fda:	400a      	ands	r2, r1
 8001fdc:	651a      	str	r2, [r3, #80]	; 0x50
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI | RCC_OSCILLATORTYPE_LSE;
 8001fde:	193b      	adds	r3, r7, r4
 8001fe0:	2206      	movs	r2, #6
 8001fe2:	601a      	str	r2, [r3, #0]
	RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001fe4:	193b      	adds	r3, r7, r4
 8001fe6:	2280      	movs	r2, #128	; 0x80
 8001fe8:	0052      	lsls	r2, r2, #1
 8001fea:	609a      	str	r2, [r3, #8]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001fec:	193b      	adds	r3, r7, r4
 8001fee:	2201      	movs	r2, #1
 8001ff0:	60da      	str	r2, [r3, #12]
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001ff2:	193b      	adds	r3, r7, r4
 8001ff4:	2210      	movs	r2, #16
 8001ff6:	611a      	str	r2, [r3, #16]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001ff8:	193b      	adds	r3, r7, r4
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	629a      	str	r2, [r3, #40]	; 0x28
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8001ffe:	193b      	adds	r3, r7, r4
 8002000:	0018      	movs	r0, r3
 8002002:	f002 fd83 	bl	8004b0c <HAL_RCC_OscConfig>
 8002006:	1e03      	subs	r3, r0, #0
 8002008:	d001      	beq.n	800200e <SystemClock_Config+0x86>
		Error_Handler();
 800200a:	f001 f92f 	bl	800326c <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800200e:	2124      	movs	r1, #36	; 0x24
 8002010:	187b      	adds	r3, r7, r1
 8002012:	220f      	movs	r2, #15
 8002014:	601a      	str	r2, [r3, #0]
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8002016:	187b      	adds	r3, r7, r1
 8002018:	2201      	movs	r2, #1
 800201a:	605a      	str	r2, [r3, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800201c:	187b      	adds	r3, r7, r1
 800201e:	2200      	movs	r2, #0
 8002020:	609a      	str	r2, [r3, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002022:	187b      	adds	r3, r7, r1
 8002024:	2200      	movs	r2, #0
 8002026:	60da      	str	r2, [r3, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002028:	187b      	adds	r3, r7, r1
 800202a:	2200      	movs	r2, #0
 800202c:	611a      	str	r2, [r3, #16]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 800202e:	187b      	adds	r3, r7, r1
 8002030:	2100      	movs	r1, #0
 8002032:	0018      	movs	r0, r3
 8002034:	f003 f93e 	bl	80052b4 <HAL_RCC_ClockConfig>
 8002038:	1e03      	subs	r3, r0, #0
 800203a:	d001      	beq.n	8002040 <SystemClock_Config+0xb8>
		Error_Handler();
 800203c:	f001 f916 	bl	800326c <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1 | RCC_PERIPHCLK_USART2 | RCC_PERIPHCLK_RTC;
 8002040:	003b      	movs	r3, r7
 8002042:	2223      	movs	r2, #35	; 0x23
 8002044:	601a      	str	r2, [r3, #0]
	PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002046:	003b      	movs	r3, r7
 8002048:	2200      	movs	r2, #0
 800204a:	609a      	str	r2, [r3, #8]
	PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800204c:	003b      	movs	r3, r7
 800204e:	2200      	movs	r2, #0
 8002050:	60da      	str	r2, [r3, #12]
	PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8002052:	003b      	movs	r3, r7
 8002054:	2280      	movs	r2, #128	; 0x80
 8002056:	0252      	lsls	r2, r2, #9
 8002058:	605a      	str	r2, [r3, #4]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 800205a:	003b      	movs	r3, r7
 800205c:	0018      	movs	r0, r3
 800205e:	f003 fb4d 	bl	80056fc <HAL_RCCEx_PeriphCLKConfig>
 8002062:	1e03      	subs	r3, r0, #0
 8002064:	d001      	beq.n	800206a <SystemClock_Config+0xe2>
		Error_Handler();
 8002066:	f001 f901 	bl	800326c <Error_Handler>
	}
}
 800206a:	46c0      	nop			; (mov r8, r8)
 800206c:	46bd      	mov	sp, r7
 800206e:	b01d      	add	sp, #116	; 0x74
 8002070:	bd90      	pop	{r4, r7, pc}
 8002072:	46c0      	nop			; (mov r8, r8)
 8002074:	40007000 	.word	0x40007000
 8002078:	ffffe7ff 	.word	0xffffe7ff
 800207c:	40021000 	.word	0x40021000

08002080 <MainProc>:

/* USER CODE BEGIN 4 */
void MainProc() {
 8002080:	b580      	push	{r7, lr}
 8002082:	af00      	add	r7, sp, #0
	DebugSendData("Wake Up", 7);
 8002084:	4bc0      	ldr	r3, [pc, #768]	; (8002388 <MainProc+0x308>)
 8002086:	2107      	movs	r1, #7
 8002088:	0018      	movs	r0, r3
 800208a:	f001 fcc7 	bl	8003a1c <DebugSendData>
	adcParameters.adcReadEnableFlag = 1;
 800208e:	4bbf      	ldr	r3, [pc, #764]	; (800238c <MainProc+0x30c>)
 8002090:	2201      	movs	r2, #1
 8002092:	735a      	strb	r2, [r3, #13]
	DebugSendData("Enable Adc", 10);
 8002094:	4bbe      	ldr	r3, [pc, #760]	; (8002390 <MainProc+0x310>)
 8002096:	210a      	movs	r1, #10
 8002098:	0018      	movs	r0, r3
 800209a:	f001 fcbf 	bl	8003a1c <DebugSendData>
	HAL_ADC_Start_IT(&hadc);
 800209e:	4bbd      	ldr	r3, [pc, #756]	; (8002394 <MainProc+0x314>)
 80020a0:	0018      	movs	r0, r3
 80020a2:	f001 ff53 	bl	8003f4c <HAL_ADC_Start_IT>
	HAL_Delay(3000);
 80020a6:	4bbc      	ldr	r3, [pc, #752]	; (8002398 <MainProc+0x318>)
 80020a8:	0018      	movs	r0, r3
 80020aa:	f001 fd9b 	bl	8003be4 <HAL_Delay>
	wasteParameters.voltVal = adcParameters.supplyVoltage;
 80020ae:	4bb7      	ldr	r3, [pc, #732]	; (800238c <MainProc+0x30c>)
 80020b0:	689b      	ldr	r3, [r3, #8]
 80020b2:	1c18      	adds	r0, r3, #0
 80020b4:	f7fe f9f0 	bl	8000498 <__aeabi_f2uiz>
 80020b8:	0003      	movs	r3, r0
 80020ba:	b29a      	uxth	r2, r3
 80020bc:	4bb7      	ldr	r3, [pc, #732]	; (800239c <MainProc+0x31c>)
 80020be:	805a      	strh	r2, [r3, #2]
	wasteParameters.tempVal = adcParameters.tempCelcius;
 80020c0:	4bb2      	ldr	r3, [pc, #712]	; (800238c <MainProc+0x30c>)
 80020c2:	685b      	ldr	r3, [r3, #4]
 80020c4:	b2da      	uxtb	r2, r3
 80020c6:	4bb5      	ldr	r3, [pc, #724]	; (800239c <MainProc+0x31c>)
 80020c8:	711a      	strb	r2, [r3, #4]
	if (wasteParameters.tempVal > 100) {
 80020ca:	4bb4      	ldr	r3, [pc, #720]	; (800239c <MainProc+0x31c>)
 80020cc:	791b      	ldrb	r3, [r3, #4]
 80020ce:	2b64      	cmp	r3, #100	; 0x64
 80020d0:	d909      	bls.n	80020e6 <MainProc+0x66>
		wasteParameters.tempVal = wasteParameters.tempVal % 100;
 80020d2:	4bb2      	ldr	r3, [pc, #712]	; (800239c <MainProc+0x31c>)
 80020d4:	791b      	ldrb	r3, [r3, #4]
 80020d6:	2164      	movs	r1, #100	; 0x64
 80020d8:	0018      	movs	r0, r3
 80020da:	f7fe f8a5 	bl	8000228 <__aeabi_uidivmod>
 80020de:	000b      	movs	r3, r1
 80020e0:	b2da      	uxtb	r2, r3
 80020e2:	4bae      	ldr	r3, [pc, #696]	; (800239c <MainProc+0x31c>)
 80020e4:	711a      	strb	r2, [r3, #4]
	}
	DebugSendData("Disable Adc", 11);
 80020e6:	4bae      	ldr	r3, [pc, #696]	; (80023a0 <MainProc+0x320>)
 80020e8:	210b      	movs	r1, #11
 80020ea:	0018      	movs	r0, r3
 80020ec:	f001 fc96 	bl	8003a1c <DebugSendData>
	adcParameters.adcReadEnableFlag = 0;
 80020f0:	4ba6      	ldr	r3, [pc, #664]	; (800238c <MainProc+0x30c>)
 80020f2:	2200      	movs	r2, #0
 80020f4:	735a      	strb	r2, [r3, #13]
	if (wasteParameters.setupMode) {
 80020f6:	4ba9      	ldr	r3, [pc, #676]	; (800239c <MainProc+0x31c>)
 80020f8:	799b      	ldrb	r3, [r3, #6]
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d00c      	beq.n	8002118 <MainProc+0x98>

		wasteParameters.setupCount++;
 80020fe:	4ba7      	ldr	r3, [pc, #668]	; (800239c <MainProc+0x31c>)
 8002100:	795b      	ldrb	r3, [r3, #5]
 8002102:	3301      	adds	r3, #1
 8002104:	b2da      	uxtb	r2, r3
 8002106:	4ba5      	ldr	r3, [pc, #660]	; (800239c <MainProc+0x31c>)
 8002108:	715a      	strb	r2, [r3, #5]

		if (wasteParameters.setupCount >= SETUP_WORK_PERIOD) {
 800210a:	4ba4      	ldr	r3, [pc, #656]	; (800239c <MainProc+0x31c>)
 800210c:	795b      	ldrb	r3, [r3, #5]
 800210e:	2b02      	cmp	r3, #2
 8002110:	d902      	bls.n	8002118 <MainProc+0x98>
			wasteParameters.setupMode = 0;
 8002112:	4ba2      	ldr	r3, [pc, #648]	; (800239c <MainProc+0x31c>)
 8002114:	2200      	movs	r2, #0
 8002116:	719a      	strb	r2, [r3, #6]
		}
	}
	wasteParameters.gpsAlarmCount++;
 8002118:	4ba0      	ldr	r3, [pc, #640]	; (800239c <MainProc+0x31c>)
 800211a:	7a5b      	ldrb	r3, [r3, #9]
 800211c:	3301      	adds	r3, #1
 800211e:	b2da      	uxtb	r2, r3
 8002120:	4b9e      	ldr	r3, [pc, #632]	; (800239c <MainProc+0x31c>)
 8002122:	725a      	strb	r2, [r3, #9]
	if (wasteParameters.gpsAlarmCount >= ALARM_WORK_PERIOD) {
 8002124:	4b9d      	ldr	r3, [pc, #628]	; (800239c <MainProc+0x31c>)
 8002126:	7a5b      	ldrb	r3, [r3, #9]
 8002128:	2b05      	cmp	r3, #5
 800212a:	d902      	bls.n	8002132 <MainProc+0xb2>
			wasteParameters.gpsAlarmCount = 0;
 800212c:	4b9b      	ldr	r3, [pc, #620]	; (800239c <MainProc+0x31c>)
 800212e:	2200      	movs	r2, #0
 8002130:	725a      	strb	r2, [r3, #9]
	}
	if (wasteParameters.setupMode) {
 8002132:	4b9a      	ldr	r3, [pc, #616]	; (800239c <MainProc+0x31c>)
 8002134:	799b      	ldrb	r3, [r3, #6]
 8002136:	2b00      	cmp	r3, #0
 8002138:	d005      	beq.n	8002146 <MainProc+0xc6>
		DebugSendData("Setup Mode Enable", 17);
 800213a:	4b9a      	ldr	r3, [pc, #616]	; (80023a4 <MainProc+0x324>)
 800213c:	2111      	movs	r1, #17
 800213e:	0018      	movs	r0, r3
 8002140:	f001 fc6c 	bl	8003a1c <DebugSendData>
 8002144:	e004      	b.n	8002150 <MainProc+0xd0>
	} else {
		DebugSendData("Setup Mode Disable", 18);
 8002146:	4b98      	ldr	r3, [pc, #608]	; (80023a8 <MainProc+0x328>)
 8002148:	2112      	movs	r1, #18
 800214a:	0018      	movs	r0, r3
 800214c:	f001 fc66 	bl	8003a1c <DebugSendData>
	}
	if (wasteParameters.preDataSendError) {
 8002150:	4b92      	ldr	r3, [pc, #584]	; (800239c <MainProc+0x31c>)
 8002152:	79db      	ldrb	r3, [r3, #7]
 8002154:	2b00      	cmp	r3, #0
 8002156:	d005      	beq.n	8002164 <MainProc+0xe4>
		DebugSendData("Prev Data Send Error", 20);
 8002158:	4b94      	ldr	r3, [pc, #592]	; (80023ac <MainProc+0x32c>)
 800215a:	2114      	movs	r1, #20
 800215c:	0018      	movs	r0, r3
 800215e:	f001 fc5d 	bl	8003a1c <DebugSendData>
 8002162:	e004      	b.n	800216e <MainProc+0xee>
	} else {
		DebugSendData("Prev Data Send Success", 22);
 8002164:	4b92      	ldr	r3, [pc, #584]	; (80023b0 <MainProc+0x330>)
 8002166:	2116      	movs	r1, #22
 8002168:	0018      	movs	r0, r3
 800216a:	f001 fc57 	bl	8003a1c <DebugSendData>
	}
	if (wasteParameters.gpsAlarm) {
 800216e:	4b8b      	ldr	r3, [pc, #556]	; (800239c <MainProc+0x31c>)
 8002170:	7a1b      	ldrb	r3, [r3, #8]
 8002172:	2b00      	cmp	r3, #0
 8002174:	d005      	beq.n	8002182 <MainProc+0x102>
		DebugSendData("Gps Alarm Enable", 16);
 8002176:	4b8f      	ldr	r3, [pc, #572]	; (80023b4 <MainProc+0x334>)
 8002178:	2110      	movs	r1, #16
 800217a:	0018      	movs	r0, r3
 800217c:	f001 fc4e 	bl	8003a1c <DebugSendData>
 8002180:	e004      	b.n	800218c <MainProc+0x10c>
	} else {
		DebugSendData("Gps Alarm Disable", 17);
 8002182:	4b8d      	ldr	r3, [pc, #564]	; (80023b8 <MainProc+0x338>)
 8002184:	2111      	movs	r1, #17
 8002186:	0018      	movs	r0, r3
 8002188:	f001 fc48 	bl	8003a1c <DebugSendData>
	}
	if (wasteParameters.wakeUpCount == 0 || wasteParameters.tempVal >= CRITICAL_TEMPERATURE || (wasteParameters.setupMode) || (wasteParameters.preDataSendError == 1 && wasteParameters.wakeUpCount == ALARM_WORK_PERIOD) || wasteParameters.gpsAlarm == 1) {
 800218c:	4b83      	ldr	r3, [pc, #524]	; (800239c <MainProc+0x31c>)
 800218e:	781b      	ldrb	r3, [r3, #0]
 8002190:	2b00      	cmp	r3, #0
 8002192:	d014      	beq.n	80021be <MainProc+0x13e>
 8002194:	4b81      	ldr	r3, [pc, #516]	; (800239c <MainProc+0x31c>)
 8002196:	791b      	ldrb	r3, [r3, #4]
 8002198:	2b4f      	cmp	r3, #79	; 0x4f
 800219a:	d810      	bhi.n	80021be <MainProc+0x13e>
 800219c:	4b7f      	ldr	r3, [pc, #508]	; (800239c <MainProc+0x31c>)
 800219e:	799b      	ldrb	r3, [r3, #6]
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d10c      	bne.n	80021be <MainProc+0x13e>
 80021a4:	4b7d      	ldr	r3, [pc, #500]	; (800239c <MainProc+0x31c>)
 80021a6:	79db      	ldrb	r3, [r3, #7]
 80021a8:	2b01      	cmp	r3, #1
 80021aa:	d103      	bne.n	80021b4 <MainProc+0x134>
 80021ac:	4b7b      	ldr	r3, [pc, #492]	; (800239c <MainProc+0x31c>)
 80021ae:	781b      	ldrb	r3, [r3, #0]
 80021b0:	2b06      	cmp	r3, #6
 80021b2:	d004      	beq.n	80021be <MainProc+0x13e>
 80021b4:	4b79      	ldr	r3, [pc, #484]	; (800239c <MainProc+0x31c>)
 80021b6:	7a1b      	ldrb	r3, [r3, #8]
 80021b8:	2b01      	cmp	r3, #1
 80021ba:	d000      	beq.n	80021be <MainProc+0x13e>
 80021bc:	e0d3      	b.n	8002366 <MainProc+0x2e6>

		wasteParameters.wakeUpCount = 0;
 80021be:	4b77      	ldr	r3, [pc, #476]	; (800239c <MainProc+0x31c>)
 80021c0:	2200      	movs	r2, #0
 80021c2:	701a      	strb	r2, [r3, #0]
		LTEInitParams();
 80021c4:	f7fe ff54 	bl	8001070 <LTEInitParams>
		UsrEnable();
 80021c8:	f001 fb30 	bl	800382c <UsrEnable>
		HAL_Delay(1000);
 80021cc:	23fa      	movs	r3, #250	; 0xfa
 80021ce:	009b      	lsls	r3, r3, #2
 80021d0:	0018      	movs	r0, r3
 80021d2:	f001 fd07 	bl	8003be4 <HAL_Delay>
		UsrMeasure();
 80021d6:	f001 fb73 	bl	80038c0 <UsrMeasure>
		HAL_Delay(1000);
 80021da:	23fa      	movs	r3, #250	; 0xfa
 80021dc:	009b      	lsls	r3, r3, #2
 80021de:	0018      	movs	r0, r3
 80021e0:	f001 fd00 	bl	8003be4 <HAL_Delay>
		UsrDisable();
 80021e4:	f001 fb3a 	bl	800385c <UsrDisable>
		HAL_Delay(1000);
 80021e8:	23fa      	movs	r3, #250	; 0xfa
 80021ea:	009b      	lsls	r3, r3, #2
 80021ec:	0018      	movs	r0, r3
 80021ee:	f001 fcf9 	bl	8003be4 <HAL_Delay>
		DebugSendData("LTE Op Start", 12);
 80021f2:	4b72      	ldr	r3, [pc, #456]	; (80023bc <MainProc+0x33c>)
 80021f4:	210c      	movs	r1, #12
 80021f6:	0018      	movs	r0, r3
 80021f8:	f001 fc10 	bl	8003a1c <DebugSendData>
		if (wasteParameters.gpsAlarm == 0) {
 80021fc:	4b67      	ldr	r3, [pc, #412]	; (800239c <MainProc+0x31c>)
 80021fe:	7a1b      	ldrb	r3, [r3, #8]
 8002200:	2b00      	cmp	r3, #0
 8002202:	d11e      	bne.n	8002242 <MainProc+0x1c2>
			LTEEnable();
 8002204:	f7ff f906 	bl	8001414 <LTEEnable>
			HAL_Delay(1000);
 8002208:	23fa      	movs	r3, #250	; 0xfa
 800220a:	009b      	lsls	r3, r3, #2
 800220c:	0018      	movs	r0, r3
 800220e:	f001 fce9 	bl	8003be4 <HAL_Delay>
			LTEPowerOn();
 8002212:	f7ff f889 	bl	8001328 <LTEPowerOn>
			HAL_Delay(1000);
 8002216:	23fa      	movs	r3, #250	; 0xfa
 8002218:	009b      	lsls	r3, r3, #2
 800221a:	0018      	movs	r0, r3
 800221c:	f001 fce2 	bl	8003be4 <HAL_Delay>
			if (lteParameters.uartResMessage == MESG_POWERDOWN) {
 8002220:	4b67      	ldr	r3, [pc, #412]	; (80023c0 <MainProc+0x340>)
 8002222:	22b5      	movs	r2, #181	; 0xb5
 8002224:	5c9b      	ldrb	r3, [r3, r2]
 8002226:	2b02      	cmp	r3, #2
 8002228:	d10b      	bne.n	8002242 <MainProc+0x1c2>
				DebugSendData("Power On Again", 14);
 800222a:	4b66      	ldr	r3, [pc, #408]	; (80023c4 <MainProc+0x344>)
 800222c:	210e      	movs	r1, #14
 800222e:	0018      	movs	r0, r3
 8002230:	f001 fbf4 	bl	8003a1c <DebugSendData>
				LTEPowerOn();
 8002234:	f7ff f878 	bl	8001328 <LTEPowerOn>
				HAL_Delay(1000);
 8002238:	23fa      	movs	r3, #250	; 0xfa
 800223a:	009b      	lsls	r3, r3, #2
 800223c:	0018      	movs	r0, r3
 800223e:	f001 fcd1 	bl	8003be4 <HAL_Delay>
			}
		}
		wasteParameters.preDataSendError = 1;
 8002242:	4b56      	ldr	r3, [pc, #344]	; (800239c <MainProc+0x31c>)
 8002244:	2201      	movs	r2, #1
 8002246:	71da      	strb	r2, [r3, #7]
		LTEAt();
 8002248:	f7ff fa5a 	bl	8001700 <LTEAt>
		HAL_Delay(1000);
 800224c:	23fa      	movs	r3, #250	; 0xfa
 800224e:	009b      	lsls	r3, r3, #2
 8002250:	0018      	movs	r0, r3
 8002252:	f001 fcc7 	bl	8003be4 <HAL_Delay>
			LTEGetIMEI();
 8002256:	f7ff f94b 	bl	80014f0 <LTEGetIMEI>
			HAL_Delay(1000);
 800225a:	23fa      	movs	r3, #250	; 0xfa
 800225c:	009b      	lsls	r3, r3, #2
 800225e:	0018      	movs	r0, r3
 8002260:	f001 fcc0 	bl	8003be4 <HAL_Delay>
			LTEGetImsi();
 8002264:	f7ff f986 	bl	8001574 <LTEGetImsi>
			HAL_Delay(1000);
 8002268:	23fa      	movs	r3, #250	; 0xfa
 800226a:	009b      	lsls	r3, r3, #2
 800226c:	0018      	movs	r0, r3
 800226e:	f001 fcb9 	bl	8003be4 <HAL_Delay>
			SetSendData();
 8002272:	f000 f8ab 	bl	80023cc <SetSendData>
			HAL_Delay(1000);
 8002276:	23fa      	movs	r3, #250	; 0xfa
 8002278:	009b      	lsls	r3, r3, #2
 800227a:	0018      	movs	r0, r3
 800227c:	f001 fcb2 	bl	8003be4 <HAL_Delay>
			LTEPdpConfigure();
 8002280:	f7ff fb46 	bl	8001910 <LTEPdpConfigure>
			HAL_Delay(1000);
 8002284:	23fa      	movs	r3, #250	; 0xfa
 8002286:	009b      	lsls	r3, r3, #2
 8002288:	0018      	movs	r0, r3
 800228a:	f001 fcab 	bl	8003be4 <HAL_Delay>
			LTEPdpOpen();
 800228e:	f7ff fabb 	bl	8001808 <LTEPdpOpen>
			HAL_Delay(1000);
 8002292:	23fa      	movs	r3, #250	; 0xfa
 8002294:	009b      	lsls	r3, r3, #2
 8002296:	0018      	movs	r0, r3
 8002298:	f001 fca4 	bl	8003be4 <HAL_Delay>
			LTEOpenConnection();
 800229c:	f7ff f9ac 	bl	80015f8 <LTEOpenConnection>
			HAL_Delay(1000);
 80022a0:	23fa      	movs	r3, #250	; 0xfa
 80022a2:	009b      	lsls	r3, r3, #2
 80022a4:	0018      	movs	r0, r3
 80022a6:	f001 fc9d 	bl	8003be4 <HAL_Delay>
			LTEPrepToSendData();
 80022aa:	f7ff f9e7 	bl	800167c <LTEPrepToSendData>
			HAL_Delay(1000);
 80022ae:	23fa      	movs	r3, #250	; 0xfa
 80022b0:	009b      	lsls	r3, r3, #2
 80022b2:	0018      	movs	r0, r3
 80022b4:	f001 fc96 	bl	8003be4 <HAL_Delay>
			LTESendMsg();
 80022b8:	f7ff fb6c 	bl	8001994 <LTESendMsg>
			HAL_Delay(1000);
 80022bc:	23fa      	movs	r3, #250	; 0xfa
 80022be:	009b      	lsls	r3, r3, #2
 80022c0:	0018      	movs	r0, r3
 80022c2:	f001 fc8f 	bl	8003be4 <HAL_Delay>
			LTEReceiveMsg();
 80022c6:	f7ff fbb1 	bl	8001a2c <LTEReceiveMsg>
			HAL_Delay(1000);
 80022ca:	23fa      	movs	r3, #250	; 0xfa
 80022cc:	009b      	lsls	r3, r3, #2
 80022ce:	0018      	movs	r0, r3
 80022d0:	f001 fc88 	bl	8003be4 <HAL_Delay>
			LTECloseConnection();
 80022d4:	f7ff fa56 	bl	8001784 <LTECloseConnection>
			HAL_Delay(1000);
 80022d8:	23fa      	movs	r3, #250	; 0xfa
 80022da:	009b      	lsls	r3, r3, #2
 80022dc:	0018      	movs	r0, r3
 80022de:	f001 fc81 	bl	8003be4 <HAL_Delay>
			LTEPdpClose();
 80022e2:	f7ff fad3 	bl	800188c <LTEPdpClose>
			HAL_Delay(1000);
 80022e6:	23fa      	movs	r3, #250	; 0xfa
 80022e8:	009b      	lsls	r3, r3, #2
 80022ea:	0018      	movs	r0, r3
 80022ec:	f001 fc7a 	bl	8003be4 <HAL_Delay>
		if (wasteParameters.gpsAlarm == 0) {
 80022f0:	4b2a      	ldr	r3, [pc, #168]	; (800239c <MainProc+0x31c>)
 80022f2:	7a1b      	ldrb	r3, [r3, #8]
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d10f      	bne.n	8002318 <MainProc+0x298>
			LTEPowerOff();
 80022f8:	f7ff f844 	bl	8001384 <LTEPowerOff>
			HAL_Delay(1000);
 80022fc:	23fa      	movs	r3, #250	; 0xfa
 80022fe:	009b      	lsls	r3, r3, #2
 8002300:	0018      	movs	r0, r3
 8002302:	f001 fc6f 	bl	8003be4 <HAL_Delay>
			LTEPowerOffWithUart();
 8002306:	f7ff f8bb 	bl	8001480 <LTEPowerOffWithUart>
			HAL_Delay(1000);
 800230a:	23fa      	movs	r3, #250	; 0xfa
 800230c:	009b      	lsls	r3, r3, #2
 800230e:	0018      	movs	r0, r3
 8002310:	f001 fc68 	bl	8003be4 <HAL_Delay>
			LTEDisable();
 8002314:	f7ff f896 	bl	8001444 <LTEDisable>
		}
		DebugSendData("LTE Op Stop", 11);
 8002318:	4b2b      	ldr	r3, [pc, #172]	; (80023c8 <MainProc+0x348>)
 800231a:	210b      	movs	r1, #11
 800231c:	0018      	movs	r0, r3
 800231e:	f001 fb7d 	bl	8003a1c <DebugSendData>
		lteParameters.contexId++;
 8002322:	4b27      	ldr	r3, [pc, #156]	; (80023c0 <MainProc+0x340>)
 8002324:	22b7      	movs	r2, #183	; 0xb7
 8002326:	5c9b      	ldrb	r3, [r3, r2]
 8002328:	3301      	adds	r3, #1
 800232a:	b2d9      	uxtb	r1, r3
 800232c:	4b24      	ldr	r3, [pc, #144]	; (80023c0 <MainProc+0x340>)
 800232e:	22b7      	movs	r2, #183	; 0xb7
 8002330:	5499      	strb	r1, [r3, r2]
		lteParameters.sessionId++;
 8002332:	4b23      	ldr	r3, [pc, #140]	; (80023c0 <MainProc+0x340>)
 8002334:	22b8      	movs	r2, #184	; 0xb8
 8002336:	5c9b      	ldrb	r3, [r3, r2]
 8002338:	3301      	adds	r3, #1
 800233a:	b2d9      	uxtb	r1, r3
 800233c:	4b20      	ldr	r3, [pc, #128]	; (80023c0 <MainProc+0x340>)
 800233e:	22b8      	movs	r2, #184	; 0xb8
 8002340:	5499      	strb	r1, [r3, r2]
		if (lteParameters.contexId >= 9)
 8002342:	4b1f      	ldr	r3, [pc, #124]	; (80023c0 <MainProc+0x340>)
 8002344:	22b7      	movs	r2, #183	; 0xb7
 8002346:	5c9b      	ldrb	r3, [r3, r2]
 8002348:	2b08      	cmp	r3, #8
 800234a:	d903      	bls.n	8002354 <MainProc+0x2d4>
			lteParameters.contexId = 1;
 800234c:	4b1c      	ldr	r3, [pc, #112]	; (80023c0 <MainProc+0x340>)
 800234e:	22b7      	movs	r2, #183	; 0xb7
 8002350:	2101      	movs	r1, #1
 8002352:	5499      	strb	r1, [r3, r2]
		if (lteParameters.contexId >= 9)
 8002354:	4b1a      	ldr	r3, [pc, #104]	; (80023c0 <MainProc+0x340>)
 8002356:	22b7      	movs	r2, #183	; 0xb7
 8002358:	5c9b      	ldrb	r3, [r3, r2]
 800235a:	2b08      	cmp	r3, #8
 800235c:	d903      	bls.n	8002366 <MainProc+0x2e6>
			lteParameters.sessionId = 0;
 800235e:	4b18      	ldr	r3, [pc, #96]	; (80023c0 <MainProc+0x340>)
 8002360:	22b8      	movs	r2, #184	; 0xb8
 8002362:	2100      	movs	r1, #0
 8002364:	5499      	strb	r1, [r3, r2]

	}

	wasteParameters.wakeUpCount++;
 8002366:	4b0d      	ldr	r3, [pc, #52]	; (800239c <MainProc+0x31c>)
 8002368:	781b      	ldrb	r3, [r3, #0]
 800236a:	3301      	adds	r3, #1
 800236c:	b2da      	uxtb	r2, r3
 800236e:	4b0b      	ldr	r3, [pc, #44]	; (800239c <MainProc+0x31c>)
 8002370:	701a      	strb	r2, [r3, #0]
	if (wasteParameters.wakeUpCount >= NORMAL_WORK_PERIOD) {
 8002372:	4b0a      	ldr	r3, [pc, #40]	; (800239c <MainProc+0x31c>)
 8002374:	781b      	ldrb	r3, [r3, #0]
 8002376:	2b17      	cmp	r3, #23
 8002378:	d902      	bls.n	8002380 <MainProc+0x300>
		wasteParameters.wakeUpCount = 0;
 800237a:	4b08      	ldr	r3, [pc, #32]	; (800239c <MainProc+0x31c>)
 800237c:	2200      	movs	r2, #0
 800237e:	701a      	strb	r2, [r3, #0]
	}
}
 8002380:	46c0      	nop			; (mov r8, r8)
 8002382:	46bd      	mov	sp, r7
 8002384:	bd80      	pop	{r7, pc}
 8002386:	46c0      	nop			; (mov r8, r8)
 8002388:	08008644 	.word	0x08008644
 800238c:	20000098 	.word	0x20000098
 8002390:	0800864c 	.word	0x0800864c
 8002394:	200000a8 	.word	0x200000a8
 8002398:	00000bb8 	.word	0x00000bb8
 800239c:	2000079c 	.word	0x2000079c
 80023a0:	08008658 	.word	0x08008658
 80023a4:	08008664 	.word	0x08008664
 80023a8:	08008678 	.word	0x08008678
 80023ac:	0800868c 	.word	0x0800868c
 80023b0:	080086a4 	.word	0x080086a4
 80023b4:	080086bc 	.word	0x080086bc
 80023b8:	080086d0 	.word	0x080086d0
 80023bc:	080086e4 	.word	0x080086e4
 80023c0:	2000024c 	.word	0x2000024c
 80023c4:	080086f4 	.word	0x080086f4
 80023c8:	08008704 	.word	0x08008704

080023cc <SetSendData>:
void SetSendData() {
 80023cc:	b590      	push	{r4, r7, lr}
 80023ce:	b085      	sub	sp, #20
 80023d0:	af00      	add	r7, sp, #0
	memset(lteParameters.msgToSend, '*', 128);
 80023d2:	4b86      	ldr	r3, [pc, #536]	; (80025ec <SetSendData+0x220>)
 80023d4:	2280      	movs	r2, #128	; 0x80
 80023d6:	212a      	movs	r1, #42	; 0x2a
 80023d8:	0018      	movs	r0, r3
 80023da:	f005 fb48 	bl	8007a6e <memset>
	DebugSendData("Set Send Data", 13);
 80023de:	4b84      	ldr	r3, [pc, #528]	; (80025f0 <SetSendData+0x224>)
 80023e0:	210d      	movs	r1, #13
 80023e2:	0018      	movs	r0, r3
 80023e4:	f001 fb1a 	bl	8003a1c <DebugSendData>
	lteParameters.msgToSend[0] = 'U';
 80023e8:	4b82      	ldr	r3, [pc, #520]	; (80025f4 <SetSendData+0x228>)
 80023ea:	2234      	movs	r2, #52	; 0x34
 80023ec:	2155      	movs	r1, #85	; 0x55
 80023ee:	5499      	strb	r1, [r3, r2]
	lteParameters.msgToSend[1] = 'L';
 80023f0:	4b80      	ldr	r3, [pc, #512]	; (80025f4 <SetSendData+0x228>)
 80023f2:	2235      	movs	r2, #53	; 0x35
 80023f4:	214c      	movs	r1, #76	; 0x4c
 80023f6:	5499      	strb	r1, [r3, r2]
	lteParameters.msgToSend[2] = 'T';
 80023f8:	4b7e      	ldr	r3, [pc, #504]	; (80025f4 <SetSendData+0x228>)
 80023fa:	2236      	movs	r2, #54	; 0x36
 80023fc:	2154      	movs	r1, #84	; 0x54
 80023fe:	5499      	strb	r1, [r3, r2]
	lteParameters.msgToSend[3] = '#';
 8002400:	4b7c      	ldr	r3, [pc, #496]	; (80025f4 <SetSendData+0x228>)
 8002402:	2237      	movs	r2, #55	; 0x37
 8002404:	2123      	movs	r1, #35	; 0x23
 8002406:	5499      	strb	r1, [r3, r2]

	for (int i = 4; i < 19; i++)
 8002408:	2304      	movs	r3, #4
 800240a:	60fb      	str	r3, [r7, #12]
 800240c:	e011      	b.n	8002432 <SetSendData+0x66>
		sprintf(&lteParameters.msgToSend[i], "%c", lteParameters.imeiNum[i - 4]);
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	3330      	adds	r3, #48	; 0x30
 8002412:	001a      	movs	r2, r3
 8002414:	4b77      	ldr	r3, [pc, #476]	; (80025f4 <SetSendData+0x228>)
 8002416:	18d3      	adds	r3, r2, r3
 8002418:	1d18      	adds	r0, r3, #4
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	3b04      	subs	r3, #4
 800241e:	4a75      	ldr	r2, [pc, #468]	; (80025f4 <SetSendData+0x228>)
 8002420:	5cd3      	ldrb	r3, [r2, r3]
 8002422:	001a      	movs	r2, r3
 8002424:	4b74      	ldr	r3, [pc, #464]	; (80025f8 <SetSendData+0x22c>)
 8002426:	0019      	movs	r1, r3
 8002428:	f005 fb2a 	bl	8007a80 <siprintf>
	for (int i = 4; i < 19; i++)
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	3301      	adds	r3, #1
 8002430:	60fb      	str	r3, [r7, #12]
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	2b12      	cmp	r3, #18
 8002436:	ddea      	ble.n	800240e <SetSendData+0x42>

	lteParameters.msgToSend[19] = '#';
 8002438:	4b6e      	ldr	r3, [pc, #440]	; (80025f4 <SetSendData+0x228>)
 800243a:	2247      	movs	r2, #71	; 0x47
 800243c:	2123      	movs	r1, #35	; 0x23
 800243e:	5499      	strb	r1, [r3, r2]
	sprintf(&lteParameters.msgToSend[20], "%d", ((uint8_t) (wasteParameters.tempVal % 1000) - (uint8_t) (wasteParameters.tempVal % 100)) / 100);
 8002440:	4b6e      	ldr	r3, [pc, #440]	; (80025fc <SetSendData+0x230>)
 8002442:	791b      	ldrb	r3, [r3, #4]
 8002444:	001a      	movs	r2, r3
 8002446:	23fa      	movs	r3, #250	; 0xfa
 8002448:	0099      	lsls	r1, r3, #2
 800244a:	0010      	movs	r0, r2
 800244c:	f7fd ffd6 	bl	80003fc <__aeabi_idivmod>
 8002450:	000b      	movs	r3, r1
 8002452:	b2db      	uxtb	r3, r3
 8002454:	001c      	movs	r4, r3
 8002456:	4b69      	ldr	r3, [pc, #420]	; (80025fc <SetSendData+0x230>)
 8002458:	791b      	ldrb	r3, [r3, #4]
 800245a:	2164      	movs	r1, #100	; 0x64
 800245c:	0018      	movs	r0, r3
 800245e:	f7fd fee3 	bl	8000228 <__aeabi_uidivmod>
 8002462:	000b      	movs	r3, r1
 8002464:	b2db      	uxtb	r3, r3
 8002466:	1ae3      	subs	r3, r4, r3
 8002468:	2164      	movs	r1, #100	; 0x64
 800246a:	0018      	movs	r0, r3
 800246c:	f7fd fee0 	bl	8000230 <__divsi3>
 8002470:	0003      	movs	r3, r0
 8002472:	001a      	movs	r2, r3
 8002474:	4962      	ldr	r1, [pc, #392]	; (8002600 <SetSendData+0x234>)
 8002476:	4b63      	ldr	r3, [pc, #396]	; (8002604 <SetSendData+0x238>)
 8002478:	0018      	movs	r0, r3
 800247a:	f005 fb01 	bl	8007a80 <siprintf>
	sprintf(&lteParameters.msgToSend[21], "%d", ((uint8_t) (wasteParameters.tempVal % 100) - (uint8_t) (wasteParameters.tempVal % 10)) / 10);
 800247e:	4b5f      	ldr	r3, [pc, #380]	; (80025fc <SetSendData+0x230>)
 8002480:	791b      	ldrb	r3, [r3, #4]
 8002482:	2164      	movs	r1, #100	; 0x64
 8002484:	0018      	movs	r0, r3
 8002486:	f7fd fecf 	bl	8000228 <__aeabi_uidivmod>
 800248a:	000b      	movs	r3, r1
 800248c:	b2db      	uxtb	r3, r3
 800248e:	001c      	movs	r4, r3
 8002490:	4b5a      	ldr	r3, [pc, #360]	; (80025fc <SetSendData+0x230>)
 8002492:	791b      	ldrb	r3, [r3, #4]
 8002494:	210a      	movs	r1, #10
 8002496:	0018      	movs	r0, r3
 8002498:	f7fd fec6 	bl	8000228 <__aeabi_uidivmod>
 800249c:	000b      	movs	r3, r1
 800249e:	b2db      	uxtb	r3, r3
 80024a0:	1ae3      	subs	r3, r4, r3
 80024a2:	210a      	movs	r1, #10
 80024a4:	0018      	movs	r0, r3
 80024a6:	f7fd fec3 	bl	8000230 <__divsi3>
 80024aa:	0003      	movs	r3, r0
 80024ac:	001a      	movs	r2, r3
 80024ae:	4954      	ldr	r1, [pc, #336]	; (8002600 <SetSendData+0x234>)
 80024b0:	4b55      	ldr	r3, [pc, #340]	; (8002608 <SetSendData+0x23c>)
 80024b2:	0018      	movs	r0, r3
 80024b4:	f005 fae4 	bl	8007a80 <siprintf>
	sprintf(&lteParameters.msgToSend[22], "%d", (uint8_t) (wasteParameters.tempVal % 10));
 80024b8:	4b50      	ldr	r3, [pc, #320]	; (80025fc <SetSendData+0x230>)
 80024ba:	791b      	ldrb	r3, [r3, #4]
 80024bc:	210a      	movs	r1, #10
 80024be:	0018      	movs	r0, r3
 80024c0:	f7fd feb2 	bl	8000228 <__aeabi_uidivmod>
 80024c4:	000b      	movs	r3, r1
 80024c6:	b2db      	uxtb	r3, r3
 80024c8:	001a      	movs	r2, r3
 80024ca:	494d      	ldr	r1, [pc, #308]	; (8002600 <SetSendData+0x234>)
 80024cc:	4b4f      	ldr	r3, [pc, #316]	; (800260c <SetSendData+0x240>)
 80024ce:	0018      	movs	r0, r3
 80024d0:	f005 fad6 	bl	8007a80 <siprintf>

	lteParameters.msgToSend[23] = '#';
 80024d4:	4b47      	ldr	r3, [pc, #284]	; (80025f4 <SetSendData+0x228>)
 80024d6:	224b      	movs	r2, #75	; 0x4b
 80024d8:	2123      	movs	r1, #35	; 0x23
 80024da:	5499      	strb	r1, [r3, r2]
	sprintf(&lteParameters.msgToSend[24], "%d", ((uint16_t) (wasteParameters.voltVal) - (uint16_t) (wasteParameters.voltVal % 1000)) / 1000);
 80024dc:	4b47      	ldr	r3, [pc, #284]	; (80025fc <SetSendData+0x230>)
 80024de:	885b      	ldrh	r3, [r3, #2]
 80024e0:	001c      	movs	r4, r3
 80024e2:	4b46      	ldr	r3, [pc, #280]	; (80025fc <SetSendData+0x230>)
 80024e4:	885b      	ldrh	r3, [r3, #2]
 80024e6:	22fa      	movs	r2, #250	; 0xfa
 80024e8:	0091      	lsls	r1, r2, #2
 80024ea:	0018      	movs	r0, r3
 80024ec:	f7fd fe9c 	bl	8000228 <__aeabi_uidivmod>
 80024f0:	000b      	movs	r3, r1
 80024f2:	b29b      	uxth	r3, r3
 80024f4:	1ae3      	subs	r3, r4, r3
 80024f6:	22fa      	movs	r2, #250	; 0xfa
 80024f8:	0091      	lsls	r1, r2, #2
 80024fa:	0018      	movs	r0, r3
 80024fc:	f7fd fe98 	bl	8000230 <__divsi3>
 8002500:	0003      	movs	r3, r0
 8002502:	001a      	movs	r2, r3
 8002504:	493e      	ldr	r1, [pc, #248]	; (8002600 <SetSendData+0x234>)
 8002506:	4b42      	ldr	r3, [pc, #264]	; (8002610 <SetSendData+0x244>)
 8002508:	0018      	movs	r0, r3
 800250a:	f005 fab9 	bl	8007a80 <siprintf>
	sprintf(&lteParameters.msgToSend[25], "%d", ((uint16_t) (wasteParameters.voltVal % 1000) - (uint16_t) (wasteParameters.voltVal % 100)) / 100);
 800250e:	4b3b      	ldr	r3, [pc, #236]	; (80025fc <SetSendData+0x230>)
 8002510:	885b      	ldrh	r3, [r3, #2]
 8002512:	22fa      	movs	r2, #250	; 0xfa
 8002514:	0091      	lsls	r1, r2, #2
 8002516:	0018      	movs	r0, r3
 8002518:	f7fd fe86 	bl	8000228 <__aeabi_uidivmod>
 800251c:	000b      	movs	r3, r1
 800251e:	b29b      	uxth	r3, r3
 8002520:	001c      	movs	r4, r3
 8002522:	4b36      	ldr	r3, [pc, #216]	; (80025fc <SetSendData+0x230>)
 8002524:	885b      	ldrh	r3, [r3, #2]
 8002526:	2164      	movs	r1, #100	; 0x64
 8002528:	0018      	movs	r0, r3
 800252a:	f7fd fe7d 	bl	8000228 <__aeabi_uidivmod>
 800252e:	000b      	movs	r3, r1
 8002530:	b29b      	uxth	r3, r3
 8002532:	1ae3      	subs	r3, r4, r3
 8002534:	2164      	movs	r1, #100	; 0x64
 8002536:	0018      	movs	r0, r3
 8002538:	f7fd fe7a 	bl	8000230 <__divsi3>
 800253c:	0003      	movs	r3, r0
 800253e:	001a      	movs	r2, r3
 8002540:	492f      	ldr	r1, [pc, #188]	; (8002600 <SetSendData+0x234>)
 8002542:	4b34      	ldr	r3, [pc, #208]	; (8002614 <SetSendData+0x248>)
 8002544:	0018      	movs	r0, r3
 8002546:	f005 fa9b 	bl	8007a80 <siprintf>
	sprintf(&lteParameters.msgToSend[26], "%d", ((uint16_t) (wasteParameters.voltVal % 100) - (uint16_t) (wasteParameters.voltVal % 10)) / 10);
 800254a:	4b2c      	ldr	r3, [pc, #176]	; (80025fc <SetSendData+0x230>)
 800254c:	885b      	ldrh	r3, [r3, #2]
 800254e:	2164      	movs	r1, #100	; 0x64
 8002550:	0018      	movs	r0, r3
 8002552:	f7fd fe69 	bl	8000228 <__aeabi_uidivmod>
 8002556:	000b      	movs	r3, r1
 8002558:	b29b      	uxth	r3, r3
 800255a:	001c      	movs	r4, r3
 800255c:	4b27      	ldr	r3, [pc, #156]	; (80025fc <SetSendData+0x230>)
 800255e:	885b      	ldrh	r3, [r3, #2]
 8002560:	210a      	movs	r1, #10
 8002562:	0018      	movs	r0, r3
 8002564:	f7fd fe60 	bl	8000228 <__aeabi_uidivmod>
 8002568:	000b      	movs	r3, r1
 800256a:	b29b      	uxth	r3, r3
 800256c:	1ae3      	subs	r3, r4, r3
 800256e:	210a      	movs	r1, #10
 8002570:	0018      	movs	r0, r3
 8002572:	f7fd fe5d 	bl	8000230 <__divsi3>
 8002576:	0003      	movs	r3, r0
 8002578:	001a      	movs	r2, r3
 800257a:	4921      	ldr	r1, [pc, #132]	; (8002600 <SetSendData+0x234>)
 800257c:	4b26      	ldr	r3, [pc, #152]	; (8002618 <SetSendData+0x24c>)
 800257e:	0018      	movs	r0, r3
 8002580:	f005 fa7e 	bl	8007a80 <siprintf>
	sprintf(&lteParameters.msgToSend[27], "%d", (uint16_t) (wasteParameters.voltVal % 10));
 8002584:	4b1d      	ldr	r3, [pc, #116]	; (80025fc <SetSendData+0x230>)
 8002586:	885b      	ldrh	r3, [r3, #2]
 8002588:	210a      	movs	r1, #10
 800258a:	0018      	movs	r0, r3
 800258c:	f7fd fe4c 	bl	8000228 <__aeabi_uidivmod>
 8002590:	000b      	movs	r3, r1
 8002592:	b29b      	uxth	r3, r3
 8002594:	001a      	movs	r2, r3
 8002596:	491a      	ldr	r1, [pc, #104]	; (8002600 <SetSendData+0x234>)
 8002598:	4b20      	ldr	r3, [pc, #128]	; (800261c <SetSendData+0x250>)
 800259a:	0018      	movs	r0, r3
 800259c:	f005 fa70 	bl	8007a80 <siprintf>

	lteParameters.msgToSend[28] = '#';
 80025a0:	4b14      	ldr	r3, [pc, #80]	; (80025f4 <SetSendData+0x228>)
 80025a2:	2250      	movs	r2, #80	; 0x50
 80025a4:	2123      	movs	r1, #35	; 0x23
 80025a6:	5499      	strb	r1, [r3, r2]

	for (int i = 0; i < 11; i++)
 80025a8:	2300      	movs	r3, #0
 80025aa:	60bb      	str	r3, [r7, #8]
 80025ac:	e013      	b.n	80025d6 <SetSendData+0x20a>
		sprintf(&lteParameters.msgToSend[29 + i], "%c", lteParameters.latitudeData[i]);
 80025ae:	68bb      	ldr	r3, [r7, #8]
 80025b0:	331d      	adds	r3, #29
 80025b2:	3330      	adds	r3, #48	; 0x30
 80025b4:	001a      	movs	r2, r3
 80025b6:	4b0f      	ldr	r3, [pc, #60]	; (80025f4 <SetSendData+0x228>)
 80025b8:	18d3      	adds	r3, r2, r3
 80025ba:	1d18      	adds	r0, r3, #4
 80025bc:	4a0d      	ldr	r2, [pc, #52]	; (80025f4 <SetSendData+0x228>)
 80025be:	68bb      	ldr	r3, [r7, #8]
 80025c0:	18d3      	adds	r3, r2, r3
 80025c2:	331e      	adds	r3, #30
 80025c4:	781b      	ldrb	r3, [r3, #0]
 80025c6:	001a      	movs	r2, r3
 80025c8:	4b0b      	ldr	r3, [pc, #44]	; (80025f8 <SetSendData+0x22c>)
 80025ca:	0019      	movs	r1, r3
 80025cc:	f005 fa58 	bl	8007a80 <siprintf>
	for (int i = 0; i < 11; i++)
 80025d0:	68bb      	ldr	r3, [r7, #8]
 80025d2:	3301      	adds	r3, #1
 80025d4:	60bb      	str	r3, [r7, #8]
 80025d6:	68bb      	ldr	r3, [r7, #8]
 80025d8:	2b0a      	cmp	r3, #10
 80025da:	dde8      	ble.n	80025ae <SetSendData+0x1e2>

	lteParameters.msgToSend[40] = '#';
 80025dc:	4b05      	ldr	r3, [pc, #20]	; (80025f4 <SetSendData+0x228>)
 80025de:	225c      	movs	r2, #92	; 0x5c
 80025e0:	2123      	movs	r1, #35	; 0x23
 80025e2:	5499      	strb	r1, [r3, r2]

	for (int i = 0; i < 11; i++)
 80025e4:	2300      	movs	r3, #0
 80025e6:	607b      	str	r3, [r7, #4]
 80025e8:	e02f      	b.n	800264a <SetSendData+0x27e>
 80025ea:	46c0      	nop			; (mov r8, r8)
 80025ec:	20000280 	.word	0x20000280
 80025f0:	08008710 	.word	0x08008710
 80025f4:	2000024c 	.word	0x2000024c
 80025f8:	08008720 	.word	0x08008720
 80025fc:	2000079c 	.word	0x2000079c
 8002600:	08008724 	.word	0x08008724
 8002604:	20000294 	.word	0x20000294
 8002608:	20000295 	.word	0x20000295
 800260c:	20000296 	.word	0x20000296
 8002610:	20000298 	.word	0x20000298
 8002614:	20000299 	.word	0x20000299
 8002618:	2000029a 	.word	0x2000029a
 800261c:	2000029b 	.word	0x2000029b
		sprintf(&lteParameters.msgToSend[41 + i], "%c", lteParameters.longitudeData[i]);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	3329      	adds	r3, #41	; 0x29
 8002624:	3330      	adds	r3, #48	; 0x30
 8002626:	001a      	movs	r2, r3
 8002628:	4bed      	ldr	r3, [pc, #948]	; (80029e0 <SetSendData+0x614>)
 800262a:	18d3      	adds	r3, r2, r3
 800262c:	1d18      	adds	r0, r3, #4
 800262e:	4aec      	ldr	r2, [pc, #944]	; (80029e0 <SetSendData+0x614>)
 8002630:	2129      	movs	r1, #41	; 0x29
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	18d3      	adds	r3, r2, r3
 8002636:	185b      	adds	r3, r3, r1
 8002638:	781b      	ldrb	r3, [r3, #0]
 800263a:	001a      	movs	r2, r3
 800263c:	4be9      	ldr	r3, [pc, #932]	; (80029e4 <SetSendData+0x618>)
 800263e:	0019      	movs	r1, r3
 8002640:	f005 fa1e 	bl	8007a80 <siprintf>
	for (int i = 0; i < 11; i++)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	3301      	adds	r3, #1
 8002648:	607b      	str	r3, [r7, #4]
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	2b0a      	cmp	r3, #10
 800264e:	dde7      	ble.n	8002620 <SetSendData+0x254>

	lteParameters.msgToSend[52] = '#';
 8002650:	4be3      	ldr	r3, [pc, #908]	; (80029e0 <SetSendData+0x614>)
 8002652:	2268      	movs	r2, #104	; 0x68
 8002654:	2123      	movs	r1, #35	; 0x23
 8002656:	5499      	strb	r1, [r3, r2]
	sprintf(&lteParameters.msgToSend[53], "%d", ((uint16_t) (usrParameters.usrMeasArray[0] % 100000) - (uint16_t) (usrParameters.usrMeasArray[0] % 10000)) / 10000);
 8002658:	4be3      	ldr	r3, [pc, #908]	; (80029e8 <SetSendData+0x61c>)
 800265a:	88db      	ldrh	r3, [r3, #6]
 800265c:	49e3      	ldr	r1, [pc, #908]	; (80029ec <SetSendData+0x620>)
 800265e:	0018      	movs	r0, r3
 8002660:	f7fd fecc 	bl	80003fc <__aeabi_idivmod>
 8002664:	000b      	movs	r3, r1
 8002666:	b29b      	uxth	r3, r3
 8002668:	001c      	movs	r4, r3
 800266a:	4bdf      	ldr	r3, [pc, #892]	; (80029e8 <SetSendData+0x61c>)
 800266c:	88db      	ldrh	r3, [r3, #6]
 800266e:	49e0      	ldr	r1, [pc, #896]	; (80029f0 <SetSendData+0x624>)
 8002670:	0018      	movs	r0, r3
 8002672:	f7fd fdd9 	bl	8000228 <__aeabi_uidivmod>
 8002676:	000b      	movs	r3, r1
 8002678:	b29b      	uxth	r3, r3
 800267a:	1ae3      	subs	r3, r4, r3
 800267c:	49dc      	ldr	r1, [pc, #880]	; (80029f0 <SetSendData+0x624>)
 800267e:	0018      	movs	r0, r3
 8002680:	f7fd fdd6 	bl	8000230 <__divsi3>
 8002684:	0003      	movs	r3, r0
 8002686:	001a      	movs	r2, r3
 8002688:	49da      	ldr	r1, [pc, #872]	; (80029f4 <SetSendData+0x628>)
 800268a:	4bdb      	ldr	r3, [pc, #876]	; (80029f8 <SetSendData+0x62c>)
 800268c:	0018      	movs	r0, r3
 800268e:	f005 f9f7 	bl	8007a80 <siprintf>
	sprintf(&lteParameters.msgToSend[54], "%d", ((uint16_t) (usrParameters.usrMeasArray[0] % 10000) - (uint16_t) (usrParameters.usrMeasArray[0] % 1000)) / 1000);
 8002692:	4bd5      	ldr	r3, [pc, #852]	; (80029e8 <SetSendData+0x61c>)
 8002694:	88db      	ldrh	r3, [r3, #6]
 8002696:	49d6      	ldr	r1, [pc, #856]	; (80029f0 <SetSendData+0x624>)
 8002698:	0018      	movs	r0, r3
 800269a:	f7fd fdc5 	bl	8000228 <__aeabi_uidivmod>
 800269e:	000b      	movs	r3, r1
 80026a0:	b29b      	uxth	r3, r3
 80026a2:	001c      	movs	r4, r3
 80026a4:	4bd0      	ldr	r3, [pc, #832]	; (80029e8 <SetSendData+0x61c>)
 80026a6:	88db      	ldrh	r3, [r3, #6]
 80026a8:	22fa      	movs	r2, #250	; 0xfa
 80026aa:	0091      	lsls	r1, r2, #2
 80026ac:	0018      	movs	r0, r3
 80026ae:	f7fd fdbb 	bl	8000228 <__aeabi_uidivmod>
 80026b2:	000b      	movs	r3, r1
 80026b4:	b29b      	uxth	r3, r3
 80026b6:	1ae3      	subs	r3, r4, r3
 80026b8:	22fa      	movs	r2, #250	; 0xfa
 80026ba:	0091      	lsls	r1, r2, #2
 80026bc:	0018      	movs	r0, r3
 80026be:	f7fd fdb7 	bl	8000230 <__divsi3>
 80026c2:	0003      	movs	r3, r0
 80026c4:	001a      	movs	r2, r3
 80026c6:	49cb      	ldr	r1, [pc, #812]	; (80029f4 <SetSendData+0x628>)
 80026c8:	4bcc      	ldr	r3, [pc, #816]	; (80029fc <SetSendData+0x630>)
 80026ca:	0018      	movs	r0, r3
 80026cc:	f005 f9d8 	bl	8007a80 <siprintf>
	sprintf(&lteParameters.msgToSend[55], "%d", ((uint16_t) (usrParameters.usrMeasArray[0] % 1000) - (uint16_t) (usrParameters.usrMeasArray[0] % 100)) / 100);
 80026d0:	4bc5      	ldr	r3, [pc, #788]	; (80029e8 <SetSendData+0x61c>)
 80026d2:	88db      	ldrh	r3, [r3, #6]
 80026d4:	22fa      	movs	r2, #250	; 0xfa
 80026d6:	0091      	lsls	r1, r2, #2
 80026d8:	0018      	movs	r0, r3
 80026da:	f7fd fda5 	bl	8000228 <__aeabi_uidivmod>
 80026de:	000b      	movs	r3, r1
 80026e0:	b29b      	uxth	r3, r3
 80026e2:	001c      	movs	r4, r3
 80026e4:	4bc0      	ldr	r3, [pc, #768]	; (80029e8 <SetSendData+0x61c>)
 80026e6:	88db      	ldrh	r3, [r3, #6]
 80026e8:	2164      	movs	r1, #100	; 0x64
 80026ea:	0018      	movs	r0, r3
 80026ec:	f7fd fd9c 	bl	8000228 <__aeabi_uidivmod>
 80026f0:	000b      	movs	r3, r1
 80026f2:	b29b      	uxth	r3, r3
 80026f4:	1ae3      	subs	r3, r4, r3
 80026f6:	2164      	movs	r1, #100	; 0x64
 80026f8:	0018      	movs	r0, r3
 80026fa:	f7fd fd99 	bl	8000230 <__divsi3>
 80026fe:	0003      	movs	r3, r0
 8002700:	001a      	movs	r2, r3
 8002702:	49bc      	ldr	r1, [pc, #752]	; (80029f4 <SetSendData+0x628>)
 8002704:	4bbe      	ldr	r3, [pc, #760]	; (8002a00 <SetSendData+0x634>)
 8002706:	0018      	movs	r0, r3
 8002708:	f005 f9ba 	bl	8007a80 <siprintf>
	sprintf(&lteParameters.msgToSend[56], "%d", ((uint16_t) (usrParameters.usrMeasArray[0] % 100) - (uint16_t) (usrParameters.usrMeasArray[0] % 10)) / 10);
 800270c:	4bb6      	ldr	r3, [pc, #728]	; (80029e8 <SetSendData+0x61c>)
 800270e:	88db      	ldrh	r3, [r3, #6]
 8002710:	2164      	movs	r1, #100	; 0x64
 8002712:	0018      	movs	r0, r3
 8002714:	f7fd fd88 	bl	8000228 <__aeabi_uidivmod>
 8002718:	000b      	movs	r3, r1
 800271a:	b29b      	uxth	r3, r3
 800271c:	001c      	movs	r4, r3
 800271e:	4bb2      	ldr	r3, [pc, #712]	; (80029e8 <SetSendData+0x61c>)
 8002720:	88db      	ldrh	r3, [r3, #6]
 8002722:	210a      	movs	r1, #10
 8002724:	0018      	movs	r0, r3
 8002726:	f7fd fd7f 	bl	8000228 <__aeabi_uidivmod>
 800272a:	000b      	movs	r3, r1
 800272c:	b29b      	uxth	r3, r3
 800272e:	1ae3      	subs	r3, r4, r3
 8002730:	210a      	movs	r1, #10
 8002732:	0018      	movs	r0, r3
 8002734:	f7fd fd7c 	bl	8000230 <__divsi3>
 8002738:	0003      	movs	r3, r0
 800273a:	001a      	movs	r2, r3
 800273c:	49ad      	ldr	r1, [pc, #692]	; (80029f4 <SetSendData+0x628>)
 800273e:	4bb1      	ldr	r3, [pc, #708]	; (8002a04 <SetSendData+0x638>)
 8002740:	0018      	movs	r0, r3
 8002742:	f005 f99d 	bl	8007a80 <siprintf>
	sprintf(&lteParameters.msgToSend[57], "%d", (uint16_t) (usrParameters.usrMeasArray[0] % 10));
 8002746:	4ba8      	ldr	r3, [pc, #672]	; (80029e8 <SetSendData+0x61c>)
 8002748:	88db      	ldrh	r3, [r3, #6]
 800274a:	210a      	movs	r1, #10
 800274c:	0018      	movs	r0, r3
 800274e:	f7fd fd6b 	bl	8000228 <__aeabi_uidivmod>
 8002752:	000b      	movs	r3, r1
 8002754:	b29b      	uxth	r3, r3
 8002756:	001a      	movs	r2, r3
 8002758:	49a6      	ldr	r1, [pc, #664]	; (80029f4 <SetSendData+0x628>)
 800275a:	4bab      	ldr	r3, [pc, #684]	; (8002a08 <SetSendData+0x63c>)
 800275c:	0018      	movs	r0, r3
 800275e:	f005 f98f 	bl	8007a80 <siprintf>
	lteParameters.msgToSend[58] = '#';
 8002762:	4b9f      	ldr	r3, [pc, #636]	; (80029e0 <SetSendData+0x614>)
 8002764:	226e      	movs	r2, #110	; 0x6e
 8002766:	2123      	movs	r1, #35	; 0x23
 8002768:	5499      	strb	r1, [r3, r2]
	sprintf(&lteParameters.msgToSend[59], "%d", ((uint16_t) (usrParameters.usrMeasArray[1] % 100000) - (uint16_t) (usrParameters.usrMeasArray[1] % 10000)) / 10000);
 800276a:	4b9f      	ldr	r3, [pc, #636]	; (80029e8 <SetSendData+0x61c>)
 800276c:	891b      	ldrh	r3, [r3, #8]
 800276e:	499f      	ldr	r1, [pc, #636]	; (80029ec <SetSendData+0x620>)
 8002770:	0018      	movs	r0, r3
 8002772:	f7fd fe43 	bl	80003fc <__aeabi_idivmod>
 8002776:	000b      	movs	r3, r1
 8002778:	b29b      	uxth	r3, r3
 800277a:	001c      	movs	r4, r3
 800277c:	4b9a      	ldr	r3, [pc, #616]	; (80029e8 <SetSendData+0x61c>)
 800277e:	891b      	ldrh	r3, [r3, #8]
 8002780:	499b      	ldr	r1, [pc, #620]	; (80029f0 <SetSendData+0x624>)
 8002782:	0018      	movs	r0, r3
 8002784:	f7fd fd50 	bl	8000228 <__aeabi_uidivmod>
 8002788:	000b      	movs	r3, r1
 800278a:	b29b      	uxth	r3, r3
 800278c:	1ae3      	subs	r3, r4, r3
 800278e:	4998      	ldr	r1, [pc, #608]	; (80029f0 <SetSendData+0x624>)
 8002790:	0018      	movs	r0, r3
 8002792:	f7fd fd4d 	bl	8000230 <__divsi3>
 8002796:	0003      	movs	r3, r0
 8002798:	001a      	movs	r2, r3
 800279a:	4996      	ldr	r1, [pc, #600]	; (80029f4 <SetSendData+0x628>)
 800279c:	4b9b      	ldr	r3, [pc, #620]	; (8002a0c <SetSendData+0x640>)
 800279e:	0018      	movs	r0, r3
 80027a0:	f005 f96e 	bl	8007a80 <siprintf>
	sprintf(&lteParameters.msgToSend[60], "%d", ((uint16_t) (usrParameters.usrMeasArray[1] % 10000) - (uint16_t) (usrParameters.usrMeasArray[1] % 1000)) / 1000);
 80027a4:	4b90      	ldr	r3, [pc, #576]	; (80029e8 <SetSendData+0x61c>)
 80027a6:	891b      	ldrh	r3, [r3, #8]
 80027a8:	4991      	ldr	r1, [pc, #580]	; (80029f0 <SetSendData+0x624>)
 80027aa:	0018      	movs	r0, r3
 80027ac:	f7fd fd3c 	bl	8000228 <__aeabi_uidivmod>
 80027b0:	000b      	movs	r3, r1
 80027b2:	b29b      	uxth	r3, r3
 80027b4:	001c      	movs	r4, r3
 80027b6:	4b8c      	ldr	r3, [pc, #560]	; (80029e8 <SetSendData+0x61c>)
 80027b8:	891b      	ldrh	r3, [r3, #8]
 80027ba:	22fa      	movs	r2, #250	; 0xfa
 80027bc:	0091      	lsls	r1, r2, #2
 80027be:	0018      	movs	r0, r3
 80027c0:	f7fd fd32 	bl	8000228 <__aeabi_uidivmod>
 80027c4:	000b      	movs	r3, r1
 80027c6:	b29b      	uxth	r3, r3
 80027c8:	1ae3      	subs	r3, r4, r3
 80027ca:	22fa      	movs	r2, #250	; 0xfa
 80027cc:	0091      	lsls	r1, r2, #2
 80027ce:	0018      	movs	r0, r3
 80027d0:	f7fd fd2e 	bl	8000230 <__divsi3>
 80027d4:	0003      	movs	r3, r0
 80027d6:	001a      	movs	r2, r3
 80027d8:	4986      	ldr	r1, [pc, #536]	; (80029f4 <SetSendData+0x628>)
 80027da:	4b8d      	ldr	r3, [pc, #564]	; (8002a10 <SetSendData+0x644>)
 80027dc:	0018      	movs	r0, r3
 80027de:	f005 f94f 	bl	8007a80 <siprintf>
	sprintf(&lteParameters.msgToSend[61], "%d", ((uint16_t) (usrParameters.usrMeasArray[1] % 1000) - (uint16_t) (usrParameters.usrMeasArray[1] % 100)) / 100);
 80027e2:	4b81      	ldr	r3, [pc, #516]	; (80029e8 <SetSendData+0x61c>)
 80027e4:	891b      	ldrh	r3, [r3, #8]
 80027e6:	22fa      	movs	r2, #250	; 0xfa
 80027e8:	0091      	lsls	r1, r2, #2
 80027ea:	0018      	movs	r0, r3
 80027ec:	f7fd fd1c 	bl	8000228 <__aeabi_uidivmod>
 80027f0:	000b      	movs	r3, r1
 80027f2:	b29b      	uxth	r3, r3
 80027f4:	001c      	movs	r4, r3
 80027f6:	4b7c      	ldr	r3, [pc, #496]	; (80029e8 <SetSendData+0x61c>)
 80027f8:	891b      	ldrh	r3, [r3, #8]
 80027fa:	2164      	movs	r1, #100	; 0x64
 80027fc:	0018      	movs	r0, r3
 80027fe:	f7fd fd13 	bl	8000228 <__aeabi_uidivmod>
 8002802:	000b      	movs	r3, r1
 8002804:	b29b      	uxth	r3, r3
 8002806:	1ae3      	subs	r3, r4, r3
 8002808:	2164      	movs	r1, #100	; 0x64
 800280a:	0018      	movs	r0, r3
 800280c:	f7fd fd10 	bl	8000230 <__divsi3>
 8002810:	0003      	movs	r3, r0
 8002812:	001a      	movs	r2, r3
 8002814:	4977      	ldr	r1, [pc, #476]	; (80029f4 <SetSendData+0x628>)
 8002816:	4b7f      	ldr	r3, [pc, #508]	; (8002a14 <SetSendData+0x648>)
 8002818:	0018      	movs	r0, r3
 800281a:	f005 f931 	bl	8007a80 <siprintf>
	sprintf(&lteParameters.msgToSend[62], "%d", ((uint16_t) (usrParameters.usrMeasArray[1] % 100) - (uint16_t) (usrParameters.usrMeasArray[1] % 10)) / 10);
 800281e:	4b72      	ldr	r3, [pc, #456]	; (80029e8 <SetSendData+0x61c>)
 8002820:	891b      	ldrh	r3, [r3, #8]
 8002822:	2164      	movs	r1, #100	; 0x64
 8002824:	0018      	movs	r0, r3
 8002826:	f7fd fcff 	bl	8000228 <__aeabi_uidivmod>
 800282a:	000b      	movs	r3, r1
 800282c:	b29b      	uxth	r3, r3
 800282e:	001c      	movs	r4, r3
 8002830:	4b6d      	ldr	r3, [pc, #436]	; (80029e8 <SetSendData+0x61c>)
 8002832:	891b      	ldrh	r3, [r3, #8]
 8002834:	210a      	movs	r1, #10
 8002836:	0018      	movs	r0, r3
 8002838:	f7fd fcf6 	bl	8000228 <__aeabi_uidivmod>
 800283c:	000b      	movs	r3, r1
 800283e:	b29b      	uxth	r3, r3
 8002840:	1ae3      	subs	r3, r4, r3
 8002842:	210a      	movs	r1, #10
 8002844:	0018      	movs	r0, r3
 8002846:	f7fd fcf3 	bl	8000230 <__divsi3>
 800284a:	0003      	movs	r3, r0
 800284c:	001a      	movs	r2, r3
 800284e:	4969      	ldr	r1, [pc, #420]	; (80029f4 <SetSendData+0x628>)
 8002850:	4b71      	ldr	r3, [pc, #452]	; (8002a18 <SetSendData+0x64c>)
 8002852:	0018      	movs	r0, r3
 8002854:	f005 f914 	bl	8007a80 <siprintf>
	sprintf(&lteParameters.msgToSend[63], "%d", (uint16_t) (usrParameters.usrMeasArray[1] % 10));
 8002858:	4b63      	ldr	r3, [pc, #396]	; (80029e8 <SetSendData+0x61c>)
 800285a:	891b      	ldrh	r3, [r3, #8]
 800285c:	210a      	movs	r1, #10
 800285e:	0018      	movs	r0, r3
 8002860:	f7fd fce2 	bl	8000228 <__aeabi_uidivmod>
 8002864:	000b      	movs	r3, r1
 8002866:	b29b      	uxth	r3, r3
 8002868:	001a      	movs	r2, r3
 800286a:	4962      	ldr	r1, [pc, #392]	; (80029f4 <SetSendData+0x628>)
 800286c:	4b6b      	ldr	r3, [pc, #428]	; (8002a1c <SetSendData+0x650>)
 800286e:	0018      	movs	r0, r3
 8002870:	f005 f906 	bl	8007a80 <siprintf>
	lteParameters.msgToSend[64] = '#';
 8002874:	4b5a      	ldr	r3, [pc, #360]	; (80029e0 <SetSendData+0x614>)
 8002876:	2274      	movs	r2, #116	; 0x74
 8002878:	2123      	movs	r1, #35	; 0x23
 800287a:	5499      	strb	r1, [r3, r2]
	sprintf(&lteParameters.msgToSend[65], "%d", ((uint16_t) (usrParameters.usrMeasArray[2] % 100000) - (uint16_t) (usrParameters.usrMeasArray[2] % 10000)) / 10000);
 800287c:	4b5a      	ldr	r3, [pc, #360]	; (80029e8 <SetSendData+0x61c>)
 800287e:	895b      	ldrh	r3, [r3, #10]
 8002880:	495a      	ldr	r1, [pc, #360]	; (80029ec <SetSendData+0x620>)
 8002882:	0018      	movs	r0, r3
 8002884:	f7fd fdba 	bl	80003fc <__aeabi_idivmod>
 8002888:	000b      	movs	r3, r1
 800288a:	b29b      	uxth	r3, r3
 800288c:	001c      	movs	r4, r3
 800288e:	4b56      	ldr	r3, [pc, #344]	; (80029e8 <SetSendData+0x61c>)
 8002890:	895b      	ldrh	r3, [r3, #10]
 8002892:	4957      	ldr	r1, [pc, #348]	; (80029f0 <SetSendData+0x624>)
 8002894:	0018      	movs	r0, r3
 8002896:	f7fd fcc7 	bl	8000228 <__aeabi_uidivmod>
 800289a:	000b      	movs	r3, r1
 800289c:	b29b      	uxth	r3, r3
 800289e:	1ae3      	subs	r3, r4, r3
 80028a0:	4953      	ldr	r1, [pc, #332]	; (80029f0 <SetSendData+0x624>)
 80028a2:	0018      	movs	r0, r3
 80028a4:	f7fd fcc4 	bl	8000230 <__divsi3>
 80028a8:	0003      	movs	r3, r0
 80028aa:	001a      	movs	r2, r3
 80028ac:	4951      	ldr	r1, [pc, #324]	; (80029f4 <SetSendData+0x628>)
 80028ae:	4b5c      	ldr	r3, [pc, #368]	; (8002a20 <SetSendData+0x654>)
 80028b0:	0018      	movs	r0, r3
 80028b2:	f005 f8e5 	bl	8007a80 <siprintf>
	sprintf(&lteParameters.msgToSend[66], "%d", ((uint16_t) (usrParameters.usrMeasArray[2] % 10000) - (uint16_t) (usrParameters.usrMeasArray[2] % 1000)) / 1000);
 80028b6:	4b4c      	ldr	r3, [pc, #304]	; (80029e8 <SetSendData+0x61c>)
 80028b8:	895b      	ldrh	r3, [r3, #10]
 80028ba:	494d      	ldr	r1, [pc, #308]	; (80029f0 <SetSendData+0x624>)
 80028bc:	0018      	movs	r0, r3
 80028be:	f7fd fcb3 	bl	8000228 <__aeabi_uidivmod>
 80028c2:	000b      	movs	r3, r1
 80028c4:	b29b      	uxth	r3, r3
 80028c6:	001c      	movs	r4, r3
 80028c8:	4b47      	ldr	r3, [pc, #284]	; (80029e8 <SetSendData+0x61c>)
 80028ca:	895b      	ldrh	r3, [r3, #10]
 80028cc:	22fa      	movs	r2, #250	; 0xfa
 80028ce:	0091      	lsls	r1, r2, #2
 80028d0:	0018      	movs	r0, r3
 80028d2:	f7fd fca9 	bl	8000228 <__aeabi_uidivmod>
 80028d6:	000b      	movs	r3, r1
 80028d8:	b29b      	uxth	r3, r3
 80028da:	1ae3      	subs	r3, r4, r3
 80028dc:	22fa      	movs	r2, #250	; 0xfa
 80028de:	0091      	lsls	r1, r2, #2
 80028e0:	0018      	movs	r0, r3
 80028e2:	f7fd fca5 	bl	8000230 <__divsi3>
 80028e6:	0003      	movs	r3, r0
 80028e8:	001a      	movs	r2, r3
 80028ea:	4942      	ldr	r1, [pc, #264]	; (80029f4 <SetSendData+0x628>)
 80028ec:	4b4d      	ldr	r3, [pc, #308]	; (8002a24 <SetSendData+0x658>)
 80028ee:	0018      	movs	r0, r3
 80028f0:	f005 f8c6 	bl	8007a80 <siprintf>
	sprintf(&lteParameters.msgToSend[67], "%d", ((uint16_t) (usrParameters.usrMeasArray[2] % 1000) - (uint16_t) (usrParameters.usrMeasArray[2] % 100)) / 100);
 80028f4:	4b3c      	ldr	r3, [pc, #240]	; (80029e8 <SetSendData+0x61c>)
 80028f6:	895b      	ldrh	r3, [r3, #10]
 80028f8:	22fa      	movs	r2, #250	; 0xfa
 80028fa:	0091      	lsls	r1, r2, #2
 80028fc:	0018      	movs	r0, r3
 80028fe:	f7fd fc93 	bl	8000228 <__aeabi_uidivmod>
 8002902:	000b      	movs	r3, r1
 8002904:	b29b      	uxth	r3, r3
 8002906:	001c      	movs	r4, r3
 8002908:	4b37      	ldr	r3, [pc, #220]	; (80029e8 <SetSendData+0x61c>)
 800290a:	895b      	ldrh	r3, [r3, #10]
 800290c:	2164      	movs	r1, #100	; 0x64
 800290e:	0018      	movs	r0, r3
 8002910:	f7fd fc8a 	bl	8000228 <__aeabi_uidivmod>
 8002914:	000b      	movs	r3, r1
 8002916:	b29b      	uxth	r3, r3
 8002918:	1ae3      	subs	r3, r4, r3
 800291a:	2164      	movs	r1, #100	; 0x64
 800291c:	0018      	movs	r0, r3
 800291e:	f7fd fc87 	bl	8000230 <__divsi3>
 8002922:	0003      	movs	r3, r0
 8002924:	001a      	movs	r2, r3
 8002926:	4933      	ldr	r1, [pc, #204]	; (80029f4 <SetSendData+0x628>)
 8002928:	4b3f      	ldr	r3, [pc, #252]	; (8002a28 <SetSendData+0x65c>)
 800292a:	0018      	movs	r0, r3
 800292c:	f005 f8a8 	bl	8007a80 <siprintf>
	sprintf(&lteParameters.msgToSend[68], "%d", ((uint16_t) (usrParameters.usrMeasArray[2] % 100) - (uint16_t) (usrParameters.usrMeasArray[2] % 10)) / 10);
 8002930:	4b2d      	ldr	r3, [pc, #180]	; (80029e8 <SetSendData+0x61c>)
 8002932:	895b      	ldrh	r3, [r3, #10]
 8002934:	2164      	movs	r1, #100	; 0x64
 8002936:	0018      	movs	r0, r3
 8002938:	f7fd fc76 	bl	8000228 <__aeabi_uidivmod>
 800293c:	000b      	movs	r3, r1
 800293e:	b29b      	uxth	r3, r3
 8002940:	001c      	movs	r4, r3
 8002942:	4b29      	ldr	r3, [pc, #164]	; (80029e8 <SetSendData+0x61c>)
 8002944:	895b      	ldrh	r3, [r3, #10]
 8002946:	210a      	movs	r1, #10
 8002948:	0018      	movs	r0, r3
 800294a:	f7fd fc6d 	bl	8000228 <__aeabi_uidivmod>
 800294e:	000b      	movs	r3, r1
 8002950:	b29b      	uxth	r3, r3
 8002952:	1ae3      	subs	r3, r4, r3
 8002954:	210a      	movs	r1, #10
 8002956:	0018      	movs	r0, r3
 8002958:	f7fd fc6a 	bl	8000230 <__divsi3>
 800295c:	0003      	movs	r3, r0
 800295e:	001a      	movs	r2, r3
 8002960:	4924      	ldr	r1, [pc, #144]	; (80029f4 <SetSendData+0x628>)
 8002962:	4b32      	ldr	r3, [pc, #200]	; (8002a2c <SetSendData+0x660>)
 8002964:	0018      	movs	r0, r3
 8002966:	f005 f88b 	bl	8007a80 <siprintf>
	sprintf(&lteParameters.msgToSend[69], "%d", (uint16_t) (usrParameters.usrMeasArray[2] % 10));
 800296a:	4b1f      	ldr	r3, [pc, #124]	; (80029e8 <SetSendData+0x61c>)
 800296c:	895b      	ldrh	r3, [r3, #10]
 800296e:	210a      	movs	r1, #10
 8002970:	0018      	movs	r0, r3
 8002972:	f7fd fc59 	bl	8000228 <__aeabi_uidivmod>
 8002976:	000b      	movs	r3, r1
 8002978:	b29b      	uxth	r3, r3
 800297a:	001a      	movs	r2, r3
 800297c:	491d      	ldr	r1, [pc, #116]	; (80029f4 <SetSendData+0x628>)
 800297e:	4b2c      	ldr	r3, [pc, #176]	; (8002a30 <SetSendData+0x664>)
 8002980:	0018      	movs	r0, r3
 8002982:	f005 f87d 	bl	8007a80 <siprintf>
	lteParameters.msgToSend[70] = '#';
 8002986:	4b16      	ldr	r3, [pc, #88]	; (80029e0 <SetSendData+0x614>)
 8002988:	227a      	movs	r2, #122	; 0x7a
 800298a:	2123      	movs	r1, #35	; 0x23
 800298c:	5499      	strb	r1, [r3, r2]
	sprintf(&lteParameters.msgToSend[71], "%d", ((uint16_t) (usrParameters.usrMeasArray[3] % 100000) - (uint16_t) (usrParameters.usrMeasArray[3] % 10000)) / 10000);
 800298e:	4b16      	ldr	r3, [pc, #88]	; (80029e8 <SetSendData+0x61c>)
 8002990:	899b      	ldrh	r3, [r3, #12]
 8002992:	4916      	ldr	r1, [pc, #88]	; (80029ec <SetSendData+0x620>)
 8002994:	0018      	movs	r0, r3
 8002996:	f7fd fd31 	bl	80003fc <__aeabi_idivmod>
 800299a:	000b      	movs	r3, r1
 800299c:	b29b      	uxth	r3, r3
 800299e:	001c      	movs	r4, r3
 80029a0:	4b11      	ldr	r3, [pc, #68]	; (80029e8 <SetSendData+0x61c>)
 80029a2:	899b      	ldrh	r3, [r3, #12]
 80029a4:	4912      	ldr	r1, [pc, #72]	; (80029f0 <SetSendData+0x624>)
 80029a6:	0018      	movs	r0, r3
 80029a8:	f7fd fc3e 	bl	8000228 <__aeabi_uidivmod>
 80029ac:	000b      	movs	r3, r1
 80029ae:	b29b      	uxth	r3, r3
 80029b0:	1ae3      	subs	r3, r4, r3
 80029b2:	490f      	ldr	r1, [pc, #60]	; (80029f0 <SetSendData+0x624>)
 80029b4:	0018      	movs	r0, r3
 80029b6:	f7fd fc3b 	bl	8000230 <__divsi3>
 80029ba:	0003      	movs	r3, r0
 80029bc:	001a      	movs	r2, r3
 80029be:	490d      	ldr	r1, [pc, #52]	; (80029f4 <SetSendData+0x628>)
 80029c0:	4b1c      	ldr	r3, [pc, #112]	; (8002a34 <SetSendData+0x668>)
 80029c2:	0018      	movs	r0, r3
 80029c4:	f005 f85c 	bl	8007a80 <siprintf>
	sprintf(&lteParameters.msgToSend[72], "%d", ((uint16_t) (usrParameters.usrMeasArray[3] % 10000) - (uint16_t) (usrParameters.usrMeasArray[3] % 1000)) / 1000);
 80029c8:	4b07      	ldr	r3, [pc, #28]	; (80029e8 <SetSendData+0x61c>)
 80029ca:	899b      	ldrh	r3, [r3, #12]
 80029cc:	4908      	ldr	r1, [pc, #32]	; (80029f0 <SetSendData+0x624>)
 80029ce:	0018      	movs	r0, r3
 80029d0:	f7fd fc2a 	bl	8000228 <__aeabi_uidivmod>
 80029d4:	000b      	movs	r3, r1
 80029d6:	b29b      	uxth	r3, r3
 80029d8:	001c      	movs	r4, r3
 80029da:	4b03      	ldr	r3, [pc, #12]	; (80029e8 <SetSendData+0x61c>)
 80029dc:	899b      	ldrh	r3, [r3, #12]
 80029de:	e02b      	b.n	8002a38 <SetSendData+0x66c>
 80029e0:	2000024c 	.word	0x2000024c
 80029e4:	08008720 	.word	0x08008720
 80029e8:	20000680 	.word	0x20000680
 80029ec:	000186a0 	.word	0x000186a0
 80029f0:	00002710 	.word	0x00002710
 80029f4:	08008724 	.word	0x08008724
 80029f8:	200002b5 	.word	0x200002b5
 80029fc:	200002b6 	.word	0x200002b6
 8002a00:	200002b7 	.word	0x200002b7
 8002a04:	200002b8 	.word	0x200002b8
 8002a08:	200002b9 	.word	0x200002b9
 8002a0c:	200002bb 	.word	0x200002bb
 8002a10:	200002bc 	.word	0x200002bc
 8002a14:	200002bd 	.word	0x200002bd
 8002a18:	200002be 	.word	0x200002be
 8002a1c:	200002bf 	.word	0x200002bf
 8002a20:	200002c1 	.word	0x200002c1
 8002a24:	200002c2 	.word	0x200002c2
 8002a28:	200002c3 	.word	0x200002c3
 8002a2c:	200002c4 	.word	0x200002c4
 8002a30:	200002c5 	.word	0x200002c5
 8002a34:	200002c7 	.word	0x200002c7
 8002a38:	22fa      	movs	r2, #250	; 0xfa
 8002a3a:	0091      	lsls	r1, r2, #2
 8002a3c:	0018      	movs	r0, r3
 8002a3e:	f7fd fbf3 	bl	8000228 <__aeabi_uidivmod>
 8002a42:	000b      	movs	r3, r1
 8002a44:	b29b      	uxth	r3, r3
 8002a46:	1ae3      	subs	r3, r4, r3
 8002a48:	22fa      	movs	r2, #250	; 0xfa
 8002a4a:	0091      	lsls	r1, r2, #2
 8002a4c:	0018      	movs	r0, r3
 8002a4e:	f7fd fbef 	bl	8000230 <__divsi3>
 8002a52:	0003      	movs	r3, r0
 8002a54:	001a      	movs	r2, r3
 8002a56:	49ee      	ldr	r1, [pc, #952]	; (8002e10 <SetSendData+0xa44>)
 8002a58:	4bee      	ldr	r3, [pc, #952]	; (8002e14 <SetSendData+0xa48>)
 8002a5a:	0018      	movs	r0, r3
 8002a5c:	f005 f810 	bl	8007a80 <siprintf>
	sprintf(&lteParameters.msgToSend[73], "%d", ((uint16_t) (usrParameters.usrMeasArray[3] % 1000) - (uint16_t) (usrParameters.usrMeasArray[3] % 100)) / 100);
 8002a60:	4bed      	ldr	r3, [pc, #948]	; (8002e18 <SetSendData+0xa4c>)
 8002a62:	899b      	ldrh	r3, [r3, #12]
 8002a64:	22fa      	movs	r2, #250	; 0xfa
 8002a66:	0091      	lsls	r1, r2, #2
 8002a68:	0018      	movs	r0, r3
 8002a6a:	f7fd fbdd 	bl	8000228 <__aeabi_uidivmod>
 8002a6e:	000b      	movs	r3, r1
 8002a70:	b29b      	uxth	r3, r3
 8002a72:	001c      	movs	r4, r3
 8002a74:	4be8      	ldr	r3, [pc, #928]	; (8002e18 <SetSendData+0xa4c>)
 8002a76:	899b      	ldrh	r3, [r3, #12]
 8002a78:	2164      	movs	r1, #100	; 0x64
 8002a7a:	0018      	movs	r0, r3
 8002a7c:	f7fd fbd4 	bl	8000228 <__aeabi_uidivmod>
 8002a80:	000b      	movs	r3, r1
 8002a82:	b29b      	uxth	r3, r3
 8002a84:	1ae3      	subs	r3, r4, r3
 8002a86:	2164      	movs	r1, #100	; 0x64
 8002a88:	0018      	movs	r0, r3
 8002a8a:	f7fd fbd1 	bl	8000230 <__divsi3>
 8002a8e:	0003      	movs	r3, r0
 8002a90:	001a      	movs	r2, r3
 8002a92:	49df      	ldr	r1, [pc, #892]	; (8002e10 <SetSendData+0xa44>)
 8002a94:	4be1      	ldr	r3, [pc, #900]	; (8002e1c <SetSendData+0xa50>)
 8002a96:	0018      	movs	r0, r3
 8002a98:	f004 fff2 	bl	8007a80 <siprintf>
	sprintf(&lteParameters.msgToSend[74], "%d", ((uint16_t) (usrParameters.usrMeasArray[3] % 100) - (uint16_t) (usrParameters.usrMeasArray[3] % 10)) / 10);
 8002a9c:	4bde      	ldr	r3, [pc, #888]	; (8002e18 <SetSendData+0xa4c>)
 8002a9e:	899b      	ldrh	r3, [r3, #12]
 8002aa0:	2164      	movs	r1, #100	; 0x64
 8002aa2:	0018      	movs	r0, r3
 8002aa4:	f7fd fbc0 	bl	8000228 <__aeabi_uidivmod>
 8002aa8:	000b      	movs	r3, r1
 8002aaa:	b29b      	uxth	r3, r3
 8002aac:	001c      	movs	r4, r3
 8002aae:	4bda      	ldr	r3, [pc, #872]	; (8002e18 <SetSendData+0xa4c>)
 8002ab0:	899b      	ldrh	r3, [r3, #12]
 8002ab2:	210a      	movs	r1, #10
 8002ab4:	0018      	movs	r0, r3
 8002ab6:	f7fd fbb7 	bl	8000228 <__aeabi_uidivmod>
 8002aba:	000b      	movs	r3, r1
 8002abc:	b29b      	uxth	r3, r3
 8002abe:	1ae3      	subs	r3, r4, r3
 8002ac0:	210a      	movs	r1, #10
 8002ac2:	0018      	movs	r0, r3
 8002ac4:	f7fd fbb4 	bl	8000230 <__divsi3>
 8002ac8:	0003      	movs	r3, r0
 8002aca:	001a      	movs	r2, r3
 8002acc:	49d0      	ldr	r1, [pc, #832]	; (8002e10 <SetSendData+0xa44>)
 8002ace:	4bd4      	ldr	r3, [pc, #848]	; (8002e20 <SetSendData+0xa54>)
 8002ad0:	0018      	movs	r0, r3
 8002ad2:	f004 ffd5 	bl	8007a80 <siprintf>
	sprintf(&lteParameters.msgToSend[75], "%d", (uint16_t) (usrParameters.usrMeasArray[3] % 10));
 8002ad6:	4bd0      	ldr	r3, [pc, #832]	; (8002e18 <SetSendData+0xa4c>)
 8002ad8:	899b      	ldrh	r3, [r3, #12]
 8002ada:	210a      	movs	r1, #10
 8002adc:	0018      	movs	r0, r3
 8002ade:	f7fd fba3 	bl	8000228 <__aeabi_uidivmod>
 8002ae2:	000b      	movs	r3, r1
 8002ae4:	b29b      	uxth	r3, r3
 8002ae6:	001a      	movs	r2, r3
 8002ae8:	49c9      	ldr	r1, [pc, #804]	; (8002e10 <SetSendData+0xa44>)
 8002aea:	4bce      	ldr	r3, [pc, #824]	; (8002e24 <SetSendData+0xa58>)
 8002aec:	0018      	movs	r0, r3
 8002aee:	f004 ffc7 	bl	8007a80 <siprintf>
	lteParameters.msgToSend[76] = '#';
 8002af2:	4bcd      	ldr	r3, [pc, #820]	; (8002e28 <SetSendData+0xa5c>)
 8002af4:	2280      	movs	r2, #128	; 0x80
 8002af6:	2123      	movs	r1, #35	; 0x23
 8002af8:	5499      	strb	r1, [r3, r2]
	sprintf(&lteParameters.msgToSend[77], "%d", ((uint16_t) (usrParameters.usrMeasArray[4] % 100000) - (uint16_t) (usrParameters.usrMeasArray[4] % 10000)) / 10000);
 8002afa:	4bc7      	ldr	r3, [pc, #796]	; (8002e18 <SetSendData+0xa4c>)
 8002afc:	89db      	ldrh	r3, [r3, #14]
 8002afe:	49cb      	ldr	r1, [pc, #812]	; (8002e2c <SetSendData+0xa60>)
 8002b00:	0018      	movs	r0, r3
 8002b02:	f7fd fc7b 	bl	80003fc <__aeabi_idivmod>
 8002b06:	000b      	movs	r3, r1
 8002b08:	b29b      	uxth	r3, r3
 8002b0a:	001c      	movs	r4, r3
 8002b0c:	4bc2      	ldr	r3, [pc, #776]	; (8002e18 <SetSendData+0xa4c>)
 8002b0e:	89db      	ldrh	r3, [r3, #14]
 8002b10:	49c7      	ldr	r1, [pc, #796]	; (8002e30 <SetSendData+0xa64>)
 8002b12:	0018      	movs	r0, r3
 8002b14:	f7fd fb88 	bl	8000228 <__aeabi_uidivmod>
 8002b18:	000b      	movs	r3, r1
 8002b1a:	b29b      	uxth	r3, r3
 8002b1c:	1ae3      	subs	r3, r4, r3
 8002b1e:	49c4      	ldr	r1, [pc, #784]	; (8002e30 <SetSendData+0xa64>)
 8002b20:	0018      	movs	r0, r3
 8002b22:	f7fd fb85 	bl	8000230 <__divsi3>
 8002b26:	0003      	movs	r3, r0
 8002b28:	001a      	movs	r2, r3
 8002b2a:	49b9      	ldr	r1, [pc, #740]	; (8002e10 <SetSendData+0xa44>)
 8002b2c:	4bc1      	ldr	r3, [pc, #772]	; (8002e34 <SetSendData+0xa68>)
 8002b2e:	0018      	movs	r0, r3
 8002b30:	f004 ffa6 	bl	8007a80 <siprintf>
	sprintf(&lteParameters.msgToSend[78], "%d", ((uint16_t) (usrParameters.usrMeasArray[4] % 10000) - (uint16_t) (usrParameters.usrMeasArray[4] % 1000)) / 1000);
 8002b34:	4bb8      	ldr	r3, [pc, #736]	; (8002e18 <SetSendData+0xa4c>)
 8002b36:	89db      	ldrh	r3, [r3, #14]
 8002b38:	49bd      	ldr	r1, [pc, #756]	; (8002e30 <SetSendData+0xa64>)
 8002b3a:	0018      	movs	r0, r3
 8002b3c:	f7fd fb74 	bl	8000228 <__aeabi_uidivmod>
 8002b40:	000b      	movs	r3, r1
 8002b42:	b29b      	uxth	r3, r3
 8002b44:	001c      	movs	r4, r3
 8002b46:	4bb4      	ldr	r3, [pc, #720]	; (8002e18 <SetSendData+0xa4c>)
 8002b48:	89db      	ldrh	r3, [r3, #14]
 8002b4a:	22fa      	movs	r2, #250	; 0xfa
 8002b4c:	0091      	lsls	r1, r2, #2
 8002b4e:	0018      	movs	r0, r3
 8002b50:	f7fd fb6a 	bl	8000228 <__aeabi_uidivmod>
 8002b54:	000b      	movs	r3, r1
 8002b56:	b29b      	uxth	r3, r3
 8002b58:	1ae3      	subs	r3, r4, r3
 8002b5a:	22fa      	movs	r2, #250	; 0xfa
 8002b5c:	0091      	lsls	r1, r2, #2
 8002b5e:	0018      	movs	r0, r3
 8002b60:	f7fd fb66 	bl	8000230 <__divsi3>
 8002b64:	0003      	movs	r3, r0
 8002b66:	001a      	movs	r2, r3
 8002b68:	49a9      	ldr	r1, [pc, #676]	; (8002e10 <SetSendData+0xa44>)
 8002b6a:	4bb3      	ldr	r3, [pc, #716]	; (8002e38 <SetSendData+0xa6c>)
 8002b6c:	0018      	movs	r0, r3
 8002b6e:	f004 ff87 	bl	8007a80 <siprintf>
	sprintf(&lteParameters.msgToSend[79], "%d", ((uint16_t) (usrParameters.usrMeasArray[4] % 1000) - (uint16_t) (usrParameters.usrMeasArray[4] % 100)) / 100);
 8002b72:	4ba9      	ldr	r3, [pc, #676]	; (8002e18 <SetSendData+0xa4c>)
 8002b74:	89db      	ldrh	r3, [r3, #14]
 8002b76:	22fa      	movs	r2, #250	; 0xfa
 8002b78:	0091      	lsls	r1, r2, #2
 8002b7a:	0018      	movs	r0, r3
 8002b7c:	f7fd fb54 	bl	8000228 <__aeabi_uidivmod>
 8002b80:	000b      	movs	r3, r1
 8002b82:	b29b      	uxth	r3, r3
 8002b84:	001c      	movs	r4, r3
 8002b86:	4ba4      	ldr	r3, [pc, #656]	; (8002e18 <SetSendData+0xa4c>)
 8002b88:	89db      	ldrh	r3, [r3, #14]
 8002b8a:	2164      	movs	r1, #100	; 0x64
 8002b8c:	0018      	movs	r0, r3
 8002b8e:	f7fd fb4b 	bl	8000228 <__aeabi_uidivmod>
 8002b92:	000b      	movs	r3, r1
 8002b94:	b29b      	uxth	r3, r3
 8002b96:	1ae3      	subs	r3, r4, r3
 8002b98:	2164      	movs	r1, #100	; 0x64
 8002b9a:	0018      	movs	r0, r3
 8002b9c:	f7fd fb48 	bl	8000230 <__divsi3>
 8002ba0:	0003      	movs	r3, r0
 8002ba2:	001a      	movs	r2, r3
 8002ba4:	499a      	ldr	r1, [pc, #616]	; (8002e10 <SetSendData+0xa44>)
 8002ba6:	4ba5      	ldr	r3, [pc, #660]	; (8002e3c <SetSendData+0xa70>)
 8002ba8:	0018      	movs	r0, r3
 8002baa:	f004 ff69 	bl	8007a80 <siprintf>
	sprintf(&lteParameters.msgToSend[80], "%d", ((uint16_t) (usrParameters.usrMeasArray[4] % 100) - (uint16_t) (usrParameters.usrMeasArray[4] % 10)) / 10);
 8002bae:	4b9a      	ldr	r3, [pc, #616]	; (8002e18 <SetSendData+0xa4c>)
 8002bb0:	89db      	ldrh	r3, [r3, #14]
 8002bb2:	2164      	movs	r1, #100	; 0x64
 8002bb4:	0018      	movs	r0, r3
 8002bb6:	f7fd fb37 	bl	8000228 <__aeabi_uidivmod>
 8002bba:	000b      	movs	r3, r1
 8002bbc:	b29b      	uxth	r3, r3
 8002bbe:	001c      	movs	r4, r3
 8002bc0:	4b95      	ldr	r3, [pc, #596]	; (8002e18 <SetSendData+0xa4c>)
 8002bc2:	89db      	ldrh	r3, [r3, #14]
 8002bc4:	210a      	movs	r1, #10
 8002bc6:	0018      	movs	r0, r3
 8002bc8:	f7fd fb2e 	bl	8000228 <__aeabi_uidivmod>
 8002bcc:	000b      	movs	r3, r1
 8002bce:	b29b      	uxth	r3, r3
 8002bd0:	1ae3      	subs	r3, r4, r3
 8002bd2:	210a      	movs	r1, #10
 8002bd4:	0018      	movs	r0, r3
 8002bd6:	f7fd fb2b 	bl	8000230 <__divsi3>
 8002bda:	0003      	movs	r3, r0
 8002bdc:	001a      	movs	r2, r3
 8002bde:	498c      	ldr	r1, [pc, #560]	; (8002e10 <SetSendData+0xa44>)
 8002be0:	4b97      	ldr	r3, [pc, #604]	; (8002e40 <SetSendData+0xa74>)
 8002be2:	0018      	movs	r0, r3
 8002be4:	f004 ff4c 	bl	8007a80 <siprintf>
	sprintf(&lteParameters.msgToSend[81], "%d", (uint16_t) (usrParameters.usrMeasArray[4] % 10));
 8002be8:	4b8b      	ldr	r3, [pc, #556]	; (8002e18 <SetSendData+0xa4c>)
 8002bea:	89db      	ldrh	r3, [r3, #14]
 8002bec:	210a      	movs	r1, #10
 8002bee:	0018      	movs	r0, r3
 8002bf0:	f7fd fb1a 	bl	8000228 <__aeabi_uidivmod>
 8002bf4:	000b      	movs	r3, r1
 8002bf6:	b29b      	uxth	r3, r3
 8002bf8:	001a      	movs	r2, r3
 8002bfa:	4985      	ldr	r1, [pc, #532]	; (8002e10 <SetSendData+0xa44>)
 8002bfc:	4b91      	ldr	r3, [pc, #580]	; (8002e44 <SetSendData+0xa78>)
 8002bfe:	0018      	movs	r0, r3
 8002c00:	f004 ff3e 	bl	8007a80 <siprintf>
	lteParameters.msgToSend[82] = '#';
 8002c04:	4b88      	ldr	r3, [pc, #544]	; (8002e28 <SetSendData+0xa5c>)
 8002c06:	2286      	movs	r2, #134	; 0x86
 8002c08:	2123      	movs	r1, #35	; 0x23
 8002c0a:	5499      	strb	r1, [r3, r2]
	sprintf(&lteParameters.msgToSend[83], "%d", ((uint16_t) (usrParameters.usrMeasArray[5] % 100000) - (uint16_t) (usrParameters.usrMeasArray[5] % 10000)) / 10000);
 8002c0c:	4b82      	ldr	r3, [pc, #520]	; (8002e18 <SetSendData+0xa4c>)
 8002c0e:	8a1b      	ldrh	r3, [r3, #16]
 8002c10:	4986      	ldr	r1, [pc, #536]	; (8002e2c <SetSendData+0xa60>)
 8002c12:	0018      	movs	r0, r3
 8002c14:	f7fd fbf2 	bl	80003fc <__aeabi_idivmod>
 8002c18:	000b      	movs	r3, r1
 8002c1a:	b29b      	uxth	r3, r3
 8002c1c:	001c      	movs	r4, r3
 8002c1e:	4b7e      	ldr	r3, [pc, #504]	; (8002e18 <SetSendData+0xa4c>)
 8002c20:	8a1b      	ldrh	r3, [r3, #16]
 8002c22:	4983      	ldr	r1, [pc, #524]	; (8002e30 <SetSendData+0xa64>)
 8002c24:	0018      	movs	r0, r3
 8002c26:	f7fd faff 	bl	8000228 <__aeabi_uidivmod>
 8002c2a:	000b      	movs	r3, r1
 8002c2c:	b29b      	uxth	r3, r3
 8002c2e:	1ae3      	subs	r3, r4, r3
 8002c30:	497f      	ldr	r1, [pc, #508]	; (8002e30 <SetSendData+0xa64>)
 8002c32:	0018      	movs	r0, r3
 8002c34:	f7fd fafc 	bl	8000230 <__divsi3>
 8002c38:	0003      	movs	r3, r0
 8002c3a:	001a      	movs	r2, r3
 8002c3c:	4974      	ldr	r1, [pc, #464]	; (8002e10 <SetSendData+0xa44>)
 8002c3e:	4b82      	ldr	r3, [pc, #520]	; (8002e48 <SetSendData+0xa7c>)
 8002c40:	0018      	movs	r0, r3
 8002c42:	f004 ff1d 	bl	8007a80 <siprintf>
	sprintf(&lteParameters.msgToSend[84], "%d", ((uint16_t) (usrParameters.usrMeasArray[5] % 10000) - (uint16_t) (usrParameters.usrMeasArray[5] % 1000)) / 1000);
 8002c46:	4b74      	ldr	r3, [pc, #464]	; (8002e18 <SetSendData+0xa4c>)
 8002c48:	8a1b      	ldrh	r3, [r3, #16]
 8002c4a:	4979      	ldr	r1, [pc, #484]	; (8002e30 <SetSendData+0xa64>)
 8002c4c:	0018      	movs	r0, r3
 8002c4e:	f7fd faeb 	bl	8000228 <__aeabi_uidivmod>
 8002c52:	000b      	movs	r3, r1
 8002c54:	b29b      	uxth	r3, r3
 8002c56:	001c      	movs	r4, r3
 8002c58:	4b6f      	ldr	r3, [pc, #444]	; (8002e18 <SetSendData+0xa4c>)
 8002c5a:	8a1b      	ldrh	r3, [r3, #16]
 8002c5c:	22fa      	movs	r2, #250	; 0xfa
 8002c5e:	0091      	lsls	r1, r2, #2
 8002c60:	0018      	movs	r0, r3
 8002c62:	f7fd fae1 	bl	8000228 <__aeabi_uidivmod>
 8002c66:	000b      	movs	r3, r1
 8002c68:	b29b      	uxth	r3, r3
 8002c6a:	1ae3      	subs	r3, r4, r3
 8002c6c:	22fa      	movs	r2, #250	; 0xfa
 8002c6e:	0091      	lsls	r1, r2, #2
 8002c70:	0018      	movs	r0, r3
 8002c72:	f7fd fadd 	bl	8000230 <__divsi3>
 8002c76:	0003      	movs	r3, r0
 8002c78:	001a      	movs	r2, r3
 8002c7a:	4965      	ldr	r1, [pc, #404]	; (8002e10 <SetSendData+0xa44>)
 8002c7c:	4b73      	ldr	r3, [pc, #460]	; (8002e4c <SetSendData+0xa80>)
 8002c7e:	0018      	movs	r0, r3
 8002c80:	f004 fefe 	bl	8007a80 <siprintf>
	sprintf(&lteParameters.msgToSend[85], "%d", ((uint16_t) (usrParameters.usrMeasArray[5] % 1000) - (uint16_t) (usrParameters.usrMeasArray[5] % 100)) / 100);
 8002c84:	4b64      	ldr	r3, [pc, #400]	; (8002e18 <SetSendData+0xa4c>)
 8002c86:	8a1b      	ldrh	r3, [r3, #16]
 8002c88:	22fa      	movs	r2, #250	; 0xfa
 8002c8a:	0091      	lsls	r1, r2, #2
 8002c8c:	0018      	movs	r0, r3
 8002c8e:	f7fd facb 	bl	8000228 <__aeabi_uidivmod>
 8002c92:	000b      	movs	r3, r1
 8002c94:	b29b      	uxth	r3, r3
 8002c96:	001c      	movs	r4, r3
 8002c98:	4b5f      	ldr	r3, [pc, #380]	; (8002e18 <SetSendData+0xa4c>)
 8002c9a:	8a1b      	ldrh	r3, [r3, #16]
 8002c9c:	2164      	movs	r1, #100	; 0x64
 8002c9e:	0018      	movs	r0, r3
 8002ca0:	f7fd fac2 	bl	8000228 <__aeabi_uidivmod>
 8002ca4:	000b      	movs	r3, r1
 8002ca6:	b29b      	uxth	r3, r3
 8002ca8:	1ae3      	subs	r3, r4, r3
 8002caa:	2164      	movs	r1, #100	; 0x64
 8002cac:	0018      	movs	r0, r3
 8002cae:	f7fd fabf 	bl	8000230 <__divsi3>
 8002cb2:	0003      	movs	r3, r0
 8002cb4:	001a      	movs	r2, r3
 8002cb6:	4956      	ldr	r1, [pc, #344]	; (8002e10 <SetSendData+0xa44>)
 8002cb8:	4b65      	ldr	r3, [pc, #404]	; (8002e50 <SetSendData+0xa84>)
 8002cba:	0018      	movs	r0, r3
 8002cbc:	f004 fee0 	bl	8007a80 <siprintf>
	sprintf(&lteParameters.msgToSend[86], "%d", ((uint16_t) (usrParameters.usrMeasArray[5] % 100) - (uint16_t) (usrParameters.usrMeasArray[5] % 10)) / 10);
 8002cc0:	4b55      	ldr	r3, [pc, #340]	; (8002e18 <SetSendData+0xa4c>)
 8002cc2:	8a1b      	ldrh	r3, [r3, #16]
 8002cc4:	2164      	movs	r1, #100	; 0x64
 8002cc6:	0018      	movs	r0, r3
 8002cc8:	f7fd faae 	bl	8000228 <__aeabi_uidivmod>
 8002ccc:	000b      	movs	r3, r1
 8002cce:	b29b      	uxth	r3, r3
 8002cd0:	001c      	movs	r4, r3
 8002cd2:	4b51      	ldr	r3, [pc, #324]	; (8002e18 <SetSendData+0xa4c>)
 8002cd4:	8a1b      	ldrh	r3, [r3, #16]
 8002cd6:	210a      	movs	r1, #10
 8002cd8:	0018      	movs	r0, r3
 8002cda:	f7fd faa5 	bl	8000228 <__aeabi_uidivmod>
 8002cde:	000b      	movs	r3, r1
 8002ce0:	b29b      	uxth	r3, r3
 8002ce2:	1ae3      	subs	r3, r4, r3
 8002ce4:	210a      	movs	r1, #10
 8002ce6:	0018      	movs	r0, r3
 8002ce8:	f7fd faa2 	bl	8000230 <__divsi3>
 8002cec:	0003      	movs	r3, r0
 8002cee:	001a      	movs	r2, r3
 8002cf0:	4947      	ldr	r1, [pc, #284]	; (8002e10 <SetSendData+0xa44>)
 8002cf2:	4b58      	ldr	r3, [pc, #352]	; (8002e54 <SetSendData+0xa88>)
 8002cf4:	0018      	movs	r0, r3
 8002cf6:	f004 fec3 	bl	8007a80 <siprintf>
	sprintf(&lteParameters.msgToSend[87], "%d", (uint16_t) (usrParameters.usrMeasArray[5] % 10));
 8002cfa:	4b47      	ldr	r3, [pc, #284]	; (8002e18 <SetSendData+0xa4c>)
 8002cfc:	8a1b      	ldrh	r3, [r3, #16]
 8002cfe:	210a      	movs	r1, #10
 8002d00:	0018      	movs	r0, r3
 8002d02:	f7fd fa91 	bl	8000228 <__aeabi_uidivmod>
 8002d06:	000b      	movs	r3, r1
 8002d08:	b29b      	uxth	r3, r3
 8002d0a:	001a      	movs	r2, r3
 8002d0c:	4940      	ldr	r1, [pc, #256]	; (8002e10 <SetSendData+0xa44>)
 8002d0e:	4b52      	ldr	r3, [pc, #328]	; (8002e58 <SetSendData+0xa8c>)
 8002d10:	0018      	movs	r0, r3
 8002d12:	f004 feb5 	bl	8007a80 <siprintf>
	lteParameters.msgToSend[88] = '#';
 8002d16:	4b44      	ldr	r3, [pc, #272]	; (8002e28 <SetSendData+0xa5c>)
 8002d18:	228c      	movs	r2, #140	; 0x8c
 8002d1a:	2123      	movs	r1, #35	; 0x23
 8002d1c:	5499      	strb	r1, [r3, r2]
	sprintf(&lteParameters.msgToSend[89], "%d", ((uint16_t) (usrParameters.usrMeasArray[6] % 100000) - (uint16_t) (usrParameters.usrMeasArray[6] % 10000)) / 10000);
 8002d1e:	4b3e      	ldr	r3, [pc, #248]	; (8002e18 <SetSendData+0xa4c>)
 8002d20:	8a5b      	ldrh	r3, [r3, #18]
 8002d22:	4942      	ldr	r1, [pc, #264]	; (8002e2c <SetSendData+0xa60>)
 8002d24:	0018      	movs	r0, r3
 8002d26:	f7fd fb69 	bl	80003fc <__aeabi_idivmod>
 8002d2a:	000b      	movs	r3, r1
 8002d2c:	b29b      	uxth	r3, r3
 8002d2e:	001c      	movs	r4, r3
 8002d30:	4b39      	ldr	r3, [pc, #228]	; (8002e18 <SetSendData+0xa4c>)
 8002d32:	8a5b      	ldrh	r3, [r3, #18]
 8002d34:	493e      	ldr	r1, [pc, #248]	; (8002e30 <SetSendData+0xa64>)
 8002d36:	0018      	movs	r0, r3
 8002d38:	f7fd fa76 	bl	8000228 <__aeabi_uidivmod>
 8002d3c:	000b      	movs	r3, r1
 8002d3e:	b29b      	uxth	r3, r3
 8002d40:	1ae3      	subs	r3, r4, r3
 8002d42:	493b      	ldr	r1, [pc, #236]	; (8002e30 <SetSendData+0xa64>)
 8002d44:	0018      	movs	r0, r3
 8002d46:	f7fd fa73 	bl	8000230 <__divsi3>
 8002d4a:	0003      	movs	r3, r0
 8002d4c:	001a      	movs	r2, r3
 8002d4e:	4930      	ldr	r1, [pc, #192]	; (8002e10 <SetSendData+0xa44>)
 8002d50:	4b42      	ldr	r3, [pc, #264]	; (8002e5c <SetSendData+0xa90>)
 8002d52:	0018      	movs	r0, r3
 8002d54:	f004 fe94 	bl	8007a80 <siprintf>
	sprintf(&lteParameters.msgToSend[90], "%d", ((uint16_t) (usrParameters.usrMeasArray[6] % 10000) - (uint16_t) (usrParameters.usrMeasArray[6] % 1000)) / 1000);
 8002d58:	4b2f      	ldr	r3, [pc, #188]	; (8002e18 <SetSendData+0xa4c>)
 8002d5a:	8a5b      	ldrh	r3, [r3, #18]
 8002d5c:	4934      	ldr	r1, [pc, #208]	; (8002e30 <SetSendData+0xa64>)
 8002d5e:	0018      	movs	r0, r3
 8002d60:	f7fd fa62 	bl	8000228 <__aeabi_uidivmod>
 8002d64:	000b      	movs	r3, r1
 8002d66:	b29b      	uxth	r3, r3
 8002d68:	001c      	movs	r4, r3
 8002d6a:	4b2b      	ldr	r3, [pc, #172]	; (8002e18 <SetSendData+0xa4c>)
 8002d6c:	8a5b      	ldrh	r3, [r3, #18]
 8002d6e:	22fa      	movs	r2, #250	; 0xfa
 8002d70:	0091      	lsls	r1, r2, #2
 8002d72:	0018      	movs	r0, r3
 8002d74:	f7fd fa58 	bl	8000228 <__aeabi_uidivmod>
 8002d78:	000b      	movs	r3, r1
 8002d7a:	b29b      	uxth	r3, r3
 8002d7c:	1ae3      	subs	r3, r4, r3
 8002d7e:	22fa      	movs	r2, #250	; 0xfa
 8002d80:	0091      	lsls	r1, r2, #2
 8002d82:	0018      	movs	r0, r3
 8002d84:	f7fd fa54 	bl	8000230 <__divsi3>
 8002d88:	0003      	movs	r3, r0
 8002d8a:	001a      	movs	r2, r3
 8002d8c:	4920      	ldr	r1, [pc, #128]	; (8002e10 <SetSendData+0xa44>)
 8002d8e:	4b34      	ldr	r3, [pc, #208]	; (8002e60 <SetSendData+0xa94>)
 8002d90:	0018      	movs	r0, r3
 8002d92:	f004 fe75 	bl	8007a80 <siprintf>
	sprintf(&lteParameters.msgToSend[91], "%d", ((uint16_t) (usrParameters.usrMeasArray[6] % 1000) - (uint16_t) (usrParameters.usrMeasArray[6] % 100)) / 100);
 8002d96:	4b20      	ldr	r3, [pc, #128]	; (8002e18 <SetSendData+0xa4c>)
 8002d98:	8a5b      	ldrh	r3, [r3, #18]
 8002d9a:	22fa      	movs	r2, #250	; 0xfa
 8002d9c:	0091      	lsls	r1, r2, #2
 8002d9e:	0018      	movs	r0, r3
 8002da0:	f7fd fa42 	bl	8000228 <__aeabi_uidivmod>
 8002da4:	000b      	movs	r3, r1
 8002da6:	b29b      	uxth	r3, r3
 8002da8:	001c      	movs	r4, r3
 8002daa:	4b1b      	ldr	r3, [pc, #108]	; (8002e18 <SetSendData+0xa4c>)
 8002dac:	8a5b      	ldrh	r3, [r3, #18]
 8002dae:	2164      	movs	r1, #100	; 0x64
 8002db0:	0018      	movs	r0, r3
 8002db2:	f7fd fa39 	bl	8000228 <__aeabi_uidivmod>
 8002db6:	000b      	movs	r3, r1
 8002db8:	b29b      	uxth	r3, r3
 8002dba:	1ae3      	subs	r3, r4, r3
 8002dbc:	2164      	movs	r1, #100	; 0x64
 8002dbe:	0018      	movs	r0, r3
 8002dc0:	f7fd fa36 	bl	8000230 <__divsi3>
 8002dc4:	0003      	movs	r3, r0
 8002dc6:	001a      	movs	r2, r3
 8002dc8:	4911      	ldr	r1, [pc, #68]	; (8002e10 <SetSendData+0xa44>)
 8002dca:	4b26      	ldr	r3, [pc, #152]	; (8002e64 <SetSendData+0xa98>)
 8002dcc:	0018      	movs	r0, r3
 8002dce:	f004 fe57 	bl	8007a80 <siprintf>
	sprintf(&lteParameters.msgToSend[92], "%d", ((uint16_t) (usrParameters.usrMeasArray[6] % 100) - (uint16_t) (usrParameters.usrMeasArray[6] % 10)) / 10);
 8002dd2:	4b11      	ldr	r3, [pc, #68]	; (8002e18 <SetSendData+0xa4c>)
 8002dd4:	8a5b      	ldrh	r3, [r3, #18]
 8002dd6:	2164      	movs	r1, #100	; 0x64
 8002dd8:	0018      	movs	r0, r3
 8002dda:	f7fd fa25 	bl	8000228 <__aeabi_uidivmod>
 8002dde:	000b      	movs	r3, r1
 8002de0:	b29b      	uxth	r3, r3
 8002de2:	001c      	movs	r4, r3
 8002de4:	4b0c      	ldr	r3, [pc, #48]	; (8002e18 <SetSendData+0xa4c>)
 8002de6:	8a5b      	ldrh	r3, [r3, #18]
 8002de8:	210a      	movs	r1, #10
 8002dea:	0018      	movs	r0, r3
 8002dec:	f7fd fa1c 	bl	8000228 <__aeabi_uidivmod>
 8002df0:	000b      	movs	r3, r1
 8002df2:	b29b      	uxth	r3, r3
 8002df4:	1ae3      	subs	r3, r4, r3
 8002df6:	210a      	movs	r1, #10
 8002df8:	0018      	movs	r0, r3
 8002dfa:	f7fd fa19 	bl	8000230 <__divsi3>
 8002dfe:	0003      	movs	r3, r0
 8002e00:	001a      	movs	r2, r3
 8002e02:	4903      	ldr	r1, [pc, #12]	; (8002e10 <SetSendData+0xa44>)
 8002e04:	4b18      	ldr	r3, [pc, #96]	; (8002e68 <SetSendData+0xa9c>)
 8002e06:	0018      	movs	r0, r3
 8002e08:	f004 fe3a 	bl	8007a80 <siprintf>
 8002e0c:	e02e      	b.n	8002e6c <SetSendData+0xaa0>
 8002e0e:	46c0      	nop			; (mov r8, r8)
 8002e10:	08008724 	.word	0x08008724
 8002e14:	200002c8 	.word	0x200002c8
 8002e18:	20000680 	.word	0x20000680
 8002e1c:	200002c9 	.word	0x200002c9
 8002e20:	200002ca 	.word	0x200002ca
 8002e24:	200002cb 	.word	0x200002cb
 8002e28:	2000024c 	.word	0x2000024c
 8002e2c:	000186a0 	.word	0x000186a0
 8002e30:	00002710 	.word	0x00002710
 8002e34:	200002cd 	.word	0x200002cd
 8002e38:	200002ce 	.word	0x200002ce
 8002e3c:	200002cf 	.word	0x200002cf
 8002e40:	200002d0 	.word	0x200002d0
 8002e44:	200002d1 	.word	0x200002d1
 8002e48:	200002d3 	.word	0x200002d3
 8002e4c:	200002d4 	.word	0x200002d4
 8002e50:	200002d5 	.word	0x200002d5
 8002e54:	200002d6 	.word	0x200002d6
 8002e58:	200002d7 	.word	0x200002d7
 8002e5c:	200002d9 	.word	0x200002d9
 8002e60:	200002da 	.word	0x200002da
 8002e64:	200002db 	.word	0x200002db
 8002e68:	200002dc 	.word	0x200002dc
	sprintf(&lteParameters.msgToSend[93], "%d", (uint16_t) (usrParameters.usrMeasArray[6] % 10));
 8002e6c:	4bd7      	ldr	r3, [pc, #860]	; (80031cc <SetSendData+0xe00>)
 8002e6e:	8a5b      	ldrh	r3, [r3, #18]
 8002e70:	210a      	movs	r1, #10
 8002e72:	0018      	movs	r0, r3
 8002e74:	f7fd f9d8 	bl	8000228 <__aeabi_uidivmod>
 8002e78:	000b      	movs	r3, r1
 8002e7a:	b29b      	uxth	r3, r3
 8002e7c:	001a      	movs	r2, r3
 8002e7e:	49d4      	ldr	r1, [pc, #848]	; (80031d0 <SetSendData+0xe04>)
 8002e80:	4bd4      	ldr	r3, [pc, #848]	; (80031d4 <SetSendData+0xe08>)
 8002e82:	0018      	movs	r0, r3
 8002e84:	f004 fdfc 	bl	8007a80 <siprintf>
	lteParameters.msgToSend[94] = '#';
 8002e88:	4bd3      	ldr	r3, [pc, #844]	; (80031d8 <SetSendData+0xe0c>)
 8002e8a:	2292      	movs	r2, #146	; 0x92
 8002e8c:	2123      	movs	r1, #35	; 0x23
 8002e8e:	5499      	strb	r1, [r3, r2]
	sprintf(&lteParameters.msgToSend[95], "%d", ((uint16_t) (usrParameters.usrMeasArray[7] % 100000) - (uint16_t) (usrParameters.usrMeasArray[7] % 10000)) / 10000);
 8002e90:	4bce      	ldr	r3, [pc, #824]	; (80031cc <SetSendData+0xe00>)
 8002e92:	8a9b      	ldrh	r3, [r3, #20]
 8002e94:	49d1      	ldr	r1, [pc, #836]	; (80031dc <SetSendData+0xe10>)
 8002e96:	0018      	movs	r0, r3
 8002e98:	f7fd fab0 	bl	80003fc <__aeabi_idivmod>
 8002e9c:	000b      	movs	r3, r1
 8002e9e:	b29b      	uxth	r3, r3
 8002ea0:	001c      	movs	r4, r3
 8002ea2:	4bca      	ldr	r3, [pc, #808]	; (80031cc <SetSendData+0xe00>)
 8002ea4:	8a9b      	ldrh	r3, [r3, #20]
 8002ea6:	49ce      	ldr	r1, [pc, #824]	; (80031e0 <SetSendData+0xe14>)
 8002ea8:	0018      	movs	r0, r3
 8002eaa:	f7fd f9bd 	bl	8000228 <__aeabi_uidivmod>
 8002eae:	000b      	movs	r3, r1
 8002eb0:	b29b      	uxth	r3, r3
 8002eb2:	1ae3      	subs	r3, r4, r3
 8002eb4:	49ca      	ldr	r1, [pc, #808]	; (80031e0 <SetSendData+0xe14>)
 8002eb6:	0018      	movs	r0, r3
 8002eb8:	f7fd f9ba 	bl	8000230 <__divsi3>
 8002ebc:	0003      	movs	r3, r0
 8002ebe:	001a      	movs	r2, r3
 8002ec0:	49c3      	ldr	r1, [pc, #780]	; (80031d0 <SetSendData+0xe04>)
 8002ec2:	4bc8      	ldr	r3, [pc, #800]	; (80031e4 <SetSendData+0xe18>)
 8002ec4:	0018      	movs	r0, r3
 8002ec6:	f004 fddb 	bl	8007a80 <siprintf>
	sprintf(&lteParameters.msgToSend[96], "%d", ((uint16_t) (usrParameters.usrMeasArray[7] % 10000) - (uint16_t) (usrParameters.usrMeasArray[7] % 1000)) / 1000);
 8002eca:	4bc0      	ldr	r3, [pc, #768]	; (80031cc <SetSendData+0xe00>)
 8002ecc:	8a9b      	ldrh	r3, [r3, #20]
 8002ece:	49c4      	ldr	r1, [pc, #784]	; (80031e0 <SetSendData+0xe14>)
 8002ed0:	0018      	movs	r0, r3
 8002ed2:	f7fd f9a9 	bl	8000228 <__aeabi_uidivmod>
 8002ed6:	000b      	movs	r3, r1
 8002ed8:	b29b      	uxth	r3, r3
 8002eda:	001c      	movs	r4, r3
 8002edc:	4bbb      	ldr	r3, [pc, #748]	; (80031cc <SetSendData+0xe00>)
 8002ede:	8a9b      	ldrh	r3, [r3, #20]
 8002ee0:	22fa      	movs	r2, #250	; 0xfa
 8002ee2:	0091      	lsls	r1, r2, #2
 8002ee4:	0018      	movs	r0, r3
 8002ee6:	f7fd f99f 	bl	8000228 <__aeabi_uidivmod>
 8002eea:	000b      	movs	r3, r1
 8002eec:	b29b      	uxth	r3, r3
 8002eee:	1ae3      	subs	r3, r4, r3
 8002ef0:	22fa      	movs	r2, #250	; 0xfa
 8002ef2:	0091      	lsls	r1, r2, #2
 8002ef4:	0018      	movs	r0, r3
 8002ef6:	f7fd f99b 	bl	8000230 <__divsi3>
 8002efa:	0003      	movs	r3, r0
 8002efc:	001a      	movs	r2, r3
 8002efe:	49b4      	ldr	r1, [pc, #720]	; (80031d0 <SetSendData+0xe04>)
 8002f00:	4bb9      	ldr	r3, [pc, #740]	; (80031e8 <SetSendData+0xe1c>)
 8002f02:	0018      	movs	r0, r3
 8002f04:	f004 fdbc 	bl	8007a80 <siprintf>
	sprintf(&lteParameters.msgToSend[97], "%d", ((uint16_t) (usrParameters.usrMeasArray[7] % 1000) - (uint16_t) (usrParameters.usrMeasArray[7] % 100)) / 100);
 8002f08:	4bb0      	ldr	r3, [pc, #704]	; (80031cc <SetSendData+0xe00>)
 8002f0a:	8a9b      	ldrh	r3, [r3, #20]
 8002f0c:	22fa      	movs	r2, #250	; 0xfa
 8002f0e:	0091      	lsls	r1, r2, #2
 8002f10:	0018      	movs	r0, r3
 8002f12:	f7fd f989 	bl	8000228 <__aeabi_uidivmod>
 8002f16:	000b      	movs	r3, r1
 8002f18:	b29b      	uxth	r3, r3
 8002f1a:	001c      	movs	r4, r3
 8002f1c:	4bab      	ldr	r3, [pc, #684]	; (80031cc <SetSendData+0xe00>)
 8002f1e:	8a9b      	ldrh	r3, [r3, #20]
 8002f20:	2164      	movs	r1, #100	; 0x64
 8002f22:	0018      	movs	r0, r3
 8002f24:	f7fd f980 	bl	8000228 <__aeabi_uidivmod>
 8002f28:	000b      	movs	r3, r1
 8002f2a:	b29b      	uxth	r3, r3
 8002f2c:	1ae3      	subs	r3, r4, r3
 8002f2e:	2164      	movs	r1, #100	; 0x64
 8002f30:	0018      	movs	r0, r3
 8002f32:	f7fd f97d 	bl	8000230 <__divsi3>
 8002f36:	0003      	movs	r3, r0
 8002f38:	001a      	movs	r2, r3
 8002f3a:	49a5      	ldr	r1, [pc, #660]	; (80031d0 <SetSendData+0xe04>)
 8002f3c:	4bab      	ldr	r3, [pc, #684]	; (80031ec <SetSendData+0xe20>)
 8002f3e:	0018      	movs	r0, r3
 8002f40:	f004 fd9e 	bl	8007a80 <siprintf>
	sprintf(&lteParameters.msgToSend[98], "%d", ((uint16_t) (usrParameters.usrMeasArray[7] % 100) - (uint16_t) (usrParameters.usrMeasArray[7] % 10)) / 10);
 8002f44:	4ba1      	ldr	r3, [pc, #644]	; (80031cc <SetSendData+0xe00>)
 8002f46:	8a9b      	ldrh	r3, [r3, #20]
 8002f48:	2164      	movs	r1, #100	; 0x64
 8002f4a:	0018      	movs	r0, r3
 8002f4c:	f7fd f96c 	bl	8000228 <__aeabi_uidivmod>
 8002f50:	000b      	movs	r3, r1
 8002f52:	b29b      	uxth	r3, r3
 8002f54:	001c      	movs	r4, r3
 8002f56:	4b9d      	ldr	r3, [pc, #628]	; (80031cc <SetSendData+0xe00>)
 8002f58:	8a9b      	ldrh	r3, [r3, #20]
 8002f5a:	210a      	movs	r1, #10
 8002f5c:	0018      	movs	r0, r3
 8002f5e:	f7fd f963 	bl	8000228 <__aeabi_uidivmod>
 8002f62:	000b      	movs	r3, r1
 8002f64:	b29b      	uxth	r3, r3
 8002f66:	1ae3      	subs	r3, r4, r3
 8002f68:	210a      	movs	r1, #10
 8002f6a:	0018      	movs	r0, r3
 8002f6c:	f7fd f960 	bl	8000230 <__divsi3>
 8002f70:	0003      	movs	r3, r0
 8002f72:	001a      	movs	r2, r3
 8002f74:	4996      	ldr	r1, [pc, #600]	; (80031d0 <SetSendData+0xe04>)
 8002f76:	4b9e      	ldr	r3, [pc, #632]	; (80031f0 <SetSendData+0xe24>)
 8002f78:	0018      	movs	r0, r3
 8002f7a:	f004 fd81 	bl	8007a80 <siprintf>
	sprintf(&lteParameters.msgToSend[99], "%d", (uint16_t) (usrParameters.usrMeasArray[7] % 10));
 8002f7e:	4b93      	ldr	r3, [pc, #588]	; (80031cc <SetSendData+0xe00>)
 8002f80:	8a9b      	ldrh	r3, [r3, #20]
 8002f82:	210a      	movs	r1, #10
 8002f84:	0018      	movs	r0, r3
 8002f86:	f7fd f94f 	bl	8000228 <__aeabi_uidivmod>
 8002f8a:	000b      	movs	r3, r1
 8002f8c:	b29b      	uxth	r3, r3
 8002f8e:	001a      	movs	r2, r3
 8002f90:	498f      	ldr	r1, [pc, #572]	; (80031d0 <SetSendData+0xe04>)
 8002f92:	4b98      	ldr	r3, [pc, #608]	; (80031f4 <SetSendData+0xe28>)
 8002f94:	0018      	movs	r0, r3
 8002f96:	f004 fd73 	bl	8007a80 <siprintf>
	lteParameters.msgToSend[100] = '#';
 8002f9a:	4b8f      	ldr	r3, [pc, #572]	; (80031d8 <SetSendData+0xe0c>)
 8002f9c:	2298      	movs	r2, #152	; 0x98
 8002f9e:	2123      	movs	r1, #35	; 0x23
 8002fa0:	5499      	strb	r1, [r3, r2]
	sprintf(&lteParameters.msgToSend[101], "%d", ((uint16_t) (usrParameters.usrMeasArray[8] % 100000) - (uint16_t) (usrParameters.usrMeasArray[8] % 10000)) / 10000);
 8002fa2:	4b8a      	ldr	r3, [pc, #552]	; (80031cc <SetSendData+0xe00>)
 8002fa4:	8adb      	ldrh	r3, [r3, #22]
 8002fa6:	498d      	ldr	r1, [pc, #564]	; (80031dc <SetSendData+0xe10>)
 8002fa8:	0018      	movs	r0, r3
 8002faa:	f7fd fa27 	bl	80003fc <__aeabi_idivmod>
 8002fae:	000b      	movs	r3, r1
 8002fb0:	b29b      	uxth	r3, r3
 8002fb2:	001c      	movs	r4, r3
 8002fb4:	4b85      	ldr	r3, [pc, #532]	; (80031cc <SetSendData+0xe00>)
 8002fb6:	8adb      	ldrh	r3, [r3, #22]
 8002fb8:	4989      	ldr	r1, [pc, #548]	; (80031e0 <SetSendData+0xe14>)
 8002fba:	0018      	movs	r0, r3
 8002fbc:	f7fd f934 	bl	8000228 <__aeabi_uidivmod>
 8002fc0:	000b      	movs	r3, r1
 8002fc2:	b29b      	uxth	r3, r3
 8002fc4:	1ae3      	subs	r3, r4, r3
 8002fc6:	4986      	ldr	r1, [pc, #536]	; (80031e0 <SetSendData+0xe14>)
 8002fc8:	0018      	movs	r0, r3
 8002fca:	f7fd f931 	bl	8000230 <__divsi3>
 8002fce:	0003      	movs	r3, r0
 8002fd0:	001a      	movs	r2, r3
 8002fd2:	497f      	ldr	r1, [pc, #508]	; (80031d0 <SetSendData+0xe04>)
 8002fd4:	4b88      	ldr	r3, [pc, #544]	; (80031f8 <SetSendData+0xe2c>)
 8002fd6:	0018      	movs	r0, r3
 8002fd8:	f004 fd52 	bl	8007a80 <siprintf>
	sprintf(&lteParameters.msgToSend[102], "%d", ((uint16_t) (usrParameters.usrMeasArray[8] % 10000) - (uint16_t) (usrParameters.usrMeasArray[8] % 1000)) / 1000);
 8002fdc:	4b7b      	ldr	r3, [pc, #492]	; (80031cc <SetSendData+0xe00>)
 8002fde:	8adb      	ldrh	r3, [r3, #22]
 8002fe0:	497f      	ldr	r1, [pc, #508]	; (80031e0 <SetSendData+0xe14>)
 8002fe2:	0018      	movs	r0, r3
 8002fe4:	f7fd f920 	bl	8000228 <__aeabi_uidivmod>
 8002fe8:	000b      	movs	r3, r1
 8002fea:	b29b      	uxth	r3, r3
 8002fec:	001c      	movs	r4, r3
 8002fee:	4b77      	ldr	r3, [pc, #476]	; (80031cc <SetSendData+0xe00>)
 8002ff0:	8adb      	ldrh	r3, [r3, #22]
 8002ff2:	22fa      	movs	r2, #250	; 0xfa
 8002ff4:	0091      	lsls	r1, r2, #2
 8002ff6:	0018      	movs	r0, r3
 8002ff8:	f7fd f916 	bl	8000228 <__aeabi_uidivmod>
 8002ffc:	000b      	movs	r3, r1
 8002ffe:	b29b      	uxth	r3, r3
 8003000:	1ae3      	subs	r3, r4, r3
 8003002:	22fa      	movs	r2, #250	; 0xfa
 8003004:	0091      	lsls	r1, r2, #2
 8003006:	0018      	movs	r0, r3
 8003008:	f7fd f912 	bl	8000230 <__divsi3>
 800300c:	0003      	movs	r3, r0
 800300e:	001a      	movs	r2, r3
 8003010:	496f      	ldr	r1, [pc, #444]	; (80031d0 <SetSendData+0xe04>)
 8003012:	4b7a      	ldr	r3, [pc, #488]	; (80031fc <SetSendData+0xe30>)
 8003014:	0018      	movs	r0, r3
 8003016:	f004 fd33 	bl	8007a80 <siprintf>
	sprintf(&lteParameters.msgToSend[103], "%d", ((uint16_t) (usrParameters.usrMeasArray[8] % 1000) - (uint16_t) (usrParameters.usrMeasArray[8] % 100)) / 100);
 800301a:	4b6c      	ldr	r3, [pc, #432]	; (80031cc <SetSendData+0xe00>)
 800301c:	8adb      	ldrh	r3, [r3, #22]
 800301e:	22fa      	movs	r2, #250	; 0xfa
 8003020:	0091      	lsls	r1, r2, #2
 8003022:	0018      	movs	r0, r3
 8003024:	f7fd f900 	bl	8000228 <__aeabi_uidivmod>
 8003028:	000b      	movs	r3, r1
 800302a:	b29b      	uxth	r3, r3
 800302c:	001c      	movs	r4, r3
 800302e:	4b67      	ldr	r3, [pc, #412]	; (80031cc <SetSendData+0xe00>)
 8003030:	8adb      	ldrh	r3, [r3, #22]
 8003032:	2164      	movs	r1, #100	; 0x64
 8003034:	0018      	movs	r0, r3
 8003036:	f7fd f8f7 	bl	8000228 <__aeabi_uidivmod>
 800303a:	000b      	movs	r3, r1
 800303c:	b29b      	uxth	r3, r3
 800303e:	1ae3      	subs	r3, r4, r3
 8003040:	2164      	movs	r1, #100	; 0x64
 8003042:	0018      	movs	r0, r3
 8003044:	f7fd f8f4 	bl	8000230 <__divsi3>
 8003048:	0003      	movs	r3, r0
 800304a:	001a      	movs	r2, r3
 800304c:	4960      	ldr	r1, [pc, #384]	; (80031d0 <SetSendData+0xe04>)
 800304e:	4b6c      	ldr	r3, [pc, #432]	; (8003200 <SetSendData+0xe34>)
 8003050:	0018      	movs	r0, r3
 8003052:	f004 fd15 	bl	8007a80 <siprintf>
	sprintf(&lteParameters.msgToSend[104], "%d", ((uint16_t) (usrParameters.usrMeasArray[8] % 100) - (uint16_t) (usrParameters.usrMeasArray[8] % 10)) / 10);
 8003056:	4b5d      	ldr	r3, [pc, #372]	; (80031cc <SetSendData+0xe00>)
 8003058:	8adb      	ldrh	r3, [r3, #22]
 800305a:	2164      	movs	r1, #100	; 0x64
 800305c:	0018      	movs	r0, r3
 800305e:	f7fd f8e3 	bl	8000228 <__aeabi_uidivmod>
 8003062:	000b      	movs	r3, r1
 8003064:	b29b      	uxth	r3, r3
 8003066:	001c      	movs	r4, r3
 8003068:	4b58      	ldr	r3, [pc, #352]	; (80031cc <SetSendData+0xe00>)
 800306a:	8adb      	ldrh	r3, [r3, #22]
 800306c:	210a      	movs	r1, #10
 800306e:	0018      	movs	r0, r3
 8003070:	f7fd f8da 	bl	8000228 <__aeabi_uidivmod>
 8003074:	000b      	movs	r3, r1
 8003076:	b29b      	uxth	r3, r3
 8003078:	1ae3      	subs	r3, r4, r3
 800307a:	210a      	movs	r1, #10
 800307c:	0018      	movs	r0, r3
 800307e:	f7fd f8d7 	bl	8000230 <__divsi3>
 8003082:	0003      	movs	r3, r0
 8003084:	001a      	movs	r2, r3
 8003086:	4952      	ldr	r1, [pc, #328]	; (80031d0 <SetSendData+0xe04>)
 8003088:	4b5e      	ldr	r3, [pc, #376]	; (8003204 <SetSendData+0xe38>)
 800308a:	0018      	movs	r0, r3
 800308c:	f004 fcf8 	bl	8007a80 <siprintf>
	sprintf(&lteParameters.msgToSend[105], "%d", (uint16_t) (usrParameters.usrMeasArray[8] % 10));
 8003090:	4b4e      	ldr	r3, [pc, #312]	; (80031cc <SetSendData+0xe00>)
 8003092:	8adb      	ldrh	r3, [r3, #22]
 8003094:	210a      	movs	r1, #10
 8003096:	0018      	movs	r0, r3
 8003098:	f7fd f8c6 	bl	8000228 <__aeabi_uidivmod>
 800309c:	000b      	movs	r3, r1
 800309e:	b29b      	uxth	r3, r3
 80030a0:	001a      	movs	r2, r3
 80030a2:	494b      	ldr	r1, [pc, #300]	; (80031d0 <SetSendData+0xe04>)
 80030a4:	4b58      	ldr	r3, [pc, #352]	; (8003208 <SetSendData+0xe3c>)
 80030a6:	0018      	movs	r0, r3
 80030a8:	f004 fcea 	bl	8007a80 <siprintf>
	lteParameters.msgToSend[106] = '#';
 80030ac:	4b4a      	ldr	r3, [pc, #296]	; (80031d8 <SetSendData+0xe0c>)
 80030ae:	229e      	movs	r2, #158	; 0x9e
 80030b0:	2123      	movs	r1, #35	; 0x23
 80030b2:	5499      	strb	r1, [r3, r2]
	sprintf(&lteParameters.msgToSend[107], "%d", ((uint16_t) (usrParameters.usrMeasArray[9] % 100000) - (uint16_t) (usrParameters.usrMeasArray[9] % 10000)) / 10000);
 80030b4:	4b45      	ldr	r3, [pc, #276]	; (80031cc <SetSendData+0xe00>)
 80030b6:	8b1b      	ldrh	r3, [r3, #24]
 80030b8:	4948      	ldr	r1, [pc, #288]	; (80031dc <SetSendData+0xe10>)
 80030ba:	0018      	movs	r0, r3
 80030bc:	f7fd f99e 	bl	80003fc <__aeabi_idivmod>
 80030c0:	000b      	movs	r3, r1
 80030c2:	b29b      	uxth	r3, r3
 80030c4:	001c      	movs	r4, r3
 80030c6:	4b41      	ldr	r3, [pc, #260]	; (80031cc <SetSendData+0xe00>)
 80030c8:	8b1b      	ldrh	r3, [r3, #24]
 80030ca:	4945      	ldr	r1, [pc, #276]	; (80031e0 <SetSendData+0xe14>)
 80030cc:	0018      	movs	r0, r3
 80030ce:	f7fd f8ab 	bl	8000228 <__aeabi_uidivmod>
 80030d2:	000b      	movs	r3, r1
 80030d4:	b29b      	uxth	r3, r3
 80030d6:	1ae3      	subs	r3, r4, r3
 80030d8:	4941      	ldr	r1, [pc, #260]	; (80031e0 <SetSendData+0xe14>)
 80030da:	0018      	movs	r0, r3
 80030dc:	f7fd f8a8 	bl	8000230 <__divsi3>
 80030e0:	0003      	movs	r3, r0
 80030e2:	001a      	movs	r2, r3
 80030e4:	493a      	ldr	r1, [pc, #232]	; (80031d0 <SetSendData+0xe04>)
 80030e6:	4b49      	ldr	r3, [pc, #292]	; (800320c <SetSendData+0xe40>)
 80030e8:	0018      	movs	r0, r3
 80030ea:	f004 fcc9 	bl	8007a80 <siprintf>
	sprintf(&lteParameters.msgToSend[108], "%d", ((uint16_t) (usrParameters.usrMeasArray[9] % 10000) - (uint16_t) (usrParameters.usrMeasArray[9] % 1000)) / 1000);
 80030ee:	4b37      	ldr	r3, [pc, #220]	; (80031cc <SetSendData+0xe00>)
 80030f0:	8b1b      	ldrh	r3, [r3, #24]
 80030f2:	493b      	ldr	r1, [pc, #236]	; (80031e0 <SetSendData+0xe14>)
 80030f4:	0018      	movs	r0, r3
 80030f6:	f7fd f897 	bl	8000228 <__aeabi_uidivmod>
 80030fa:	000b      	movs	r3, r1
 80030fc:	b29b      	uxth	r3, r3
 80030fe:	001c      	movs	r4, r3
 8003100:	4b32      	ldr	r3, [pc, #200]	; (80031cc <SetSendData+0xe00>)
 8003102:	8b1b      	ldrh	r3, [r3, #24]
 8003104:	22fa      	movs	r2, #250	; 0xfa
 8003106:	0091      	lsls	r1, r2, #2
 8003108:	0018      	movs	r0, r3
 800310a:	f7fd f88d 	bl	8000228 <__aeabi_uidivmod>
 800310e:	000b      	movs	r3, r1
 8003110:	b29b      	uxth	r3, r3
 8003112:	1ae3      	subs	r3, r4, r3
 8003114:	22fa      	movs	r2, #250	; 0xfa
 8003116:	0091      	lsls	r1, r2, #2
 8003118:	0018      	movs	r0, r3
 800311a:	f7fd f889 	bl	8000230 <__divsi3>
 800311e:	0003      	movs	r3, r0
 8003120:	001a      	movs	r2, r3
 8003122:	492b      	ldr	r1, [pc, #172]	; (80031d0 <SetSendData+0xe04>)
 8003124:	4b3a      	ldr	r3, [pc, #232]	; (8003210 <SetSendData+0xe44>)
 8003126:	0018      	movs	r0, r3
 8003128:	f004 fcaa 	bl	8007a80 <siprintf>
	sprintf(&lteParameters.msgToSend[109], "%d", ((uint16_t) (usrParameters.usrMeasArray[9] % 1000) - (uint16_t) (usrParameters.usrMeasArray[9] % 100)) / 100);
 800312c:	4b27      	ldr	r3, [pc, #156]	; (80031cc <SetSendData+0xe00>)
 800312e:	8b1b      	ldrh	r3, [r3, #24]
 8003130:	22fa      	movs	r2, #250	; 0xfa
 8003132:	0091      	lsls	r1, r2, #2
 8003134:	0018      	movs	r0, r3
 8003136:	f7fd f877 	bl	8000228 <__aeabi_uidivmod>
 800313a:	000b      	movs	r3, r1
 800313c:	b29b      	uxth	r3, r3
 800313e:	001c      	movs	r4, r3
 8003140:	4b22      	ldr	r3, [pc, #136]	; (80031cc <SetSendData+0xe00>)
 8003142:	8b1b      	ldrh	r3, [r3, #24]
 8003144:	2164      	movs	r1, #100	; 0x64
 8003146:	0018      	movs	r0, r3
 8003148:	f7fd f86e 	bl	8000228 <__aeabi_uidivmod>
 800314c:	000b      	movs	r3, r1
 800314e:	b29b      	uxth	r3, r3
 8003150:	1ae3      	subs	r3, r4, r3
 8003152:	2164      	movs	r1, #100	; 0x64
 8003154:	0018      	movs	r0, r3
 8003156:	f7fd f86b 	bl	8000230 <__divsi3>
 800315a:	0003      	movs	r3, r0
 800315c:	001a      	movs	r2, r3
 800315e:	491c      	ldr	r1, [pc, #112]	; (80031d0 <SetSendData+0xe04>)
 8003160:	4b2c      	ldr	r3, [pc, #176]	; (8003214 <SetSendData+0xe48>)
 8003162:	0018      	movs	r0, r3
 8003164:	f004 fc8c 	bl	8007a80 <siprintf>
	sprintf(&lteParameters.msgToSend[110], "%d", ((uint16_t) (usrParameters.usrMeasArray[9] % 100) - (uint16_t) (usrParameters.usrMeasArray[9] % 10)) / 10);
 8003168:	4b18      	ldr	r3, [pc, #96]	; (80031cc <SetSendData+0xe00>)
 800316a:	8b1b      	ldrh	r3, [r3, #24]
 800316c:	2164      	movs	r1, #100	; 0x64
 800316e:	0018      	movs	r0, r3
 8003170:	f7fd f85a 	bl	8000228 <__aeabi_uidivmod>
 8003174:	000b      	movs	r3, r1
 8003176:	b29b      	uxth	r3, r3
 8003178:	001c      	movs	r4, r3
 800317a:	4b14      	ldr	r3, [pc, #80]	; (80031cc <SetSendData+0xe00>)
 800317c:	8b1b      	ldrh	r3, [r3, #24]
 800317e:	210a      	movs	r1, #10
 8003180:	0018      	movs	r0, r3
 8003182:	f7fd f851 	bl	8000228 <__aeabi_uidivmod>
 8003186:	000b      	movs	r3, r1
 8003188:	b29b      	uxth	r3, r3
 800318a:	1ae3      	subs	r3, r4, r3
 800318c:	210a      	movs	r1, #10
 800318e:	0018      	movs	r0, r3
 8003190:	f7fd f84e 	bl	8000230 <__divsi3>
 8003194:	0003      	movs	r3, r0
 8003196:	001a      	movs	r2, r3
 8003198:	490d      	ldr	r1, [pc, #52]	; (80031d0 <SetSendData+0xe04>)
 800319a:	4b1f      	ldr	r3, [pc, #124]	; (8003218 <SetSendData+0xe4c>)
 800319c:	0018      	movs	r0, r3
 800319e:	f004 fc6f 	bl	8007a80 <siprintf>
	sprintf(&lteParameters.msgToSend[111], "%d", (uint16_t) (usrParameters.usrMeasArray[9] % 10));
 80031a2:	4b0a      	ldr	r3, [pc, #40]	; (80031cc <SetSendData+0xe00>)
 80031a4:	8b1b      	ldrh	r3, [r3, #24]
 80031a6:	210a      	movs	r1, #10
 80031a8:	0018      	movs	r0, r3
 80031aa:	f7fd f83d 	bl	8000228 <__aeabi_uidivmod>
 80031ae:	000b      	movs	r3, r1
 80031b0:	b29b      	uxth	r3, r3
 80031b2:	001a      	movs	r2, r3
 80031b4:	4906      	ldr	r1, [pc, #24]	; (80031d0 <SetSendData+0xe04>)
 80031b6:	4b19      	ldr	r3, [pc, #100]	; (800321c <SetSendData+0xe50>)
 80031b8:	0018      	movs	r0, r3
 80031ba:	f004 fc61 	bl	8007a80 <siprintf>

	lteParameters.msgToSend[112] = '#';
 80031be:	4b06      	ldr	r3, [pc, #24]	; (80031d8 <SetSendData+0xe0c>)
 80031c0:	22a4      	movs	r2, #164	; 0xa4
 80031c2:	2123      	movs	r1, #35	; 0x23
 80031c4:	5499      	strb	r1, [r3, r2]
	for (int i = 113; i < 128; i++)
 80031c6:	2371      	movs	r3, #113	; 0x71
 80031c8:	603b      	str	r3, [r7, #0]
 80031ca:	e03c      	b.n	8003246 <SetSendData+0xe7a>
 80031cc:	20000680 	.word	0x20000680
 80031d0:	08008724 	.word	0x08008724
 80031d4:	200002dd 	.word	0x200002dd
 80031d8:	2000024c 	.word	0x2000024c
 80031dc:	000186a0 	.word	0x000186a0
 80031e0:	00002710 	.word	0x00002710
 80031e4:	200002df 	.word	0x200002df
 80031e8:	200002e0 	.word	0x200002e0
 80031ec:	200002e1 	.word	0x200002e1
 80031f0:	200002e2 	.word	0x200002e2
 80031f4:	200002e3 	.word	0x200002e3
 80031f8:	200002e5 	.word	0x200002e5
 80031fc:	200002e6 	.word	0x200002e6
 8003200:	200002e7 	.word	0x200002e7
 8003204:	200002e8 	.word	0x200002e8
 8003208:	200002e9 	.word	0x200002e9
 800320c:	200002eb 	.word	0x200002eb
 8003210:	200002ec 	.word	0x200002ec
 8003214:	200002ed 	.word	0x200002ed
 8003218:	200002ee 	.word	0x200002ee
 800321c:	200002ef 	.word	0x200002ef
		sprintf(&lteParameters.msgToSend[i], "%c", lteParameters.imsiNum[i - 113]);
 8003220:	683b      	ldr	r3, [r7, #0]
 8003222:	3330      	adds	r3, #48	; 0x30
 8003224:	001a      	movs	r2, r3
 8003226:	4b0e      	ldr	r3, [pc, #56]	; (8003260 <SetSendData+0xe94>)
 8003228:	18d3      	adds	r3, r2, r3
 800322a:	1d18      	adds	r0, r3, #4
 800322c:	683b      	ldr	r3, [r7, #0]
 800322e:	3b71      	subs	r3, #113	; 0x71
 8003230:	4a0b      	ldr	r2, [pc, #44]	; (8003260 <SetSendData+0xe94>)
 8003232:	18d3      	adds	r3, r2, r3
 8003234:	7bdb      	ldrb	r3, [r3, #15]
 8003236:	001a      	movs	r2, r3
 8003238:	4b0a      	ldr	r3, [pc, #40]	; (8003264 <SetSendData+0xe98>)
 800323a:	0019      	movs	r1, r3
 800323c:	f004 fc20 	bl	8007a80 <siprintf>
	for (int i = 113; i < 128; i++)
 8003240:	683b      	ldr	r3, [r7, #0]
 8003242:	3301      	adds	r3, #1
 8003244:	603b      	str	r3, [r7, #0]
 8003246:	683b      	ldr	r3, [r7, #0]
 8003248:	2b7f      	cmp	r3, #127	; 0x7f
 800324a:	dde9      	ble.n	8003220 <SetSendData+0xe54>

	DebugSendData(lteParameters.msgToSend, 128);
 800324c:	4b06      	ldr	r3, [pc, #24]	; (8003268 <SetSendData+0xe9c>)
 800324e:	2180      	movs	r1, #128	; 0x80
 8003250:	0018      	movs	r0, r3
 8003252:	f000 fbe3 	bl	8003a1c <DebugSendData>
}
 8003256:	46c0      	nop			; (mov r8, r8)
 8003258:	46bd      	mov	sp, r7
 800325a:	b005      	add	sp, #20
 800325c:	bd90      	pop	{r4, r7, pc}
 800325e:	46c0      	nop			; (mov r8, r8)
 8003260:	2000024c 	.word	0x2000024c
 8003264:	08008720 	.word	0x08008720
 8003268:	20000280 	.word	0x20000280

0800326c <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 800326c:	b580      	push	{r7, lr}
 800326e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003270:	b672      	cpsid	i
}
 8003272:	46c0      	nop			; (mov r8, r8)
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8003274:	e7fe      	b.n	8003274 <Error_Handler+0x8>
	...

08003278 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8003278:	b580      	push	{r7, lr}
 800327a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800327c:	4b16      	ldr	r3, [pc, #88]	; (80032d8 <MX_RTC_Init+0x60>)
 800327e:	4a17      	ldr	r2, [pc, #92]	; (80032dc <MX_RTC_Init+0x64>)
 8003280:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8003282:	4b15      	ldr	r3, [pc, #84]	; (80032d8 <MX_RTC_Init+0x60>)
 8003284:	2200      	movs	r2, #0
 8003286:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8003288:	4b13      	ldr	r3, [pc, #76]	; (80032d8 <MX_RTC_Init+0x60>)
 800328a:	227f      	movs	r2, #127	; 0x7f
 800328c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800328e:	4b12      	ldr	r3, [pc, #72]	; (80032d8 <MX_RTC_Init+0x60>)
 8003290:	22ff      	movs	r2, #255	; 0xff
 8003292:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8003294:	4b10      	ldr	r3, [pc, #64]	; (80032d8 <MX_RTC_Init+0x60>)
 8003296:	2200      	movs	r2, #0
 8003298:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800329a:	4b0f      	ldr	r3, [pc, #60]	; (80032d8 <MX_RTC_Init+0x60>)
 800329c:	2200      	movs	r2, #0
 800329e:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80032a0:	4b0d      	ldr	r3, [pc, #52]	; (80032d8 <MX_RTC_Init+0x60>)
 80032a2:	2200      	movs	r2, #0
 80032a4:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80032a6:	4b0c      	ldr	r3, [pc, #48]	; (80032d8 <MX_RTC_Init+0x60>)
 80032a8:	2200      	movs	r2, #0
 80032aa:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80032ac:	4b0a      	ldr	r3, [pc, #40]	; (80032d8 <MX_RTC_Init+0x60>)
 80032ae:	0018      	movs	r0, r3
 80032b0:	f002 fb7a 	bl	80059a8 <HAL_RTC_Init>
 80032b4:	1e03      	subs	r3, r0, #0
 80032b6:	d001      	beq.n	80032bc <MX_RTC_Init+0x44>
  {
    Error_Handler();
 80032b8:	f7ff ffd8 	bl	800326c <Error_Handler>
  }
  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 600, RTC_WAKEUPCLOCK_CK_SPRE_16BITS) != HAL_OK)
 80032bc:	2396      	movs	r3, #150	; 0x96
 80032be:	0099      	lsls	r1, r3, #2
 80032c0:	4b05      	ldr	r3, [pc, #20]	; (80032d8 <MX_RTC_Init+0x60>)
 80032c2:	2204      	movs	r2, #4
 80032c4:	0018      	movs	r0, r3
 80032c6:	f002 fc5f 	bl	8005b88 <HAL_RTCEx_SetWakeUpTimer_IT>
 80032ca:	1e03      	subs	r3, r0, #0
 80032cc:	d001      	beq.n	80032d2 <MX_RTC_Init+0x5a>
  {
    Error_Handler();
 80032ce:	f7ff ffcd 	bl	800326c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80032d2:	46c0      	nop			; (mov r8, r8)
 80032d4:	46bd      	mov	sp, r7
 80032d6:	bd80      	pop	{r7, pc}
 80032d8:	2000030c 	.word	0x2000030c
 80032dc:	40002800 	.word	0x40002800

080032e0 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 80032e0:	b580      	push	{r7, lr}
 80032e2:	b082      	sub	sp, #8
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	4a0a      	ldr	r2, [pc, #40]	; (8003318 <HAL_RTC_MspInit+0x38>)
 80032ee:	4293      	cmp	r3, r2
 80032f0:	d10e      	bne.n	8003310 <HAL_RTC_MspInit+0x30>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 80032f2:	4b0a      	ldr	r3, [pc, #40]	; (800331c <HAL_RTC_MspInit+0x3c>)
 80032f4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80032f6:	4b09      	ldr	r3, [pc, #36]	; (800331c <HAL_RTC_MspInit+0x3c>)
 80032f8:	2180      	movs	r1, #128	; 0x80
 80032fa:	02c9      	lsls	r1, r1, #11
 80032fc:	430a      	orrs	r2, r1
 80032fe:	651a      	str	r2, [r3, #80]	; 0x50

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_IRQn, 0, 0);
 8003300:	2200      	movs	r2, #0
 8003302:	2100      	movs	r1, #0
 8003304:	2002      	movs	r0, #2
 8003306:	f001 f925 	bl	8004554 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_IRQn);
 800330a:	2002      	movs	r0, #2
 800330c:	f001 f937 	bl	800457e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8003310:	46c0      	nop			; (mov r8, r8)
 8003312:	46bd      	mov	sp, r7
 8003314:	b002      	add	sp, #8
 8003316:	bd80      	pop	{r7, pc}
 8003318:	40002800 	.word	0x40002800
 800331c:	40021000 	.word	0x40021000

08003320 <HAL_RTCEx_WakeUpTimerEventCallback>:
  }
}

/* USER CODE BEGIN 1 */
void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 8003320:	b580      	push	{r7, lr}
 8003322:	b082      	sub	sp, #8
 8003324:	af00      	add	r7, sp, #0
 8003326:	6078      	str	r0, [r7, #4]
	rtcParameters.wakeUpFlag = 1;
 8003328:	4b06      	ldr	r3, [pc, #24]	; (8003344 <HAL_RTCEx_WakeUpTimerEventCallback+0x24>)
 800332a:	2201      	movs	r2, #1
 800332c:	701a      	strb	r2, [r3, #0]
	usrParameters.usrMeasured = 0;
 800332e:	4b06      	ldr	r3, [pc, #24]	; (8003348 <HAL_RTCEx_WakeUpTimerEventCallback+0x28>)
 8003330:	2200      	movs	r2, #0
 8003332:	769a      	strb	r2, [r3, #26]

	SystemClock_Config();
 8003334:	f7fe fe28 	bl	8001f88 <SystemClock_Config>
	HAL_ResumeTick();
 8003338:	f000 fc86 	bl	8003c48 <HAL_ResumeTick>
}
 800333c:	46c0      	nop			; (mov r8, r8)
 800333e:	46bd      	mov	sp, r7
 8003340:	b002      	add	sp, #8
 8003342:	bd80      	pop	{r7, pc}
 8003344:	20000308 	.word	0x20000308
 8003348:	20000680 	.word	0x20000680

0800334c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800334c:	b580      	push	{r7, lr}
 800334e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003350:	4b07      	ldr	r3, [pc, #28]	; (8003370 <HAL_MspInit+0x24>)
 8003352:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003354:	4b06      	ldr	r3, [pc, #24]	; (8003370 <HAL_MspInit+0x24>)
 8003356:	2101      	movs	r1, #1
 8003358:	430a      	orrs	r2, r1
 800335a:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 800335c:	4b04      	ldr	r3, [pc, #16]	; (8003370 <HAL_MspInit+0x24>)
 800335e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003360:	4b03      	ldr	r3, [pc, #12]	; (8003370 <HAL_MspInit+0x24>)
 8003362:	2180      	movs	r1, #128	; 0x80
 8003364:	0549      	lsls	r1, r1, #21
 8003366:	430a      	orrs	r2, r1
 8003368:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800336a:	46c0      	nop			; (mov r8, r8)
 800336c:	46bd      	mov	sp, r7
 800336e:	bd80      	pop	{r7, pc}
 8003370:	40021000 	.word	0x40021000

08003374 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 8003374:	b580      	push	{r7, lr}
 8003376:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003378:	e7fe      	b.n	8003378 <NMI_Handler+0x4>

0800337a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800337a:	b580      	push	{r7, lr}
 800337c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800337e:	e7fe      	b.n	800337e <HardFault_Handler+0x4>

08003380 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003380:	b580      	push	{r7, lr}
 8003382:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8003384:	46c0      	nop			; (mov r8, r8)
 8003386:	46bd      	mov	sp, r7
 8003388:	bd80      	pop	{r7, pc}

0800338a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800338a:	b580      	push	{r7, lr}
 800338c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800338e:	46c0      	nop			; (mov r8, r8)
 8003390:	46bd      	mov	sp, r7
 8003392:	bd80      	pop	{r7, pc}

08003394 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003394:	b580      	push	{r7, lr}
 8003396:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003398:	f000 fc08 	bl	8003bac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800339c:	46c0      	nop			; (mov r8, r8)
 800339e:	46bd      	mov	sp, r7
 80033a0:	bd80      	pop	{r7, pc}
	...

080033a4 <RTC_IRQHandler>:

/**
  * @brief This function handles RTC global interrupt through EXTI lines 17, 19 and 20 and LSE CSS interrupt through EXTI line 19.
  */
void RTC_IRQHandler(void)
{
 80033a4:	b580      	push	{r7, lr}
 80033a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_IRQn 0 */

  /* USER CODE END RTC_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 80033a8:	4b03      	ldr	r3, [pc, #12]	; (80033b8 <RTC_IRQHandler+0x14>)
 80033aa:	0018      	movs	r0, r3
 80033ac:	f002 fcb2 	bl	8005d14 <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE BEGIN RTC_IRQn 1 */

  /* USER CODE END RTC_IRQn 1 */
}
 80033b0:	46c0      	nop			; (mov r8, r8)
 80033b2:	46bd      	mov	sp, r7
 80033b4:	bd80      	pop	{r7, pc}
 80033b6:	46c0      	nop			; (mov r8, r8)
 80033b8:	2000030c 	.word	0x2000030c

080033bc <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 80033bc:	b580      	push	{r7, lr}
 80033be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 80033c0:	2020      	movs	r0, #32
 80033c2:	f001 fb1d 	bl	8004a00 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 80033c6:	46c0      	nop			; (mov r8, r8)
 80033c8:	46bd      	mov	sp, r7
 80033ca:	bd80      	pop	{r7, pc}

080033cc <ADC1_COMP_IRQHandler>:

/**
  * @brief This function handles ADC, COMP1 and COMP2 interrupts (COMP interrupts through EXTI lines 21 and 22).
  */
void ADC1_COMP_IRQHandler(void)
{
 80033cc:	b580      	push	{r7, lr}
 80033ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_COMP_IRQn 0 */

  /* USER CODE END ADC1_COMP_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc);
 80033d0:	4b03      	ldr	r3, [pc, #12]	; (80033e0 <ADC1_COMP_IRQHandler+0x14>)
 80033d2:	0018      	movs	r0, r3
 80033d4:	f000 fe38 	bl	8004048 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_COMP_IRQn 1 */

  /* USER CODE END ADC1_COMP_IRQn 1 */
}
 80033d8:	46c0      	nop			; (mov r8, r8)
 80033da:	46bd      	mov	sp, r7
 80033dc:	bd80      	pop	{r7, pc}
 80033de:	46c0      	nop			; (mov r8, r8)
 80033e0:	200000a8 	.word	0x200000a8

080033e4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 80033e4:	b580      	push	{r7, lr}
 80033e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80033e8:	4b03      	ldr	r3, [pc, #12]	; (80033f8 <USART1_IRQHandler+0x14>)
 80033ea:	0018      	movs	r0, r3
 80033ec:	f003 f8d4 	bl	8006598 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80033f0:	46c0      	nop			; (mov r8, r8)
 80033f2:	46bd      	mov	sp, r7
 80033f4:	bd80      	pop	{r7, pc}
 80033f6:	46c0      	nop			; (mov r8, r8)
 80033f8:	20000474 	.word	0x20000474

080033fc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 80033fc:	b580      	push	{r7, lr}
 80033fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003400:	4b03      	ldr	r3, [pc, #12]	; (8003410 <USART2_IRQHandler+0x14>)
 8003402:	0018      	movs	r0, r3
 8003404:	f003 f8c8 	bl	8006598 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8003408:	46c0      	nop			; (mov r8, r8)
 800340a:	46bd      	mov	sp, r7
 800340c:	bd80      	pop	{r7, pc}
 800340e:	46c0      	nop			; (mov r8, r8)
 8003410:	200005fc 	.word	0x200005fc

08003414 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003414:	b580      	push	{r7, lr}
 8003416:	b086      	sub	sp, #24
 8003418:	af00      	add	r7, sp, #0
 800341a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800341c:	4a14      	ldr	r2, [pc, #80]	; (8003470 <_sbrk+0x5c>)
 800341e:	4b15      	ldr	r3, [pc, #84]	; (8003474 <_sbrk+0x60>)
 8003420:	1ad3      	subs	r3, r2, r3
 8003422:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003424:	697b      	ldr	r3, [r7, #20]
 8003426:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003428:	4b13      	ldr	r3, [pc, #76]	; (8003478 <_sbrk+0x64>)
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	2b00      	cmp	r3, #0
 800342e:	d102      	bne.n	8003436 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003430:	4b11      	ldr	r3, [pc, #68]	; (8003478 <_sbrk+0x64>)
 8003432:	4a12      	ldr	r2, [pc, #72]	; (800347c <_sbrk+0x68>)
 8003434:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003436:	4b10      	ldr	r3, [pc, #64]	; (8003478 <_sbrk+0x64>)
 8003438:	681a      	ldr	r2, [r3, #0]
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	18d3      	adds	r3, r2, r3
 800343e:	693a      	ldr	r2, [r7, #16]
 8003440:	429a      	cmp	r2, r3
 8003442:	d207      	bcs.n	8003454 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003444:	f004 fae0 	bl	8007a08 <__errno>
 8003448:	0003      	movs	r3, r0
 800344a:	220c      	movs	r2, #12
 800344c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800344e:	2301      	movs	r3, #1
 8003450:	425b      	negs	r3, r3
 8003452:	e009      	b.n	8003468 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003454:	4b08      	ldr	r3, [pc, #32]	; (8003478 <_sbrk+0x64>)
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800345a:	4b07      	ldr	r3, [pc, #28]	; (8003478 <_sbrk+0x64>)
 800345c:	681a      	ldr	r2, [r3, #0]
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	18d2      	adds	r2, r2, r3
 8003462:	4b05      	ldr	r3, [pc, #20]	; (8003478 <_sbrk+0x64>)
 8003464:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8003466:	68fb      	ldr	r3, [r7, #12]
}
 8003468:	0018      	movs	r0, r3
 800346a:	46bd      	mov	sp, r7
 800346c:	b006      	add	sp, #24
 800346e:	bd80      	pop	{r7, pc}
 8003470:	20005000 	.word	0x20005000
 8003474:	00000400 	.word	0x00000400
 8003478:	2000008c 	.word	0x2000008c
 800347c:	200007c0 	.word	0x200007c0

08003480 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003480:	b580      	push	{r7, lr}
 8003482:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003484:	46c0      	nop			; (mov r8, r8)
 8003486:	46bd      	mov	sp, r7
 8003488:	bd80      	pop	{r7, pc}
	...

0800348c <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800348c:	b580      	push	{r7, lr}
 800348e:	b086      	sub	sp, #24
 8003490:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003492:	2308      	movs	r3, #8
 8003494:	18fb      	adds	r3, r7, r3
 8003496:	0018      	movs	r0, r3
 8003498:	2310      	movs	r3, #16
 800349a:	001a      	movs	r2, r3
 800349c:	2100      	movs	r1, #0
 800349e:	f004 fae6 	bl	8007a6e <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80034a2:	003b      	movs	r3, r7
 80034a4:	0018      	movs	r0, r3
 80034a6:	2308      	movs	r3, #8
 80034a8:	001a      	movs	r2, r3
 80034aa:	2100      	movs	r1, #0
 80034ac:	f004 fadf 	bl	8007a6e <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80034b0:	4b1e      	ldr	r3, [pc, #120]	; (800352c <MX_TIM2_Init+0xa0>)
 80034b2:	2280      	movs	r2, #128	; 0x80
 80034b4:	05d2      	lsls	r2, r2, #23
 80034b6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 15;
 80034b8:	4b1c      	ldr	r3, [pc, #112]	; (800352c <MX_TIM2_Init+0xa0>)
 80034ba:	220f      	movs	r2, #15
 80034bc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80034be:	4b1b      	ldr	r3, [pc, #108]	; (800352c <MX_TIM2_Init+0xa0>)
 80034c0:	2200      	movs	r2, #0
 80034c2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65534;
 80034c4:	4b19      	ldr	r3, [pc, #100]	; (800352c <MX_TIM2_Init+0xa0>)
 80034c6:	4a1a      	ldr	r2, [pc, #104]	; (8003530 <MX_TIM2_Init+0xa4>)
 80034c8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80034ca:	4b18      	ldr	r3, [pc, #96]	; (800352c <MX_TIM2_Init+0xa0>)
 80034cc:	2200      	movs	r2, #0
 80034ce:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80034d0:	4b16      	ldr	r3, [pc, #88]	; (800352c <MX_TIM2_Init+0xa0>)
 80034d2:	2200      	movs	r2, #0
 80034d4:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80034d6:	4b15      	ldr	r3, [pc, #84]	; (800352c <MX_TIM2_Init+0xa0>)
 80034d8:	0018      	movs	r0, r3
 80034da:	f002 fc45 	bl	8005d68 <HAL_TIM_Base_Init>
 80034de:	1e03      	subs	r3, r0, #0
 80034e0:	d001      	beq.n	80034e6 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 80034e2:	f7ff fec3 	bl	800326c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80034e6:	2108      	movs	r1, #8
 80034e8:	187b      	adds	r3, r7, r1
 80034ea:	2280      	movs	r2, #128	; 0x80
 80034ec:	0152      	lsls	r2, r2, #5
 80034ee:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80034f0:	187a      	adds	r2, r7, r1
 80034f2:	4b0e      	ldr	r3, [pc, #56]	; (800352c <MX_TIM2_Init+0xa0>)
 80034f4:	0011      	movs	r1, r2
 80034f6:	0018      	movs	r0, r3
 80034f8:	f002 fcc0 	bl	8005e7c <HAL_TIM_ConfigClockSource>
 80034fc:	1e03      	subs	r3, r0, #0
 80034fe:	d001      	beq.n	8003504 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8003500:	f7ff feb4 	bl	800326c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003504:	003b      	movs	r3, r7
 8003506:	2200      	movs	r2, #0
 8003508:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800350a:	003b      	movs	r3, r7
 800350c:	2200      	movs	r2, #0
 800350e:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003510:	003a      	movs	r2, r7
 8003512:	4b06      	ldr	r3, [pc, #24]	; (800352c <MX_TIM2_Init+0xa0>)
 8003514:	0011      	movs	r1, r2
 8003516:	0018      	movs	r0, r3
 8003518:	f002 fe7c 	bl	8006214 <HAL_TIMEx_MasterConfigSynchronization>
 800351c:	1e03      	subs	r3, r0, #0
 800351e:	d001      	beq.n	8003524 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8003520:	f7ff fea4 	bl	800326c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8003524:	46c0      	nop			; (mov r8, r8)
 8003526:	46bd      	mov	sp, r7
 8003528:	b006      	add	sp, #24
 800352a:	bd80      	pop	{r7, pc}
 800352c:	20000330 	.word	0x20000330
 8003530:	0000fffe 	.word	0x0000fffe

08003534 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003534:	b580      	push	{r7, lr}
 8003536:	b082      	sub	sp, #8
 8003538:	af00      	add	r7, sp, #0
 800353a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681a      	ldr	r2, [r3, #0]
 8003540:	2380      	movs	r3, #128	; 0x80
 8003542:	05db      	lsls	r3, r3, #23
 8003544:	429a      	cmp	r2, r3
 8003546:	d105      	bne.n	8003554 <HAL_TIM_Base_MspInit+0x20>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003548:	4b04      	ldr	r3, [pc, #16]	; (800355c <HAL_TIM_Base_MspInit+0x28>)
 800354a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800354c:	4b03      	ldr	r3, [pc, #12]	; (800355c <HAL_TIM_Base_MspInit+0x28>)
 800354e:	2101      	movs	r1, #1
 8003550:	430a      	orrs	r2, r1
 8003552:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8003554:	46c0      	nop			; (mov r8, r8)
 8003556:	46bd      	mov	sp, r7
 8003558:	b002      	add	sp, #8
 800355a:	bd80      	pop	{r7, pc}
 800355c:	40021000 	.word	0x40021000

08003560 <DelayUs>:
  }
}

/* USER CODE BEGIN 1 */
void DelayUs(uint16_t uus) // microsecond delay routine
{
 8003560:	b580      	push	{r7, lr}
 8003562:	b082      	sub	sp, #8
 8003564:	af00      	add	r7, sp, #0
 8003566:	0002      	movs	r2, r0
 8003568:	1dbb      	adds	r3, r7, #6
 800356a:	801a      	strh	r2, [r3, #0]
	__HAL_TIM_SET_COUNTER(&htim2,0);  // set the counter value to zero
 800356c:	4b08      	ldr	r3, [pc, #32]	; (8003590 <DelayUs+0x30>)
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	2200      	movs	r2, #0
 8003572:	625a      	str	r2, [r3, #36]	; 0x24

	while (__HAL_TIM_GET_COUNTER(&htim2) < uus); // wait for a while about desired microsecond value
 8003574:	46c0      	nop			; (mov r8, r8)
 8003576:	4b06      	ldr	r3, [pc, #24]	; (8003590 <DelayUs+0x30>)
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800357c:	1dbb      	adds	r3, r7, #6
 800357e:	881b      	ldrh	r3, [r3, #0]
 8003580:	429a      	cmp	r2, r3
 8003582:	d3f8      	bcc.n	8003576 <DelayUs+0x16>
}
 8003584:	46c0      	nop			; (mov r8, r8)
 8003586:	46c0      	nop			; (mov r8, r8)
 8003588:	46bd      	mov	sp, r7
 800358a:	b002      	add	sp, #8
 800358c:	bd80      	pop	{r7, pc}
 800358e:	46c0      	nop			; (mov r8, r8)
 8003590:	20000330 	.word	0x20000330

08003594 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8003594:	b580      	push	{r7, lr}
 8003596:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003598:	4b14      	ldr	r3, [pc, #80]	; (80035ec <MX_USART1_UART_Init+0x58>)
 800359a:	4a15      	ldr	r2, [pc, #84]	; (80035f0 <MX_USART1_UART_Init+0x5c>)
 800359c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800359e:	4b13      	ldr	r3, [pc, #76]	; (80035ec <MX_USART1_UART_Init+0x58>)
 80035a0:	22e1      	movs	r2, #225	; 0xe1
 80035a2:	0252      	lsls	r2, r2, #9
 80035a4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80035a6:	4b11      	ldr	r3, [pc, #68]	; (80035ec <MX_USART1_UART_Init+0x58>)
 80035a8:	2200      	movs	r2, #0
 80035aa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80035ac:	4b0f      	ldr	r3, [pc, #60]	; (80035ec <MX_USART1_UART_Init+0x58>)
 80035ae:	2200      	movs	r2, #0
 80035b0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80035b2:	4b0e      	ldr	r3, [pc, #56]	; (80035ec <MX_USART1_UART_Init+0x58>)
 80035b4:	2200      	movs	r2, #0
 80035b6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80035b8:	4b0c      	ldr	r3, [pc, #48]	; (80035ec <MX_USART1_UART_Init+0x58>)
 80035ba:	220c      	movs	r2, #12
 80035bc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80035be:	4b0b      	ldr	r3, [pc, #44]	; (80035ec <MX_USART1_UART_Init+0x58>)
 80035c0:	2200      	movs	r2, #0
 80035c2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80035c4:	4b09      	ldr	r3, [pc, #36]	; (80035ec <MX_USART1_UART_Init+0x58>)
 80035c6:	2200      	movs	r2, #0
 80035c8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80035ca:	4b08      	ldr	r3, [pc, #32]	; (80035ec <MX_USART1_UART_Init+0x58>)
 80035cc:	2200      	movs	r2, #0
 80035ce:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80035d0:	4b06      	ldr	r3, [pc, #24]	; (80035ec <MX_USART1_UART_Init+0x58>)
 80035d2:	2200      	movs	r2, #0
 80035d4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80035d6:	4b05      	ldr	r3, [pc, #20]	; (80035ec <MX_USART1_UART_Init+0x58>)
 80035d8:	0018      	movs	r0, r3
 80035da:	f002 fe79 	bl	80062d0 <HAL_UART_Init>
 80035de:	1e03      	subs	r3, r0, #0
 80035e0:	d001      	beq.n	80035e6 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80035e2:	f7ff fe43 	bl	800326c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80035e6:	46c0      	nop			; (mov r8, r8)
 80035e8:	46bd      	mov	sp, r7
 80035ea:	bd80      	pop	{r7, pc}
 80035ec:	20000474 	.word	0x20000474
 80035f0:	40013800 	.word	0x40013800

080035f4 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80035f4:	b580      	push	{r7, lr}
 80035f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80035f8:	4b14      	ldr	r3, [pc, #80]	; (800364c <MX_USART2_UART_Init+0x58>)
 80035fa:	4a15      	ldr	r2, [pc, #84]	; (8003650 <MX_USART2_UART_Init+0x5c>)
 80035fc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80035fe:	4b13      	ldr	r3, [pc, #76]	; (800364c <MX_USART2_UART_Init+0x58>)
 8003600:	22e1      	movs	r2, #225	; 0xe1
 8003602:	0252      	lsls	r2, r2, #9
 8003604:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003606:	4b11      	ldr	r3, [pc, #68]	; (800364c <MX_USART2_UART_Init+0x58>)
 8003608:	2200      	movs	r2, #0
 800360a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800360c:	4b0f      	ldr	r3, [pc, #60]	; (800364c <MX_USART2_UART_Init+0x58>)
 800360e:	2200      	movs	r2, #0
 8003610:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003612:	4b0e      	ldr	r3, [pc, #56]	; (800364c <MX_USART2_UART_Init+0x58>)
 8003614:	2200      	movs	r2, #0
 8003616:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003618:	4b0c      	ldr	r3, [pc, #48]	; (800364c <MX_USART2_UART_Init+0x58>)
 800361a:	220c      	movs	r2, #12
 800361c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800361e:	4b0b      	ldr	r3, [pc, #44]	; (800364c <MX_USART2_UART_Init+0x58>)
 8003620:	2200      	movs	r2, #0
 8003622:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003624:	4b09      	ldr	r3, [pc, #36]	; (800364c <MX_USART2_UART_Init+0x58>)
 8003626:	2200      	movs	r2, #0
 8003628:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800362a:	4b08      	ldr	r3, [pc, #32]	; (800364c <MX_USART2_UART_Init+0x58>)
 800362c:	2200      	movs	r2, #0
 800362e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003630:	4b06      	ldr	r3, [pc, #24]	; (800364c <MX_USART2_UART_Init+0x58>)
 8003632:	2200      	movs	r2, #0
 8003634:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003636:	4b05      	ldr	r3, [pc, #20]	; (800364c <MX_USART2_UART_Init+0x58>)
 8003638:	0018      	movs	r0, r3
 800363a:	f002 fe49 	bl	80062d0 <HAL_UART_Init>
 800363e:	1e03      	subs	r3, r0, #0
 8003640:	d001      	beq.n	8003646 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8003642:	f7ff fe13 	bl	800326c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003646:	46c0      	nop			; (mov r8, r8)
 8003648:	46bd      	mov	sp, r7
 800364a:	bd80      	pop	{r7, pc}
 800364c:	200005fc 	.word	0x200005fc
 8003650:	40004400 	.word	0x40004400

08003654 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003654:	b590      	push	{r4, r7, lr}
 8003656:	b08b      	sub	sp, #44	; 0x2c
 8003658:	af00      	add	r7, sp, #0
 800365a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800365c:	2414      	movs	r4, #20
 800365e:	193b      	adds	r3, r7, r4
 8003660:	0018      	movs	r0, r3
 8003662:	2314      	movs	r3, #20
 8003664:	001a      	movs	r2, r3
 8003666:	2100      	movs	r1, #0
 8003668:	f004 fa01 	bl	8007a6e <memset>
  if(uartHandle->Instance==USART1)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	4a38      	ldr	r2, [pc, #224]	; (8003754 <HAL_UART_MspInit+0x100>)
 8003672:	4293      	cmp	r3, r2
 8003674:	d133      	bne.n	80036de <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003676:	4b38      	ldr	r3, [pc, #224]	; (8003758 <HAL_UART_MspInit+0x104>)
 8003678:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800367a:	4b37      	ldr	r3, [pc, #220]	; (8003758 <HAL_UART_MspInit+0x104>)
 800367c:	2180      	movs	r1, #128	; 0x80
 800367e:	01c9      	lsls	r1, r1, #7
 8003680:	430a      	orrs	r2, r1
 8003682:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003684:	4b34      	ldr	r3, [pc, #208]	; (8003758 <HAL_UART_MspInit+0x104>)
 8003686:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003688:	4b33      	ldr	r3, [pc, #204]	; (8003758 <HAL_UART_MspInit+0x104>)
 800368a:	2101      	movs	r1, #1
 800368c:	430a      	orrs	r2, r1
 800368e:	62da      	str	r2, [r3, #44]	; 0x2c
 8003690:	4b31      	ldr	r3, [pc, #196]	; (8003758 <HAL_UART_MspInit+0x104>)
 8003692:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003694:	2201      	movs	r2, #1
 8003696:	4013      	ands	r3, r2
 8003698:	613b      	str	r3, [r7, #16]
 800369a:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = UART_RX_LTE_Pin|UART_TX_LTE_Pin;
 800369c:	193b      	adds	r3, r7, r4
 800369e:	22c0      	movs	r2, #192	; 0xc0
 80036a0:	00d2      	lsls	r2, r2, #3
 80036a2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036a4:	0021      	movs	r1, r4
 80036a6:	187b      	adds	r3, r7, r1
 80036a8:	2202      	movs	r2, #2
 80036aa:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036ac:	187b      	adds	r3, r7, r1
 80036ae:	2200      	movs	r2, #0
 80036b0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80036b2:	187b      	adds	r3, r7, r1
 80036b4:	2203      	movs	r2, #3
 80036b6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 80036b8:	187b      	adds	r3, r7, r1
 80036ba:	2204      	movs	r2, #4
 80036bc:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80036be:	187a      	adds	r2, r7, r1
 80036c0:	23a0      	movs	r3, #160	; 0xa0
 80036c2:	05db      	lsls	r3, r3, #23
 80036c4:	0011      	movs	r1, r2
 80036c6:	0018      	movs	r0, r3
 80036c8:	f000 fffe 	bl	80046c8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80036cc:	2200      	movs	r2, #0
 80036ce:	2100      	movs	r1, #0
 80036d0:	201b      	movs	r0, #27
 80036d2:	f000 ff3f 	bl	8004554 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80036d6:	201b      	movs	r0, #27
 80036d8:	f000 ff51 	bl	800457e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80036dc:	e036      	b.n	800374c <HAL_UART_MspInit+0xf8>
  else if(uartHandle->Instance==USART2)
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	4a1e      	ldr	r2, [pc, #120]	; (800375c <HAL_UART_MspInit+0x108>)
 80036e4:	4293      	cmp	r3, r2
 80036e6:	d131      	bne.n	800374c <HAL_UART_MspInit+0xf8>
    __HAL_RCC_USART2_CLK_ENABLE();
 80036e8:	4b1b      	ldr	r3, [pc, #108]	; (8003758 <HAL_UART_MspInit+0x104>)
 80036ea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80036ec:	4b1a      	ldr	r3, [pc, #104]	; (8003758 <HAL_UART_MspInit+0x104>)
 80036ee:	2180      	movs	r1, #128	; 0x80
 80036f0:	0289      	lsls	r1, r1, #10
 80036f2:	430a      	orrs	r2, r1
 80036f4:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80036f6:	4b18      	ldr	r3, [pc, #96]	; (8003758 <HAL_UART_MspInit+0x104>)
 80036f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036fa:	4b17      	ldr	r3, [pc, #92]	; (8003758 <HAL_UART_MspInit+0x104>)
 80036fc:	2101      	movs	r1, #1
 80036fe:	430a      	orrs	r2, r1
 8003700:	62da      	str	r2, [r3, #44]	; 0x2c
 8003702:	4b15      	ldr	r3, [pc, #84]	; (8003758 <HAL_UART_MspInit+0x104>)
 8003704:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003706:	2201      	movs	r2, #1
 8003708:	4013      	ands	r3, r2
 800370a:	60fb      	str	r3, [r7, #12]
 800370c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = UART_TX_DBG_Pin|UART_RX_DBG_Pin;
 800370e:	2114      	movs	r1, #20
 8003710:	187b      	adds	r3, r7, r1
 8003712:	220c      	movs	r2, #12
 8003714:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003716:	187b      	adds	r3, r7, r1
 8003718:	2202      	movs	r2, #2
 800371a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800371c:	187b      	adds	r3, r7, r1
 800371e:	2200      	movs	r2, #0
 8003720:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003722:	187b      	adds	r3, r7, r1
 8003724:	2203      	movs	r2, #3
 8003726:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 8003728:	187b      	adds	r3, r7, r1
 800372a:	2204      	movs	r2, #4
 800372c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800372e:	187a      	adds	r2, r7, r1
 8003730:	23a0      	movs	r3, #160	; 0xa0
 8003732:	05db      	lsls	r3, r3, #23
 8003734:	0011      	movs	r1, r2
 8003736:	0018      	movs	r0, r3
 8003738:	f000 ffc6 	bl	80046c8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800373c:	2200      	movs	r2, #0
 800373e:	2100      	movs	r1, #0
 8003740:	201c      	movs	r0, #28
 8003742:	f000 ff07 	bl	8004554 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003746:	201c      	movs	r0, #28
 8003748:	f000 ff19 	bl	800457e <HAL_NVIC_EnableIRQ>
}
 800374c:	46c0      	nop			; (mov r8, r8)
 800374e:	46bd      	mov	sp, r7
 8003750:	b00b      	add	sp, #44	; 0x2c
 8003752:	bd90      	pop	{r4, r7, pc}
 8003754:	40013800 	.word	0x40013800
 8003758:	40021000 	.word	0x40021000
 800375c:	40004400 	.word	0x40004400

08003760 <UartSettings>:
  }
}

/* USER CODE BEGIN 1 */
void UartSettings() // Uart Startup Interrupt Routine Construction
{
 8003760:	b580      	push	{r7, lr}
 8003762:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(&huart1, &uartLTEParameters.rxData, 1);
 8003764:	4907      	ldr	r1, [pc, #28]	; (8003784 <UartSettings+0x24>)
 8003766:	4b08      	ldr	r3, [pc, #32]	; (8003788 <UartSettings+0x28>)
 8003768:	2201      	movs	r2, #1
 800376a:	0018      	movs	r0, r3
 800376c:	f002 feac 	bl	80064c8 <HAL_UART_Receive_IT>
	HAL_UART_Receive_IT(&huart2, &uartDebugParameters.rxData, 1);
 8003770:	4906      	ldr	r1, [pc, #24]	; (800378c <UartSettings+0x2c>)
 8003772:	4b07      	ldr	r3, [pc, #28]	; (8003790 <UartSettings+0x30>)
 8003774:	2201      	movs	r2, #1
 8003776:	0018      	movs	r0, r3
 8003778:	f002 fea6 	bl	80064c8 <HAL_UART_Receive_IT>
}
 800377c:	46c0      	nop			; (mov r8, r8)
 800377e:	46bd      	mov	sp, r7
 8003780:	bd80      	pop	{r7, pc}
 8003782:	46c0      	nop			; (mov r8, r8)
 8003784:	200005f8 	.word	0x200005f8
 8003788:	20000474 	.word	0x20000474
 800378c:	20000470 	.word	0x20000470
 8003790:	200005fc 	.word	0x200005fc

08003794 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003794:	b580      	push	{r7, lr}
 8003796:	b082      	sub	sp, #8
 8003798:	af00      	add	r7, sp, #0
 800379a:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART1) // Messages from LTE Module
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	4a1c      	ldr	r2, [pc, #112]	; (8003814 <HAL_UART_RxCpltCallback+0x80>)
 80037a2:	4293      	cmp	r3, r2
 80037a4:	d125      	bne.n	80037f2 <HAL_UART_RxCpltCallback+0x5e>
	{
		if (uartLTEParameters.active){
 80037a6:	4a1c      	ldr	r2, [pc, #112]	; (8003818 <HAL_UART_RxCpltCallback+0x84>)
 80037a8:	2381      	movs	r3, #129	; 0x81
 80037aa:	005b      	lsls	r3, r3, #1
 80037ac:	5cd3      	ldrb	r3, [r2, r3]
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d01f      	beq.n	80037f2 <HAL_UART_RxCpltCallback+0x5e>
			uartLTEParameters.rxBuffer[uartLTEParameters.rxDataCounter] = uartLTEParameters.rxData;
 80037b2:	4a19      	ldr	r2, [pc, #100]	; (8003818 <HAL_UART_RxCpltCallback+0x84>)
 80037b4:	2302      	movs	r3, #2
 80037b6:	33ff      	adds	r3, #255	; 0xff
 80037b8:	5cd3      	ldrb	r3, [r2, r3]
 80037ba:	0019      	movs	r1, r3
 80037bc:	4a16      	ldr	r2, [pc, #88]	; (8003818 <HAL_UART_RxCpltCallback+0x84>)
 80037be:	2380      	movs	r3, #128	; 0x80
 80037c0:	005b      	lsls	r3, r3, #1
 80037c2:	5cd2      	ldrb	r2, [r2, r3]
 80037c4:	4b14      	ldr	r3, [pc, #80]	; (8003818 <HAL_UART_RxCpltCallback+0x84>)
 80037c6:	545a      	strb	r2, [r3, r1]
			uartLTEParameters.rxDataCounter++;
 80037c8:	4a13      	ldr	r2, [pc, #76]	; (8003818 <HAL_UART_RxCpltCallback+0x84>)
 80037ca:	2302      	movs	r3, #2
 80037cc:	33ff      	adds	r3, #255	; 0xff
 80037ce:	5cd3      	ldrb	r3, [r2, r3]
 80037d0:	3301      	adds	r3, #1
 80037d2:	b2d9      	uxtb	r1, r3
 80037d4:	4a10      	ldr	r2, [pc, #64]	; (8003818 <HAL_UART_RxCpltCallback+0x84>)
 80037d6:	2302      	movs	r3, #2
 80037d8:	33ff      	adds	r3, #255	; 0xff
 80037da:	54d1      	strb	r1, [r2, r3]
			if (uartLTEParameters.rxDataCounter >=255)uartLTEParameters.rxDataCounter=0;
 80037dc:	4a0e      	ldr	r2, [pc, #56]	; (8003818 <HAL_UART_RxCpltCallback+0x84>)
 80037de:	2302      	movs	r3, #2
 80037e0:	33ff      	adds	r3, #255	; 0xff
 80037e2:	5cd3      	ldrb	r3, [r2, r3]
 80037e4:	2bff      	cmp	r3, #255	; 0xff
 80037e6:	d104      	bne.n	80037f2 <HAL_UART_RxCpltCallback+0x5e>
 80037e8:	4a0b      	ldr	r2, [pc, #44]	; (8003818 <HAL_UART_RxCpltCallback+0x84>)
 80037ea:	2302      	movs	r3, #2
 80037ec:	33ff      	adds	r3, #255	; 0xff
 80037ee:	2100      	movs	r1, #0
 80037f0:	54d1      	strb	r1, [r2, r3]
		}
	}


	HAL_UART_Receive_IT(&huart1, &uartLTEParameters.rxData, 1);
 80037f2:	490a      	ldr	r1, [pc, #40]	; (800381c <HAL_UART_RxCpltCallback+0x88>)
 80037f4:	4b0a      	ldr	r3, [pc, #40]	; (8003820 <HAL_UART_RxCpltCallback+0x8c>)
 80037f6:	2201      	movs	r2, #1
 80037f8:	0018      	movs	r0, r3
 80037fa:	f002 fe65 	bl	80064c8 <HAL_UART_Receive_IT>
	HAL_UART_Receive_IT(&huart2, &uartDebugParameters.rxData, 1);
 80037fe:	4909      	ldr	r1, [pc, #36]	; (8003824 <HAL_UART_RxCpltCallback+0x90>)
 8003800:	4b09      	ldr	r3, [pc, #36]	; (8003828 <HAL_UART_RxCpltCallback+0x94>)
 8003802:	2201      	movs	r2, #1
 8003804:	0018      	movs	r0, r3
 8003806:	f002 fe5f 	bl	80064c8 <HAL_UART_Receive_IT>
}
 800380a:	46c0      	nop			; (mov r8, r8)
 800380c:	46bd      	mov	sp, r7
 800380e:	b002      	add	sp, #8
 8003810:	bd80      	pop	{r7, pc}
 8003812:	46c0      	nop			; (mov r8, r8)
 8003814:	40013800 	.word	0x40013800
 8003818:	200004f8 	.word	0x200004f8
 800381c:	200005f8 	.word	0x200005f8
 8003820:	20000474 	.word	0x20000474
 8003824:	20000470 	.word	0x20000470
 8003828:	200005fc 	.word	0x200005fc

0800382c <UsrEnable>:

usrParams_typedef usrParameters;

/* ------- ULT SENSOR ENABLE -------------------- */
void UsrEnable()
{
 800382c:	b580      	push	{r7, lr}
 800382e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(ULT_ENABLE_GPIO_Port, ULT_ENABLE_Pin, GPIO_PIN_SET); // Ultrasonic Sensor Power On
 8003830:	2380      	movs	r3, #128	; 0x80
 8003832:	011b      	lsls	r3, r3, #4
 8003834:	4807      	ldr	r0, [pc, #28]	; (8003854 <UsrEnable+0x28>)
 8003836:	2201      	movs	r2, #1
 8003838:	0019      	movs	r1, r3
 800383a:	f001 f8c3 	bl	80049c4 <HAL_GPIO_WritePin>
	HAL_Delay(USR_PWRON_STAB_TIMEOUT); // Wait 100 ms for power stabilization
 800383e:	2064      	movs	r0, #100	; 0x64
 8003840:	f000 f9d0 	bl	8003be4 <HAL_Delay>
DebugSendData("Usr Enable",10);
 8003844:	4b04      	ldr	r3, [pc, #16]	; (8003858 <UsrEnable+0x2c>)
 8003846:	210a      	movs	r1, #10
 8003848:	0018      	movs	r0, r3
 800384a:	f000 f8e7 	bl	8003a1c <DebugSendData>

}
 800384e:	46c0      	nop			; (mov r8, r8)
 8003850:	46bd      	mov	sp, r7
 8003852:	bd80      	pop	{r7, pc}
 8003854:	50000400 	.word	0x50000400
 8003858:	08008728 	.word	0x08008728

0800385c <UsrDisable>:
/* --------------- End of the ULT SENSOR ENABLE ---------------- */

/* ------- ULT SENSOR DISABLE -------------------- */
void UsrDisable()
{
 800385c:	b580      	push	{r7, lr}
 800385e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(ULT_ENABLE_GPIO_Port, ULT_ENABLE_Pin, GPIO_PIN_RESET); // Ultrasonic Sensor Power Off
 8003860:	2380      	movs	r3, #128	; 0x80
 8003862:	011b      	lsls	r3, r3, #4
 8003864:	4807      	ldr	r0, [pc, #28]	; (8003884 <UsrDisable+0x28>)
 8003866:	2200      	movs	r2, #0
 8003868:	0019      	movs	r1, r3
 800386a:	f001 f8ab 	bl	80049c4 <HAL_GPIO_WritePin>
	HAL_Delay(USR_PWROFF_TIMEOUT); // Wait 100 ms for discharge
 800386e:	2064      	movs	r0, #100	; 0x64
 8003870:	f000 f9b8 	bl	8003be4 <HAL_Delay>
	DebugSendData("Usr Disable",11);
 8003874:	4b04      	ldr	r3, [pc, #16]	; (8003888 <UsrDisable+0x2c>)
 8003876:	210b      	movs	r1, #11
 8003878:	0018      	movs	r0, r3
 800387a:	f000 f8cf 	bl	8003a1c <DebugSendData>


}
 800387e:	46c0      	nop			; (mov r8, r8)
 8003880:	46bd      	mov	sp, r7
 8003882:	bd80      	pop	{r7, pc}
 8003884:	50000400 	.word	0x50000400
 8003888:	08008734 	.word	0x08008734

0800388c <UsrEmit>:
/* --------------- End of the ULT SENSOR DISABLE ---------------- */

/* ------- ULT SENSOR EMIT -------------------- */
void UsrEmit()
{
 800388c:	b580      	push	{r7, lr}
 800388e:	af00      	add	r7, sp, #0
	// Emit Process
	HAL_GPIO_WritePin(ULT_EMIT_GPIO_Port, ULT_EMIT_Pin, GPIO_PIN_SET); // Set emit pin to high
 8003890:	2380      	movs	r3, #128	; 0x80
 8003892:	00db      	lsls	r3, r3, #3
 8003894:	4809      	ldr	r0, [pc, #36]	; (80038bc <UsrEmit+0x30>)
 8003896:	2201      	movs	r2, #1
 8003898:	0019      	movs	r1, r3
 800389a:	f001 f893 	bl	80049c4 <HAL_GPIO_WritePin>
	DelayUs(500); // 0.5 ms high is necessary for emit
 800389e:	23fa      	movs	r3, #250	; 0xfa
 80038a0:	005b      	lsls	r3, r3, #1
 80038a2:	0018      	movs	r0, r3
 80038a4:	f7ff fe5c 	bl	8003560 <DelayUs>
	HAL_GPIO_WritePin(ULT_EMIT_GPIO_Port, ULT_EMIT_Pin, GPIO_PIN_RESET); // Set emit pin to low
 80038a8:	2380      	movs	r3, #128	; 0x80
 80038aa:	00db      	lsls	r3, r3, #3
 80038ac:	4803      	ldr	r0, [pc, #12]	; (80038bc <UsrEmit+0x30>)
 80038ae:	2200      	movs	r2, #0
 80038b0:	0019      	movs	r1, r3
 80038b2:	f001 f887 	bl	80049c4 <HAL_GPIO_WritePin>



}
 80038b6:	46c0      	nop			; (mov r8, r8)
 80038b8:	46bd      	mov	sp, r7
 80038ba:	bd80      	pop	{r7, pc}
 80038bc:	50000400 	.word	0x50000400

080038c0 <UsrMeasure>:
/* --------------- End of the ULT SENSOR EMIT ---------------- */

/* ------- ULT SENSOR MEASURE -------------------- */
void UsrMeasure()
{
 80038c0:	b580      	push	{r7, lr}
 80038c2:	b082      	sub	sp, #8
 80038c4:	af00      	add	r7, sp, #0
	DebugSendData("Usr Measure",11);
 80038c6:	4b26      	ldr	r3, [pc, #152]	; (8003960 <UsrMeasure+0xa0>)
 80038c8:	210b      	movs	r1, #11
 80038ca:	0018      	movs	r0, r3
 80038cc:	f000 f8a6 	bl	8003a1c <DebugSendData>
	uint8_t arrayCnt = 0;
 80038d0:	1dfb      	adds	r3, r7, #7
 80038d2:	2200      	movs	r2, #0
 80038d4:	701a      	strb	r2, [r3, #0]

	for(uint16_t cnt = 0; cnt < usrParameters.measureRepCount; cnt++)
 80038d6:	1d3b      	adds	r3, r7, #4
 80038d8:	2200      	movs	r2, #0
 80038da:	801a      	strh	r2, [r3, #0]
 80038dc:	e035      	b.n	800394a <UsrMeasure+0x8a>
	{
		usrParameters.measurementValue = 0; //Set the measurement value to 0
 80038de:	4b21      	ldr	r3, [pc, #132]	; (8003964 <UsrMeasure+0xa4>)
 80038e0:	2200      	movs	r2, #0
 80038e2:	809a      	strh	r2, [r3, #4]
		usrParameters.usrReadyRead = 0; //Set the read mode to disable
 80038e4:	4b1f      	ldr	r3, [pc, #124]	; (8003964 <UsrMeasure+0xa4>)
 80038e6:	2200      	movs	r2, #0
 80038e8:	705a      	strb	r2, [r3, #1]

		UsrEmit(); //Emit the Ultrasonic Sensor
 80038ea:	f7ff ffcf 	bl	800388c <UsrEmit>

		usrParameters.readDistance = NEAR; //Set the read distance mode to NEAR
 80038ee:	4b1d      	ldr	r3, [pc, #116]	; (8003964 <UsrMeasure+0xa4>)
 80038f0:	2201      	movs	r2, #1
 80038f2:	701a      	strb	r2, [r3, #0]
		DelayUs(USR_NEAR_MEAS_TIMEOUT); //Wait 2 ms for the near distance measurement (35 cm)
 80038f4:	23fa      	movs	r3, #250	; 0xfa
 80038f6:	00db      	lsls	r3, r3, #3
 80038f8:	0018      	movs	r0, r3
 80038fa:	f7ff fe31 	bl	8003560 <DelayUs>

		usrParameters.readDistance = FAR; //Set the read distance mode to FAR
 80038fe:	4b19      	ldr	r3, [pc, #100]	; (8003964 <UsrMeasure+0xa4>)
 8003900:	2202      	movs	r2, #2
 8003902:	701a      	strb	r2, [r3, #0]
		usrParameters.usrReadyRead = 1; //Set the read mode to enable
 8003904:	4b17      	ldr	r3, [pc, #92]	; (8003964 <UsrMeasure+0xa4>)
 8003906:	2201      	movs	r2, #1
 8003908:	705a      	strb	r2, [r3, #1]

		DelayUs(USR_FAR_MEAS_TIMEOUT); //Wait 28 ms for the far distance measurement
 800390a:	4b17      	ldr	r3, [pc, #92]	; (8003968 <UsrMeasure+0xa8>)
 800390c:	0018      	movs	r0, r3
 800390e:	f7ff fe27 	bl	8003560 <DelayUs>

		usrParameters.usrReadyRead = 0; //Set the read mode to disable
 8003912:	4b14      	ldr	r3, [pc, #80]	; (8003964 <UsrMeasure+0xa4>)
 8003914:	2200      	movs	r2, #0
 8003916:	705a      	strb	r2, [r3, #1]

		usrParameters.usrMeasArray[arrayCnt] = usrParameters.measurementValue + USR_NEAR_MEAS_TIMEOUT;
 8003918:	4b12      	ldr	r3, [pc, #72]	; (8003964 <UsrMeasure+0xa4>)
 800391a:	889a      	ldrh	r2, [r3, #4]
 800391c:	1dfb      	adds	r3, r7, #7
 800391e:	781b      	ldrb	r3, [r3, #0]
 8003920:	21fa      	movs	r1, #250	; 0xfa
 8003922:	00c9      	lsls	r1, r1, #3
 8003924:	468c      	mov	ip, r1
 8003926:	4462      	add	r2, ip
 8003928:	b291      	uxth	r1, r2
 800392a:	4a0e      	ldr	r2, [pc, #56]	; (8003964 <UsrMeasure+0xa4>)
 800392c:	005b      	lsls	r3, r3, #1
 800392e:	18d3      	adds	r3, r2, r3
 8003930:	3306      	adds	r3, #6
 8003932:	1c0a      	adds	r2, r1, #0
 8003934:	801a      	strh	r2, [r3, #0]
		arrayCnt ++;
 8003936:	1dfb      	adds	r3, r7, #7
 8003938:	781a      	ldrb	r2, [r3, #0]
 800393a:	1dfb      	adds	r3, r7, #7
 800393c:	3201      	adds	r2, #1
 800393e:	701a      	strb	r2, [r3, #0]
	for(uint16_t cnt = 0; cnt < usrParameters.measureRepCount; cnt++)
 8003940:	1d3b      	adds	r3, r7, #4
 8003942:	881a      	ldrh	r2, [r3, #0]
 8003944:	1d3b      	adds	r3, r7, #4
 8003946:	3201      	adds	r2, #1
 8003948:	801a      	strh	r2, [r3, #0]
 800394a:	4b06      	ldr	r3, [pc, #24]	; (8003964 <UsrMeasure+0xa4>)
 800394c:	885b      	ldrh	r3, [r3, #2]
 800394e:	1d3a      	adds	r2, r7, #4
 8003950:	8812      	ldrh	r2, [r2, #0]
 8003952:	429a      	cmp	r2, r3
 8003954:	d3c3      	bcc.n	80038de <UsrMeasure+0x1e>
	}


}
 8003956:	46c0      	nop			; (mov r8, r8)
 8003958:	46c0      	nop			; (mov r8, r8)
 800395a:	46bd      	mov	sp, r7
 800395c:	b002      	add	sp, #8
 800395e:	bd80      	pop	{r7, pc}
 8003960:	08008740 	.word	0x08008740
 8003964:	20000680 	.word	0x20000680
 8003968:	00006d60 	.word	0x00006d60

0800396c <WasteInit>:
#include "adc.h"
#include <stdio.h>

waste_typedef wasteParameters;
debugMessages_typedef debugMessages;
void WasteInit() {
 800396c:	b580      	push	{r7, lr}
 800396e:	b082      	sub	sp, #8
 8003970:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start(&htim2);
 8003972:	4b24      	ldr	r3, [pc, #144]	; (8003a04 <WasteInit+0x98>)
 8003974:	0018      	movs	r0, r3
 8003976:	f002 fa37 	bl	8005de8 <HAL_TIM_Base_Start>
	usrParameters.measureRepCount = USR_MEASURE_COUNT;
 800397a:	4b23      	ldr	r3, [pc, #140]	; (8003a08 <WasteInit+0x9c>)
 800397c:	220a      	movs	r2, #10
 800397e:	805a      	strh	r2, [r3, #2]
	usrParameters.measurementValue = 0;
 8003980:	4b21      	ldr	r3, [pc, #132]	; (8003a08 <WasteInit+0x9c>)
 8003982:	2200      	movs	r2, #0
 8003984:	809a      	strh	r2, [r3, #4]
	lteParameters.contexId = 1;
 8003986:	4b21      	ldr	r3, [pc, #132]	; (8003a0c <WasteInit+0xa0>)
 8003988:	22b7      	movs	r2, #183	; 0xb7
 800398a:	2101      	movs	r1, #1
 800398c:	5499      	strb	r1, [r3, r2]
	lteParameters.sessionId = 0;
 800398e:	4b1f      	ldr	r3, [pc, #124]	; (8003a0c <WasteInit+0xa0>)
 8003990:	22b8      	movs	r2, #184	; 0xb8
 8003992:	2100      	movs	r1, #0
 8003994:	5499      	strb	r1, [r3, r2]
	LTEInitParams();
 8003996:	f7fd fb6b 	bl	8001070 <LTEInitParams>
	for (int i = 0; i < 15; ++i) {
 800399a:	2300      	movs	r3, #0
 800399c:	607b      	str	r3, [r7, #4]
 800399e:	e00d      	b.n	80039bc <WasteInit+0x50>
		lteParameters.imeiNum[i] = '*';
 80039a0:	4a1a      	ldr	r2, [pc, #104]	; (8003a0c <WasteInit+0xa0>)
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	18d3      	adds	r3, r2, r3
 80039a6:	222a      	movs	r2, #42	; 0x2a
 80039a8:	701a      	strb	r2, [r3, #0]
		lteParameters.imsiNum[i] = '*';
 80039aa:	4a18      	ldr	r2, [pc, #96]	; (8003a0c <WasteInit+0xa0>)
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	18d3      	adds	r3, r2, r3
 80039b0:	330f      	adds	r3, #15
 80039b2:	222a      	movs	r2, #42	; 0x2a
 80039b4:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 15; ++i) {
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	3301      	adds	r3, #1
 80039ba:	607b      	str	r3, [r7, #4]
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	2b0e      	cmp	r3, #14
 80039c0:	ddee      	ble.n	80039a0 <WasteInit+0x34>
	}

	rtcParameters.wakeUpFlag = 1;
 80039c2:	4b13      	ldr	r3, [pc, #76]	; (8003a10 <WasteInit+0xa4>)
 80039c4:	2201      	movs	r2, #1
 80039c6:	701a      	strb	r2, [r3, #0]
	wasteParameters.preDataSendError=0;
 80039c8:	4b12      	ldr	r3, [pc, #72]	; (8003a14 <WasteInit+0xa8>)
 80039ca:	2200      	movs	r2, #0
 80039cc:	71da      	strb	r2, [r3, #7]
	wasteParameters.wakeUpCount = 0;
 80039ce:	4b11      	ldr	r3, [pc, #68]	; (8003a14 <WasteInit+0xa8>)
 80039d0:	2200      	movs	r2, #0
 80039d2:	701a      	strb	r2, [r3, #0]
	wasteParameters.setupCount=0;
 80039d4:	4b0f      	ldr	r3, [pc, #60]	; (8003a14 <WasteInit+0xa8>)
 80039d6:	2200      	movs	r2, #0
 80039d8:	715a      	strb	r2, [r3, #5]
	wasteParameters.gpsAlarm=0;
 80039da:	4b0e      	ldr	r3, [pc, #56]	; (8003a14 <WasteInit+0xa8>)
 80039dc:	2200      	movs	r2, #0
 80039de:	721a      	strb	r2, [r3, #8]
	wasteParameters.gpsAlarmCount=0;
 80039e0:	4b0c      	ldr	r3, [pc, #48]	; (8003a14 <WasteInit+0xa8>)
 80039e2:	2200      	movs	r2, #0
 80039e4:	725a      	strb	r2, [r3, #9]
wasteParameters.setupMode=1;
 80039e6:	4b0b      	ldr	r3, [pc, #44]	; (8003a14 <WasteInit+0xa8>)
 80039e8:	2201      	movs	r2, #1
 80039ea:	719a      	strb	r2, [r3, #6]
	adcParameters.adcReadEnableFlag = 1;
 80039ec:	4b0a      	ldr	r3, [pc, #40]	; (8003a18 <WasteInit+0xac>)
 80039ee:	2201      	movs	r2, #1
 80039f0:	735a      	strb	r2, [r3, #13]
	lteParameters.powerState = PWR_PASSIVE;
 80039f2:	4b06      	ldr	r3, [pc, #24]	; (8003a0c <WasteInit+0xa0>)
 80039f4:	22b6      	movs	r2, #182	; 0xb6
 80039f6:	2101      	movs	r1, #1
 80039f8:	5499      	strb	r1, [r3, r2]

}
 80039fa:	46c0      	nop			; (mov r8, r8)
 80039fc:	46bd      	mov	sp, r7
 80039fe:	b002      	add	sp, #8
 8003a00:	bd80      	pop	{r7, pc}
 8003a02:	46c0      	nop			; (mov r8, r8)
 8003a04:	20000330 	.word	0x20000330
 8003a08:	20000680 	.word	0x20000680
 8003a0c:	2000024c 	.word	0x2000024c
 8003a10:	20000308 	.word	0x20000308
 8003a14:	2000079c 	.word	0x2000079c
 8003a18:	20000098 	.word	0x20000098

08003a1c <DebugSendData>:

void DebugSendData(const char *msg, uint8_t msgSize) {
 8003a1c:	b580      	push	{r7, lr}
 8003a1e:	b084      	sub	sp, #16
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	6078      	str	r0, [r7, #4]
 8003a24:	000a      	movs	r2, r1
 8003a26:	1cfb      	adds	r3, r7, #3
 8003a28:	701a      	strb	r2, [r3, #0]
#ifdef DEBUG
	if (msgSize > 250)msgSize=250;
 8003a2a:	1cfb      	adds	r3, r7, #3
 8003a2c:	781b      	ldrb	r3, [r3, #0]
 8003a2e:	2bfa      	cmp	r3, #250	; 0xfa
 8003a30:	d902      	bls.n	8003a38 <DebugSendData+0x1c>
 8003a32:	1cfb      	adds	r3, r7, #3
 8003a34:	22fa      	movs	r2, #250	; 0xfa
 8003a36:	701a      	strb	r2, [r3, #0]
	memset(debugMessages.MEESAGE, '-', msgSize+2);
 8003a38:	1cfb      	adds	r3, r7, #3
 8003a3a:	781b      	ldrb	r3, [r3, #0]
 8003a3c:	3302      	adds	r3, #2
 8003a3e:	001a      	movs	r2, r3
 8003a40:	4b19      	ldr	r3, [pc, #100]	; (8003aa8 <DebugSendData+0x8c>)
 8003a42:	212d      	movs	r1, #45	; 0x2d
 8003a44:	0018      	movs	r0, r3
 8003a46:	f004 f812 	bl	8007a6e <memset>
	for (int i = 0; i < msgSize; ++i) {
 8003a4a:	2300      	movs	r3, #0
 8003a4c:	60fb      	str	r3, [r7, #12]
 8003a4e:	e00b      	b.n	8003a68 <DebugSendData+0x4c>
			debugMessages.MEESAGE[i] =(char) msg[i];
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	687a      	ldr	r2, [r7, #4]
 8003a54:	18d3      	adds	r3, r2, r3
 8003a56:	7819      	ldrb	r1, [r3, #0]
 8003a58:	4a13      	ldr	r2, [pc, #76]	; (8003aa8 <DebugSendData+0x8c>)
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	18d3      	adds	r3, r2, r3
 8003a5e:	1c0a      	adds	r2, r1, #0
 8003a60:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < msgSize; ++i) {
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	3301      	adds	r3, #1
 8003a66:	60fb      	str	r3, [r7, #12]
 8003a68:	1cfb      	adds	r3, r7, #3
 8003a6a:	781b      	ldrb	r3, [r3, #0]
 8003a6c:	68fa      	ldr	r2, [r7, #12]
 8003a6e:	429a      	cmp	r2, r3
 8003a70:	dbee      	blt.n	8003a50 <DebugSendData+0x34>
	}
	debugMessages.MEESAGE[msgSize] = '\r';
 8003a72:	1cfb      	adds	r3, r7, #3
 8003a74:	781b      	ldrb	r3, [r3, #0]
 8003a76:	4a0c      	ldr	r2, [pc, #48]	; (8003aa8 <DebugSendData+0x8c>)
 8003a78:	210d      	movs	r1, #13
 8003a7a:	54d1      	strb	r1, [r2, r3]
	debugMessages.MEESAGE[msgSize+1] = '\n';
 8003a7c:	1cfb      	adds	r3, r7, #3
 8003a7e:	781b      	ldrb	r3, [r3, #0]
 8003a80:	3301      	adds	r3, #1
 8003a82:	4a09      	ldr	r2, [pc, #36]	; (8003aa8 <DebugSendData+0x8c>)
 8003a84:	210a      	movs	r1, #10
 8003a86:	54d1      	strb	r1, [r2, r3]
	HAL_UART_Transmit(&huart2, (uint8_t*) debugMessages.MEESAGE,msgSize+2, HAL_MAX_DELAY); // Send message to the debug
 8003a88:	1cfb      	adds	r3, r7, #3
 8003a8a:	781b      	ldrb	r3, [r3, #0]
 8003a8c:	b29b      	uxth	r3, r3
 8003a8e:	3302      	adds	r3, #2
 8003a90:	b29a      	uxth	r2, r3
 8003a92:	2301      	movs	r3, #1
 8003a94:	425b      	negs	r3, r3
 8003a96:	4904      	ldr	r1, [pc, #16]	; (8003aa8 <DebugSendData+0x8c>)
 8003a98:	4804      	ldr	r0, [pc, #16]	; (8003aac <DebugSendData+0x90>)
 8003a9a:	f002 fc6d 	bl	8006378 <HAL_UART_Transmit>
#endif

}
 8003a9e:	46c0      	nop			; (mov r8, r8)
 8003aa0:	46bd      	mov	sp, r7
 8003aa2:	b004      	add	sp, #16
 8003aa4:	bd80      	pop	{r7, pc}
 8003aa6:	46c0      	nop			; (mov r8, r8)
 8003aa8:	2000069c 	.word	0x2000069c
 8003aac:	200005fc 	.word	0x200005fc

08003ab0 <Reset_Handler>:
.word  _ebss

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:     ldr   r0, =_estack
 8003ab0:	480d      	ldr	r0, [pc, #52]	; (8003ae8 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8003ab2:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003ab4:	480d      	ldr	r0, [pc, #52]	; (8003aec <LoopForever+0x6>)
  ldr r1, =_edata
 8003ab6:	490e      	ldr	r1, [pc, #56]	; (8003af0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003ab8:	4a0e      	ldr	r2, [pc, #56]	; (8003af4 <LoopForever+0xe>)
  movs r3, #0
 8003aba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003abc:	e002      	b.n	8003ac4 <LoopCopyDataInit>

08003abe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003abe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003ac0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003ac2:	3304      	adds	r3, #4

08003ac4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003ac4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003ac6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003ac8:	d3f9      	bcc.n	8003abe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003aca:	4a0b      	ldr	r2, [pc, #44]	; (8003af8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003acc:	4c0b      	ldr	r4, [pc, #44]	; (8003afc <LoopForever+0x16>)
  movs r3, #0
 8003ace:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003ad0:	e001      	b.n	8003ad6 <LoopFillZerobss>

08003ad2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003ad2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003ad4:	3204      	adds	r2, #4

08003ad6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003ad6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003ad8:	d3fb      	bcc.n	8003ad2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8003ada:	f7ff fcd1 	bl	8003480 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003ade:	f003 ff99 	bl	8007a14 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003ae2:	f7fe fa09 	bl	8001ef8 <main>

08003ae6 <LoopForever>:

LoopForever:
    b LoopForever
 8003ae6:	e7fe      	b.n	8003ae6 <LoopForever>
Reset_Handler:     ldr   r0, =_estack
 8003ae8:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8003aec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003af0:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8003af4:	08008824 	.word	0x08008824
  ldr r2, =_sbss
 8003af8:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8003afc:	200007bc 	.word	0x200007bc

08003b00 <DMA1_Channel1_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003b00:	e7fe      	b.n	8003b00 <DMA1_Channel1_IRQHandler>
	...

08003b04 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003b04:	b580      	push	{r7, lr}
 8003b06:	b082      	sub	sp, #8
 8003b08:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003b0a:	1dfb      	adds	r3, r7, #7
 8003b0c:	2200      	movs	r2, #0
 8003b0e:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8003b10:	4b0b      	ldr	r3, [pc, #44]	; (8003b40 <HAL_Init+0x3c>)
 8003b12:	681a      	ldr	r2, [r3, #0]
 8003b14:	4b0a      	ldr	r3, [pc, #40]	; (8003b40 <HAL_Init+0x3c>)
 8003b16:	2140      	movs	r1, #64	; 0x40
 8003b18:	430a      	orrs	r2, r1
 8003b1a:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003b1c:	2003      	movs	r0, #3
 8003b1e:	f000 f811 	bl	8003b44 <HAL_InitTick>
 8003b22:	1e03      	subs	r3, r0, #0
 8003b24:	d003      	beq.n	8003b2e <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8003b26:	1dfb      	adds	r3, r7, #7
 8003b28:	2201      	movs	r2, #1
 8003b2a:	701a      	strb	r2, [r3, #0]
 8003b2c:	e001      	b.n	8003b32 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003b2e:	f7ff fc0d 	bl	800334c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003b32:	1dfb      	adds	r3, r7, #7
 8003b34:	781b      	ldrb	r3, [r3, #0]
}
 8003b36:	0018      	movs	r0, r3
 8003b38:	46bd      	mov	sp, r7
 8003b3a:	b002      	add	sp, #8
 8003b3c:	bd80      	pop	{r7, pc}
 8003b3e:	46c0      	nop			; (mov r8, r8)
 8003b40:	40022000 	.word	0x40022000

08003b44 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003b44:	b590      	push	{r4, r7, lr}
 8003b46:	b083      	sub	sp, #12
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003b4c:	4b14      	ldr	r3, [pc, #80]	; (8003ba0 <HAL_InitTick+0x5c>)
 8003b4e:	681c      	ldr	r4, [r3, #0]
 8003b50:	4b14      	ldr	r3, [pc, #80]	; (8003ba4 <HAL_InitTick+0x60>)
 8003b52:	781b      	ldrb	r3, [r3, #0]
 8003b54:	0019      	movs	r1, r3
 8003b56:	23fa      	movs	r3, #250	; 0xfa
 8003b58:	0098      	lsls	r0, r3, #2
 8003b5a:	f7fc fadf 	bl	800011c <__udivsi3>
 8003b5e:	0003      	movs	r3, r0
 8003b60:	0019      	movs	r1, r3
 8003b62:	0020      	movs	r0, r4
 8003b64:	f7fc fada 	bl	800011c <__udivsi3>
 8003b68:	0003      	movs	r3, r0
 8003b6a:	0018      	movs	r0, r3
 8003b6c:	f000 fd17 	bl	800459e <HAL_SYSTICK_Config>
 8003b70:	1e03      	subs	r3, r0, #0
 8003b72:	d001      	beq.n	8003b78 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8003b74:	2301      	movs	r3, #1
 8003b76:	e00f      	b.n	8003b98 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	2b03      	cmp	r3, #3
 8003b7c:	d80b      	bhi.n	8003b96 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003b7e:	6879      	ldr	r1, [r7, #4]
 8003b80:	2301      	movs	r3, #1
 8003b82:	425b      	negs	r3, r3
 8003b84:	2200      	movs	r2, #0
 8003b86:	0018      	movs	r0, r3
 8003b88:	f000 fce4 	bl	8004554 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003b8c:	4b06      	ldr	r3, [pc, #24]	; (8003ba8 <HAL_InitTick+0x64>)
 8003b8e:	687a      	ldr	r2, [r7, #4]
 8003b90:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003b92:	2300      	movs	r3, #0
 8003b94:	e000      	b.n	8003b98 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8003b96:	2301      	movs	r3, #1
}
 8003b98:	0018      	movs	r0, r3
 8003b9a:	46bd      	mov	sp, r7
 8003b9c:	b003      	add	sp, #12
 8003b9e:	bd90      	pop	{r4, r7, pc}
 8003ba0:	20000000 	.word	0x20000000
 8003ba4:	20000008 	.word	0x20000008
 8003ba8:	20000004 	.word	0x20000004

08003bac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003bac:	b580      	push	{r7, lr}
 8003bae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003bb0:	4b05      	ldr	r3, [pc, #20]	; (8003bc8 <HAL_IncTick+0x1c>)
 8003bb2:	781b      	ldrb	r3, [r3, #0]
 8003bb4:	001a      	movs	r2, r3
 8003bb6:	4b05      	ldr	r3, [pc, #20]	; (8003bcc <HAL_IncTick+0x20>)
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	18d2      	adds	r2, r2, r3
 8003bbc:	4b03      	ldr	r3, [pc, #12]	; (8003bcc <HAL_IncTick+0x20>)
 8003bbe:	601a      	str	r2, [r3, #0]
}
 8003bc0:	46c0      	nop			; (mov r8, r8)
 8003bc2:	46bd      	mov	sp, r7
 8003bc4:	bd80      	pop	{r7, pc}
 8003bc6:	46c0      	nop			; (mov r8, r8)
 8003bc8:	20000008 	.word	0x20000008
 8003bcc:	200007a8 	.word	0x200007a8

08003bd0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003bd0:	b580      	push	{r7, lr}
 8003bd2:	af00      	add	r7, sp, #0
  return uwTick;
 8003bd4:	4b02      	ldr	r3, [pc, #8]	; (8003be0 <HAL_GetTick+0x10>)
 8003bd6:	681b      	ldr	r3, [r3, #0]
}
 8003bd8:	0018      	movs	r0, r3
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	bd80      	pop	{r7, pc}
 8003bde:	46c0      	nop			; (mov r8, r8)
 8003be0:	200007a8 	.word	0x200007a8

08003be4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003be4:	b580      	push	{r7, lr}
 8003be6:	b084      	sub	sp, #16
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003bec:	f7ff fff0 	bl	8003bd0 <HAL_GetTick>
 8003bf0:	0003      	movs	r3, r0
 8003bf2:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	3301      	adds	r3, #1
 8003bfc:	d005      	beq.n	8003c0a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003bfe:	4b0a      	ldr	r3, [pc, #40]	; (8003c28 <HAL_Delay+0x44>)
 8003c00:	781b      	ldrb	r3, [r3, #0]
 8003c02:	001a      	movs	r2, r3
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	189b      	adds	r3, r3, r2
 8003c08:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003c0a:	46c0      	nop			; (mov r8, r8)
 8003c0c:	f7ff ffe0 	bl	8003bd0 <HAL_GetTick>
 8003c10:	0002      	movs	r2, r0
 8003c12:	68bb      	ldr	r3, [r7, #8]
 8003c14:	1ad3      	subs	r3, r2, r3
 8003c16:	68fa      	ldr	r2, [r7, #12]
 8003c18:	429a      	cmp	r2, r3
 8003c1a:	d8f7      	bhi.n	8003c0c <HAL_Delay+0x28>
  {
  }
}
 8003c1c:	46c0      	nop			; (mov r8, r8)
 8003c1e:	46c0      	nop			; (mov r8, r8)
 8003c20:	46bd      	mov	sp, r7
 8003c22:	b004      	add	sp, #16
 8003c24:	bd80      	pop	{r7, pc}
 8003c26:	46c0      	nop			; (mov r8, r8)
 8003c28:	20000008 	.word	0x20000008

08003c2c <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8003c2c:	b580      	push	{r7, lr}
 8003c2e:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 8003c30:	4b04      	ldr	r3, [pc, #16]	; (8003c44 <HAL_SuspendTick+0x18>)
 8003c32:	681a      	ldr	r2, [r3, #0]
 8003c34:	4b03      	ldr	r3, [pc, #12]	; (8003c44 <HAL_SuspendTick+0x18>)
 8003c36:	2102      	movs	r1, #2
 8003c38:	438a      	bics	r2, r1
 8003c3a:	601a      	str	r2, [r3, #0]
}
 8003c3c:	46c0      	nop			; (mov r8, r8)
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	bd80      	pop	{r7, pc}
 8003c42:	46c0      	nop			; (mov r8, r8)
 8003c44:	e000e010 	.word	0xe000e010

08003c48 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 8003c48:	b580      	push	{r7, lr}
 8003c4a:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SysTick->CTRL  |= SysTick_CTRL_TICKINT_Msk;
 8003c4c:	4b04      	ldr	r3, [pc, #16]	; (8003c60 <HAL_ResumeTick+0x18>)
 8003c4e:	681a      	ldr	r2, [r3, #0]
 8003c50:	4b03      	ldr	r3, [pc, #12]	; (8003c60 <HAL_ResumeTick+0x18>)
 8003c52:	2102      	movs	r1, #2
 8003c54:	430a      	orrs	r2, r1
 8003c56:	601a      	str	r2, [r3, #0]
}
 8003c58:	46c0      	nop			; (mov r8, r8)
 8003c5a:	46bd      	mov	sp, r7
 8003c5c:	bd80      	pop	{r7, pc}
 8003c5e:	46c0      	nop			; (mov r8, r8)
 8003c60:	e000e010 	.word	0xe000e010

08003c64 <HAL_ADC_Init>:
  *         function "HAL_ADCEx_EnableVREFINTTempSensor()" must be called similarilly.  
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003c64:	b580      	push	{r7, lr}
 8003c66:	b082      	sub	sp, #8
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	6078      	str	r0, [r7, #4]
 
  /* Check ADC handle */
  if(hadc == NULL)
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d101      	bne.n	8003c76 <HAL_ADC_Init+0x12>
  {
    return HAL_ERROR;
 8003c72:	2301      	movs	r3, #1
 8003c74:	e159      	b.n	8003f2a <HAL_ADC_Init+0x2c6>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if(hadc->State == HAL_ADC_STATE_RESET)
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d10a      	bne.n	8003c94 <HAL_ADC_Init+0x30>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	2200      	movs	r2, #0
 8003c82:	659a      	str	r2, [r3, #88]	; 0x58
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	2250      	movs	r2, #80	; 0x50
 8003c88:	2100      	movs	r1, #0
 8003c8a:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	0018      	movs	r0, r3
 8003c90:	f7fd f8aa 	bl	8000de8 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c98:	2210      	movs	r2, #16
 8003c9a:	4013      	ands	r3, r2
 8003c9c:	2b10      	cmp	r3, #16
 8003c9e:	d005      	beq.n	8003cac <HAL_ADC_Init+0x48>
     (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)  )
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	689b      	ldr	r3, [r3, #8]
 8003ca6:	2204      	movs	r2, #4
 8003ca8:	4013      	ands	r3, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8003caa:	d00b      	beq.n	8003cc4 <HAL_ADC_Init+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cb0:	2210      	movs	r2, #16
 8003cb2:	431a      	orrs	r2, r3
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	655a      	str	r2, [r3, #84]	; 0x54
        
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	2250      	movs	r2, #80	; 0x50
 8003cbc:	2100      	movs	r1, #0
 8003cbe:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8003cc0:	2301      	movs	r3, #1
 8003cc2:	e132      	b.n	8003f2a <HAL_ADC_Init+0x2c6>
  }

  /* Set ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cc8:	4a9a      	ldr	r2, [pc, #616]	; (8003f34 <HAL_ADC_Init+0x2d0>)
 8003cca:	4013      	ands	r3, r2
 8003ccc:	2202      	movs	r2, #2
 8003cce:	431a      	orrs	r2, r3
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	655a      	str	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                            */
  /* Parameters that can be updated only when ADC is disabled:              */
  /*  - ADC clock mode                                                      */
  /*  - ADC clock prescaler                                                 */
  /*  - ADC Resolution                                                      */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	689b      	ldr	r3, [r3, #8]
 8003cda:	2203      	movs	r2, #3
 8003cdc:	4013      	ands	r3, r2
 8003cde:	2b01      	cmp	r3, #1
 8003ce0:	d108      	bne.n	8003cf4 <HAL_ADC_Init+0x90>
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	2201      	movs	r2, #1
 8003cea:	4013      	ands	r3, r2
 8003cec:	2b01      	cmp	r3, #1
 8003cee:	d101      	bne.n	8003cf4 <HAL_ADC_Init+0x90>
 8003cf0:	2301      	movs	r3, #1
 8003cf2:	e000      	b.n	8003cf6 <HAL_ADC_Init+0x92>
 8003cf4:	2300      	movs	r3, #0
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d149      	bne.n	8003d8e <HAL_ADC_Init+0x12a>
    /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
    /*     (set into HAL_ADC_ConfigChannel() )                              */
   
    /* Configuration of ADC clock: clock source PCLK or asynchronous with 
    selectable prescaler */
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	685a      	ldr	r2, [r3, #4]
 8003cfe:	23c0      	movs	r3, #192	; 0xc0
 8003d00:	061b      	lsls	r3, r3, #24
 8003d02:	429a      	cmp	r2, r3
 8003d04:	d00b      	beq.n	8003d1e <HAL_ADC_Init+0xba>
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	685a      	ldr	r2, [r3, #4]
 8003d0a:	2380      	movs	r3, #128	; 0x80
 8003d0c:	05db      	lsls	r3, r3, #23
 8003d0e:	429a      	cmp	r2, r3
 8003d10:	d005      	beq.n	8003d1e <HAL_ADC_Init+0xba>
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	685a      	ldr	r2, [r3, #4]
 8003d16:	2380      	movs	r3, #128	; 0x80
 8003d18:	061b      	lsls	r3, r3, #24
 8003d1a:	429a      	cmp	r2, r3
 8003d1c:	d111      	bne.n	8003d42 <HAL_ADC_Init+0xde>
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	691a      	ldr	r2, [r3, #16]
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	0092      	lsls	r2, r2, #2
 8003d2a:	0892      	lsrs	r2, r2, #2
 8003d2c:	611a      	str	r2, [r3, #16]
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	6919      	ldr	r1, [r3, #16]
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	685a      	ldr	r2, [r3, #4]
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	430a      	orrs	r2, r1
 8003d3e:	611a      	str	r2, [r3, #16]
 8003d40:	e014      	b.n	8003d6c <HAL_ADC_Init+0x108>
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	691a      	ldr	r2, [r3, #16]
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	0092      	lsls	r2, r2, #2
 8003d4e:	0892      	lsrs	r2, r2, #2
 8003d50:	611a      	str	r2, [r3, #16]
 8003d52:	4b79      	ldr	r3, [pc, #484]	; (8003f38 <HAL_ADC_Init+0x2d4>)
 8003d54:	681a      	ldr	r2, [r3, #0]
 8003d56:	4b78      	ldr	r3, [pc, #480]	; (8003f38 <HAL_ADC_Init+0x2d4>)
 8003d58:	4978      	ldr	r1, [pc, #480]	; (8003f3c <HAL_ADC_Init+0x2d8>)
 8003d5a:	400a      	ands	r2, r1
 8003d5c:	601a      	str	r2, [r3, #0]
 8003d5e:	4b76      	ldr	r3, [pc, #472]	; (8003f38 <HAL_ADC_Init+0x2d4>)
 8003d60:	6819      	ldr	r1, [r3, #0]
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	685a      	ldr	r2, [r3, #4]
 8003d66:	4b74      	ldr	r3, [pc, #464]	; (8003f38 <HAL_ADC_Init+0x2d4>)
 8003d68:	430a      	orrs	r2, r1
 8003d6a:	601a      	str	r2, [r3, #0]
    
    /* Configuration of ADC:                                                */
    /*  - Resolution                                                        */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_RES);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	68da      	ldr	r2, [r3, #12]
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	2118      	movs	r1, #24
 8003d78:	438a      	bics	r2, r1
 8003d7a:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;    
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	68d9      	ldr	r1, [r3, #12]
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	689a      	ldr	r2, [r3, #8]
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	430a      	orrs	r2, r1
 8003d8c:	60da      	str	r2, [r3, #12]
  }
  
  /* Set the Low Frequency mode */
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 8003d8e:	4b6a      	ldr	r3, [pc, #424]	; (8003f38 <HAL_ADC_Init+0x2d4>)
 8003d90:	681a      	ldr	r2, [r3, #0]
 8003d92:	4b69      	ldr	r3, [pc, #420]	; (8003f38 <HAL_ADC_Init+0x2d4>)
 8003d94:	496a      	ldr	r1, [pc, #424]	; (8003f40 <HAL_ADC_Init+0x2dc>)
 8003d96:	400a      	ands	r2, r1
 8003d98:	601a      	str	r2, [r3, #0]
  ADC->CCR |=__HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);  
 8003d9a:	4b67      	ldr	r3, [pc, #412]	; (8003f38 <HAL_ADC_Init+0x2d4>)
 8003d9c:	6819      	ldr	r1, [r3, #0]
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003da2:	065a      	lsls	r2, r3, #25
 8003da4:	4b64      	ldr	r3, [pc, #400]	; (8003f38 <HAL_ADC_Init+0x2d4>)
 8003da6:	430a      	orrs	r2, r1
 8003da8:	601a      	str	r2, [r3, #0]
   
  /* Enable voltage regulator (if disabled at this step) */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	689a      	ldr	r2, [r3, #8]
 8003db0:	2380      	movs	r3, #128	; 0x80
 8003db2:	055b      	lsls	r3, r3, #21
 8003db4:	4013      	ands	r3, r2
 8003db6:	d108      	bne.n	8003dca <HAL_ADC_Init+0x166>
  {
    /* Set ADVREGEN bit */
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	689a      	ldr	r2, [r3, #8]
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	2180      	movs	r1, #128	; 0x80
 8003dc4:	0549      	lsls	r1, r1, #21
 8003dc6:	430a      	orrs	r2, r1
 8003dc8:	609a      	str	r2, [r3, #8]
  /*  - Continuous conversion mode                                            */
  /*  - DMA continuous request                                                */
  /*  - Overrun                                                               */
  /*  - AutoDelay feature                                                     */
  /*  - Discontinuous mode                                                    */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	68da      	ldr	r2, [r3, #12]
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	495b      	ldr	r1, [pc, #364]	; (8003f44 <HAL_ADC_Init+0x2e0>)
 8003dd6:	400a      	ands	r2, r1
 8003dd8:	60da      	str	r2, [r3, #12]
                             ADC_CFGR1_OVRMOD  |
                             ADC_CFGR1_AUTDLY  |
                             ADC_CFGR1_AUTOFF  |
                             ADC_CFGR1_DISCEN   );
  
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	68d9      	ldr	r1, [r3, #12]
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	68da      	ldr	r2, [r3, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	691b      	ldr	r3, [r3, #16]
 8003de8:	2b02      	cmp	r3, #2
 8003dea:	d101      	bne.n	8003df0 <HAL_ADC_Init+0x18c>
 8003dec:	2304      	movs	r3, #4
 8003dee:	e000      	b.n	8003df2 <HAL_ADC_Init+0x18e>
 8003df0:	2300      	movs	r3, #0
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8003df2:	431a      	orrs	r2, r3
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	2020      	movs	r0, #32
 8003df8:	5c1b      	ldrb	r3, [r3, r0]
 8003dfa:	035b      	lsls	r3, r3, #13
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8003dfc:	431a      	orrs	r2, r3
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	202c      	movs	r0, #44	; 0x2c
 8003e02:	5c1b      	ldrb	r3, [r3, r0]
 8003e04:	005b      	lsls	r3, r3, #1
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8003e06:	431a      	orrs	r2, r3
                            hadc->Init.Overrun                               |
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8003e0c:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	699b      	ldr	r3, [r3, #24]
 8003e12:	039b      	lsls	r3, r3, #14
                            hadc->Init.Overrun                               |
 8003e14:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	69db      	ldr	r3, [r3, #28]
 8003e1a:	03db      	lsls	r3, r3, #15
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8003e1c:	431a      	orrs	r2, r3
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	430a      	orrs	r2, r1
 8003e24:	60da      	str	r2, [r3, #12]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003e2a:	23c2      	movs	r3, #194	; 0xc2
 8003e2c:	33ff      	adds	r3, #255	; 0xff
 8003e2e:	429a      	cmp	r2, r3
 8003e30:	d00b      	beq.n	8003e4a <HAL_ADC_Init+0x1e6>
  {
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	68d9      	ldr	r1, [r3, #12]
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                             hadc->Init.ExternalTrigConvEdge;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8003e40:	431a      	orrs	r2, r3
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	430a      	orrs	r2, r1
 8003e48:	60da      	str	r2, [r3, #12]
  }
  
  /* Enable discontinuous mode only if continuous mode is disabled */
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	2221      	movs	r2, #33	; 0x21
 8003e4e:	5c9b      	ldrb	r3, [r3, r2]
 8003e50:	2b01      	cmp	r3, #1
 8003e52:	d11a      	bne.n	8003e8a <HAL_ADC_Init+0x226>
  {
    if (hadc->Init.ContinuousConvMode == DISABLE)
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	2220      	movs	r2, #32
 8003e58:	5c9b      	ldrb	r3, [r3, r2]
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d109      	bne.n	8003e72 <HAL_ADC_Init+0x20e>
    {
      /* Enable the selected ADC group regular discontinuous mode */
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	68da      	ldr	r2, [r3, #12]
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	2180      	movs	r1, #128	; 0x80
 8003e6a:	0249      	lsls	r1, r1, #9
 8003e6c:	430a      	orrs	r2, r1
 8003e6e:	60da      	str	r2, [r3, #12]
 8003e70:	e00b      	b.n	8003e8a <HAL_ADC_Init+0x226>
      /* ADC regular group discontinuous was intended to be enabled,        */
      /* but ADC regular group modes continuous and sequencer discontinuous */
      /* cannot be enabled simultaneously.                                  */
      
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e76:	2220      	movs	r2, #32
 8003e78:	431a      	orrs	r2, r3
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e82:	2201      	movs	r2, #1
 8003e84:	431a      	orrs	r2, r3
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }
  
  if (hadc->Init.OversamplingMode == ENABLE)
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e8e:	2b01      	cmp	r3, #1
 8003e90:	d11f      	bne.n	8003ed2 <HAL_ADC_Init+0x26e>
    /* Configuration of Oversampler:                                          */
    /*  - Oversampling Ratio                                                  */
    /*  - Right bit shift                                                     */
    /*  - Triggered mode                                                      */
    
    hadc->Instance->CFGR2 &= ~( ADC_CFGR2_OVSR |
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	691a      	ldr	r2, [r3, #16]
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	492a      	ldr	r1, [pc, #168]	; (8003f48 <HAL_ADC_Init+0x2e4>)
 8003e9e:	400a      	ands	r2, r1
 8003ea0:	611a      	str	r2, [r3, #16]
                                ADC_CFGR2_OVSS |
                                ADC_CFGR2_TOVS );
    
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	6919      	ldr	r1, [r3, #16]
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                               hadc->Init.Oversample.RightBitShift             |
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8003eb0:	431a      	orrs	r2, r3
                               hadc->Init.Oversample.TriggeredMode );
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                               hadc->Init.Oversample.RightBitShift             |
 8003eb6:	431a      	orrs	r2, r3
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	430a      	orrs	r2, r1
 8003ebe:	611a      	str	r2, [r3, #16]
    
    /* Enable OverSampling mode */
     hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	691a      	ldr	r2, [r3, #16]
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	2101      	movs	r1, #1
 8003ecc:	430a      	orrs	r2, r1
 8003ece:	611a      	str	r2, [r3, #16]
 8003ed0:	e00e      	b.n	8003ef0 <HAL_ADC_Init+0x28c>
  }
  else
  {
    if(HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	691b      	ldr	r3, [r3, #16]
 8003ed8:	2201      	movs	r2, #1
 8003eda:	4013      	ands	r3, r2
 8003edc:	2b01      	cmp	r3, #1
 8003ede:	d107      	bne.n	8003ef0 <HAL_ADC_Init+0x28c>
    {
      /* Disable OverSampling mode if needed */
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	691a      	ldr	r2, [r3, #16]
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	2101      	movs	r1, #1
 8003eec:	438a      	bics	r2, r1
 8003eee:	611a      	str	r2, [r3, #16]
    }
  }    
  
  /* Clear the old sampling time */
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	695a      	ldr	r2, [r3, #20]
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	2107      	movs	r1, #7
 8003efc:	438a      	bics	r2, r1
 8003efe:	615a      	str	r2, [r3, #20]
  
  /* Set the new sample time */
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	6959      	ldr	r1, [r3, #20]
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	430a      	orrs	r2, r1
 8003f10:	615a      	str	r2, [r3, #20]
  
  /* Clear ADC error code */
  ADC_CLEAR_ERRORCODE(hadc);
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	2200      	movs	r2, #0
 8003f16:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set the ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f1c:	2203      	movs	r2, #3
 8003f1e:	4393      	bics	r3, r2
 8003f20:	2201      	movs	r2, #1
 8003f22:	431a      	orrs	r2, r3
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	655a      	str	r2, [r3, #84]	; 0x54
                    HAL_ADC_STATE_BUSY_INTERNAL,
                    HAL_ADC_STATE_READY);


  /* Return function status */
  return HAL_OK;
 8003f28:	2300      	movs	r3, #0
}
 8003f2a:	0018      	movs	r0, r3
 8003f2c:	46bd      	mov	sp, r7
 8003f2e:	b002      	add	sp, #8
 8003f30:	bd80      	pop	{r7, pc}
 8003f32:	46c0      	nop			; (mov r8, r8)
 8003f34:	fffffefd 	.word	0xfffffefd
 8003f38:	40012708 	.word	0x40012708
 8003f3c:	ffc3ffff 	.word	0xffc3ffff
 8003f40:	fdffffff 	.word	0xfdffffff
 8003f44:	fffe0219 	.word	0xfffe0219
 8003f48:	fffffc03 	.word	0xfffffc03

08003f4c <HAL_ADC_Start_IT>:
  *          before calling HAL_ADC_Start_IT().
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8003f4c:	b590      	push	{r4, r7, lr}
 8003f4e:	b085      	sub	sp, #20
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003f54:	230f      	movs	r3, #15
 8003f56:	18fb      	adds	r3, r7, r3
 8003f58:	2200      	movs	r2, #0
 8003f5a:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	689b      	ldr	r3, [r3, #8]
 8003f62:	2204      	movs	r2, #4
 8003f64:	4013      	ands	r3, r2
 8003f66:	d156      	bne.n	8004016 <HAL_ADC_Start_IT+0xca>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	2250      	movs	r2, #80	; 0x50
 8003f6c:	5c9b      	ldrb	r3, [r3, r2]
 8003f6e:	2b01      	cmp	r3, #1
 8003f70:	d101      	bne.n	8003f76 <HAL_ADC_Start_IT+0x2a>
 8003f72:	2302      	movs	r3, #2
 8003f74:	e056      	b.n	8004024 <HAL_ADC_Start_IT+0xd8>
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	2250      	movs	r2, #80	; 0x50
 8003f7a:	2101      	movs	r1, #1
 8003f7c:	5499      	strb	r1, [r3, r2]
    
    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	69db      	ldr	r3, [r3, #28]
 8003f82:	2b01      	cmp	r3, #1
 8003f84:	d007      	beq.n	8003f96 <HAL_ADC_Start_IT+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 8003f86:	230f      	movs	r3, #15
 8003f88:	18fc      	adds	r4, r7, r3
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	0018      	movs	r0, r3
 8003f8e:	f000 f9ad 	bl	80042ec <ADC_Enable>
 8003f92:	0003      	movs	r3, r0
 8003f94:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8003f96:	230f      	movs	r3, #15
 8003f98:	18fb      	adds	r3, r7, r3
 8003f9a:	781b      	ldrb	r3, [r3, #0]
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d13e      	bne.n	800401e <HAL_ADC_Start_IT+0xd2>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fa4:	4a21      	ldr	r2, [pc, #132]	; (800402c <HAL_ADC_Start_IT+0xe0>)
 8003fa6:	4013      	ands	r3, r2
 8003fa8:	2280      	movs	r2, #128	; 0x80
 8003faa:	0052      	lsls	r2, r2, #1
 8003fac:	431a      	orrs	r2, r3
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	2200      	movs	r2, #0
 8003fb6:	659a      	str	r2, [r3, #88]	; 0x58
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	2250      	movs	r2, #80	; 0x50
 8003fbc:	2100      	movs	r1, #0
 8003fbe:	5499      	strb	r1, [r3, r2]
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	221c      	movs	r2, #28
 8003fc6:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC end of conversion interrupt */
      /* Enable ADC overrun interrupt */  
      switch(hadc->Init.EOCSelection)
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	695b      	ldr	r3, [r3, #20]
 8003fcc:	2b08      	cmp	r3, #8
 8003fce:	d110      	bne.n	8003ff2 <HAL_ADC_Start_IT+0xa6>
      {
        case ADC_EOC_SEQ_CONV: 
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	685a      	ldr	r2, [r3, #4]
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	2104      	movs	r1, #4
 8003fdc:	438a      	bics	r2, r1
 8003fde:	605a      	str	r2, [r3, #4]
          __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOS | ADC_IT_OVR));
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	685a      	ldr	r2, [r3, #4]
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	2118      	movs	r1, #24
 8003fec:	430a      	orrs	r2, r1
 8003fee:	605a      	str	r2, [r3, #4]
          break;
 8003ff0:	e008      	b.n	8004004 <HAL_ADC_Start_IT+0xb8>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	685a      	ldr	r2, [r3, #4]
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	211c      	movs	r1, #28
 8003ffe:	430a      	orrs	r2, r1
 8004000:	605a      	str	r2, [r3, #4]
          break;
 8004002:	46c0      	nop			; (mov r8, r8)
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	689a      	ldr	r2, [r3, #8]
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	2104      	movs	r1, #4
 8004010:	430a      	orrs	r2, r1
 8004012:	609a      	str	r2, [r3, #8]
 8004014:	e003      	b.n	800401e <HAL_ADC_Start_IT+0xd2>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8004016:	230f      	movs	r3, #15
 8004018:	18fb      	adds	r3, r7, r3
 800401a:	2202      	movs	r2, #2
 800401c:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800401e:	230f      	movs	r3, #15
 8004020:	18fb      	adds	r3, r7, r3
 8004022:	781b      	ldrb	r3, [r3, #0]
}
 8004024:	0018      	movs	r0, r3
 8004026:	46bd      	mov	sp, r7
 8004028:	b005      	add	sp, #20
 800402a:	bd90      	pop	{r4, r7, pc}
 800402c:	fffff0fe 	.word	0xfffff0fe

08004030 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8004030:	b580      	push	{r7, lr}
 8004032:	b082      	sub	sp, #8
 8004034:	af00      	add	r7, sp, #0
 8004036:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 800403e:	0018      	movs	r0, r3
 8004040:	46bd      	mov	sp, r7
 8004042:	b002      	add	sp, #8
 8004044:	bd80      	pop	{r7, pc}
	...

08004048 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param  hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8004048:	b580      	push	{r7, lr}
 800404a:	b082      	sub	sp, #8
 800404c:	af00      	add	r7, sp, #0
 800404e:	6078      	str	r0, [r7, #4]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	2204      	movs	r2, #4
 8004058:	4013      	ands	r3, r2
 800405a:	2b04      	cmp	r3, #4
 800405c:	d106      	bne.n	800406c <HAL_ADC_IRQHandler+0x24>
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	685b      	ldr	r3, [r3, #4]
 8004064:	2204      	movs	r2, #4
 8004066:	4013      	ands	r3, r2
 8004068:	2b04      	cmp	r3, #4
 800406a:	d00d      	beq.n	8004088 <HAL_ADC_IRQHandler+0x40>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	2208      	movs	r2, #8
 8004074:	4013      	ands	r3, r2
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 8004076:	2b08      	cmp	r3, #8
 8004078:	d154      	bne.n	8004124 <HAL_ADC_IRQHandler+0xdc>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	685b      	ldr	r3, [r3, #4]
 8004080:	2208      	movs	r2, #8
 8004082:	4013      	ands	r3, r2
 8004084:	2b08      	cmp	r3, #8
 8004086:	d14d      	bne.n	8004124 <HAL_ADC_IRQHandler+0xdc>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800408c:	2210      	movs	r2, #16
 800408e:	4013      	ands	r3, r2
 8004090:	d106      	bne.n	80040a0 <HAL_ADC_IRQHandler+0x58>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004096:	2280      	movs	r2, #128	; 0x80
 8004098:	0092      	lsls	r2, r2, #2
 800409a:	431a      	orrs	r2, r3
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	655a      	str	r2, [r3, #84]	; 0x54
    }
    
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	68da      	ldr	r2, [r3, #12]
 80040a6:	23c0      	movs	r3, #192	; 0xc0
 80040a8:	011b      	lsls	r3, r3, #4
 80040aa:	4013      	ands	r3, r2
 80040ac:	d12e      	bne.n	800410c <HAL_ADC_IRQHandler+0xc4>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	2220      	movs	r2, #32
 80040b2:	5c9b      	ldrb	r3, [r3, r2]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d129      	bne.n	800410c <HAL_ADC_IRQHandler+0xc4>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	2208      	movs	r2, #8
 80040c0:	4013      	ands	r3, r2
 80040c2:	2b08      	cmp	r3, #8
 80040c4:	d122      	bne.n	800410c <HAL_ADC_IRQHandler+0xc4>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	689b      	ldr	r3, [r3, #8]
 80040cc:	2204      	movs	r2, #4
 80040ce:	4013      	ands	r3, r2
 80040d0:	d110      	bne.n	80040f4 <HAL_ADC_IRQHandler+0xac>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	685a      	ldr	r2, [r3, #4]
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	210c      	movs	r1, #12
 80040de:	438a      	bics	r2, r1
 80040e0:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040e6:	4a35      	ldr	r2, [pc, #212]	; (80041bc <HAL_ADC_IRQHandler+0x174>)
 80040e8:	4013      	ands	r3, r2
 80040ea:	2201      	movs	r2, #1
 80040ec:	431a      	orrs	r2, r3
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	655a      	str	r2, [r3, #84]	; 0x54
 80040f2:	e00b      	b.n	800410c <HAL_ADC_IRQHandler+0xc4>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040f8:	2220      	movs	r2, #32
 80040fa:	431a      	orrs	r2, r3
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	655a      	str	r2, [r3, #84]	; 0x54
          
          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004104:	2201      	movs	r2, #1
 8004106:	431a      	orrs	r2, r3
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	659a      	str	r2, [r3, #88]	; 0x58
    /*       from EOC or EOS, possibility to use:                             */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	0018      	movs	r0, r3
 8004110:	f7fc fe8a 	bl	8000e28 <HAL_ADC_ConvCpltCallback>
    /* Note: Management of low power auto-wait enabled: flags must be cleared */
    /*       by user when fetching ADC conversion data.                       */
    /*       This case is managed in IRQ handler, but this low-power mode     */
    /*       should not be used with programming model IT or DMA.             */
    /*       Refer to comment of parameter "LowPowerAutoWait".                */
    if (hadc->Init.LowPowerAutoWait != ENABLE)
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	699b      	ldr	r3, [r3, #24]
 8004118:	2b01      	cmp	r3, #1
 800411a:	d003      	beq.n	8004124 <HAL_ADC_IRQHandler+0xdc>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	220c      	movs	r2, #12
 8004122:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check analog watchdog 1 flag ========== */
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	2280      	movs	r2, #128	; 0x80
 800412c:	4013      	ands	r3, r2
 800412e:	2b80      	cmp	r3, #128	; 0x80
 8004130:	d115      	bne.n	800415e <HAL_ADC_IRQHandler+0x116>
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	685b      	ldr	r3, [r3, #4]
 8004138:	2280      	movs	r2, #128	; 0x80
 800413a:	4013      	ands	r3, r2
 800413c:	2b80      	cmp	r3, #128	; 0x80
 800413e:	d10e      	bne.n	800415e <HAL_ADC_IRQHandler+0x116>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004144:	2280      	movs	r2, #128	; 0x80
 8004146:	0252      	lsls	r2, r2, #9
 8004148:	431a      	orrs	r2, r3
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	655a      	str	r2, [r3, #84]	; 0x54
    
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	0018      	movs	r0, r3
 8004152:	f000 f835 	bl	80041c0 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear ADC Analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	2280      	movs	r2, #128	; 0x80
 800415c:	601a      	str	r2, [r3, #0]
   
  }
  
  
  /* ========== Check Overrun flag ========== */
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR))
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	2210      	movs	r2, #16
 8004166:	4013      	ands	r3, r2
 8004168:	2b10      	cmp	r3, #16
 800416a:	d123      	bne.n	80041b4 <HAL_ADC_IRQHandler+0x16c>
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	685b      	ldr	r3, [r3, #4]
 8004172:	2210      	movs	r2, #16
 8004174:	4013      	ands	r3, r2
 8004176:	2b10      	cmp	r3, #16
 8004178:	d11c      	bne.n	80041b4 <HAL_ADC_IRQHandler+0x16c>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if ((hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)            ||
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800417e:	2b00      	cmp	r3, #0
 8004180:	d006      	beq.n	8004190 <HAL_ADC_IRQHandler+0x148>
        HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN)  )
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	68db      	ldr	r3, [r3, #12]
 8004188:	2201      	movs	r2, #1
 800418a:	4013      	ands	r3, r2
    if ((hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)            ||
 800418c:	2b01      	cmp	r3, #1
 800418e:	d10d      	bne.n	80041ac <HAL_ADC_IRQHandler+0x164>
    {
      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004194:	2202      	movs	r2, #2
 8004196:	431a      	orrs	r2, r3
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	659a      	str	r2, [r3, #88]	; 0x58
      
      /* Clear ADC overrun flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	2210      	movs	r2, #16
 80041a2:	601a      	str	r2, [r3, #0]
      
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	0018      	movs	r0, r3
 80041a8:	f000 f812 	bl	80041d0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	2210      	movs	r2, #16
 80041b2:	601a      	str	r2, [r3, #0]
  }
  
}
 80041b4:	46c0      	nop			; (mov r8, r8)
 80041b6:	46bd      	mov	sp, r7
 80041b8:	b002      	add	sp, #8
 80041ba:	bd80      	pop	{r7, pc}
 80041bc:	fffffefe 	.word	0xfffffefe

080041c0 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 80041c0:	b580      	push	{r7, lr}
 80041c2:	b082      	sub	sp, #8
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80041c8:	46c0      	nop			; (mov r8, r8)
 80041ca:	46bd      	mov	sp, r7
 80041cc:	b002      	add	sp, #8
 80041ce:	bd80      	pop	{r7, pc}

080041d0 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80041d0:	b580      	push	{r7, lr}
 80041d2:	b082      	sub	sp, #8
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80041d8:	46c0      	nop			; (mov r8, r8)
 80041da:	46bd      	mov	sp, r7
 80041dc:	b002      	add	sp, #8
 80041de:	bd80      	pop	{r7, pc}

080041e0 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80041e0:	b580      	push	{r7, lr}
 80041e2:	b082      	sub	sp, #8
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	6078      	str	r0, [r7, #4]
 80041e8:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	2250      	movs	r2, #80	; 0x50
 80041ee:	5c9b      	ldrb	r3, [r3, r2]
 80041f0:	2b01      	cmp	r3, #1
 80041f2:	d101      	bne.n	80041f8 <HAL_ADC_ConfigChannel+0x18>
 80041f4:	2302      	movs	r3, #2
 80041f6:	e06c      	b.n	80042d2 <HAL_ADC_ConfigChannel+0xf2>
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	2250      	movs	r2, #80	; 0x50
 80041fc:	2101      	movs	r1, #1
 80041fe:	5499      	strb	r1, [r3, r2]
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Management of internal measurement channels: Vbat/VrefInt/TempSensor  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	689b      	ldr	r3, [r3, #8]
 8004206:	2204      	movs	r2, #4
 8004208:	4013      	ands	r3, r2
 800420a:	d00b      	beq.n	8004224 <HAL_ADC_ConfigChannel+0x44>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004210:	2220      	movs	r2, #32
 8004212:	431a      	orrs	r2, r3
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	655a      	str	r2, [r3, #84]	; 0x54
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	2250      	movs	r2, #80	; 0x50
 800421c:	2100      	movs	r1, #0
 800421e:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8004220:	2301      	movs	r3, #1
 8004222:	e056      	b.n	80042d2 <HAL_ADC_ConfigChannel+0xf2>
  }
  
  if (sConfig->Rank != ADC_RANK_NONE)
 8004224:	683b      	ldr	r3, [r7, #0]
 8004226:	685b      	ldr	r3, [r3, #4]
 8004228:	4a2c      	ldr	r2, [pc, #176]	; (80042dc <HAL_ADC_ConfigChannel+0xfc>)
 800422a:	4293      	cmp	r3, r2
 800422c:	d028      	beq.n	8004280 <HAL_ADC_ConfigChannel+0xa0>
  {
    /* Enable selected channels */
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8004234:	683b      	ldr	r3, [r7, #0]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	035b      	lsls	r3, r3, #13
 800423a:	0b5a      	lsrs	r2, r3, #13
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	430a      	orrs	r2, r1
 8004242:	629a      	str	r2, [r3, #40]	; 0x28
    /* dedicated internal buffers and path.                                     */
    
    #if defined(ADC_CCR_TSEN)
    /* If Temperature sensor channel is selected, then enable the internal      */
    /* buffers and path  */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8004244:	683b      	ldr	r3, [r7, #0]
 8004246:	681a      	ldr	r2, [r3, #0]
 8004248:	2380      	movs	r3, #128	; 0x80
 800424a:	02db      	lsls	r3, r3, #11
 800424c:	4013      	ands	r3, r2
 800424e:	d009      	beq.n	8004264 <HAL_ADC_ConfigChannel+0x84>
    {
      ADC->CCR |= ADC_CCR_TSEN;   
 8004250:	4b23      	ldr	r3, [pc, #140]	; (80042e0 <HAL_ADC_ConfigChannel+0x100>)
 8004252:	681a      	ldr	r2, [r3, #0]
 8004254:	4b22      	ldr	r3, [pc, #136]	; (80042e0 <HAL_ADC_ConfigChannel+0x100>)
 8004256:	2180      	movs	r1, #128	; 0x80
 8004258:	0409      	lsls	r1, r1, #16
 800425a:	430a      	orrs	r2, r1
 800425c:	601a      	str	r2, [r3, #0]
      
      /* Delay for temperature sensor stabilization time */
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 800425e:	200a      	movs	r0, #10
 8004260:	f000 f8ac 	bl	80043bc <ADC_DelayMicroSecond>
    }
    #endif
    
    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8004264:	683b      	ldr	r3, [r7, #0]
 8004266:	681a      	ldr	r2, [r3, #0]
 8004268:	2380      	movs	r3, #128	; 0x80
 800426a:	029b      	lsls	r3, r3, #10
 800426c:	4013      	ands	r3, r2
 800426e:	d02b      	beq.n	80042c8 <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR |= ADC_CCR_VREFEN;   
 8004270:	4b1b      	ldr	r3, [pc, #108]	; (80042e0 <HAL_ADC_ConfigChannel+0x100>)
 8004272:	681a      	ldr	r2, [r3, #0]
 8004274:	4b1a      	ldr	r3, [pc, #104]	; (80042e0 <HAL_ADC_ConfigChannel+0x100>)
 8004276:	2180      	movs	r1, #128	; 0x80
 8004278:	03c9      	lsls	r1, r1, #15
 800427a:	430a      	orrs	r2, r1
 800427c:	601a      	str	r2, [r3, #0]
 800427e:	e023      	b.n	80042c8 <HAL_ADC_ConfigChannel+0xe8>
  }
  else
  {
    /* Regular sequence configuration */
    /* Reset the channel selection register from the selected channel */
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004286:	683b      	ldr	r3, [r7, #0]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	035b      	lsls	r3, r3, #13
 800428c:	0b5b      	lsrs	r3, r3, #13
 800428e:	43d9      	mvns	r1, r3
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	400a      	ands	r2, r1
 8004296:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
    /* internal measurement paths disable: If internal channel selected,    */
    /* disable dedicated internal buffers and path.                         */
    #if defined(ADC_CCR_TSEN)
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8004298:	683b      	ldr	r3, [r7, #0]
 800429a:	681a      	ldr	r2, [r3, #0]
 800429c:	2380      	movs	r3, #128	; 0x80
 800429e:	02db      	lsls	r3, r3, #11
 80042a0:	4013      	ands	r3, r2
 80042a2:	d005      	beq.n	80042b0 <HAL_ADC_ConfigChannel+0xd0>
    {
      ADC->CCR &= ~ADC_CCR_TSEN;   
 80042a4:	4b0e      	ldr	r3, [pc, #56]	; (80042e0 <HAL_ADC_ConfigChannel+0x100>)
 80042a6:	681a      	ldr	r2, [r3, #0]
 80042a8:	4b0d      	ldr	r3, [pc, #52]	; (80042e0 <HAL_ADC_ConfigChannel+0x100>)
 80042aa:	490e      	ldr	r1, [pc, #56]	; (80042e4 <HAL_ADC_ConfigChannel+0x104>)
 80042ac:	400a      	ands	r2, r1
 80042ae:	601a      	str	r2, [r3, #0]
    }
    #endif
    
    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 80042b0:	683b      	ldr	r3, [r7, #0]
 80042b2:	681a      	ldr	r2, [r3, #0]
 80042b4:	2380      	movs	r3, #128	; 0x80
 80042b6:	029b      	lsls	r3, r3, #10
 80042b8:	4013      	ands	r3, r2
 80042ba:	d005      	beq.n	80042c8 <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR &= ~ADC_CCR_VREFEN;   
 80042bc:	4b08      	ldr	r3, [pc, #32]	; (80042e0 <HAL_ADC_ConfigChannel+0x100>)
 80042be:	681a      	ldr	r2, [r3, #0]
 80042c0:	4b07      	ldr	r3, [pc, #28]	; (80042e0 <HAL_ADC_ConfigChannel+0x100>)
 80042c2:	4909      	ldr	r1, [pc, #36]	; (80042e8 <HAL_ADC_ConfigChannel+0x108>)
 80042c4:	400a      	ands	r2, r1
 80042c6:	601a      	str	r2, [r3, #0]
    }
#endif
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	2250      	movs	r2, #80	; 0x50
 80042cc:	2100      	movs	r1, #0
 80042ce:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return HAL_OK;
 80042d0:	2300      	movs	r3, #0
}
 80042d2:	0018      	movs	r0, r3
 80042d4:	46bd      	mov	sp, r7
 80042d6:	b002      	add	sp, #8
 80042d8:	bd80      	pop	{r7, pc}
 80042da:	46c0      	nop			; (mov r8, r8)
 80042dc:	00001001 	.word	0x00001001
 80042e0:	40012708 	.word	0x40012708
 80042e4:	ff7fffff 	.word	0xff7fffff
 80042e8:	ffbfffff 	.word	0xffbfffff

080042ec <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80042ec:	b580      	push	{r7, lr}
 80042ee:	b084      	sub	sp, #16
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80042f4:	2300      	movs	r3, #0
 80042f6:	60fb      	str	r3, [r7, #12]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	689b      	ldr	r3, [r3, #8]
 80042fe:	2203      	movs	r2, #3
 8004300:	4013      	ands	r3, r2
 8004302:	2b01      	cmp	r3, #1
 8004304:	d108      	bne.n	8004318 <ADC_Enable+0x2c>
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	2201      	movs	r2, #1
 800430e:	4013      	ands	r3, r2
 8004310:	2b01      	cmp	r3, #1
 8004312:	d101      	bne.n	8004318 <ADC_Enable+0x2c>
 8004314:	2301      	movs	r3, #1
 8004316:	e000      	b.n	800431a <ADC_Enable+0x2e>
 8004318:	2300      	movs	r3, #0
 800431a:	2b00      	cmp	r3, #0
 800431c:	d146      	bne.n	80043ac <ADC_Enable+0xc0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	689b      	ldr	r3, [r3, #8]
 8004324:	4a24      	ldr	r2, [pc, #144]	; (80043b8 <ADC_Enable+0xcc>)
 8004326:	4013      	ands	r3, r2
 8004328:	d00d      	beq.n	8004346 <ADC_Enable+0x5a>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800432e:	2210      	movs	r2, #16
 8004330:	431a      	orrs	r2, r3
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800433a:	2201      	movs	r2, #1
 800433c:	431a      	orrs	r2, r3
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	659a      	str	r2, [r3, #88]	; 0x58
      
      return HAL_ERROR;
 8004342:	2301      	movs	r3, #1
 8004344:	e033      	b.n	80043ae <ADC_Enable+0xc2>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	689a      	ldr	r2, [r3, #8]
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	2101      	movs	r1, #1
 8004352:	430a      	orrs	r2, r1
 8004354:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time. */
    ADC_DelayMicroSecond(ADC_STAB_DELAY_US);
 8004356:	2001      	movs	r0, #1
 8004358:	f000 f830 	bl	80043bc <ADC_DelayMicroSecond>

    /* Get tick count */
    tickstart = HAL_GetTick();
 800435c:	f7ff fc38 	bl	8003bd0 <HAL_GetTick>
 8004360:	0003      	movs	r3, r0
 8004362:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8004364:	e01b      	b.n	800439e <ADC_Enable+0xb2>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004366:	f7ff fc33 	bl	8003bd0 <HAL_GetTick>
 800436a:	0002      	movs	r2, r0
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	1ad3      	subs	r3, r2, r3
 8004370:	2b0a      	cmp	r3, #10
 8004372:	d914      	bls.n	800439e <ADC_Enable+0xb2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	2201      	movs	r2, #1
 800437c:	4013      	ands	r3, r2
 800437e:	2b01      	cmp	r3, #1
 8004380:	d00d      	beq.n	800439e <ADC_Enable+0xb2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004386:	2210      	movs	r2, #16
 8004388:	431a      	orrs	r2, r3
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004392:	2201      	movs	r2, #1
 8004394:	431a      	orrs	r2, r3
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 800439a:	2301      	movs	r3, #1
 800439c:	e007      	b.n	80043ae <ADC_Enable+0xc2>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	2201      	movs	r2, #1
 80043a6:	4013      	ands	r3, r2
 80043a8:	2b01      	cmp	r3, #1
 80043aa:	d1dc      	bne.n	8004366 <ADC_Enable+0x7a>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80043ac:	2300      	movs	r3, #0
}
 80043ae:	0018      	movs	r0, r3
 80043b0:	46bd      	mov	sp, r7
 80043b2:	b004      	add	sp, #16
 80043b4:	bd80      	pop	{r7, pc}
 80043b6:	46c0      	nop			; (mov r8, r8)
 80043b8:	80000017 	.word	0x80000017

080043bc <ADC_DelayMicroSecond>:
  * @brief  Delay micro seconds 
  * @param  microSecond  delay
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
 80043bc:	b580      	push	{r7, lr}
 80043be:	b084      	sub	sp, #16
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	6078      	str	r0, [r7, #4]
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 80043c4:	4b0b      	ldr	r3, [pc, #44]	; (80043f4 <ADC_DelayMicroSecond+0x38>)
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	490b      	ldr	r1, [pc, #44]	; (80043f8 <ADC_DelayMicroSecond+0x3c>)
 80043ca:	0018      	movs	r0, r3
 80043cc:	f7fb fea6 	bl	800011c <__udivsi3>
 80043d0:	0003      	movs	r3, r0
 80043d2:	001a      	movs	r2, r3
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	4353      	muls	r3, r2
 80043d8:	60fb      	str	r3, [r7, #12]

  while(waitLoopIndex != 0U)
 80043da:	e002      	b.n	80043e2 <ADC_DelayMicroSecond+0x26>
  {
    waitLoopIndex--;
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	3b01      	subs	r3, #1
 80043e0:	60fb      	str	r3, [r7, #12]
  while(waitLoopIndex != 0U)
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d1f9      	bne.n	80043dc <ADC_DelayMicroSecond+0x20>
  } 
}
 80043e8:	46c0      	nop			; (mov r8, r8)
 80043ea:	46c0      	nop			; (mov r8, r8)
 80043ec:	46bd      	mov	sp, r7
 80043ee:	b004      	add	sp, #16
 80043f0:	bd80      	pop	{r7, pc}
 80043f2:	46c0      	nop			; (mov r8, r8)
 80043f4:	20000000 	.word	0x20000000
 80043f8:	000f4240 	.word	0x000f4240

080043fc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80043fc:	b580      	push	{r7, lr}
 80043fe:	b082      	sub	sp, #8
 8004400:	af00      	add	r7, sp, #0
 8004402:	0002      	movs	r2, r0
 8004404:	1dfb      	adds	r3, r7, #7
 8004406:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8004408:	1dfb      	adds	r3, r7, #7
 800440a:	781b      	ldrb	r3, [r3, #0]
 800440c:	2b7f      	cmp	r3, #127	; 0x7f
 800440e:	d809      	bhi.n	8004424 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004410:	1dfb      	adds	r3, r7, #7
 8004412:	781b      	ldrb	r3, [r3, #0]
 8004414:	001a      	movs	r2, r3
 8004416:	231f      	movs	r3, #31
 8004418:	401a      	ands	r2, r3
 800441a:	4b04      	ldr	r3, [pc, #16]	; (800442c <__NVIC_EnableIRQ+0x30>)
 800441c:	2101      	movs	r1, #1
 800441e:	4091      	lsls	r1, r2
 8004420:	000a      	movs	r2, r1
 8004422:	601a      	str	r2, [r3, #0]
  }
}
 8004424:	46c0      	nop			; (mov r8, r8)
 8004426:	46bd      	mov	sp, r7
 8004428:	b002      	add	sp, #8
 800442a:	bd80      	pop	{r7, pc}
 800442c:	e000e100 	.word	0xe000e100

08004430 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004430:	b590      	push	{r4, r7, lr}
 8004432:	b083      	sub	sp, #12
 8004434:	af00      	add	r7, sp, #0
 8004436:	0002      	movs	r2, r0
 8004438:	6039      	str	r1, [r7, #0]
 800443a:	1dfb      	adds	r3, r7, #7
 800443c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800443e:	1dfb      	adds	r3, r7, #7
 8004440:	781b      	ldrb	r3, [r3, #0]
 8004442:	2b7f      	cmp	r3, #127	; 0x7f
 8004444:	d828      	bhi.n	8004498 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004446:	4a2f      	ldr	r2, [pc, #188]	; (8004504 <__NVIC_SetPriority+0xd4>)
 8004448:	1dfb      	adds	r3, r7, #7
 800444a:	781b      	ldrb	r3, [r3, #0]
 800444c:	b25b      	sxtb	r3, r3
 800444e:	089b      	lsrs	r3, r3, #2
 8004450:	33c0      	adds	r3, #192	; 0xc0
 8004452:	009b      	lsls	r3, r3, #2
 8004454:	589b      	ldr	r3, [r3, r2]
 8004456:	1dfa      	adds	r2, r7, #7
 8004458:	7812      	ldrb	r2, [r2, #0]
 800445a:	0011      	movs	r1, r2
 800445c:	2203      	movs	r2, #3
 800445e:	400a      	ands	r2, r1
 8004460:	00d2      	lsls	r2, r2, #3
 8004462:	21ff      	movs	r1, #255	; 0xff
 8004464:	4091      	lsls	r1, r2
 8004466:	000a      	movs	r2, r1
 8004468:	43d2      	mvns	r2, r2
 800446a:	401a      	ands	r2, r3
 800446c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800446e:	683b      	ldr	r3, [r7, #0]
 8004470:	019b      	lsls	r3, r3, #6
 8004472:	22ff      	movs	r2, #255	; 0xff
 8004474:	401a      	ands	r2, r3
 8004476:	1dfb      	adds	r3, r7, #7
 8004478:	781b      	ldrb	r3, [r3, #0]
 800447a:	0018      	movs	r0, r3
 800447c:	2303      	movs	r3, #3
 800447e:	4003      	ands	r3, r0
 8004480:	00db      	lsls	r3, r3, #3
 8004482:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004484:	481f      	ldr	r0, [pc, #124]	; (8004504 <__NVIC_SetPriority+0xd4>)
 8004486:	1dfb      	adds	r3, r7, #7
 8004488:	781b      	ldrb	r3, [r3, #0]
 800448a:	b25b      	sxtb	r3, r3
 800448c:	089b      	lsrs	r3, r3, #2
 800448e:	430a      	orrs	r2, r1
 8004490:	33c0      	adds	r3, #192	; 0xc0
 8004492:	009b      	lsls	r3, r3, #2
 8004494:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8004496:	e031      	b.n	80044fc <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004498:	4a1b      	ldr	r2, [pc, #108]	; (8004508 <__NVIC_SetPriority+0xd8>)
 800449a:	1dfb      	adds	r3, r7, #7
 800449c:	781b      	ldrb	r3, [r3, #0]
 800449e:	0019      	movs	r1, r3
 80044a0:	230f      	movs	r3, #15
 80044a2:	400b      	ands	r3, r1
 80044a4:	3b08      	subs	r3, #8
 80044a6:	089b      	lsrs	r3, r3, #2
 80044a8:	3306      	adds	r3, #6
 80044aa:	009b      	lsls	r3, r3, #2
 80044ac:	18d3      	adds	r3, r2, r3
 80044ae:	3304      	adds	r3, #4
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	1dfa      	adds	r2, r7, #7
 80044b4:	7812      	ldrb	r2, [r2, #0]
 80044b6:	0011      	movs	r1, r2
 80044b8:	2203      	movs	r2, #3
 80044ba:	400a      	ands	r2, r1
 80044bc:	00d2      	lsls	r2, r2, #3
 80044be:	21ff      	movs	r1, #255	; 0xff
 80044c0:	4091      	lsls	r1, r2
 80044c2:	000a      	movs	r2, r1
 80044c4:	43d2      	mvns	r2, r2
 80044c6:	401a      	ands	r2, r3
 80044c8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80044ca:	683b      	ldr	r3, [r7, #0]
 80044cc:	019b      	lsls	r3, r3, #6
 80044ce:	22ff      	movs	r2, #255	; 0xff
 80044d0:	401a      	ands	r2, r3
 80044d2:	1dfb      	adds	r3, r7, #7
 80044d4:	781b      	ldrb	r3, [r3, #0]
 80044d6:	0018      	movs	r0, r3
 80044d8:	2303      	movs	r3, #3
 80044da:	4003      	ands	r3, r0
 80044dc:	00db      	lsls	r3, r3, #3
 80044de:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80044e0:	4809      	ldr	r0, [pc, #36]	; (8004508 <__NVIC_SetPriority+0xd8>)
 80044e2:	1dfb      	adds	r3, r7, #7
 80044e4:	781b      	ldrb	r3, [r3, #0]
 80044e6:	001c      	movs	r4, r3
 80044e8:	230f      	movs	r3, #15
 80044ea:	4023      	ands	r3, r4
 80044ec:	3b08      	subs	r3, #8
 80044ee:	089b      	lsrs	r3, r3, #2
 80044f0:	430a      	orrs	r2, r1
 80044f2:	3306      	adds	r3, #6
 80044f4:	009b      	lsls	r3, r3, #2
 80044f6:	18c3      	adds	r3, r0, r3
 80044f8:	3304      	adds	r3, #4
 80044fa:	601a      	str	r2, [r3, #0]
}
 80044fc:	46c0      	nop			; (mov r8, r8)
 80044fe:	46bd      	mov	sp, r7
 8004500:	b003      	add	sp, #12
 8004502:	bd90      	pop	{r4, r7, pc}
 8004504:	e000e100 	.word	0xe000e100
 8004508:	e000ed00 	.word	0xe000ed00

0800450c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800450c:	b580      	push	{r7, lr}
 800450e:	b082      	sub	sp, #8
 8004510:	af00      	add	r7, sp, #0
 8004512:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	1e5a      	subs	r2, r3, #1
 8004518:	2380      	movs	r3, #128	; 0x80
 800451a:	045b      	lsls	r3, r3, #17
 800451c:	429a      	cmp	r2, r3
 800451e:	d301      	bcc.n	8004524 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004520:	2301      	movs	r3, #1
 8004522:	e010      	b.n	8004546 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004524:	4b0a      	ldr	r3, [pc, #40]	; (8004550 <SysTick_Config+0x44>)
 8004526:	687a      	ldr	r2, [r7, #4]
 8004528:	3a01      	subs	r2, #1
 800452a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800452c:	2301      	movs	r3, #1
 800452e:	425b      	negs	r3, r3
 8004530:	2103      	movs	r1, #3
 8004532:	0018      	movs	r0, r3
 8004534:	f7ff ff7c 	bl	8004430 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004538:	4b05      	ldr	r3, [pc, #20]	; (8004550 <SysTick_Config+0x44>)
 800453a:	2200      	movs	r2, #0
 800453c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800453e:	4b04      	ldr	r3, [pc, #16]	; (8004550 <SysTick_Config+0x44>)
 8004540:	2207      	movs	r2, #7
 8004542:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004544:	2300      	movs	r3, #0
}
 8004546:	0018      	movs	r0, r3
 8004548:	46bd      	mov	sp, r7
 800454a:	b002      	add	sp, #8
 800454c:	bd80      	pop	{r7, pc}
 800454e:	46c0      	nop			; (mov r8, r8)
 8004550:	e000e010 	.word	0xe000e010

08004554 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004554:	b580      	push	{r7, lr}
 8004556:	b084      	sub	sp, #16
 8004558:	af00      	add	r7, sp, #0
 800455a:	60b9      	str	r1, [r7, #8]
 800455c:	607a      	str	r2, [r7, #4]
 800455e:	210f      	movs	r1, #15
 8004560:	187b      	adds	r3, r7, r1
 8004562:	1c02      	adds	r2, r0, #0
 8004564:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8004566:	68ba      	ldr	r2, [r7, #8]
 8004568:	187b      	adds	r3, r7, r1
 800456a:	781b      	ldrb	r3, [r3, #0]
 800456c:	b25b      	sxtb	r3, r3
 800456e:	0011      	movs	r1, r2
 8004570:	0018      	movs	r0, r3
 8004572:	f7ff ff5d 	bl	8004430 <__NVIC_SetPriority>
}
 8004576:	46c0      	nop			; (mov r8, r8)
 8004578:	46bd      	mov	sp, r7
 800457a:	b004      	add	sp, #16
 800457c:	bd80      	pop	{r7, pc}

0800457e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800457e:	b580      	push	{r7, lr}
 8004580:	b082      	sub	sp, #8
 8004582:	af00      	add	r7, sp, #0
 8004584:	0002      	movs	r2, r0
 8004586:	1dfb      	adds	r3, r7, #7
 8004588:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800458a:	1dfb      	adds	r3, r7, #7
 800458c:	781b      	ldrb	r3, [r3, #0]
 800458e:	b25b      	sxtb	r3, r3
 8004590:	0018      	movs	r0, r3
 8004592:	f7ff ff33 	bl	80043fc <__NVIC_EnableIRQ>
}
 8004596:	46c0      	nop			; (mov r8, r8)
 8004598:	46bd      	mov	sp, r7
 800459a:	b002      	add	sp, #8
 800459c:	bd80      	pop	{r7, pc}

0800459e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800459e:	b580      	push	{r7, lr}
 80045a0:	b082      	sub	sp, #8
 80045a2:	af00      	add	r7, sp, #0
 80045a4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	0018      	movs	r0, r3
 80045aa:	f7ff ffaf 	bl	800450c <SysTick_Config>
 80045ae:	0003      	movs	r3, r0
}
 80045b0:	0018      	movs	r0, r3
 80045b2:	46bd      	mov	sp, r7
 80045b4:	b002      	add	sp, #8
 80045b6:	bd80      	pop	{r7, pc}

080045b8 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80045b8:	b580      	push	{r7, lr}
 80045ba:	b084      	sub	sp, #16
 80045bc:	af00      	add	r7, sp, #0
 80045be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80045c0:	230f      	movs	r3, #15
 80045c2:	18fb      	adds	r3, r7, r3
 80045c4:	2200      	movs	r2, #0
 80045c6:	701a      	strb	r2, [r3, #0]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	2225      	movs	r2, #37	; 0x25
 80045cc:	5c9b      	ldrb	r3, [r3, r2]
 80045ce:	b2db      	uxtb	r3, r3
 80045d0:	2b02      	cmp	r3, #2
 80045d2:	d008      	beq.n	80045e6 <HAL_DMA_Abort+0x2e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	2204      	movs	r2, #4
 80045d8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	2224      	movs	r2, #36	; 0x24
 80045de:	2100      	movs	r1, #0
 80045e0:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 80045e2:	2301      	movs	r3, #1
 80045e4:	e024      	b.n	8004630 <HAL_DMA_Abort+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	681a      	ldr	r2, [r3, #0]
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	210e      	movs	r1, #14
 80045f2:	438a      	bics	r2, r1
 80045f4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	681a      	ldr	r2, [r3, #0]
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	2101      	movs	r1, #1
 8004602:	438a      	bics	r2, r1
 8004604:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800460a:	221c      	movs	r2, #28
 800460c:	401a      	ands	r2, r3
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004612:	2101      	movs	r1, #1
 8004614:	4091      	lsls	r1, r2
 8004616:	000a      	movs	r2, r1
 8004618:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	2225      	movs	r2, #37	; 0x25
 800461e:	2101      	movs	r1, #1
 8004620:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	2224      	movs	r2, #36	; 0x24
 8004626:	2100      	movs	r1, #0
 8004628:	5499      	strb	r1, [r3, r2]

    return status;
 800462a:	230f      	movs	r3, #15
 800462c:	18fb      	adds	r3, r7, r3
 800462e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8004630:	0018      	movs	r0, r3
 8004632:	46bd      	mov	sp, r7
 8004634:	b004      	add	sp, #16
 8004636:	bd80      	pop	{r7, pc}

08004638 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004638:	b580      	push	{r7, lr}
 800463a:	b084      	sub	sp, #16
 800463c:	af00      	add	r7, sp, #0
 800463e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004640:	210f      	movs	r1, #15
 8004642:	187b      	adds	r3, r7, r1
 8004644:	2200      	movs	r2, #0
 8004646:	701a      	strb	r2, [r3, #0]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	2225      	movs	r2, #37	; 0x25
 800464c:	5c9b      	ldrb	r3, [r3, r2]
 800464e:	b2db      	uxtb	r3, r3
 8004650:	2b02      	cmp	r3, #2
 8004652:	d006      	beq.n	8004662 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	2204      	movs	r2, #4
 8004658:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800465a:	187b      	adds	r3, r7, r1
 800465c:	2201      	movs	r2, #1
 800465e:	701a      	strb	r2, [r3, #0]
 8004660:	e02a      	b.n	80046b8 <HAL_DMA_Abort_IT+0x80>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	681a      	ldr	r2, [r3, #0]
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	210e      	movs	r1, #14
 800466e:	438a      	bics	r2, r1
 8004670:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	681a      	ldr	r2, [r3, #0]
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	2101      	movs	r1, #1
 800467e:	438a      	bics	r2, r1
 8004680:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004686:	221c      	movs	r2, #28
 8004688:	401a      	ands	r2, r3
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800468e:	2101      	movs	r1, #1
 8004690:	4091      	lsls	r1, r2
 8004692:	000a      	movs	r2, r1
 8004694:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	2225      	movs	r2, #37	; 0x25
 800469a:	2101      	movs	r1, #1
 800469c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	2224      	movs	r2, #36	; 0x24
 80046a2:	2100      	movs	r1, #0
 80046a4:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d004      	beq.n	80046b8 <HAL_DMA_Abort_IT+0x80>
    {
      hdma->XferAbortCallback(hdma);
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046b2:	687a      	ldr	r2, [r7, #4]
 80046b4:	0010      	movs	r0, r2
 80046b6:	4798      	blx	r3
    }
  }
  return status;
 80046b8:	230f      	movs	r3, #15
 80046ba:	18fb      	adds	r3, r7, r3
 80046bc:	781b      	ldrb	r3, [r3, #0]
}
 80046be:	0018      	movs	r0, r3
 80046c0:	46bd      	mov	sp, r7
 80046c2:	b004      	add	sp, #16
 80046c4:	bd80      	pop	{r7, pc}
	...

080046c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80046c8:	b580      	push	{r7, lr}
 80046ca:	b086      	sub	sp, #24
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	6078      	str	r0, [r7, #4]
 80046d0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80046d2:	2300      	movs	r3, #0
 80046d4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80046d6:	2300      	movs	r3, #0
 80046d8:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 80046da:	2300      	movs	r3, #0
 80046dc:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 80046de:	e155      	b.n	800498c <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80046e0:	683b      	ldr	r3, [r7, #0]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	2101      	movs	r1, #1
 80046e6:	697a      	ldr	r2, [r7, #20]
 80046e8:	4091      	lsls	r1, r2
 80046ea:	000a      	movs	r2, r1
 80046ec:	4013      	ands	r3, r2
 80046ee:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d100      	bne.n	80046f8 <HAL_GPIO_Init+0x30>
 80046f6:	e146      	b.n	8004986 <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80046f8:	683b      	ldr	r3, [r7, #0]
 80046fa:	685b      	ldr	r3, [r3, #4]
 80046fc:	2203      	movs	r2, #3
 80046fe:	4013      	ands	r3, r2
 8004700:	2b01      	cmp	r3, #1
 8004702:	d005      	beq.n	8004710 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004704:	683b      	ldr	r3, [r7, #0]
 8004706:	685b      	ldr	r3, [r3, #4]
 8004708:	2203      	movs	r2, #3
 800470a:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800470c:	2b02      	cmp	r3, #2
 800470e:	d130      	bne.n	8004772 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	689b      	ldr	r3, [r3, #8]
 8004714:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8004716:	697b      	ldr	r3, [r7, #20]
 8004718:	005b      	lsls	r3, r3, #1
 800471a:	2203      	movs	r2, #3
 800471c:	409a      	lsls	r2, r3
 800471e:	0013      	movs	r3, r2
 8004720:	43da      	mvns	r2, r3
 8004722:	693b      	ldr	r3, [r7, #16]
 8004724:	4013      	ands	r3, r2
 8004726:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004728:	683b      	ldr	r3, [r7, #0]
 800472a:	68da      	ldr	r2, [r3, #12]
 800472c:	697b      	ldr	r3, [r7, #20]
 800472e:	005b      	lsls	r3, r3, #1
 8004730:	409a      	lsls	r2, r3
 8004732:	0013      	movs	r3, r2
 8004734:	693a      	ldr	r2, [r7, #16]
 8004736:	4313      	orrs	r3, r2
 8004738:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	693a      	ldr	r2, [r7, #16]
 800473e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	685b      	ldr	r3, [r3, #4]
 8004744:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004746:	2201      	movs	r2, #1
 8004748:	697b      	ldr	r3, [r7, #20]
 800474a:	409a      	lsls	r2, r3
 800474c:	0013      	movs	r3, r2
 800474e:	43da      	mvns	r2, r3
 8004750:	693b      	ldr	r3, [r7, #16]
 8004752:	4013      	ands	r3, r2
 8004754:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004756:	683b      	ldr	r3, [r7, #0]
 8004758:	685b      	ldr	r3, [r3, #4]
 800475a:	091b      	lsrs	r3, r3, #4
 800475c:	2201      	movs	r2, #1
 800475e:	401a      	ands	r2, r3
 8004760:	697b      	ldr	r3, [r7, #20]
 8004762:	409a      	lsls	r2, r3
 8004764:	0013      	movs	r3, r2
 8004766:	693a      	ldr	r2, [r7, #16]
 8004768:	4313      	orrs	r3, r2
 800476a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	693a      	ldr	r2, [r7, #16]
 8004770:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004772:	683b      	ldr	r3, [r7, #0]
 8004774:	685b      	ldr	r3, [r3, #4]
 8004776:	2203      	movs	r2, #3
 8004778:	4013      	ands	r3, r2
 800477a:	2b03      	cmp	r3, #3
 800477c:	d017      	beq.n	80047ae <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	68db      	ldr	r3, [r3, #12]
 8004782:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004784:	697b      	ldr	r3, [r7, #20]
 8004786:	005b      	lsls	r3, r3, #1
 8004788:	2203      	movs	r2, #3
 800478a:	409a      	lsls	r2, r3
 800478c:	0013      	movs	r3, r2
 800478e:	43da      	mvns	r2, r3
 8004790:	693b      	ldr	r3, [r7, #16]
 8004792:	4013      	ands	r3, r2
 8004794:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004796:	683b      	ldr	r3, [r7, #0]
 8004798:	689a      	ldr	r2, [r3, #8]
 800479a:	697b      	ldr	r3, [r7, #20]
 800479c:	005b      	lsls	r3, r3, #1
 800479e:	409a      	lsls	r2, r3
 80047a0:	0013      	movs	r3, r2
 80047a2:	693a      	ldr	r2, [r7, #16]
 80047a4:	4313      	orrs	r3, r2
 80047a6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	693a      	ldr	r2, [r7, #16]
 80047ac:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80047ae:	683b      	ldr	r3, [r7, #0]
 80047b0:	685b      	ldr	r3, [r3, #4]
 80047b2:	2203      	movs	r2, #3
 80047b4:	4013      	ands	r3, r2
 80047b6:	2b02      	cmp	r3, #2
 80047b8:	d123      	bne.n	8004802 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80047ba:	697b      	ldr	r3, [r7, #20]
 80047bc:	08da      	lsrs	r2, r3, #3
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	3208      	adds	r2, #8
 80047c2:	0092      	lsls	r2, r2, #2
 80047c4:	58d3      	ldr	r3, [r2, r3]
 80047c6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 80047c8:	697b      	ldr	r3, [r7, #20]
 80047ca:	2207      	movs	r2, #7
 80047cc:	4013      	ands	r3, r2
 80047ce:	009b      	lsls	r3, r3, #2
 80047d0:	220f      	movs	r2, #15
 80047d2:	409a      	lsls	r2, r3
 80047d4:	0013      	movs	r3, r2
 80047d6:	43da      	mvns	r2, r3
 80047d8:	693b      	ldr	r3, [r7, #16]
 80047da:	4013      	ands	r3, r2
 80047dc:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 80047de:	683b      	ldr	r3, [r7, #0]
 80047e0:	691a      	ldr	r2, [r3, #16]
 80047e2:	697b      	ldr	r3, [r7, #20]
 80047e4:	2107      	movs	r1, #7
 80047e6:	400b      	ands	r3, r1
 80047e8:	009b      	lsls	r3, r3, #2
 80047ea:	409a      	lsls	r2, r3
 80047ec:	0013      	movs	r3, r2
 80047ee:	693a      	ldr	r2, [r7, #16]
 80047f0:	4313      	orrs	r3, r2
 80047f2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80047f4:	697b      	ldr	r3, [r7, #20]
 80047f6:	08da      	lsrs	r2, r3, #3
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	3208      	adds	r2, #8
 80047fc:	0092      	lsls	r2, r2, #2
 80047fe:	6939      	ldr	r1, [r7, #16]
 8004800:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004808:	697b      	ldr	r3, [r7, #20]
 800480a:	005b      	lsls	r3, r3, #1
 800480c:	2203      	movs	r2, #3
 800480e:	409a      	lsls	r2, r3
 8004810:	0013      	movs	r3, r2
 8004812:	43da      	mvns	r2, r3
 8004814:	693b      	ldr	r3, [r7, #16]
 8004816:	4013      	ands	r3, r2
 8004818:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800481a:	683b      	ldr	r3, [r7, #0]
 800481c:	685b      	ldr	r3, [r3, #4]
 800481e:	2203      	movs	r2, #3
 8004820:	401a      	ands	r2, r3
 8004822:	697b      	ldr	r3, [r7, #20]
 8004824:	005b      	lsls	r3, r3, #1
 8004826:	409a      	lsls	r2, r3
 8004828:	0013      	movs	r3, r2
 800482a:	693a      	ldr	r2, [r7, #16]
 800482c:	4313      	orrs	r3, r2
 800482e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	693a      	ldr	r2, [r7, #16]
 8004834:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004836:	683b      	ldr	r3, [r7, #0]
 8004838:	685a      	ldr	r2, [r3, #4]
 800483a:	23c0      	movs	r3, #192	; 0xc0
 800483c:	029b      	lsls	r3, r3, #10
 800483e:	4013      	ands	r3, r2
 8004840:	d100      	bne.n	8004844 <HAL_GPIO_Init+0x17c>
 8004842:	e0a0      	b.n	8004986 <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004844:	4b57      	ldr	r3, [pc, #348]	; (80049a4 <HAL_GPIO_Init+0x2dc>)
 8004846:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004848:	4b56      	ldr	r3, [pc, #344]	; (80049a4 <HAL_GPIO_Init+0x2dc>)
 800484a:	2101      	movs	r1, #1
 800484c:	430a      	orrs	r2, r1
 800484e:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8004850:	4a55      	ldr	r2, [pc, #340]	; (80049a8 <HAL_GPIO_Init+0x2e0>)
 8004852:	697b      	ldr	r3, [r7, #20]
 8004854:	089b      	lsrs	r3, r3, #2
 8004856:	3302      	adds	r3, #2
 8004858:	009b      	lsls	r3, r3, #2
 800485a:	589b      	ldr	r3, [r3, r2]
 800485c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 800485e:	697b      	ldr	r3, [r7, #20]
 8004860:	2203      	movs	r2, #3
 8004862:	4013      	ands	r3, r2
 8004864:	009b      	lsls	r3, r3, #2
 8004866:	220f      	movs	r2, #15
 8004868:	409a      	lsls	r2, r3
 800486a:	0013      	movs	r3, r2
 800486c:	43da      	mvns	r2, r3
 800486e:	693b      	ldr	r3, [r7, #16]
 8004870:	4013      	ands	r3, r2
 8004872:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8004874:	687a      	ldr	r2, [r7, #4]
 8004876:	23a0      	movs	r3, #160	; 0xa0
 8004878:	05db      	lsls	r3, r3, #23
 800487a:	429a      	cmp	r2, r3
 800487c:	d01f      	beq.n	80048be <HAL_GPIO_Init+0x1f6>
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	4a4a      	ldr	r2, [pc, #296]	; (80049ac <HAL_GPIO_Init+0x2e4>)
 8004882:	4293      	cmp	r3, r2
 8004884:	d019      	beq.n	80048ba <HAL_GPIO_Init+0x1f2>
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	4a49      	ldr	r2, [pc, #292]	; (80049b0 <HAL_GPIO_Init+0x2e8>)
 800488a:	4293      	cmp	r3, r2
 800488c:	d013      	beq.n	80048b6 <HAL_GPIO_Init+0x1ee>
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	4a48      	ldr	r2, [pc, #288]	; (80049b4 <HAL_GPIO_Init+0x2ec>)
 8004892:	4293      	cmp	r3, r2
 8004894:	d00d      	beq.n	80048b2 <HAL_GPIO_Init+0x1ea>
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	4a47      	ldr	r2, [pc, #284]	; (80049b8 <HAL_GPIO_Init+0x2f0>)
 800489a:	4293      	cmp	r3, r2
 800489c:	d007      	beq.n	80048ae <HAL_GPIO_Init+0x1e6>
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	4a46      	ldr	r2, [pc, #280]	; (80049bc <HAL_GPIO_Init+0x2f4>)
 80048a2:	4293      	cmp	r3, r2
 80048a4:	d101      	bne.n	80048aa <HAL_GPIO_Init+0x1e2>
 80048a6:	2305      	movs	r3, #5
 80048a8:	e00a      	b.n	80048c0 <HAL_GPIO_Init+0x1f8>
 80048aa:	2306      	movs	r3, #6
 80048ac:	e008      	b.n	80048c0 <HAL_GPIO_Init+0x1f8>
 80048ae:	2304      	movs	r3, #4
 80048b0:	e006      	b.n	80048c0 <HAL_GPIO_Init+0x1f8>
 80048b2:	2303      	movs	r3, #3
 80048b4:	e004      	b.n	80048c0 <HAL_GPIO_Init+0x1f8>
 80048b6:	2302      	movs	r3, #2
 80048b8:	e002      	b.n	80048c0 <HAL_GPIO_Init+0x1f8>
 80048ba:	2301      	movs	r3, #1
 80048bc:	e000      	b.n	80048c0 <HAL_GPIO_Init+0x1f8>
 80048be:	2300      	movs	r3, #0
 80048c0:	697a      	ldr	r2, [r7, #20]
 80048c2:	2103      	movs	r1, #3
 80048c4:	400a      	ands	r2, r1
 80048c6:	0092      	lsls	r2, r2, #2
 80048c8:	4093      	lsls	r3, r2
 80048ca:	693a      	ldr	r2, [r7, #16]
 80048cc:	4313      	orrs	r3, r2
 80048ce:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80048d0:	4935      	ldr	r1, [pc, #212]	; (80049a8 <HAL_GPIO_Init+0x2e0>)
 80048d2:	697b      	ldr	r3, [r7, #20]
 80048d4:	089b      	lsrs	r3, r3, #2
 80048d6:	3302      	adds	r3, #2
 80048d8:	009b      	lsls	r3, r3, #2
 80048da:	693a      	ldr	r2, [r7, #16]
 80048dc:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80048de:	4b38      	ldr	r3, [pc, #224]	; (80049c0 <HAL_GPIO_Init+0x2f8>)
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	43da      	mvns	r2, r3
 80048e8:	693b      	ldr	r3, [r7, #16]
 80048ea:	4013      	ands	r3, r2
 80048ec:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80048ee:	683b      	ldr	r3, [r7, #0]
 80048f0:	685a      	ldr	r2, [r3, #4]
 80048f2:	2380      	movs	r3, #128	; 0x80
 80048f4:	025b      	lsls	r3, r3, #9
 80048f6:	4013      	ands	r3, r2
 80048f8:	d003      	beq.n	8004902 <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 80048fa:	693a      	ldr	r2, [r7, #16]
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	4313      	orrs	r3, r2
 8004900:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8004902:	4b2f      	ldr	r3, [pc, #188]	; (80049c0 <HAL_GPIO_Init+0x2f8>)
 8004904:	693a      	ldr	r2, [r7, #16]
 8004906:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8004908:	4b2d      	ldr	r3, [pc, #180]	; (80049c0 <HAL_GPIO_Init+0x2f8>)
 800490a:	685b      	ldr	r3, [r3, #4]
 800490c:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	43da      	mvns	r2, r3
 8004912:	693b      	ldr	r3, [r7, #16]
 8004914:	4013      	ands	r3, r2
 8004916:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004918:	683b      	ldr	r3, [r7, #0]
 800491a:	685a      	ldr	r2, [r3, #4]
 800491c:	2380      	movs	r3, #128	; 0x80
 800491e:	029b      	lsls	r3, r3, #10
 8004920:	4013      	ands	r3, r2
 8004922:	d003      	beq.n	800492c <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8004924:	693a      	ldr	r2, [r7, #16]
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	4313      	orrs	r3, r2
 800492a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800492c:	4b24      	ldr	r3, [pc, #144]	; (80049c0 <HAL_GPIO_Init+0x2f8>)
 800492e:	693a      	ldr	r2, [r7, #16]
 8004930:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004932:	4b23      	ldr	r3, [pc, #140]	; (80049c0 <HAL_GPIO_Init+0x2f8>)
 8004934:	689b      	ldr	r3, [r3, #8]
 8004936:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	43da      	mvns	r2, r3
 800493c:	693b      	ldr	r3, [r7, #16]
 800493e:	4013      	ands	r3, r2
 8004940:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004942:	683b      	ldr	r3, [r7, #0]
 8004944:	685a      	ldr	r2, [r3, #4]
 8004946:	2380      	movs	r3, #128	; 0x80
 8004948:	035b      	lsls	r3, r3, #13
 800494a:	4013      	ands	r3, r2
 800494c:	d003      	beq.n	8004956 <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 800494e:	693a      	ldr	r2, [r7, #16]
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	4313      	orrs	r3, r2
 8004954:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8004956:	4b1a      	ldr	r3, [pc, #104]	; (80049c0 <HAL_GPIO_Init+0x2f8>)
 8004958:	693a      	ldr	r2, [r7, #16]
 800495a:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 800495c:	4b18      	ldr	r3, [pc, #96]	; (80049c0 <HAL_GPIO_Init+0x2f8>)
 800495e:	68db      	ldr	r3, [r3, #12]
 8004960:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	43da      	mvns	r2, r3
 8004966:	693b      	ldr	r3, [r7, #16]
 8004968:	4013      	ands	r3, r2
 800496a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800496c:	683b      	ldr	r3, [r7, #0]
 800496e:	685a      	ldr	r2, [r3, #4]
 8004970:	2380      	movs	r3, #128	; 0x80
 8004972:	039b      	lsls	r3, r3, #14
 8004974:	4013      	ands	r3, r2
 8004976:	d003      	beq.n	8004980 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 8004978:	693a      	ldr	r2, [r7, #16]
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	4313      	orrs	r3, r2
 800497e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8004980:	4b0f      	ldr	r3, [pc, #60]	; (80049c0 <HAL_GPIO_Init+0x2f8>)
 8004982:	693a      	ldr	r2, [r7, #16]
 8004984:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 8004986:	697b      	ldr	r3, [r7, #20]
 8004988:	3301      	adds	r3, #1
 800498a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 800498c:	683b      	ldr	r3, [r7, #0]
 800498e:	681a      	ldr	r2, [r3, #0]
 8004990:	697b      	ldr	r3, [r7, #20]
 8004992:	40da      	lsrs	r2, r3
 8004994:	1e13      	subs	r3, r2, #0
 8004996:	d000      	beq.n	800499a <HAL_GPIO_Init+0x2d2>
 8004998:	e6a2      	b.n	80046e0 <HAL_GPIO_Init+0x18>
  }
}
 800499a:	46c0      	nop			; (mov r8, r8)
 800499c:	46c0      	nop			; (mov r8, r8)
 800499e:	46bd      	mov	sp, r7
 80049a0:	b006      	add	sp, #24
 80049a2:	bd80      	pop	{r7, pc}
 80049a4:	40021000 	.word	0x40021000
 80049a8:	40010000 	.word	0x40010000
 80049ac:	50000400 	.word	0x50000400
 80049b0:	50000800 	.word	0x50000800
 80049b4:	50000c00 	.word	0x50000c00
 80049b8:	50001000 	.word	0x50001000
 80049bc:	50001c00 	.word	0x50001c00
 80049c0:	40010400 	.word	0x40010400

080049c4 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80049c4:	b580      	push	{r7, lr}
 80049c6:	b082      	sub	sp, #8
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	6078      	str	r0, [r7, #4]
 80049cc:	0008      	movs	r0, r1
 80049ce:	0011      	movs	r1, r2
 80049d0:	1cbb      	adds	r3, r7, #2
 80049d2:	1c02      	adds	r2, r0, #0
 80049d4:	801a      	strh	r2, [r3, #0]
 80049d6:	1c7b      	adds	r3, r7, #1
 80049d8:	1c0a      	adds	r2, r1, #0
 80049da:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80049dc:	1c7b      	adds	r3, r7, #1
 80049de:	781b      	ldrb	r3, [r3, #0]
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d004      	beq.n	80049ee <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 80049e4:	1cbb      	adds	r3, r7, #2
 80049e6:	881a      	ldrh	r2, [r3, #0]
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 80049ec:	e003      	b.n	80049f6 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 80049ee:	1cbb      	adds	r3, r7, #2
 80049f0:	881a      	ldrh	r2, [r3, #0]
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	629a      	str	r2, [r3, #40]	; 0x28
}
 80049f6:	46c0      	nop			; (mov r8, r8)
 80049f8:	46bd      	mov	sp, r7
 80049fa:	b002      	add	sp, #8
 80049fc:	bd80      	pop	{r7, pc}
	...

08004a00 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected to the EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004a00:	b580      	push	{r7, lr}
 8004a02:	b082      	sub	sp, #8
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	0002      	movs	r2, r0
 8004a08:	1dbb      	adds	r3, r7, #6
 8004a0a:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8004a0c:	4b09      	ldr	r3, [pc, #36]	; (8004a34 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8004a0e:	695b      	ldr	r3, [r3, #20]
 8004a10:	1dba      	adds	r2, r7, #6
 8004a12:	8812      	ldrh	r2, [r2, #0]
 8004a14:	4013      	ands	r3, r2
 8004a16:	d008      	beq.n	8004a2a <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004a18:	4b06      	ldr	r3, [pc, #24]	; (8004a34 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8004a1a:	1dba      	adds	r2, r7, #6
 8004a1c:	8812      	ldrh	r2, [r2, #0]
 8004a1e:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004a20:	1dbb      	adds	r3, r7, #6
 8004a22:	881b      	ldrh	r3, [r3, #0]
 8004a24:	0018      	movs	r0, r3
 8004a26:	f7fc fb07 	bl	8001038 <HAL_GPIO_EXTI_Callback>
  }
}
 8004a2a:	46c0      	nop			; (mov r8, r8)
 8004a2c:	46bd      	mov	sp, r7
 8004a2e:	b002      	add	sp, #8
 8004a30:	bd80      	pop	{r7, pc}
 8004a32:	46c0      	nop			; (mov r8, r8)
 8004a34:	40010400 	.word	0x40010400

08004a38 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 2, 4, 8 or 16 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004a38:	b580      	push	{r7, lr}
 8004a3a:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR, PWR_CR_DBP);
 8004a3c:	4b04      	ldr	r3, [pc, #16]	; (8004a50 <HAL_PWR_EnableBkUpAccess+0x18>)
 8004a3e:	681a      	ldr	r2, [r3, #0]
 8004a40:	4b03      	ldr	r3, [pc, #12]	; (8004a50 <HAL_PWR_EnableBkUpAccess+0x18>)
 8004a42:	2180      	movs	r1, #128	; 0x80
 8004a44:	0049      	lsls	r1, r1, #1
 8004a46:	430a      	orrs	r2, r1
 8004a48:	601a      	str	r2, [r3, #0]
}
 8004a4a:	46c0      	nop			; (mov r8, r8)
 8004a4c:	46bd      	mov	sp, r7
 8004a4e:	bd80      	pop	{r7, pc}
 8004a50:	40007000 	.word	0x40007000

08004a54 <HAL_PWR_EnterSTOPMode>:
  *            @arg PWR_STOPENTRY_WFI: Enter Stop mode with WFI instruction
  *            @arg PWR_STOPENTRY_WFE: Enter Stop mode with WFE instruction   
  * @retval None
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
 8004a54:	b580      	push	{r7, lr}
 8004a56:	b086      	sub	sp, #24
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	6078      	str	r0, [r7, #4]
 8004a5c:	000a      	movs	r2, r1
 8004a5e:	1cfb      	adds	r3, r7, #3
 8004a60:	701a      	strb	r2, [r3, #0]
  uint32_t tmpreg = 0U;
 8004a62:	2300      	movs	r3, #0
 8004a64:	617b      	str	r3, [r7, #20]
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* It is forbidden to configure both EN_VREFINT=1 and ULP=1 if the device is
     in Stop mode or in Sleep/Low-power sleep mode */
  ulpbit = READ_BIT(PWR->CR, PWR_CR_ULP);
 8004a66:	4b25      	ldr	r3, [pc, #148]	; (8004afc <HAL_PWR_EnterSTOPMode+0xa8>)
 8004a68:	681a      	ldr	r2, [r3, #0]
 8004a6a:	2380      	movs	r3, #128	; 0x80
 8004a6c:	009b      	lsls	r3, r3, #2
 8004a6e:	4013      	ands	r3, r2
 8004a70:	613b      	str	r3, [r7, #16]
  vrefinbit = READ_BIT(SYSCFG->CFGR3, SYSCFG_CFGR3_EN_VREFINT);
 8004a72:	4b23      	ldr	r3, [pc, #140]	; (8004b00 <HAL_PWR_EnterSTOPMode+0xac>)
 8004a74:	6a1b      	ldr	r3, [r3, #32]
 8004a76:	2201      	movs	r2, #1
 8004a78:	4013      	ands	r3, r2
 8004a7a:	60fb      	str	r3, [r7, #12]
  if((ulpbit != 0) && (vrefinbit != 0))
 8004a7c:	693b      	ldr	r3, [r7, #16]
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d008      	beq.n	8004a94 <HAL_PWR_EnterSTOPMode+0x40>
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d005      	beq.n	8004a94 <HAL_PWR_EnterSTOPMode+0x40>
  {
    CLEAR_BIT(PWR->CR, PWR_CR_ULP);
 8004a88:	4b1c      	ldr	r3, [pc, #112]	; (8004afc <HAL_PWR_EnterSTOPMode+0xa8>)
 8004a8a:	681a      	ldr	r2, [r3, #0]
 8004a8c:	4b1b      	ldr	r3, [pc, #108]	; (8004afc <HAL_PWR_EnterSTOPMode+0xa8>)
 8004a8e:	491d      	ldr	r1, [pc, #116]	; (8004b04 <HAL_PWR_EnterSTOPMode+0xb0>)
 8004a90:	400a      	ands	r2, r1
 8004a92:	601a      	str	r2, [r3, #0]
  }

  /* Select the regulator state in Stop mode ---------------------------------*/
  tmpreg = PWR->CR;
 8004a94:	4b19      	ldr	r3, [pc, #100]	; (8004afc <HAL_PWR_EnterSTOPMode+0xa8>)
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	617b      	str	r3, [r7, #20]
  
  /* Clear PDDS and LPDS bits */
  CLEAR_BIT(tmpreg, (PWR_CR_PDDS | PWR_CR_LPSDSR));
 8004a9a:	697b      	ldr	r3, [r7, #20]
 8004a9c:	2203      	movs	r2, #3
 8004a9e:	4393      	bics	r3, r2
 8004aa0:	617b      	str	r3, [r7, #20]

 /* Set LPSDSR bit according to PWR_Regulator value */
  SET_BIT(tmpreg, Regulator);
 8004aa2:	697a      	ldr	r2, [r7, #20]
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	4313      	orrs	r3, r2
 8004aa8:	617b      	str	r3, [r7, #20]

  /* Store the new value */
  PWR->CR = tmpreg;
 8004aaa:	4b14      	ldr	r3, [pc, #80]	; (8004afc <HAL_PWR_EnterSTOPMode+0xa8>)
 8004aac:	697a      	ldr	r2, [r7, #20]
 8004aae:	601a      	str	r2, [r3, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8004ab0:	4b15      	ldr	r3, [pc, #84]	; (8004b08 <HAL_PWR_EnterSTOPMode+0xb4>)
 8004ab2:	691a      	ldr	r2, [r3, #16]
 8004ab4:	4b14      	ldr	r3, [pc, #80]	; (8004b08 <HAL_PWR_EnterSTOPMode+0xb4>)
 8004ab6:	2104      	movs	r1, #4
 8004ab8:	430a      	orrs	r2, r1
 8004aba:	611a      	str	r2, [r3, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 8004abc:	1cfb      	adds	r3, r7, #3
 8004abe:	781b      	ldrb	r3, [r3, #0]
 8004ac0:	2b01      	cmp	r3, #1
 8004ac2:	d101      	bne.n	8004ac8 <HAL_PWR_EnterSTOPMode+0x74>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8004ac4:	bf30      	wfi
 8004ac6:	e002      	b.n	8004ace <HAL_PWR_EnterSTOPMode+0x7a>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8004ac8:	bf40      	sev
    __WFE();
 8004aca:	bf20      	wfe
    __WFE();
 8004acc:	bf20      	wfe
  }
 
  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8004ace:	4b0e      	ldr	r3, [pc, #56]	; (8004b08 <HAL_PWR_EnterSTOPMode+0xb4>)
 8004ad0:	691a      	ldr	r2, [r3, #16]
 8004ad2:	4b0d      	ldr	r3, [pc, #52]	; (8004b08 <HAL_PWR_EnterSTOPMode+0xb4>)
 8004ad4:	2104      	movs	r1, #4
 8004ad6:	438a      	bics	r2, r1
 8004ad8:	611a      	str	r2, [r3, #16]

  if((ulpbit != 0) && (vrefinbit != 0))
 8004ada:	693b      	ldr	r3, [r7, #16]
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d009      	beq.n	8004af4 <HAL_PWR_EnterSTOPMode+0xa0>
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d006      	beq.n	8004af4 <HAL_PWR_EnterSTOPMode+0xa0>
  {
    SET_BIT(PWR->CR, PWR_CR_ULP);
 8004ae6:	4b05      	ldr	r3, [pc, #20]	; (8004afc <HAL_PWR_EnterSTOPMode+0xa8>)
 8004ae8:	681a      	ldr	r2, [r3, #0]
 8004aea:	4b04      	ldr	r3, [pc, #16]	; (8004afc <HAL_PWR_EnterSTOPMode+0xa8>)
 8004aec:	2180      	movs	r1, #128	; 0x80
 8004aee:	0089      	lsls	r1, r1, #2
 8004af0:	430a      	orrs	r2, r1
 8004af2:	601a      	str	r2, [r3, #0]
  }
}
 8004af4:	46c0      	nop			; (mov r8, r8)
 8004af6:	46bd      	mov	sp, r7
 8004af8:	b006      	add	sp, #24
 8004afa:	bd80      	pop	{r7, pc}
 8004afc:	40007000 	.word	0x40007000
 8004b00:	40010000 	.word	0x40010000
 8004b04:	fffffdff 	.word	0xfffffdff
 8004b08:	e000ed00 	.word	0xe000ed00

08004b0c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004b0c:	b5b0      	push	{r4, r5, r7, lr}
 8004b0e:	b08a      	sub	sp, #40	; 0x28
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d102      	bne.n	8004b20 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004b1a:	2301      	movs	r3, #1
 8004b1c:	f000 fbbf 	bl	800529e <HAL_RCC_OscConfig+0x792>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004b20:	4bc9      	ldr	r3, [pc, #804]	; (8004e48 <HAL_RCC_OscConfig+0x33c>)
 8004b22:	68db      	ldr	r3, [r3, #12]
 8004b24:	220c      	movs	r2, #12
 8004b26:	4013      	ands	r3, r2
 8004b28:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004b2a:	4bc7      	ldr	r3, [pc, #796]	; (8004e48 <HAL_RCC_OscConfig+0x33c>)
 8004b2c:	68da      	ldr	r2, [r3, #12]
 8004b2e:	2380      	movs	r3, #128	; 0x80
 8004b30:	025b      	lsls	r3, r3, #9
 8004b32:	4013      	ands	r3, r2
 8004b34:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	2201      	movs	r2, #1
 8004b3c:	4013      	ands	r3, r2
 8004b3e:	d100      	bne.n	8004b42 <HAL_RCC_OscConfig+0x36>
 8004b40:	e07e      	b.n	8004c40 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004b42:	69fb      	ldr	r3, [r7, #28]
 8004b44:	2b08      	cmp	r3, #8
 8004b46:	d007      	beq.n	8004b58 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004b48:	69fb      	ldr	r3, [r7, #28]
 8004b4a:	2b0c      	cmp	r3, #12
 8004b4c:	d112      	bne.n	8004b74 <HAL_RCC_OscConfig+0x68>
 8004b4e:	69ba      	ldr	r2, [r7, #24]
 8004b50:	2380      	movs	r3, #128	; 0x80
 8004b52:	025b      	lsls	r3, r3, #9
 8004b54:	429a      	cmp	r2, r3
 8004b56:	d10d      	bne.n	8004b74 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b58:	4bbb      	ldr	r3, [pc, #748]	; (8004e48 <HAL_RCC_OscConfig+0x33c>)
 8004b5a:	681a      	ldr	r2, [r3, #0]
 8004b5c:	2380      	movs	r3, #128	; 0x80
 8004b5e:	029b      	lsls	r3, r3, #10
 8004b60:	4013      	ands	r3, r2
 8004b62:	d100      	bne.n	8004b66 <HAL_RCC_OscConfig+0x5a>
 8004b64:	e06b      	b.n	8004c3e <HAL_RCC_OscConfig+0x132>
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	685b      	ldr	r3, [r3, #4]
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d167      	bne.n	8004c3e <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8004b6e:	2301      	movs	r3, #1
 8004b70:	f000 fb95 	bl	800529e <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	685a      	ldr	r2, [r3, #4]
 8004b78:	2380      	movs	r3, #128	; 0x80
 8004b7a:	025b      	lsls	r3, r3, #9
 8004b7c:	429a      	cmp	r2, r3
 8004b7e:	d107      	bne.n	8004b90 <HAL_RCC_OscConfig+0x84>
 8004b80:	4bb1      	ldr	r3, [pc, #708]	; (8004e48 <HAL_RCC_OscConfig+0x33c>)
 8004b82:	681a      	ldr	r2, [r3, #0]
 8004b84:	4bb0      	ldr	r3, [pc, #704]	; (8004e48 <HAL_RCC_OscConfig+0x33c>)
 8004b86:	2180      	movs	r1, #128	; 0x80
 8004b88:	0249      	lsls	r1, r1, #9
 8004b8a:	430a      	orrs	r2, r1
 8004b8c:	601a      	str	r2, [r3, #0]
 8004b8e:	e027      	b.n	8004be0 <HAL_RCC_OscConfig+0xd4>
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	685a      	ldr	r2, [r3, #4]
 8004b94:	23a0      	movs	r3, #160	; 0xa0
 8004b96:	02db      	lsls	r3, r3, #11
 8004b98:	429a      	cmp	r2, r3
 8004b9a:	d10e      	bne.n	8004bba <HAL_RCC_OscConfig+0xae>
 8004b9c:	4baa      	ldr	r3, [pc, #680]	; (8004e48 <HAL_RCC_OscConfig+0x33c>)
 8004b9e:	681a      	ldr	r2, [r3, #0]
 8004ba0:	4ba9      	ldr	r3, [pc, #676]	; (8004e48 <HAL_RCC_OscConfig+0x33c>)
 8004ba2:	2180      	movs	r1, #128	; 0x80
 8004ba4:	02c9      	lsls	r1, r1, #11
 8004ba6:	430a      	orrs	r2, r1
 8004ba8:	601a      	str	r2, [r3, #0]
 8004baa:	4ba7      	ldr	r3, [pc, #668]	; (8004e48 <HAL_RCC_OscConfig+0x33c>)
 8004bac:	681a      	ldr	r2, [r3, #0]
 8004bae:	4ba6      	ldr	r3, [pc, #664]	; (8004e48 <HAL_RCC_OscConfig+0x33c>)
 8004bb0:	2180      	movs	r1, #128	; 0x80
 8004bb2:	0249      	lsls	r1, r1, #9
 8004bb4:	430a      	orrs	r2, r1
 8004bb6:	601a      	str	r2, [r3, #0]
 8004bb8:	e012      	b.n	8004be0 <HAL_RCC_OscConfig+0xd4>
 8004bba:	4ba3      	ldr	r3, [pc, #652]	; (8004e48 <HAL_RCC_OscConfig+0x33c>)
 8004bbc:	681a      	ldr	r2, [r3, #0]
 8004bbe:	4ba2      	ldr	r3, [pc, #648]	; (8004e48 <HAL_RCC_OscConfig+0x33c>)
 8004bc0:	49a2      	ldr	r1, [pc, #648]	; (8004e4c <HAL_RCC_OscConfig+0x340>)
 8004bc2:	400a      	ands	r2, r1
 8004bc4:	601a      	str	r2, [r3, #0]
 8004bc6:	4ba0      	ldr	r3, [pc, #640]	; (8004e48 <HAL_RCC_OscConfig+0x33c>)
 8004bc8:	681a      	ldr	r2, [r3, #0]
 8004bca:	2380      	movs	r3, #128	; 0x80
 8004bcc:	025b      	lsls	r3, r3, #9
 8004bce:	4013      	ands	r3, r2
 8004bd0:	60fb      	str	r3, [r7, #12]
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	4b9c      	ldr	r3, [pc, #624]	; (8004e48 <HAL_RCC_OscConfig+0x33c>)
 8004bd6:	681a      	ldr	r2, [r3, #0]
 8004bd8:	4b9b      	ldr	r3, [pc, #620]	; (8004e48 <HAL_RCC_OscConfig+0x33c>)
 8004bda:	499d      	ldr	r1, [pc, #628]	; (8004e50 <HAL_RCC_OscConfig+0x344>)
 8004bdc:	400a      	ands	r2, r1
 8004bde:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	685b      	ldr	r3, [r3, #4]
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d015      	beq.n	8004c14 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004be8:	f7fe fff2 	bl	8003bd0 <HAL_GetTick>
 8004bec:	0003      	movs	r3, r0
 8004bee:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004bf0:	e009      	b.n	8004c06 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004bf2:	f7fe ffed 	bl	8003bd0 <HAL_GetTick>
 8004bf6:	0002      	movs	r2, r0
 8004bf8:	697b      	ldr	r3, [r7, #20]
 8004bfa:	1ad3      	subs	r3, r2, r3
 8004bfc:	2b64      	cmp	r3, #100	; 0x64
 8004bfe:	d902      	bls.n	8004c06 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004c00:	2303      	movs	r3, #3
 8004c02:	f000 fb4c 	bl	800529e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004c06:	4b90      	ldr	r3, [pc, #576]	; (8004e48 <HAL_RCC_OscConfig+0x33c>)
 8004c08:	681a      	ldr	r2, [r3, #0]
 8004c0a:	2380      	movs	r3, #128	; 0x80
 8004c0c:	029b      	lsls	r3, r3, #10
 8004c0e:	4013      	ands	r3, r2
 8004c10:	d0ef      	beq.n	8004bf2 <HAL_RCC_OscConfig+0xe6>
 8004c12:	e015      	b.n	8004c40 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c14:	f7fe ffdc 	bl	8003bd0 <HAL_GetTick>
 8004c18:	0003      	movs	r3, r0
 8004c1a:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004c1c:	e008      	b.n	8004c30 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004c1e:	f7fe ffd7 	bl	8003bd0 <HAL_GetTick>
 8004c22:	0002      	movs	r2, r0
 8004c24:	697b      	ldr	r3, [r7, #20]
 8004c26:	1ad3      	subs	r3, r2, r3
 8004c28:	2b64      	cmp	r3, #100	; 0x64
 8004c2a:	d901      	bls.n	8004c30 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8004c2c:	2303      	movs	r3, #3
 8004c2e:	e336      	b.n	800529e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004c30:	4b85      	ldr	r3, [pc, #532]	; (8004e48 <HAL_RCC_OscConfig+0x33c>)
 8004c32:	681a      	ldr	r2, [r3, #0]
 8004c34:	2380      	movs	r3, #128	; 0x80
 8004c36:	029b      	lsls	r3, r3, #10
 8004c38:	4013      	ands	r3, r2
 8004c3a:	d1f0      	bne.n	8004c1e <HAL_RCC_OscConfig+0x112>
 8004c3c:	e000      	b.n	8004c40 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c3e:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	2202      	movs	r2, #2
 8004c46:	4013      	ands	r3, r2
 8004c48:	d100      	bne.n	8004c4c <HAL_RCC_OscConfig+0x140>
 8004c4a:	e099      	b.n	8004d80 <HAL_RCC_OscConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	68db      	ldr	r3, [r3, #12]
 8004c50:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8004c52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c54:	2220      	movs	r2, #32
 8004c56:	4013      	ands	r3, r2
 8004c58:	d009      	beq.n	8004c6e <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8004c5a:	4b7b      	ldr	r3, [pc, #492]	; (8004e48 <HAL_RCC_OscConfig+0x33c>)
 8004c5c:	681a      	ldr	r2, [r3, #0]
 8004c5e:	4b7a      	ldr	r3, [pc, #488]	; (8004e48 <HAL_RCC_OscConfig+0x33c>)
 8004c60:	2120      	movs	r1, #32
 8004c62:	430a      	orrs	r2, r1
 8004c64:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8004c66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c68:	2220      	movs	r2, #32
 8004c6a:	4393      	bics	r3, r2
 8004c6c:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004c6e:	69fb      	ldr	r3, [r7, #28]
 8004c70:	2b04      	cmp	r3, #4
 8004c72:	d005      	beq.n	8004c80 <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004c74:	69fb      	ldr	r3, [r7, #28]
 8004c76:	2b0c      	cmp	r3, #12
 8004c78:	d13e      	bne.n	8004cf8 <HAL_RCC_OscConfig+0x1ec>
 8004c7a:	69bb      	ldr	r3, [r7, #24]
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d13b      	bne.n	8004cf8 <HAL_RCC_OscConfig+0x1ec>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8004c80:	4b71      	ldr	r3, [pc, #452]	; (8004e48 <HAL_RCC_OscConfig+0x33c>)
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	2204      	movs	r2, #4
 8004c86:	4013      	ands	r3, r2
 8004c88:	d004      	beq.n	8004c94 <HAL_RCC_OscConfig+0x188>
 8004c8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d101      	bne.n	8004c94 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8004c90:	2301      	movs	r3, #1
 8004c92:	e304      	b.n	800529e <HAL_RCC_OscConfig+0x792>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c94:	4b6c      	ldr	r3, [pc, #432]	; (8004e48 <HAL_RCC_OscConfig+0x33c>)
 8004c96:	685b      	ldr	r3, [r3, #4]
 8004c98:	4a6e      	ldr	r2, [pc, #440]	; (8004e54 <HAL_RCC_OscConfig+0x348>)
 8004c9a:	4013      	ands	r3, r2
 8004c9c:	0019      	movs	r1, r3
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	691b      	ldr	r3, [r3, #16]
 8004ca2:	021a      	lsls	r2, r3, #8
 8004ca4:	4b68      	ldr	r3, [pc, #416]	; (8004e48 <HAL_RCC_OscConfig+0x33c>)
 8004ca6:	430a      	orrs	r2, r1
 8004ca8:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8004caa:	4b67      	ldr	r3, [pc, #412]	; (8004e48 <HAL_RCC_OscConfig+0x33c>)
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	2209      	movs	r2, #9
 8004cb0:	4393      	bics	r3, r2
 8004cb2:	0019      	movs	r1, r3
 8004cb4:	4b64      	ldr	r3, [pc, #400]	; (8004e48 <HAL_RCC_OscConfig+0x33c>)
 8004cb6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004cb8:	430a      	orrs	r2, r1
 8004cba:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004cbc:	f000 fc42 	bl	8005544 <HAL_RCC_GetSysClockFreq>
 8004cc0:	0001      	movs	r1, r0
 8004cc2:	4b61      	ldr	r3, [pc, #388]	; (8004e48 <HAL_RCC_OscConfig+0x33c>)
 8004cc4:	68db      	ldr	r3, [r3, #12]
 8004cc6:	091b      	lsrs	r3, r3, #4
 8004cc8:	220f      	movs	r2, #15
 8004cca:	4013      	ands	r3, r2
 8004ccc:	4a62      	ldr	r2, [pc, #392]	; (8004e58 <HAL_RCC_OscConfig+0x34c>)
 8004cce:	5cd3      	ldrb	r3, [r2, r3]
 8004cd0:	000a      	movs	r2, r1
 8004cd2:	40da      	lsrs	r2, r3
 8004cd4:	4b61      	ldr	r3, [pc, #388]	; (8004e5c <HAL_RCC_OscConfig+0x350>)
 8004cd6:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8004cd8:	4b61      	ldr	r3, [pc, #388]	; (8004e60 <HAL_RCC_OscConfig+0x354>)
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	2513      	movs	r5, #19
 8004cde:	197c      	adds	r4, r7, r5
 8004ce0:	0018      	movs	r0, r3
 8004ce2:	f7fe ff2f 	bl	8003b44 <HAL_InitTick>
 8004ce6:	0003      	movs	r3, r0
 8004ce8:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8004cea:	197b      	adds	r3, r7, r5
 8004cec:	781b      	ldrb	r3, [r3, #0]
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d046      	beq.n	8004d80 <HAL_RCC_OscConfig+0x274>
      {
        return status;
 8004cf2:	197b      	adds	r3, r7, r5
 8004cf4:	781b      	ldrb	r3, [r3, #0]
 8004cf6:	e2d2      	b.n	800529e <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8004cf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d027      	beq.n	8004d4e <HAL_RCC_OscConfig+0x242>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8004cfe:	4b52      	ldr	r3, [pc, #328]	; (8004e48 <HAL_RCC_OscConfig+0x33c>)
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	2209      	movs	r2, #9
 8004d04:	4393      	bics	r3, r2
 8004d06:	0019      	movs	r1, r3
 8004d08:	4b4f      	ldr	r3, [pc, #316]	; (8004e48 <HAL_RCC_OscConfig+0x33c>)
 8004d0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d0c:	430a      	orrs	r2, r1
 8004d0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d10:	f7fe ff5e 	bl	8003bd0 <HAL_GetTick>
 8004d14:	0003      	movs	r3, r0
 8004d16:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004d18:	e008      	b.n	8004d2c <HAL_RCC_OscConfig+0x220>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004d1a:	f7fe ff59 	bl	8003bd0 <HAL_GetTick>
 8004d1e:	0002      	movs	r2, r0
 8004d20:	697b      	ldr	r3, [r7, #20]
 8004d22:	1ad3      	subs	r3, r2, r3
 8004d24:	2b02      	cmp	r3, #2
 8004d26:	d901      	bls.n	8004d2c <HAL_RCC_OscConfig+0x220>
          {
            return HAL_TIMEOUT;
 8004d28:	2303      	movs	r3, #3
 8004d2a:	e2b8      	b.n	800529e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004d2c:	4b46      	ldr	r3, [pc, #280]	; (8004e48 <HAL_RCC_OscConfig+0x33c>)
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	2204      	movs	r2, #4
 8004d32:	4013      	ands	r3, r2
 8004d34:	d0f1      	beq.n	8004d1a <HAL_RCC_OscConfig+0x20e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d36:	4b44      	ldr	r3, [pc, #272]	; (8004e48 <HAL_RCC_OscConfig+0x33c>)
 8004d38:	685b      	ldr	r3, [r3, #4]
 8004d3a:	4a46      	ldr	r2, [pc, #280]	; (8004e54 <HAL_RCC_OscConfig+0x348>)
 8004d3c:	4013      	ands	r3, r2
 8004d3e:	0019      	movs	r1, r3
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	691b      	ldr	r3, [r3, #16]
 8004d44:	021a      	lsls	r2, r3, #8
 8004d46:	4b40      	ldr	r3, [pc, #256]	; (8004e48 <HAL_RCC_OscConfig+0x33c>)
 8004d48:	430a      	orrs	r2, r1
 8004d4a:	605a      	str	r2, [r3, #4]
 8004d4c:	e018      	b.n	8004d80 <HAL_RCC_OscConfig+0x274>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004d4e:	4b3e      	ldr	r3, [pc, #248]	; (8004e48 <HAL_RCC_OscConfig+0x33c>)
 8004d50:	681a      	ldr	r2, [r3, #0]
 8004d52:	4b3d      	ldr	r3, [pc, #244]	; (8004e48 <HAL_RCC_OscConfig+0x33c>)
 8004d54:	2101      	movs	r1, #1
 8004d56:	438a      	bics	r2, r1
 8004d58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d5a:	f7fe ff39 	bl	8003bd0 <HAL_GetTick>
 8004d5e:	0003      	movs	r3, r0
 8004d60:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004d62:	e008      	b.n	8004d76 <HAL_RCC_OscConfig+0x26a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004d64:	f7fe ff34 	bl	8003bd0 <HAL_GetTick>
 8004d68:	0002      	movs	r2, r0
 8004d6a:	697b      	ldr	r3, [r7, #20]
 8004d6c:	1ad3      	subs	r3, r2, r3
 8004d6e:	2b02      	cmp	r3, #2
 8004d70:	d901      	bls.n	8004d76 <HAL_RCC_OscConfig+0x26a>
          {
            return HAL_TIMEOUT;
 8004d72:	2303      	movs	r3, #3
 8004d74:	e293      	b.n	800529e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004d76:	4b34      	ldr	r3, [pc, #208]	; (8004e48 <HAL_RCC_OscConfig+0x33c>)
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	2204      	movs	r2, #4
 8004d7c:	4013      	ands	r3, r2
 8004d7e:	d1f1      	bne.n	8004d64 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	2210      	movs	r2, #16
 8004d86:	4013      	ands	r3, r2
 8004d88:	d100      	bne.n	8004d8c <HAL_RCC_OscConfig+0x280>
 8004d8a:	e0a2      	b.n	8004ed2 <HAL_RCC_OscConfig+0x3c6>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004d8c:	69fb      	ldr	r3, [r7, #28]
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d140      	bne.n	8004e14 <HAL_RCC_OscConfig+0x308>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004d92:	4b2d      	ldr	r3, [pc, #180]	; (8004e48 <HAL_RCC_OscConfig+0x33c>)
 8004d94:	681a      	ldr	r2, [r3, #0]
 8004d96:	2380      	movs	r3, #128	; 0x80
 8004d98:	009b      	lsls	r3, r3, #2
 8004d9a:	4013      	ands	r3, r2
 8004d9c:	d005      	beq.n	8004daa <HAL_RCC_OscConfig+0x29e>
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	69db      	ldr	r3, [r3, #28]
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d101      	bne.n	8004daa <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8004da6:	2301      	movs	r3, #1
 8004da8:	e279      	b.n	800529e <HAL_RCC_OscConfig+0x792>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004daa:	4b27      	ldr	r3, [pc, #156]	; (8004e48 <HAL_RCC_OscConfig+0x33c>)
 8004dac:	685b      	ldr	r3, [r3, #4]
 8004dae:	4a2d      	ldr	r2, [pc, #180]	; (8004e64 <HAL_RCC_OscConfig+0x358>)
 8004db0:	4013      	ands	r3, r2
 8004db2:	0019      	movs	r1, r3
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004db8:	4b23      	ldr	r3, [pc, #140]	; (8004e48 <HAL_RCC_OscConfig+0x33c>)
 8004dba:	430a      	orrs	r2, r1
 8004dbc:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004dbe:	4b22      	ldr	r3, [pc, #136]	; (8004e48 <HAL_RCC_OscConfig+0x33c>)
 8004dc0:	685b      	ldr	r3, [r3, #4]
 8004dc2:	021b      	lsls	r3, r3, #8
 8004dc4:	0a19      	lsrs	r1, r3, #8
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	6a1b      	ldr	r3, [r3, #32]
 8004dca:	061a      	lsls	r2, r3, #24
 8004dcc:	4b1e      	ldr	r3, [pc, #120]	; (8004e48 <HAL_RCC_OscConfig+0x33c>)
 8004dce:	430a      	orrs	r2, r1
 8004dd0:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dd6:	0b5b      	lsrs	r3, r3, #13
 8004dd8:	3301      	adds	r3, #1
 8004dda:	2280      	movs	r2, #128	; 0x80
 8004ddc:	0212      	lsls	r2, r2, #8
 8004dde:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8004de0:	4b19      	ldr	r3, [pc, #100]	; (8004e48 <HAL_RCC_OscConfig+0x33c>)
 8004de2:	68db      	ldr	r3, [r3, #12]
 8004de4:	091b      	lsrs	r3, r3, #4
 8004de6:	210f      	movs	r1, #15
 8004de8:	400b      	ands	r3, r1
 8004dea:	491b      	ldr	r1, [pc, #108]	; (8004e58 <HAL_RCC_OscConfig+0x34c>)
 8004dec:	5ccb      	ldrb	r3, [r1, r3]
 8004dee:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8004df0:	4b1a      	ldr	r3, [pc, #104]	; (8004e5c <HAL_RCC_OscConfig+0x350>)
 8004df2:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8004df4:	4b1a      	ldr	r3, [pc, #104]	; (8004e60 <HAL_RCC_OscConfig+0x354>)
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	2513      	movs	r5, #19
 8004dfa:	197c      	adds	r4, r7, r5
 8004dfc:	0018      	movs	r0, r3
 8004dfe:	f7fe fea1 	bl	8003b44 <HAL_InitTick>
 8004e02:	0003      	movs	r3, r0
 8004e04:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8004e06:	197b      	adds	r3, r7, r5
 8004e08:	781b      	ldrb	r3, [r3, #0]
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d061      	beq.n	8004ed2 <HAL_RCC_OscConfig+0x3c6>
        {
          return status;
 8004e0e:	197b      	adds	r3, r7, r5
 8004e10:	781b      	ldrb	r3, [r3, #0]
 8004e12:	e244      	b.n	800529e <HAL_RCC_OscConfig+0x792>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	69db      	ldr	r3, [r3, #28]
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d040      	beq.n	8004e9e <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004e1c:	4b0a      	ldr	r3, [pc, #40]	; (8004e48 <HAL_RCC_OscConfig+0x33c>)
 8004e1e:	681a      	ldr	r2, [r3, #0]
 8004e20:	4b09      	ldr	r3, [pc, #36]	; (8004e48 <HAL_RCC_OscConfig+0x33c>)
 8004e22:	2180      	movs	r1, #128	; 0x80
 8004e24:	0049      	lsls	r1, r1, #1
 8004e26:	430a      	orrs	r2, r1
 8004e28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e2a:	f7fe fed1 	bl	8003bd0 <HAL_GetTick>
 8004e2e:	0003      	movs	r3, r0
 8004e30:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8004e32:	e019      	b.n	8004e68 <HAL_RCC_OscConfig+0x35c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004e34:	f7fe fecc 	bl	8003bd0 <HAL_GetTick>
 8004e38:	0002      	movs	r2, r0
 8004e3a:	697b      	ldr	r3, [r7, #20]
 8004e3c:	1ad3      	subs	r3, r2, r3
 8004e3e:	2b02      	cmp	r3, #2
 8004e40:	d912      	bls.n	8004e68 <HAL_RCC_OscConfig+0x35c>
          {
            return HAL_TIMEOUT;
 8004e42:	2303      	movs	r3, #3
 8004e44:	e22b      	b.n	800529e <HAL_RCC_OscConfig+0x792>
 8004e46:	46c0      	nop			; (mov r8, r8)
 8004e48:	40021000 	.word	0x40021000
 8004e4c:	fffeffff 	.word	0xfffeffff
 8004e50:	fffbffff 	.word	0xfffbffff
 8004e54:	ffffe0ff 	.word	0xffffe0ff
 8004e58:	08008774 	.word	0x08008774
 8004e5c:	20000000 	.word	0x20000000
 8004e60:	20000004 	.word	0x20000004
 8004e64:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8004e68:	4bca      	ldr	r3, [pc, #808]	; (8005194 <HAL_RCC_OscConfig+0x688>)
 8004e6a:	681a      	ldr	r2, [r3, #0]
 8004e6c:	2380      	movs	r3, #128	; 0x80
 8004e6e:	009b      	lsls	r3, r3, #2
 8004e70:	4013      	ands	r3, r2
 8004e72:	d0df      	beq.n	8004e34 <HAL_RCC_OscConfig+0x328>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004e74:	4bc7      	ldr	r3, [pc, #796]	; (8005194 <HAL_RCC_OscConfig+0x688>)
 8004e76:	685b      	ldr	r3, [r3, #4]
 8004e78:	4ac7      	ldr	r2, [pc, #796]	; (8005198 <HAL_RCC_OscConfig+0x68c>)
 8004e7a:	4013      	ands	r3, r2
 8004e7c:	0019      	movs	r1, r3
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004e82:	4bc4      	ldr	r3, [pc, #784]	; (8005194 <HAL_RCC_OscConfig+0x688>)
 8004e84:	430a      	orrs	r2, r1
 8004e86:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004e88:	4bc2      	ldr	r3, [pc, #776]	; (8005194 <HAL_RCC_OscConfig+0x688>)
 8004e8a:	685b      	ldr	r3, [r3, #4]
 8004e8c:	021b      	lsls	r3, r3, #8
 8004e8e:	0a19      	lsrs	r1, r3, #8
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	6a1b      	ldr	r3, [r3, #32]
 8004e94:	061a      	lsls	r2, r3, #24
 8004e96:	4bbf      	ldr	r3, [pc, #764]	; (8005194 <HAL_RCC_OscConfig+0x688>)
 8004e98:	430a      	orrs	r2, r1
 8004e9a:	605a      	str	r2, [r3, #4]
 8004e9c:	e019      	b.n	8004ed2 <HAL_RCC_OscConfig+0x3c6>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004e9e:	4bbd      	ldr	r3, [pc, #756]	; (8005194 <HAL_RCC_OscConfig+0x688>)
 8004ea0:	681a      	ldr	r2, [r3, #0]
 8004ea2:	4bbc      	ldr	r3, [pc, #752]	; (8005194 <HAL_RCC_OscConfig+0x688>)
 8004ea4:	49bd      	ldr	r1, [pc, #756]	; (800519c <HAL_RCC_OscConfig+0x690>)
 8004ea6:	400a      	ands	r2, r1
 8004ea8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004eaa:	f7fe fe91 	bl	8003bd0 <HAL_GetTick>
 8004eae:	0003      	movs	r3, r0
 8004eb0:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8004eb2:	e008      	b.n	8004ec6 <HAL_RCC_OscConfig+0x3ba>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004eb4:	f7fe fe8c 	bl	8003bd0 <HAL_GetTick>
 8004eb8:	0002      	movs	r2, r0
 8004eba:	697b      	ldr	r3, [r7, #20]
 8004ebc:	1ad3      	subs	r3, r2, r3
 8004ebe:	2b02      	cmp	r3, #2
 8004ec0:	d901      	bls.n	8004ec6 <HAL_RCC_OscConfig+0x3ba>
          {
            return HAL_TIMEOUT;
 8004ec2:	2303      	movs	r3, #3
 8004ec4:	e1eb      	b.n	800529e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8004ec6:	4bb3      	ldr	r3, [pc, #716]	; (8005194 <HAL_RCC_OscConfig+0x688>)
 8004ec8:	681a      	ldr	r2, [r3, #0]
 8004eca:	2380      	movs	r3, #128	; 0x80
 8004ecc:	009b      	lsls	r3, r3, #2
 8004ece:	4013      	ands	r3, r2
 8004ed0:	d1f0      	bne.n	8004eb4 <HAL_RCC_OscConfig+0x3a8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	2208      	movs	r2, #8
 8004ed8:	4013      	ands	r3, r2
 8004eda:	d036      	beq.n	8004f4a <HAL_RCC_OscConfig+0x43e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	695b      	ldr	r3, [r3, #20]
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d019      	beq.n	8004f18 <HAL_RCC_OscConfig+0x40c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004ee4:	4bab      	ldr	r3, [pc, #684]	; (8005194 <HAL_RCC_OscConfig+0x688>)
 8004ee6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004ee8:	4baa      	ldr	r3, [pc, #680]	; (8005194 <HAL_RCC_OscConfig+0x688>)
 8004eea:	2101      	movs	r1, #1
 8004eec:	430a      	orrs	r2, r1
 8004eee:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004ef0:	f7fe fe6e 	bl	8003bd0 <HAL_GetTick>
 8004ef4:	0003      	movs	r3, r0
 8004ef6:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004ef8:	e008      	b.n	8004f0c <HAL_RCC_OscConfig+0x400>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004efa:	f7fe fe69 	bl	8003bd0 <HAL_GetTick>
 8004efe:	0002      	movs	r2, r0
 8004f00:	697b      	ldr	r3, [r7, #20]
 8004f02:	1ad3      	subs	r3, r2, r3
 8004f04:	2b02      	cmp	r3, #2
 8004f06:	d901      	bls.n	8004f0c <HAL_RCC_OscConfig+0x400>
        {
          return HAL_TIMEOUT;
 8004f08:	2303      	movs	r3, #3
 8004f0a:	e1c8      	b.n	800529e <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004f0c:	4ba1      	ldr	r3, [pc, #644]	; (8005194 <HAL_RCC_OscConfig+0x688>)
 8004f0e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f10:	2202      	movs	r2, #2
 8004f12:	4013      	ands	r3, r2
 8004f14:	d0f1      	beq.n	8004efa <HAL_RCC_OscConfig+0x3ee>
 8004f16:	e018      	b.n	8004f4a <HAL_RCC_OscConfig+0x43e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004f18:	4b9e      	ldr	r3, [pc, #632]	; (8005194 <HAL_RCC_OscConfig+0x688>)
 8004f1a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004f1c:	4b9d      	ldr	r3, [pc, #628]	; (8005194 <HAL_RCC_OscConfig+0x688>)
 8004f1e:	2101      	movs	r1, #1
 8004f20:	438a      	bics	r2, r1
 8004f22:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004f24:	f7fe fe54 	bl	8003bd0 <HAL_GetTick>
 8004f28:	0003      	movs	r3, r0
 8004f2a:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004f2c:	e008      	b.n	8004f40 <HAL_RCC_OscConfig+0x434>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004f2e:	f7fe fe4f 	bl	8003bd0 <HAL_GetTick>
 8004f32:	0002      	movs	r2, r0
 8004f34:	697b      	ldr	r3, [r7, #20]
 8004f36:	1ad3      	subs	r3, r2, r3
 8004f38:	2b02      	cmp	r3, #2
 8004f3a:	d901      	bls.n	8004f40 <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 8004f3c:	2303      	movs	r3, #3
 8004f3e:	e1ae      	b.n	800529e <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004f40:	4b94      	ldr	r3, [pc, #592]	; (8005194 <HAL_RCC_OscConfig+0x688>)
 8004f42:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f44:	2202      	movs	r2, #2
 8004f46:	4013      	ands	r3, r2
 8004f48:	d1f1      	bne.n	8004f2e <HAL_RCC_OscConfig+0x422>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	2204      	movs	r2, #4
 8004f50:	4013      	ands	r3, r2
 8004f52:	d100      	bne.n	8004f56 <HAL_RCC_OscConfig+0x44a>
 8004f54:	e0ae      	b.n	80050b4 <HAL_RCC_OscConfig+0x5a8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004f56:	2023      	movs	r0, #35	; 0x23
 8004f58:	183b      	adds	r3, r7, r0
 8004f5a:	2200      	movs	r2, #0
 8004f5c:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004f5e:	4b8d      	ldr	r3, [pc, #564]	; (8005194 <HAL_RCC_OscConfig+0x688>)
 8004f60:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004f62:	2380      	movs	r3, #128	; 0x80
 8004f64:	055b      	lsls	r3, r3, #21
 8004f66:	4013      	ands	r3, r2
 8004f68:	d109      	bne.n	8004f7e <HAL_RCC_OscConfig+0x472>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004f6a:	4b8a      	ldr	r3, [pc, #552]	; (8005194 <HAL_RCC_OscConfig+0x688>)
 8004f6c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004f6e:	4b89      	ldr	r3, [pc, #548]	; (8005194 <HAL_RCC_OscConfig+0x688>)
 8004f70:	2180      	movs	r1, #128	; 0x80
 8004f72:	0549      	lsls	r1, r1, #21
 8004f74:	430a      	orrs	r2, r1
 8004f76:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8004f78:	183b      	adds	r3, r7, r0
 8004f7a:	2201      	movs	r2, #1
 8004f7c:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f7e:	4b88      	ldr	r3, [pc, #544]	; (80051a0 <HAL_RCC_OscConfig+0x694>)
 8004f80:	681a      	ldr	r2, [r3, #0]
 8004f82:	2380      	movs	r3, #128	; 0x80
 8004f84:	005b      	lsls	r3, r3, #1
 8004f86:	4013      	ands	r3, r2
 8004f88:	d11a      	bne.n	8004fc0 <HAL_RCC_OscConfig+0x4b4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004f8a:	4b85      	ldr	r3, [pc, #532]	; (80051a0 <HAL_RCC_OscConfig+0x694>)
 8004f8c:	681a      	ldr	r2, [r3, #0]
 8004f8e:	4b84      	ldr	r3, [pc, #528]	; (80051a0 <HAL_RCC_OscConfig+0x694>)
 8004f90:	2180      	movs	r1, #128	; 0x80
 8004f92:	0049      	lsls	r1, r1, #1
 8004f94:	430a      	orrs	r2, r1
 8004f96:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004f98:	f7fe fe1a 	bl	8003bd0 <HAL_GetTick>
 8004f9c:	0003      	movs	r3, r0
 8004f9e:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004fa0:	e008      	b.n	8004fb4 <HAL_RCC_OscConfig+0x4a8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004fa2:	f7fe fe15 	bl	8003bd0 <HAL_GetTick>
 8004fa6:	0002      	movs	r2, r0
 8004fa8:	697b      	ldr	r3, [r7, #20]
 8004faa:	1ad3      	subs	r3, r2, r3
 8004fac:	2b64      	cmp	r3, #100	; 0x64
 8004fae:	d901      	bls.n	8004fb4 <HAL_RCC_OscConfig+0x4a8>
        {
          return HAL_TIMEOUT;
 8004fb0:	2303      	movs	r3, #3
 8004fb2:	e174      	b.n	800529e <HAL_RCC_OscConfig+0x792>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004fb4:	4b7a      	ldr	r3, [pc, #488]	; (80051a0 <HAL_RCC_OscConfig+0x694>)
 8004fb6:	681a      	ldr	r2, [r3, #0]
 8004fb8:	2380      	movs	r3, #128	; 0x80
 8004fba:	005b      	lsls	r3, r3, #1
 8004fbc:	4013      	ands	r3, r2
 8004fbe:	d0f0      	beq.n	8004fa2 <HAL_RCC_OscConfig+0x496>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	689a      	ldr	r2, [r3, #8]
 8004fc4:	2380      	movs	r3, #128	; 0x80
 8004fc6:	005b      	lsls	r3, r3, #1
 8004fc8:	429a      	cmp	r2, r3
 8004fca:	d107      	bne.n	8004fdc <HAL_RCC_OscConfig+0x4d0>
 8004fcc:	4b71      	ldr	r3, [pc, #452]	; (8005194 <HAL_RCC_OscConfig+0x688>)
 8004fce:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004fd0:	4b70      	ldr	r3, [pc, #448]	; (8005194 <HAL_RCC_OscConfig+0x688>)
 8004fd2:	2180      	movs	r1, #128	; 0x80
 8004fd4:	0049      	lsls	r1, r1, #1
 8004fd6:	430a      	orrs	r2, r1
 8004fd8:	651a      	str	r2, [r3, #80]	; 0x50
 8004fda:	e031      	b.n	8005040 <HAL_RCC_OscConfig+0x534>
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	689b      	ldr	r3, [r3, #8]
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d10c      	bne.n	8004ffe <HAL_RCC_OscConfig+0x4f2>
 8004fe4:	4b6b      	ldr	r3, [pc, #428]	; (8005194 <HAL_RCC_OscConfig+0x688>)
 8004fe6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004fe8:	4b6a      	ldr	r3, [pc, #424]	; (8005194 <HAL_RCC_OscConfig+0x688>)
 8004fea:	496c      	ldr	r1, [pc, #432]	; (800519c <HAL_RCC_OscConfig+0x690>)
 8004fec:	400a      	ands	r2, r1
 8004fee:	651a      	str	r2, [r3, #80]	; 0x50
 8004ff0:	4b68      	ldr	r3, [pc, #416]	; (8005194 <HAL_RCC_OscConfig+0x688>)
 8004ff2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004ff4:	4b67      	ldr	r3, [pc, #412]	; (8005194 <HAL_RCC_OscConfig+0x688>)
 8004ff6:	496b      	ldr	r1, [pc, #428]	; (80051a4 <HAL_RCC_OscConfig+0x698>)
 8004ff8:	400a      	ands	r2, r1
 8004ffa:	651a      	str	r2, [r3, #80]	; 0x50
 8004ffc:	e020      	b.n	8005040 <HAL_RCC_OscConfig+0x534>
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	689a      	ldr	r2, [r3, #8]
 8005002:	23a0      	movs	r3, #160	; 0xa0
 8005004:	00db      	lsls	r3, r3, #3
 8005006:	429a      	cmp	r2, r3
 8005008:	d10e      	bne.n	8005028 <HAL_RCC_OscConfig+0x51c>
 800500a:	4b62      	ldr	r3, [pc, #392]	; (8005194 <HAL_RCC_OscConfig+0x688>)
 800500c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800500e:	4b61      	ldr	r3, [pc, #388]	; (8005194 <HAL_RCC_OscConfig+0x688>)
 8005010:	2180      	movs	r1, #128	; 0x80
 8005012:	00c9      	lsls	r1, r1, #3
 8005014:	430a      	orrs	r2, r1
 8005016:	651a      	str	r2, [r3, #80]	; 0x50
 8005018:	4b5e      	ldr	r3, [pc, #376]	; (8005194 <HAL_RCC_OscConfig+0x688>)
 800501a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800501c:	4b5d      	ldr	r3, [pc, #372]	; (8005194 <HAL_RCC_OscConfig+0x688>)
 800501e:	2180      	movs	r1, #128	; 0x80
 8005020:	0049      	lsls	r1, r1, #1
 8005022:	430a      	orrs	r2, r1
 8005024:	651a      	str	r2, [r3, #80]	; 0x50
 8005026:	e00b      	b.n	8005040 <HAL_RCC_OscConfig+0x534>
 8005028:	4b5a      	ldr	r3, [pc, #360]	; (8005194 <HAL_RCC_OscConfig+0x688>)
 800502a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800502c:	4b59      	ldr	r3, [pc, #356]	; (8005194 <HAL_RCC_OscConfig+0x688>)
 800502e:	495b      	ldr	r1, [pc, #364]	; (800519c <HAL_RCC_OscConfig+0x690>)
 8005030:	400a      	ands	r2, r1
 8005032:	651a      	str	r2, [r3, #80]	; 0x50
 8005034:	4b57      	ldr	r3, [pc, #348]	; (8005194 <HAL_RCC_OscConfig+0x688>)
 8005036:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005038:	4b56      	ldr	r3, [pc, #344]	; (8005194 <HAL_RCC_OscConfig+0x688>)
 800503a:	495a      	ldr	r1, [pc, #360]	; (80051a4 <HAL_RCC_OscConfig+0x698>)
 800503c:	400a      	ands	r2, r1
 800503e:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	689b      	ldr	r3, [r3, #8]
 8005044:	2b00      	cmp	r3, #0
 8005046:	d015      	beq.n	8005074 <HAL_RCC_OscConfig+0x568>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005048:	f7fe fdc2 	bl	8003bd0 <HAL_GetTick>
 800504c:	0003      	movs	r3, r0
 800504e:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005050:	e009      	b.n	8005066 <HAL_RCC_OscConfig+0x55a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005052:	f7fe fdbd 	bl	8003bd0 <HAL_GetTick>
 8005056:	0002      	movs	r2, r0
 8005058:	697b      	ldr	r3, [r7, #20]
 800505a:	1ad3      	subs	r3, r2, r3
 800505c:	4a52      	ldr	r2, [pc, #328]	; (80051a8 <HAL_RCC_OscConfig+0x69c>)
 800505e:	4293      	cmp	r3, r2
 8005060:	d901      	bls.n	8005066 <HAL_RCC_OscConfig+0x55a>
        {
          return HAL_TIMEOUT;
 8005062:	2303      	movs	r3, #3
 8005064:	e11b      	b.n	800529e <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005066:	4b4b      	ldr	r3, [pc, #300]	; (8005194 <HAL_RCC_OscConfig+0x688>)
 8005068:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800506a:	2380      	movs	r3, #128	; 0x80
 800506c:	009b      	lsls	r3, r3, #2
 800506e:	4013      	ands	r3, r2
 8005070:	d0ef      	beq.n	8005052 <HAL_RCC_OscConfig+0x546>
 8005072:	e014      	b.n	800509e <HAL_RCC_OscConfig+0x592>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005074:	f7fe fdac 	bl	8003bd0 <HAL_GetTick>
 8005078:	0003      	movs	r3, r0
 800507a:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800507c:	e009      	b.n	8005092 <HAL_RCC_OscConfig+0x586>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800507e:	f7fe fda7 	bl	8003bd0 <HAL_GetTick>
 8005082:	0002      	movs	r2, r0
 8005084:	697b      	ldr	r3, [r7, #20]
 8005086:	1ad3      	subs	r3, r2, r3
 8005088:	4a47      	ldr	r2, [pc, #284]	; (80051a8 <HAL_RCC_OscConfig+0x69c>)
 800508a:	4293      	cmp	r3, r2
 800508c:	d901      	bls.n	8005092 <HAL_RCC_OscConfig+0x586>
        {
          return HAL_TIMEOUT;
 800508e:	2303      	movs	r3, #3
 8005090:	e105      	b.n	800529e <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005092:	4b40      	ldr	r3, [pc, #256]	; (8005194 <HAL_RCC_OscConfig+0x688>)
 8005094:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005096:	2380      	movs	r3, #128	; 0x80
 8005098:	009b      	lsls	r3, r3, #2
 800509a:	4013      	ands	r3, r2
 800509c:	d1ef      	bne.n	800507e <HAL_RCC_OscConfig+0x572>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800509e:	2323      	movs	r3, #35	; 0x23
 80050a0:	18fb      	adds	r3, r7, r3
 80050a2:	781b      	ldrb	r3, [r3, #0]
 80050a4:	2b01      	cmp	r3, #1
 80050a6:	d105      	bne.n	80050b4 <HAL_RCC_OscConfig+0x5a8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80050a8:	4b3a      	ldr	r3, [pc, #232]	; (8005194 <HAL_RCC_OscConfig+0x688>)
 80050aa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80050ac:	4b39      	ldr	r3, [pc, #228]	; (8005194 <HAL_RCC_OscConfig+0x688>)
 80050ae:	493f      	ldr	r1, [pc, #252]	; (80051ac <HAL_RCC_OscConfig+0x6a0>)
 80050b0:	400a      	ands	r2, r1
 80050b2:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	2220      	movs	r2, #32
 80050ba:	4013      	ands	r3, r2
 80050bc:	d049      	beq.n	8005152 <HAL_RCC_OscConfig+0x646>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	699b      	ldr	r3, [r3, #24]
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d026      	beq.n	8005114 <HAL_RCC_OscConfig+0x608>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 80050c6:	4b33      	ldr	r3, [pc, #204]	; (8005194 <HAL_RCC_OscConfig+0x688>)
 80050c8:	689a      	ldr	r2, [r3, #8]
 80050ca:	4b32      	ldr	r3, [pc, #200]	; (8005194 <HAL_RCC_OscConfig+0x688>)
 80050cc:	2101      	movs	r1, #1
 80050ce:	430a      	orrs	r2, r1
 80050d0:	609a      	str	r2, [r3, #8]
 80050d2:	4b30      	ldr	r3, [pc, #192]	; (8005194 <HAL_RCC_OscConfig+0x688>)
 80050d4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80050d6:	4b2f      	ldr	r3, [pc, #188]	; (8005194 <HAL_RCC_OscConfig+0x688>)
 80050d8:	2101      	movs	r1, #1
 80050da:	430a      	orrs	r2, r1
 80050dc:	635a      	str	r2, [r3, #52]	; 0x34
 80050de:	4b34      	ldr	r3, [pc, #208]	; (80051b0 <HAL_RCC_OscConfig+0x6a4>)
 80050e0:	6a1a      	ldr	r2, [r3, #32]
 80050e2:	4b33      	ldr	r3, [pc, #204]	; (80051b0 <HAL_RCC_OscConfig+0x6a4>)
 80050e4:	2180      	movs	r1, #128	; 0x80
 80050e6:	0189      	lsls	r1, r1, #6
 80050e8:	430a      	orrs	r2, r1
 80050ea:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80050ec:	f7fe fd70 	bl	8003bd0 <HAL_GetTick>
 80050f0:	0003      	movs	r3, r0
 80050f2:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80050f4:	e008      	b.n	8005108 <HAL_RCC_OscConfig+0x5fc>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80050f6:	f7fe fd6b 	bl	8003bd0 <HAL_GetTick>
 80050fa:	0002      	movs	r2, r0
 80050fc:	697b      	ldr	r3, [r7, #20]
 80050fe:	1ad3      	subs	r3, r2, r3
 8005100:	2b02      	cmp	r3, #2
 8005102:	d901      	bls.n	8005108 <HAL_RCC_OscConfig+0x5fc>
          {
            return HAL_TIMEOUT;
 8005104:	2303      	movs	r3, #3
 8005106:	e0ca      	b.n	800529e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005108:	4b22      	ldr	r3, [pc, #136]	; (8005194 <HAL_RCC_OscConfig+0x688>)
 800510a:	689b      	ldr	r3, [r3, #8]
 800510c:	2202      	movs	r2, #2
 800510e:	4013      	ands	r3, r2
 8005110:	d0f1      	beq.n	80050f6 <HAL_RCC_OscConfig+0x5ea>
 8005112:	e01e      	b.n	8005152 <HAL_RCC_OscConfig+0x646>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8005114:	4b1f      	ldr	r3, [pc, #124]	; (8005194 <HAL_RCC_OscConfig+0x688>)
 8005116:	689a      	ldr	r2, [r3, #8]
 8005118:	4b1e      	ldr	r3, [pc, #120]	; (8005194 <HAL_RCC_OscConfig+0x688>)
 800511a:	2101      	movs	r1, #1
 800511c:	438a      	bics	r2, r1
 800511e:	609a      	str	r2, [r3, #8]
 8005120:	4b23      	ldr	r3, [pc, #140]	; (80051b0 <HAL_RCC_OscConfig+0x6a4>)
 8005122:	6a1a      	ldr	r2, [r3, #32]
 8005124:	4b22      	ldr	r3, [pc, #136]	; (80051b0 <HAL_RCC_OscConfig+0x6a4>)
 8005126:	4923      	ldr	r1, [pc, #140]	; (80051b4 <HAL_RCC_OscConfig+0x6a8>)
 8005128:	400a      	ands	r2, r1
 800512a:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800512c:	f7fe fd50 	bl	8003bd0 <HAL_GetTick>
 8005130:	0003      	movs	r3, r0
 8005132:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005134:	e008      	b.n	8005148 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005136:	f7fe fd4b 	bl	8003bd0 <HAL_GetTick>
 800513a:	0002      	movs	r2, r0
 800513c:	697b      	ldr	r3, [r7, #20]
 800513e:	1ad3      	subs	r3, r2, r3
 8005140:	2b02      	cmp	r3, #2
 8005142:	d901      	bls.n	8005148 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 8005144:	2303      	movs	r3, #3
 8005146:	e0aa      	b.n	800529e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005148:	4b12      	ldr	r3, [pc, #72]	; (8005194 <HAL_RCC_OscConfig+0x688>)
 800514a:	689b      	ldr	r3, [r3, #8]
 800514c:	2202      	movs	r2, #2
 800514e:	4013      	ands	r3, r2
 8005150:	d1f1      	bne.n	8005136 <HAL_RCC_OscConfig+0x62a>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005156:	2b00      	cmp	r3, #0
 8005158:	d100      	bne.n	800515c <HAL_RCC_OscConfig+0x650>
 800515a:	e09f      	b.n	800529c <HAL_RCC_OscConfig+0x790>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800515c:	69fb      	ldr	r3, [r7, #28]
 800515e:	2b0c      	cmp	r3, #12
 8005160:	d100      	bne.n	8005164 <HAL_RCC_OscConfig+0x658>
 8005162:	e078      	b.n	8005256 <HAL_RCC_OscConfig+0x74a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005168:	2b02      	cmp	r3, #2
 800516a:	d159      	bne.n	8005220 <HAL_RCC_OscConfig+0x714>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800516c:	4b09      	ldr	r3, [pc, #36]	; (8005194 <HAL_RCC_OscConfig+0x688>)
 800516e:	681a      	ldr	r2, [r3, #0]
 8005170:	4b08      	ldr	r3, [pc, #32]	; (8005194 <HAL_RCC_OscConfig+0x688>)
 8005172:	4911      	ldr	r1, [pc, #68]	; (80051b8 <HAL_RCC_OscConfig+0x6ac>)
 8005174:	400a      	ands	r2, r1
 8005176:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005178:	f7fe fd2a 	bl	8003bd0 <HAL_GetTick>
 800517c:	0003      	movs	r3, r0
 800517e:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8005180:	e01c      	b.n	80051bc <HAL_RCC_OscConfig+0x6b0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005182:	f7fe fd25 	bl	8003bd0 <HAL_GetTick>
 8005186:	0002      	movs	r2, r0
 8005188:	697b      	ldr	r3, [r7, #20]
 800518a:	1ad3      	subs	r3, r2, r3
 800518c:	2b02      	cmp	r3, #2
 800518e:	d915      	bls.n	80051bc <HAL_RCC_OscConfig+0x6b0>
          {
            return HAL_TIMEOUT;
 8005190:	2303      	movs	r3, #3
 8005192:	e084      	b.n	800529e <HAL_RCC_OscConfig+0x792>
 8005194:	40021000 	.word	0x40021000
 8005198:	ffff1fff 	.word	0xffff1fff
 800519c:	fffffeff 	.word	0xfffffeff
 80051a0:	40007000 	.word	0x40007000
 80051a4:	fffffbff 	.word	0xfffffbff
 80051a8:	00001388 	.word	0x00001388
 80051ac:	efffffff 	.word	0xefffffff
 80051b0:	40010000 	.word	0x40010000
 80051b4:	ffffdfff 	.word	0xffffdfff
 80051b8:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80051bc:	4b3a      	ldr	r3, [pc, #232]	; (80052a8 <HAL_RCC_OscConfig+0x79c>)
 80051be:	681a      	ldr	r2, [r3, #0]
 80051c0:	2380      	movs	r3, #128	; 0x80
 80051c2:	049b      	lsls	r3, r3, #18
 80051c4:	4013      	ands	r3, r2
 80051c6:	d1dc      	bne.n	8005182 <HAL_RCC_OscConfig+0x676>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80051c8:	4b37      	ldr	r3, [pc, #220]	; (80052a8 <HAL_RCC_OscConfig+0x79c>)
 80051ca:	68db      	ldr	r3, [r3, #12]
 80051cc:	4a37      	ldr	r2, [pc, #220]	; (80052ac <HAL_RCC_OscConfig+0x7a0>)
 80051ce:	4013      	ands	r3, r2
 80051d0:	0019      	movs	r1, r3
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051da:	431a      	orrs	r2, r3
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051e0:	431a      	orrs	r2, r3
 80051e2:	4b31      	ldr	r3, [pc, #196]	; (80052a8 <HAL_RCC_OscConfig+0x79c>)
 80051e4:	430a      	orrs	r2, r1
 80051e6:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80051e8:	4b2f      	ldr	r3, [pc, #188]	; (80052a8 <HAL_RCC_OscConfig+0x79c>)
 80051ea:	681a      	ldr	r2, [r3, #0]
 80051ec:	4b2e      	ldr	r3, [pc, #184]	; (80052a8 <HAL_RCC_OscConfig+0x79c>)
 80051ee:	2180      	movs	r1, #128	; 0x80
 80051f0:	0449      	lsls	r1, r1, #17
 80051f2:	430a      	orrs	r2, r1
 80051f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80051f6:	f7fe fceb 	bl	8003bd0 <HAL_GetTick>
 80051fa:	0003      	movs	r3, r0
 80051fc:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80051fe:	e008      	b.n	8005212 <HAL_RCC_OscConfig+0x706>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005200:	f7fe fce6 	bl	8003bd0 <HAL_GetTick>
 8005204:	0002      	movs	r2, r0
 8005206:	697b      	ldr	r3, [r7, #20]
 8005208:	1ad3      	subs	r3, r2, r3
 800520a:	2b02      	cmp	r3, #2
 800520c:	d901      	bls.n	8005212 <HAL_RCC_OscConfig+0x706>
          {
            return HAL_TIMEOUT;
 800520e:	2303      	movs	r3, #3
 8005210:	e045      	b.n	800529e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8005212:	4b25      	ldr	r3, [pc, #148]	; (80052a8 <HAL_RCC_OscConfig+0x79c>)
 8005214:	681a      	ldr	r2, [r3, #0]
 8005216:	2380      	movs	r3, #128	; 0x80
 8005218:	049b      	lsls	r3, r3, #18
 800521a:	4013      	ands	r3, r2
 800521c:	d0f0      	beq.n	8005200 <HAL_RCC_OscConfig+0x6f4>
 800521e:	e03d      	b.n	800529c <HAL_RCC_OscConfig+0x790>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005220:	4b21      	ldr	r3, [pc, #132]	; (80052a8 <HAL_RCC_OscConfig+0x79c>)
 8005222:	681a      	ldr	r2, [r3, #0]
 8005224:	4b20      	ldr	r3, [pc, #128]	; (80052a8 <HAL_RCC_OscConfig+0x79c>)
 8005226:	4922      	ldr	r1, [pc, #136]	; (80052b0 <HAL_RCC_OscConfig+0x7a4>)
 8005228:	400a      	ands	r2, r1
 800522a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800522c:	f7fe fcd0 	bl	8003bd0 <HAL_GetTick>
 8005230:	0003      	movs	r3, r0
 8005232:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8005234:	e008      	b.n	8005248 <HAL_RCC_OscConfig+0x73c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005236:	f7fe fccb 	bl	8003bd0 <HAL_GetTick>
 800523a:	0002      	movs	r2, r0
 800523c:	697b      	ldr	r3, [r7, #20]
 800523e:	1ad3      	subs	r3, r2, r3
 8005240:	2b02      	cmp	r3, #2
 8005242:	d901      	bls.n	8005248 <HAL_RCC_OscConfig+0x73c>
          {
            return HAL_TIMEOUT;
 8005244:	2303      	movs	r3, #3
 8005246:	e02a      	b.n	800529e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8005248:	4b17      	ldr	r3, [pc, #92]	; (80052a8 <HAL_RCC_OscConfig+0x79c>)
 800524a:	681a      	ldr	r2, [r3, #0]
 800524c:	2380      	movs	r3, #128	; 0x80
 800524e:	049b      	lsls	r3, r3, #18
 8005250:	4013      	ands	r3, r2
 8005252:	d1f0      	bne.n	8005236 <HAL_RCC_OscConfig+0x72a>
 8005254:	e022      	b.n	800529c <HAL_RCC_OscConfig+0x790>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800525a:	2b01      	cmp	r3, #1
 800525c:	d101      	bne.n	8005262 <HAL_RCC_OscConfig+0x756>
      {
        return HAL_ERROR;
 800525e:	2301      	movs	r3, #1
 8005260:	e01d      	b.n	800529e <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005262:	4b11      	ldr	r3, [pc, #68]	; (80052a8 <HAL_RCC_OscConfig+0x79c>)
 8005264:	68db      	ldr	r3, [r3, #12]
 8005266:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005268:	69ba      	ldr	r2, [r7, #24]
 800526a:	2380      	movs	r3, #128	; 0x80
 800526c:	025b      	lsls	r3, r3, #9
 800526e:	401a      	ands	r2, r3
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005274:	429a      	cmp	r2, r3
 8005276:	d10f      	bne.n	8005298 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8005278:	69ba      	ldr	r2, [r7, #24]
 800527a:	23f0      	movs	r3, #240	; 0xf0
 800527c:	039b      	lsls	r3, r3, #14
 800527e:	401a      	ands	r2, r3
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005284:	429a      	cmp	r2, r3
 8005286:	d107      	bne.n	8005298 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8005288:	69ba      	ldr	r2, [r7, #24]
 800528a:	23c0      	movs	r3, #192	; 0xc0
 800528c:	041b      	lsls	r3, r3, #16
 800528e:	401a      	ands	r2, r3
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8005294:	429a      	cmp	r2, r3
 8005296:	d001      	beq.n	800529c <HAL_RCC_OscConfig+0x790>
        {
          return HAL_ERROR;
 8005298:	2301      	movs	r3, #1
 800529a:	e000      	b.n	800529e <HAL_RCC_OscConfig+0x792>
        }
      }
    }
  }
  return HAL_OK;
 800529c:	2300      	movs	r3, #0
}
 800529e:	0018      	movs	r0, r3
 80052a0:	46bd      	mov	sp, r7
 80052a2:	b00a      	add	sp, #40	; 0x28
 80052a4:	bdb0      	pop	{r4, r5, r7, pc}
 80052a6:	46c0      	nop			; (mov r8, r8)
 80052a8:	40021000 	.word	0x40021000
 80052ac:	ff02ffff 	.word	0xff02ffff
 80052b0:	feffffff 	.word	0xfeffffff

080052b4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80052b4:	b5b0      	push	{r4, r5, r7, lr}
 80052b6:	b084      	sub	sp, #16
 80052b8:	af00      	add	r7, sp, #0
 80052ba:	6078      	str	r0, [r7, #4]
 80052bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d101      	bne.n	80052c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80052c4:	2301      	movs	r3, #1
 80052c6:	e128      	b.n	800551a <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80052c8:	4b96      	ldr	r3, [pc, #600]	; (8005524 <HAL_RCC_ClockConfig+0x270>)
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	2201      	movs	r2, #1
 80052ce:	4013      	ands	r3, r2
 80052d0:	683a      	ldr	r2, [r7, #0]
 80052d2:	429a      	cmp	r2, r3
 80052d4:	d91e      	bls.n	8005314 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80052d6:	4b93      	ldr	r3, [pc, #588]	; (8005524 <HAL_RCC_ClockConfig+0x270>)
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	2201      	movs	r2, #1
 80052dc:	4393      	bics	r3, r2
 80052de:	0019      	movs	r1, r3
 80052e0:	4b90      	ldr	r3, [pc, #576]	; (8005524 <HAL_RCC_ClockConfig+0x270>)
 80052e2:	683a      	ldr	r2, [r7, #0]
 80052e4:	430a      	orrs	r2, r1
 80052e6:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80052e8:	f7fe fc72 	bl	8003bd0 <HAL_GetTick>
 80052ec:	0003      	movs	r3, r0
 80052ee:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80052f0:	e009      	b.n	8005306 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80052f2:	f7fe fc6d 	bl	8003bd0 <HAL_GetTick>
 80052f6:	0002      	movs	r2, r0
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	1ad3      	subs	r3, r2, r3
 80052fc:	4a8a      	ldr	r2, [pc, #552]	; (8005528 <HAL_RCC_ClockConfig+0x274>)
 80052fe:	4293      	cmp	r3, r2
 8005300:	d901      	bls.n	8005306 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8005302:	2303      	movs	r3, #3
 8005304:	e109      	b.n	800551a <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005306:	4b87      	ldr	r3, [pc, #540]	; (8005524 <HAL_RCC_ClockConfig+0x270>)
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	2201      	movs	r2, #1
 800530c:	4013      	ands	r3, r2
 800530e:	683a      	ldr	r2, [r7, #0]
 8005310:	429a      	cmp	r2, r3
 8005312:	d1ee      	bne.n	80052f2 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	2202      	movs	r2, #2
 800531a:	4013      	ands	r3, r2
 800531c:	d009      	beq.n	8005332 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800531e:	4b83      	ldr	r3, [pc, #524]	; (800552c <HAL_RCC_ClockConfig+0x278>)
 8005320:	68db      	ldr	r3, [r3, #12]
 8005322:	22f0      	movs	r2, #240	; 0xf0
 8005324:	4393      	bics	r3, r2
 8005326:	0019      	movs	r1, r3
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	689a      	ldr	r2, [r3, #8]
 800532c:	4b7f      	ldr	r3, [pc, #508]	; (800552c <HAL_RCC_ClockConfig+0x278>)
 800532e:	430a      	orrs	r2, r1
 8005330:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	2201      	movs	r2, #1
 8005338:	4013      	ands	r3, r2
 800533a:	d100      	bne.n	800533e <HAL_RCC_ClockConfig+0x8a>
 800533c:	e089      	b.n	8005452 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	685b      	ldr	r3, [r3, #4]
 8005342:	2b02      	cmp	r3, #2
 8005344:	d107      	bne.n	8005356 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005346:	4b79      	ldr	r3, [pc, #484]	; (800552c <HAL_RCC_ClockConfig+0x278>)
 8005348:	681a      	ldr	r2, [r3, #0]
 800534a:	2380      	movs	r3, #128	; 0x80
 800534c:	029b      	lsls	r3, r3, #10
 800534e:	4013      	ands	r3, r2
 8005350:	d120      	bne.n	8005394 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8005352:	2301      	movs	r3, #1
 8005354:	e0e1      	b.n	800551a <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	685b      	ldr	r3, [r3, #4]
 800535a:	2b03      	cmp	r3, #3
 800535c:	d107      	bne.n	800536e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800535e:	4b73      	ldr	r3, [pc, #460]	; (800552c <HAL_RCC_ClockConfig+0x278>)
 8005360:	681a      	ldr	r2, [r3, #0]
 8005362:	2380      	movs	r3, #128	; 0x80
 8005364:	049b      	lsls	r3, r3, #18
 8005366:	4013      	ands	r3, r2
 8005368:	d114      	bne.n	8005394 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800536a:	2301      	movs	r3, #1
 800536c:	e0d5      	b.n	800551a <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	685b      	ldr	r3, [r3, #4]
 8005372:	2b01      	cmp	r3, #1
 8005374:	d106      	bne.n	8005384 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005376:	4b6d      	ldr	r3, [pc, #436]	; (800552c <HAL_RCC_ClockConfig+0x278>)
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	2204      	movs	r2, #4
 800537c:	4013      	ands	r3, r2
 800537e:	d109      	bne.n	8005394 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8005380:	2301      	movs	r3, #1
 8005382:	e0ca      	b.n	800551a <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8005384:	4b69      	ldr	r3, [pc, #420]	; (800552c <HAL_RCC_ClockConfig+0x278>)
 8005386:	681a      	ldr	r2, [r3, #0]
 8005388:	2380      	movs	r3, #128	; 0x80
 800538a:	009b      	lsls	r3, r3, #2
 800538c:	4013      	ands	r3, r2
 800538e:	d101      	bne.n	8005394 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8005390:	2301      	movs	r3, #1
 8005392:	e0c2      	b.n	800551a <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005394:	4b65      	ldr	r3, [pc, #404]	; (800552c <HAL_RCC_ClockConfig+0x278>)
 8005396:	68db      	ldr	r3, [r3, #12]
 8005398:	2203      	movs	r2, #3
 800539a:	4393      	bics	r3, r2
 800539c:	0019      	movs	r1, r3
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	685a      	ldr	r2, [r3, #4]
 80053a2:	4b62      	ldr	r3, [pc, #392]	; (800552c <HAL_RCC_ClockConfig+0x278>)
 80053a4:	430a      	orrs	r2, r1
 80053a6:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80053a8:	f7fe fc12 	bl	8003bd0 <HAL_GetTick>
 80053ac:	0003      	movs	r3, r0
 80053ae:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	685b      	ldr	r3, [r3, #4]
 80053b4:	2b02      	cmp	r3, #2
 80053b6:	d111      	bne.n	80053dc <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80053b8:	e009      	b.n	80053ce <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80053ba:	f7fe fc09 	bl	8003bd0 <HAL_GetTick>
 80053be:	0002      	movs	r2, r0
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	1ad3      	subs	r3, r2, r3
 80053c4:	4a58      	ldr	r2, [pc, #352]	; (8005528 <HAL_RCC_ClockConfig+0x274>)
 80053c6:	4293      	cmp	r3, r2
 80053c8:	d901      	bls.n	80053ce <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 80053ca:	2303      	movs	r3, #3
 80053cc:	e0a5      	b.n	800551a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80053ce:	4b57      	ldr	r3, [pc, #348]	; (800552c <HAL_RCC_ClockConfig+0x278>)
 80053d0:	68db      	ldr	r3, [r3, #12]
 80053d2:	220c      	movs	r2, #12
 80053d4:	4013      	ands	r3, r2
 80053d6:	2b08      	cmp	r3, #8
 80053d8:	d1ef      	bne.n	80053ba <HAL_RCC_ClockConfig+0x106>
 80053da:	e03a      	b.n	8005452 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	685b      	ldr	r3, [r3, #4]
 80053e0:	2b03      	cmp	r3, #3
 80053e2:	d111      	bne.n	8005408 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80053e4:	e009      	b.n	80053fa <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80053e6:	f7fe fbf3 	bl	8003bd0 <HAL_GetTick>
 80053ea:	0002      	movs	r2, r0
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	1ad3      	subs	r3, r2, r3
 80053f0:	4a4d      	ldr	r2, [pc, #308]	; (8005528 <HAL_RCC_ClockConfig+0x274>)
 80053f2:	4293      	cmp	r3, r2
 80053f4:	d901      	bls.n	80053fa <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 80053f6:	2303      	movs	r3, #3
 80053f8:	e08f      	b.n	800551a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80053fa:	4b4c      	ldr	r3, [pc, #304]	; (800552c <HAL_RCC_ClockConfig+0x278>)
 80053fc:	68db      	ldr	r3, [r3, #12]
 80053fe:	220c      	movs	r2, #12
 8005400:	4013      	ands	r3, r2
 8005402:	2b0c      	cmp	r3, #12
 8005404:	d1ef      	bne.n	80053e6 <HAL_RCC_ClockConfig+0x132>
 8005406:	e024      	b.n	8005452 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	685b      	ldr	r3, [r3, #4]
 800540c:	2b01      	cmp	r3, #1
 800540e:	d11b      	bne.n	8005448 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8005410:	e009      	b.n	8005426 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005412:	f7fe fbdd 	bl	8003bd0 <HAL_GetTick>
 8005416:	0002      	movs	r2, r0
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	1ad3      	subs	r3, r2, r3
 800541c:	4a42      	ldr	r2, [pc, #264]	; (8005528 <HAL_RCC_ClockConfig+0x274>)
 800541e:	4293      	cmp	r3, r2
 8005420:	d901      	bls.n	8005426 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8005422:	2303      	movs	r3, #3
 8005424:	e079      	b.n	800551a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8005426:	4b41      	ldr	r3, [pc, #260]	; (800552c <HAL_RCC_ClockConfig+0x278>)
 8005428:	68db      	ldr	r3, [r3, #12]
 800542a:	220c      	movs	r2, #12
 800542c:	4013      	ands	r3, r2
 800542e:	2b04      	cmp	r3, #4
 8005430:	d1ef      	bne.n	8005412 <HAL_RCC_ClockConfig+0x15e>
 8005432:	e00e      	b.n	8005452 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005434:	f7fe fbcc 	bl	8003bd0 <HAL_GetTick>
 8005438:	0002      	movs	r2, r0
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	1ad3      	subs	r3, r2, r3
 800543e:	4a3a      	ldr	r2, [pc, #232]	; (8005528 <HAL_RCC_ClockConfig+0x274>)
 8005440:	4293      	cmp	r3, r2
 8005442:	d901      	bls.n	8005448 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8005444:	2303      	movs	r3, #3
 8005446:	e068      	b.n	800551a <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8005448:	4b38      	ldr	r3, [pc, #224]	; (800552c <HAL_RCC_ClockConfig+0x278>)
 800544a:	68db      	ldr	r3, [r3, #12]
 800544c:	220c      	movs	r2, #12
 800544e:	4013      	ands	r3, r2
 8005450:	d1f0      	bne.n	8005434 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005452:	4b34      	ldr	r3, [pc, #208]	; (8005524 <HAL_RCC_ClockConfig+0x270>)
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	2201      	movs	r2, #1
 8005458:	4013      	ands	r3, r2
 800545a:	683a      	ldr	r2, [r7, #0]
 800545c:	429a      	cmp	r2, r3
 800545e:	d21e      	bcs.n	800549e <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005460:	4b30      	ldr	r3, [pc, #192]	; (8005524 <HAL_RCC_ClockConfig+0x270>)
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	2201      	movs	r2, #1
 8005466:	4393      	bics	r3, r2
 8005468:	0019      	movs	r1, r3
 800546a:	4b2e      	ldr	r3, [pc, #184]	; (8005524 <HAL_RCC_ClockConfig+0x270>)
 800546c:	683a      	ldr	r2, [r7, #0]
 800546e:	430a      	orrs	r2, r1
 8005470:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005472:	f7fe fbad 	bl	8003bd0 <HAL_GetTick>
 8005476:	0003      	movs	r3, r0
 8005478:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800547a:	e009      	b.n	8005490 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800547c:	f7fe fba8 	bl	8003bd0 <HAL_GetTick>
 8005480:	0002      	movs	r2, r0
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	1ad3      	subs	r3, r2, r3
 8005486:	4a28      	ldr	r2, [pc, #160]	; (8005528 <HAL_RCC_ClockConfig+0x274>)
 8005488:	4293      	cmp	r3, r2
 800548a:	d901      	bls.n	8005490 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 800548c:	2303      	movs	r3, #3
 800548e:	e044      	b.n	800551a <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005490:	4b24      	ldr	r3, [pc, #144]	; (8005524 <HAL_RCC_ClockConfig+0x270>)
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	2201      	movs	r2, #1
 8005496:	4013      	ands	r3, r2
 8005498:	683a      	ldr	r2, [r7, #0]
 800549a:	429a      	cmp	r2, r3
 800549c:	d1ee      	bne.n	800547c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	2204      	movs	r2, #4
 80054a4:	4013      	ands	r3, r2
 80054a6:	d009      	beq.n	80054bc <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80054a8:	4b20      	ldr	r3, [pc, #128]	; (800552c <HAL_RCC_ClockConfig+0x278>)
 80054aa:	68db      	ldr	r3, [r3, #12]
 80054ac:	4a20      	ldr	r2, [pc, #128]	; (8005530 <HAL_RCC_ClockConfig+0x27c>)
 80054ae:	4013      	ands	r3, r2
 80054b0:	0019      	movs	r1, r3
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	68da      	ldr	r2, [r3, #12]
 80054b6:	4b1d      	ldr	r3, [pc, #116]	; (800552c <HAL_RCC_ClockConfig+0x278>)
 80054b8:	430a      	orrs	r2, r1
 80054ba:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	2208      	movs	r2, #8
 80054c2:	4013      	ands	r3, r2
 80054c4:	d00a      	beq.n	80054dc <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80054c6:	4b19      	ldr	r3, [pc, #100]	; (800552c <HAL_RCC_ClockConfig+0x278>)
 80054c8:	68db      	ldr	r3, [r3, #12]
 80054ca:	4a1a      	ldr	r2, [pc, #104]	; (8005534 <HAL_RCC_ClockConfig+0x280>)
 80054cc:	4013      	ands	r3, r2
 80054ce:	0019      	movs	r1, r3
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	691b      	ldr	r3, [r3, #16]
 80054d4:	00da      	lsls	r2, r3, #3
 80054d6:	4b15      	ldr	r3, [pc, #84]	; (800552c <HAL_RCC_ClockConfig+0x278>)
 80054d8:	430a      	orrs	r2, r1
 80054da:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80054dc:	f000 f832 	bl	8005544 <HAL_RCC_GetSysClockFreq>
 80054e0:	0001      	movs	r1, r0
 80054e2:	4b12      	ldr	r3, [pc, #72]	; (800552c <HAL_RCC_ClockConfig+0x278>)
 80054e4:	68db      	ldr	r3, [r3, #12]
 80054e6:	091b      	lsrs	r3, r3, #4
 80054e8:	220f      	movs	r2, #15
 80054ea:	4013      	ands	r3, r2
 80054ec:	4a12      	ldr	r2, [pc, #72]	; (8005538 <HAL_RCC_ClockConfig+0x284>)
 80054ee:	5cd3      	ldrb	r3, [r2, r3]
 80054f0:	000a      	movs	r2, r1
 80054f2:	40da      	lsrs	r2, r3
 80054f4:	4b11      	ldr	r3, [pc, #68]	; (800553c <HAL_RCC_ClockConfig+0x288>)
 80054f6:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80054f8:	4b11      	ldr	r3, [pc, #68]	; (8005540 <HAL_RCC_ClockConfig+0x28c>)
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	250b      	movs	r5, #11
 80054fe:	197c      	adds	r4, r7, r5
 8005500:	0018      	movs	r0, r3
 8005502:	f7fe fb1f 	bl	8003b44 <HAL_InitTick>
 8005506:	0003      	movs	r3, r0
 8005508:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 800550a:	197b      	adds	r3, r7, r5
 800550c:	781b      	ldrb	r3, [r3, #0]
 800550e:	2b00      	cmp	r3, #0
 8005510:	d002      	beq.n	8005518 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8005512:	197b      	adds	r3, r7, r5
 8005514:	781b      	ldrb	r3, [r3, #0]
 8005516:	e000      	b.n	800551a <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8005518:	2300      	movs	r3, #0
}
 800551a:	0018      	movs	r0, r3
 800551c:	46bd      	mov	sp, r7
 800551e:	b004      	add	sp, #16
 8005520:	bdb0      	pop	{r4, r5, r7, pc}
 8005522:	46c0      	nop			; (mov r8, r8)
 8005524:	40022000 	.word	0x40022000
 8005528:	00001388 	.word	0x00001388
 800552c:	40021000 	.word	0x40021000
 8005530:	fffff8ff 	.word	0xfffff8ff
 8005534:	ffffc7ff 	.word	0xffffc7ff
 8005538:	08008774 	.word	0x08008774
 800553c:	20000000 	.word	0x20000000
 8005540:	20000004 	.word	0x20000004

08005544 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005544:	b5b0      	push	{r4, r5, r7, lr}
 8005546:	b08e      	sub	sp, #56	; 0x38
 8005548:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 800554a:	4b4c      	ldr	r3, [pc, #304]	; (800567c <HAL_RCC_GetSysClockFreq+0x138>)
 800554c:	68db      	ldr	r3, [r3, #12]
 800554e:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005550:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005552:	230c      	movs	r3, #12
 8005554:	4013      	ands	r3, r2
 8005556:	2b0c      	cmp	r3, #12
 8005558:	d014      	beq.n	8005584 <HAL_RCC_GetSysClockFreq+0x40>
 800555a:	d900      	bls.n	800555e <HAL_RCC_GetSysClockFreq+0x1a>
 800555c:	e07b      	b.n	8005656 <HAL_RCC_GetSysClockFreq+0x112>
 800555e:	2b04      	cmp	r3, #4
 8005560:	d002      	beq.n	8005568 <HAL_RCC_GetSysClockFreq+0x24>
 8005562:	2b08      	cmp	r3, #8
 8005564:	d00b      	beq.n	800557e <HAL_RCC_GetSysClockFreq+0x3a>
 8005566:	e076      	b.n	8005656 <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8005568:	4b44      	ldr	r3, [pc, #272]	; (800567c <HAL_RCC_GetSysClockFreq+0x138>)
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	2210      	movs	r2, #16
 800556e:	4013      	ands	r3, r2
 8005570:	d002      	beq.n	8005578 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8005572:	4b43      	ldr	r3, [pc, #268]	; (8005680 <HAL_RCC_GetSysClockFreq+0x13c>)
 8005574:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8005576:	e07c      	b.n	8005672 <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8005578:	4b42      	ldr	r3, [pc, #264]	; (8005684 <HAL_RCC_GetSysClockFreq+0x140>)
 800557a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800557c:	e079      	b.n	8005672 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800557e:	4b42      	ldr	r3, [pc, #264]	; (8005688 <HAL_RCC_GetSysClockFreq+0x144>)
 8005580:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8005582:	e076      	b.n	8005672 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8005584:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005586:	0c9a      	lsrs	r2, r3, #18
 8005588:	230f      	movs	r3, #15
 800558a:	401a      	ands	r2, r3
 800558c:	4b3f      	ldr	r3, [pc, #252]	; (800568c <HAL_RCC_GetSysClockFreq+0x148>)
 800558e:	5c9b      	ldrb	r3, [r3, r2]
 8005590:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8005592:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005594:	0d9a      	lsrs	r2, r3, #22
 8005596:	2303      	movs	r3, #3
 8005598:	4013      	ands	r3, r2
 800559a:	3301      	adds	r3, #1
 800559c:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800559e:	4b37      	ldr	r3, [pc, #220]	; (800567c <HAL_RCC_GetSysClockFreq+0x138>)
 80055a0:	68da      	ldr	r2, [r3, #12]
 80055a2:	2380      	movs	r3, #128	; 0x80
 80055a4:	025b      	lsls	r3, r3, #9
 80055a6:	4013      	ands	r3, r2
 80055a8:	d01a      	beq.n	80055e0 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80055aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055ac:	61bb      	str	r3, [r7, #24]
 80055ae:	2300      	movs	r3, #0
 80055b0:	61fb      	str	r3, [r7, #28]
 80055b2:	4a35      	ldr	r2, [pc, #212]	; (8005688 <HAL_RCC_GetSysClockFreq+0x144>)
 80055b4:	2300      	movs	r3, #0
 80055b6:	69b8      	ldr	r0, [r7, #24]
 80055b8:	69f9      	ldr	r1, [r7, #28]
 80055ba:	f7fa ff45 	bl	8000448 <__aeabi_lmul>
 80055be:	0002      	movs	r2, r0
 80055c0:	000b      	movs	r3, r1
 80055c2:	0010      	movs	r0, r2
 80055c4:	0019      	movs	r1, r3
 80055c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055c8:	613b      	str	r3, [r7, #16]
 80055ca:	2300      	movs	r3, #0
 80055cc:	617b      	str	r3, [r7, #20]
 80055ce:	693a      	ldr	r2, [r7, #16]
 80055d0:	697b      	ldr	r3, [r7, #20]
 80055d2:	f7fa ff19 	bl	8000408 <__aeabi_uldivmod>
 80055d6:	0002      	movs	r2, r0
 80055d8:	000b      	movs	r3, r1
 80055da:	0013      	movs	r3, r2
 80055dc:	637b      	str	r3, [r7, #52]	; 0x34
 80055de:	e037      	b.n	8005650 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80055e0:	4b26      	ldr	r3, [pc, #152]	; (800567c <HAL_RCC_GetSysClockFreq+0x138>)
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	2210      	movs	r2, #16
 80055e6:	4013      	ands	r3, r2
 80055e8:	d01a      	beq.n	8005620 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 80055ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055ec:	60bb      	str	r3, [r7, #8]
 80055ee:	2300      	movs	r3, #0
 80055f0:	60fb      	str	r3, [r7, #12]
 80055f2:	4a23      	ldr	r2, [pc, #140]	; (8005680 <HAL_RCC_GetSysClockFreq+0x13c>)
 80055f4:	2300      	movs	r3, #0
 80055f6:	68b8      	ldr	r0, [r7, #8]
 80055f8:	68f9      	ldr	r1, [r7, #12]
 80055fa:	f7fa ff25 	bl	8000448 <__aeabi_lmul>
 80055fe:	0002      	movs	r2, r0
 8005600:	000b      	movs	r3, r1
 8005602:	0010      	movs	r0, r2
 8005604:	0019      	movs	r1, r3
 8005606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005608:	603b      	str	r3, [r7, #0]
 800560a:	2300      	movs	r3, #0
 800560c:	607b      	str	r3, [r7, #4]
 800560e:	683a      	ldr	r2, [r7, #0]
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	f7fa fef9 	bl	8000408 <__aeabi_uldivmod>
 8005616:	0002      	movs	r2, r0
 8005618:	000b      	movs	r3, r1
 800561a:	0013      	movs	r3, r2
 800561c:	637b      	str	r3, [r7, #52]	; 0x34
 800561e:	e017      	b.n	8005650 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8005620:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005622:	0018      	movs	r0, r3
 8005624:	2300      	movs	r3, #0
 8005626:	0019      	movs	r1, r3
 8005628:	4a16      	ldr	r2, [pc, #88]	; (8005684 <HAL_RCC_GetSysClockFreq+0x140>)
 800562a:	2300      	movs	r3, #0
 800562c:	f7fa ff0c 	bl	8000448 <__aeabi_lmul>
 8005630:	0002      	movs	r2, r0
 8005632:	000b      	movs	r3, r1
 8005634:	0010      	movs	r0, r2
 8005636:	0019      	movs	r1, r3
 8005638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800563a:	001c      	movs	r4, r3
 800563c:	2300      	movs	r3, #0
 800563e:	001d      	movs	r5, r3
 8005640:	0022      	movs	r2, r4
 8005642:	002b      	movs	r3, r5
 8005644:	f7fa fee0 	bl	8000408 <__aeabi_uldivmod>
 8005648:	0002      	movs	r2, r0
 800564a:	000b      	movs	r3, r1
 800564c:	0013      	movs	r3, r2
 800564e:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 8005650:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005652:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8005654:	e00d      	b.n	8005672 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8005656:	4b09      	ldr	r3, [pc, #36]	; (800567c <HAL_RCC_GetSysClockFreq+0x138>)
 8005658:	685b      	ldr	r3, [r3, #4]
 800565a:	0b5b      	lsrs	r3, r3, #13
 800565c:	2207      	movs	r2, #7
 800565e:	4013      	ands	r3, r2
 8005660:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8005662:	6a3b      	ldr	r3, [r7, #32]
 8005664:	3301      	adds	r3, #1
 8005666:	2280      	movs	r2, #128	; 0x80
 8005668:	0212      	lsls	r2, r2, #8
 800566a:	409a      	lsls	r2, r3
 800566c:	0013      	movs	r3, r2
 800566e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8005670:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8005672:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8005674:	0018      	movs	r0, r3
 8005676:	46bd      	mov	sp, r7
 8005678:	b00e      	add	sp, #56	; 0x38
 800567a:	bdb0      	pop	{r4, r5, r7, pc}
 800567c:	40021000 	.word	0x40021000
 8005680:	003d0900 	.word	0x003d0900
 8005684:	00f42400 	.word	0x00f42400
 8005688:	007a1200 	.word	0x007a1200
 800568c:	0800878c 	.word	0x0800878c

08005690 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005690:	b580      	push	{r7, lr}
 8005692:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005694:	4b02      	ldr	r3, [pc, #8]	; (80056a0 <HAL_RCC_GetHCLKFreq+0x10>)
 8005696:	681b      	ldr	r3, [r3, #0]
}
 8005698:	0018      	movs	r0, r3
 800569a:	46bd      	mov	sp, r7
 800569c:	bd80      	pop	{r7, pc}
 800569e:	46c0      	nop			; (mov r8, r8)
 80056a0:	20000000 	.word	0x20000000

080056a4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80056a4:	b580      	push	{r7, lr}
 80056a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80056a8:	f7ff fff2 	bl	8005690 <HAL_RCC_GetHCLKFreq>
 80056ac:	0001      	movs	r1, r0
 80056ae:	4b06      	ldr	r3, [pc, #24]	; (80056c8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80056b0:	68db      	ldr	r3, [r3, #12]
 80056b2:	0a1b      	lsrs	r3, r3, #8
 80056b4:	2207      	movs	r2, #7
 80056b6:	4013      	ands	r3, r2
 80056b8:	4a04      	ldr	r2, [pc, #16]	; (80056cc <HAL_RCC_GetPCLK1Freq+0x28>)
 80056ba:	5cd3      	ldrb	r3, [r2, r3]
 80056bc:	40d9      	lsrs	r1, r3
 80056be:	000b      	movs	r3, r1
}
 80056c0:	0018      	movs	r0, r3
 80056c2:	46bd      	mov	sp, r7
 80056c4:	bd80      	pop	{r7, pc}
 80056c6:	46c0      	nop			; (mov r8, r8)
 80056c8:	40021000 	.word	0x40021000
 80056cc:	08008784 	.word	0x08008784

080056d0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80056d0:	b580      	push	{r7, lr}
 80056d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80056d4:	f7ff ffdc 	bl	8005690 <HAL_RCC_GetHCLKFreq>
 80056d8:	0001      	movs	r1, r0
 80056da:	4b06      	ldr	r3, [pc, #24]	; (80056f4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80056dc:	68db      	ldr	r3, [r3, #12]
 80056de:	0adb      	lsrs	r3, r3, #11
 80056e0:	2207      	movs	r2, #7
 80056e2:	4013      	ands	r3, r2
 80056e4:	4a04      	ldr	r2, [pc, #16]	; (80056f8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80056e6:	5cd3      	ldrb	r3, [r2, r3]
 80056e8:	40d9      	lsrs	r1, r3
 80056ea:	000b      	movs	r3, r1
}
 80056ec:	0018      	movs	r0, r3
 80056ee:	46bd      	mov	sp, r7
 80056f0:	bd80      	pop	{r7, pc}
 80056f2:	46c0      	nop			; (mov r8, r8)
 80056f4:	40021000 	.word	0x40021000
 80056f8:	08008784 	.word	0x08008784

080056fc <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80056fc:	b580      	push	{r7, lr}
 80056fe:	b086      	sub	sp, #24
 8005700:	af00      	add	r7, sp, #0
 8005702:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8005704:	2017      	movs	r0, #23
 8005706:	183b      	adds	r3, r7, r0
 8005708:	2200      	movs	r2, #0
 800570a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	2220      	movs	r2, #32
 8005712:	4013      	ands	r3, r2
 8005714:	d100      	bne.n	8005718 <HAL_RCCEx_PeriphCLKConfig+0x1c>
 8005716:	e0c2      	b.n	800589e <HAL_RCCEx_PeriphCLKConfig+0x1a2>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005718:	4b98      	ldr	r3, [pc, #608]	; (800597c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800571a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800571c:	2380      	movs	r3, #128	; 0x80
 800571e:	055b      	lsls	r3, r3, #21
 8005720:	4013      	ands	r3, r2
 8005722:	d109      	bne.n	8005738 <HAL_RCCEx_PeriphCLKConfig+0x3c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005724:	4b95      	ldr	r3, [pc, #596]	; (800597c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005726:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005728:	4b94      	ldr	r3, [pc, #592]	; (800597c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800572a:	2180      	movs	r1, #128	; 0x80
 800572c:	0549      	lsls	r1, r1, #21
 800572e:	430a      	orrs	r2, r1
 8005730:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8005732:	183b      	adds	r3, r7, r0
 8005734:	2201      	movs	r2, #1
 8005736:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005738:	4b91      	ldr	r3, [pc, #580]	; (8005980 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800573a:	681a      	ldr	r2, [r3, #0]
 800573c:	2380      	movs	r3, #128	; 0x80
 800573e:	005b      	lsls	r3, r3, #1
 8005740:	4013      	ands	r3, r2
 8005742:	d11a      	bne.n	800577a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005744:	4b8e      	ldr	r3, [pc, #568]	; (8005980 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8005746:	681a      	ldr	r2, [r3, #0]
 8005748:	4b8d      	ldr	r3, [pc, #564]	; (8005980 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800574a:	2180      	movs	r1, #128	; 0x80
 800574c:	0049      	lsls	r1, r1, #1
 800574e:	430a      	orrs	r2, r1
 8005750:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005752:	f7fe fa3d 	bl	8003bd0 <HAL_GetTick>
 8005756:	0003      	movs	r3, r0
 8005758:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800575a:	e008      	b.n	800576e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800575c:	f7fe fa38 	bl	8003bd0 <HAL_GetTick>
 8005760:	0002      	movs	r2, r0
 8005762:	693b      	ldr	r3, [r7, #16]
 8005764:	1ad3      	subs	r3, r2, r3
 8005766:	2b64      	cmp	r3, #100	; 0x64
 8005768:	d901      	bls.n	800576e <HAL_RCCEx_PeriphCLKConfig+0x72>
        {
          return HAL_TIMEOUT;
 800576a:	2303      	movs	r3, #3
 800576c:	e102      	b.n	8005974 <HAL_RCCEx_PeriphCLKConfig+0x278>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800576e:	4b84      	ldr	r3, [pc, #528]	; (8005980 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8005770:	681a      	ldr	r2, [r3, #0]
 8005772:	2380      	movs	r3, #128	; 0x80
 8005774:	005b      	lsls	r3, r3, #1
 8005776:	4013      	ands	r3, r2
 8005778:	d0f0      	beq.n	800575c <HAL_RCCEx_PeriphCLKConfig+0x60>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 800577a:	4b80      	ldr	r3, [pc, #512]	; (800597c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800577c:	681a      	ldr	r2, [r3, #0]
 800577e:	23c0      	movs	r3, #192	; 0xc0
 8005780:	039b      	lsls	r3, r3, #14
 8005782:	4013      	ands	r3, r2
 8005784:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	685a      	ldr	r2, [r3, #4]
 800578a:	23c0      	movs	r3, #192	; 0xc0
 800578c:	039b      	lsls	r3, r3, #14
 800578e:	4013      	ands	r3, r2
 8005790:	68fa      	ldr	r2, [r7, #12]
 8005792:	429a      	cmp	r2, r3
 8005794:	d013      	beq.n	80057be <HAL_RCCEx_PeriphCLKConfig+0xc2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	685a      	ldr	r2, [r3, #4]
 800579a:	23c0      	movs	r3, #192	; 0xc0
 800579c:	029b      	lsls	r3, r3, #10
 800579e:	401a      	ands	r2, r3
 80057a0:	23c0      	movs	r3, #192	; 0xc0
 80057a2:	029b      	lsls	r3, r3, #10
 80057a4:	429a      	cmp	r2, r3
 80057a6:	d10a      	bne.n	80057be <HAL_RCCEx_PeriphCLKConfig+0xc2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80057a8:	4b74      	ldr	r3, [pc, #464]	; (800597c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80057aa:	681a      	ldr	r2, [r3, #0]
 80057ac:	2380      	movs	r3, #128	; 0x80
 80057ae:	029b      	lsls	r3, r3, #10
 80057b0:	401a      	ands	r2, r3
 80057b2:	2380      	movs	r3, #128	; 0x80
 80057b4:	029b      	lsls	r3, r3, #10
 80057b6:	429a      	cmp	r2, r3
 80057b8:	d101      	bne.n	80057be <HAL_RCCEx_PeriphCLKConfig+0xc2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 80057ba:	2301      	movs	r3, #1
 80057bc:	e0da      	b.n	8005974 <HAL_RCCEx_PeriphCLKConfig+0x278>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 80057be:	4b6f      	ldr	r3, [pc, #444]	; (800597c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80057c0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80057c2:	23c0      	movs	r3, #192	; 0xc0
 80057c4:	029b      	lsls	r3, r3, #10
 80057c6:	4013      	ands	r3, r2
 80057c8:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d03b      	beq.n	8005848 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	685a      	ldr	r2, [r3, #4]
 80057d4:	23c0      	movs	r3, #192	; 0xc0
 80057d6:	029b      	lsls	r3, r3, #10
 80057d8:	4013      	ands	r3, r2
 80057da:	68fa      	ldr	r2, [r7, #12]
 80057dc:	429a      	cmp	r2, r3
 80057de:	d033      	beq.n	8005848 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	2220      	movs	r2, #32
 80057e6:	4013      	ands	r3, r2
 80057e8:	d02e      	beq.n	8005848 <HAL_RCCEx_PeriphCLKConfig+0x14c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 80057ea:	4b64      	ldr	r3, [pc, #400]	; (800597c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80057ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80057ee:	4a65      	ldr	r2, [pc, #404]	; (8005984 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 80057f0:	4013      	ands	r3, r2
 80057f2:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80057f4:	4b61      	ldr	r3, [pc, #388]	; (800597c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80057f6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80057f8:	4b60      	ldr	r3, [pc, #384]	; (800597c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80057fa:	2180      	movs	r1, #128	; 0x80
 80057fc:	0309      	lsls	r1, r1, #12
 80057fe:	430a      	orrs	r2, r1
 8005800:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005802:	4b5e      	ldr	r3, [pc, #376]	; (800597c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005804:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005806:	4b5d      	ldr	r3, [pc, #372]	; (800597c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005808:	495f      	ldr	r1, [pc, #380]	; (8005988 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800580a:	400a      	ands	r2, r1
 800580c:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 800580e:	4b5b      	ldr	r3, [pc, #364]	; (800597c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005810:	68fa      	ldr	r2, [r7, #12]
 8005812:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8005814:	68fa      	ldr	r2, [r7, #12]
 8005816:	2380      	movs	r3, #128	; 0x80
 8005818:	005b      	lsls	r3, r3, #1
 800581a:	4013      	ands	r3, r2
 800581c:	d014      	beq.n	8005848 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800581e:	f7fe f9d7 	bl	8003bd0 <HAL_GetTick>
 8005822:	0003      	movs	r3, r0
 8005824:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005826:	e009      	b.n	800583c <HAL_RCCEx_PeriphCLKConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005828:	f7fe f9d2 	bl	8003bd0 <HAL_GetTick>
 800582c:	0002      	movs	r2, r0
 800582e:	693b      	ldr	r3, [r7, #16]
 8005830:	1ad3      	subs	r3, r2, r3
 8005832:	4a56      	ldr	r2, [pc, #344]	; (800598c <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8005834:	4293      	cmp	r3, r2
 8005836:	d901      	bls.n	800583c <HAL_RCCEx_PeriphCLKConfig+0x140>
          {
            return HAL_TIMEOUT;
 8005838:	2303      	movs	r3, #3
 800583a:	e09b      	b.n	8005974 <HAL_RCCEx_PeriphCLKConfig+0x278>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800583c:	4b4f      	ldr	r3, [pc, #316]	; (800597c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800583e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005840:	2380      	movs	r3, #128	; 0x80
 8005842:	009b      	lsls	r3, r3, #2
 8005844:	4013      	ands	r3, r2
 8005846:	d0ef      	beq.n	8005828 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	685a      	ldr	r2, [r3, #4]
 800584c:	23c0      	movs	r3, #192	; 0xc0
 800584e:	029b      	lsls	r3, r3, #10
 8005850:	401a      	ands	r2, r3
 8005852:	23c0      	movs	r3, #192	; 0xc0
 8005854:	029b      	lsls	r3, r3, #10
 8005856:	429a      	cmp	r2, r3
 8005858:	d10c      	bne.n	8005874 <HAL_RCCEx_PeriphCLKConfig+0x178>
 800585a:	4b48      	ldr	r3, [pc, #288]	; (800597c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	4a4c      	ldr	r2, [pc, #304]	; (8005990 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8005860:	4013      	ands	r3, r2
 8005862:	0019      	movs	r1, r3
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	685a      	ldr	r2, [r3, #4]
 8005868:	23c0      	movs	r3, #192	; 0xc0
 800586a:	039b      	lsls	r3, r3, #14
 800586c:	401a      	ands	r2, r3
 800586e:	4b43      	ldr	r3, [pc, #268]	; (800597c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005870:	430a      	orrs	r2, r1
 8005872:	601a      	str	r2, [r3, #0]
 8005874:	4b41      	ldr	r3, [pc, #260]	; (800597c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005876:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	685a      	ldr	r2, [r3, #4]
 800587c:	23c0      	movs	r3, #192	; 0xc0
 800587e:	029b      	lsls	r3, r3, #10
 8005880:	401a      	ands	r2, r3
 8005882:	4b3e      	ldr	r3, [pc, #248]	; (800597c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005884:	430a      	orrs	r2, r1
 8005886:	651a      	str	r2, [r3, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005888:	2317      	movs	r3, #23
 800588a:	18fb      	adds	r3, r7, r3
 800588c:	781b      	ldrb	r3, [r3, #0]
 800588e:	2b01      	cmp	r3, #1
 8005890:	d105      	bne.n	800589e <HAL_RCCEx_PeriphCLKConfig+0x1a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005892:	4b3a      	ldr	r3, [pc, #232]	; (800597c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005894:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005896:	4b39      	ldr	r3, [pc, #228]	; (800597c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005898:	493e      	ldr	r1, [pc, #248]	; (8005994 <HAL_RCCEx_PeriphCLKConfig+0x298>)
 800589a:	400a      	ands	r2, r1
 800589c:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	2201      	movs	r2, #1
 80058a4:	4013      	ands	r3, r2
 80058a6:	d009      	beq.n	80058bc <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80058a8:	4b34      	ldr	r3, [pc, #208]	; (800597c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80058aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80058ac:	2203      	movs	r2, #3
 80058ae:	4393      	bics	r3, r2
 80058b0:	0019      	movs	r1, r3
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	689a      	ldr	r2, [r3, #8]
 80058b6:	4b31      	ldr	r3, [pc, #196]	; (800597c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80058b8:	430a      	orrs	r2, r1
 80058ba:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	2202      	movs	r2, #2
 80058c2:	4013      	ands	r3, r2
 80058c4:	d009      	beq.n	80058da <HAL_RCCEx_PeriphCLKConfig+0x1de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80058c6:	4b2d      	ldr	r3, [pc, #180]	; (800597c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80058c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80058ca:	220c      	movs	r2, #12
 80058cc:	4393      	bics	r3, r2
 80058ce:	0019      	movs	r1, r3
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	68da      	ldr	r2, [r3, #12]
 80058d4:	4b29      	ldr	r3, [pc, #164]	; (800597c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80058d6:	430a      	orrs	r2, r1
 80058d8:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	2204      	movs	r2, #4
 80058e0:	4013      	ands	r3, r2
 80058e2:	d009      	beq.n	80058f8 <HAL_RCCEx_PeriphCLKConfig+0x1fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80058e4:	4b25      	ldr	r3, [pc, #148]	; (800597c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80058e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80058e8:	4a2b      	ldr	r2, [pc, #172]	; (8005998 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80058ea:	4013      	ands	r3, r2
 80058ec:	0019      	movs	r1, r3
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	691a      	ldr	r2, [r3, #16]
 80058f2:	4b22      	ldr	r3, [pc, #136]	; (800597c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80058f4:	430a      	orrs	r2, r1
 80058f6:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	2208      	movs	r2, #8
 80058fe:	4013      	ands	r3, r2
 8005900:	d009      	beq.n	8005916 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005902:	4b1e      	ldr	r3, [pc, #120]	; (800597c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005904:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005906:	4a25      	ldr	r2, [pc, #148]	; (800599c <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8005908:	4013      	ands	r3, r2
 800590a:	0019      	movs	r1, r3
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	695a      	ldr	r2, [r3, #20]
 8005910:	4b1a      	ldr	r3, [pc, #104]	; (800597c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005912:	430a      	orrs	r2, r1
 8005914:	64da      	str	r2, [r3, #76]	; 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681a      	ldr	r2, [r3, #0]
 800591a:	2380      	movs	r3, #128	; 0x80
 800591c:	005b      	lsls	r3, r3, #1
 800591e:	4013      	ands	r3, r2
 8005920:	d009      	beq.n	8005936 <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005922:	4b16      	ldr	r3, [pc, #88]	; (800597c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005924:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005926:	4a17      	ldr	r2, [pc, #92]	; (8005984 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8005928:	4013      	ands	r3, r2
 800592a:	0019      	movs	r1, r3
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	699a      	ldr	r2, [r3, #24]
 8005930:	4b12      	ldr	r3, [pc, #72]	; (800597c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005932:	430a      	orrs	r2, r1
 8005934:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	2240      	movs	r2, #64	; 0x40
 800593c:	4013      	ands	r3, r2
 800593e:	d009      	beq.n	8005954 <HAL_RCCEx_PeriphCLKConfig+0x258>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005940:	4b0e      	ldr	r3, [pc, #56]	; (800597c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005942:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005944:	4a16      	ldr	r2, [pc, #88]	; (80059a0 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 8005946:	4013      	ands	r3, r2
 8005948:	0019      	movs	r1, r3
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	6a1a      	ldr	r2, [r3, #32]
 800594e:	4b0b      	ldr	r3, [pc, #44]	; (800597c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005950:	430a      	orrs	r2, r1
 8005952:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	2280      	movs	r2, #128	; 0x80
 800595a:	4013      	ands	r3, r2
 800595c:	d009      	beq.n	8005972 <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 800595e:	4b07      	ldr	r3, [pc, #28]	; (800597c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005960:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005962:	4a10      	ldr	r2, [pc, #64]	; (80059a4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 8005964:	4013      	ands	r3, r2
 8005966:	0019      	movs	r1, r3
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	69da      	ldr	r2, [r3, #28]
 800596c:	4b03      	ldr	r3, [pc, #12]	; (800597c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800596e:	430a      	orrs	r2, r1
 8005970:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8005972:	2300      	movs	r3, #0
}
 8005974:	0018      	movs	r0, r3
 8005976:	46bd      	mov	sp, r7
 8005978:	b006      	add	sp, #24
 800597a:	bd80      	pop	{r7, pc}
 800597c:	40021000 	.word	0x40021000
 8005980:	40007000 	.word	0x40007000
 8005984:	fffcffff 	.word	0xfffcffff
 8005988:	fff7ffff 	.word	0xfff7ffff
 800598c:	00001388 	.word	0x00001388
 8005990:	ffcfffff 	.word	0xffcfffff
 8005994:	efffffff 	.word	0xefffffff
 8005998:	fffff3ff 	.word	0xfffff3ff
 800599c:	ffffcfff 	.word	0xffffcfff
 80059a0:	fbffffff 	.word	0xfbffffff
 80059a4:	fff3ffff 	.word	0xfff3ffff

080059a8 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80059a8:	b580      	push	{r7, lr}
 80059aa:	b082      	sub	sp, #8
 80059ac:	af00      	add	r7, sp, #0
 80059ae:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d101      	bne.n	80059ba <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 80059b6:	2301      	movs	r3, #1
 80059b8:	e08e      	b.n	8005ad8 <HAL_RTC_Init+0x130>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	2221      	movs	r2, #33	; 0x21
 80059be:	5c9b      	ldrb	r3, [r3, r2]
 80059c0:	b2db      	uxtb	r3, r3
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d107      	bne.n	80059d6 <HAL_RTC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	2220      	movs	r2, #32
 80059ca:	2100      	movs	r1, #0
 80059cc:	5499      	strb	r1, [r3, r2]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	0018      	movs	r0, r3
 80059d2:	f7fd fc85 	bl	80032e0 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	2221      	movs	r2, #33	; 0x21
 80059da:	2102      	movs	r1, #2
 80059dc:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	22ca      	movs	r2, #202	; 0xca
 80059e4:	625a      	str	r2, [r3, #36]	; 0x24
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	2253      	movs	r2, #83	; 0x53
 80059ec:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	0018      	movs	r0, r3
 80059f2:	f000 f89e 	bl	8005b32 <RTC_EnterInitMode>
 80059f6:	1e03      	subs	r3, r0, #0
 80059f8:	d009      	beq.n	8005a0e <HAL_RTC_Init+0x66>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	22ff      	movs	r2, #255	; 0xff
 8005a00:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	2221      	movs	r2, #33	; 0x21
 8005a06:	2104      	movs	r1, #4
 8005a08:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8005a0a:	2301      	movs	r3, #1
 8005a0c:	e064      	b.n	8005ad8 <HAL_RTC_Init+0x130>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	689a      	ldr	r2, [r3, #8]
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	4931      	ldr	r1, [pc, #196]	; (8005ae0 <HAL_RTC_Init+0x138>)
 8005a1a:	400a      	ands	r2, r1
 8005a1c:	609a      	str	r2, [r3, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	6899      	ldr	r1, [r3, #8]
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	685a      	ldr	r2, [r3, #4]
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	691b      	ldr	r3, [r3, #16]
 8005a2c:	431a      	orrs	r2, r3
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	699b      	ldr	r3, [r3, #24]
 8005a32:	431a      	orrs	r2, r3
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	430a      	orrs	r2, r1
 8005a3a:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	687a      	ldr	r2, [r7, #4]
 8005a42:	68d2      	ldr	r2, [r2, #12]
 8005a44:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	6919      	ldr	r1, [r3, #16]
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	689b      	ldr	r3, [r3, #8]
 8005a50:	041a      	lsls	r2, r3, #16
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	430a      	orrs	r2, r1
 8005a58:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	68da      	ldr	r2, [r3, #12]
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	2180      	movs	r1, #128	; 0x80
 8005a66:	438a      	bics	r2, r1
 8005a68:	60da      	str	r2, [r3, #12]

    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	2103      	movs	r1, #3
 8005a76:	438a      	bics	r2, r1
 8005a78:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	69da      	ldr	r2, [r3, #28]
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	695b      	ldr	r3, [r3, #20]
 8005a88:	431a      	orrs	r2, r3
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	430a      	orrs	r2, r1
 8005a90:	64da      	str	r2, [r3, #76]	; 0x4c

    /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	689b      	ldr	r3, [r3, #8]
 8005a98:	2220      	movs	r2, #32
 8005a9a:	4013      	ands	r3, r2
 8005a9c:	d113      	bne.n	8005ac6 <HAL_RTC_Init+0x11e>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	0018      	movs	r0, r3
 8005aa2:	f000 f81f 	bl	8005ae4 <HAL_RTC_WaitForSynchro>
 8005aa6:	1e03      	subs	r3, r0, #0
 8005aa8:	d00d      	beq.n	8005ac6 <HAL_RTC_Init+0x11e>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	22ff      	movs	r2, #255	; 0xff
 8005ab0:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	2221      	movs	r2, #33	; 0x21
 8005ab6:	2104      	movs	r1, #4
 8005ab8:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	2220      	movs	r2, #32
 8005abe:	2100      	movs	r1, #0
 8005ac0:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8005ac2:	2301      	movs	r3, #1
 8005ac4:	e008      	b.n	8005ad8 <HAL_RTC_Init+0x130>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	22ff      	movs	r2, #255	; 0xff
 8005acc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	2221      	movs	r2, #33	; 0x21
 8005ad2:	2101      	movs	r1, #1
 8005ad4:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8005ad6:	2300      	movs	r3, #0
  }
}
 8005ad8:	0018      	movs	r0, r3
 8005ada:	46bd      	mov	sp, r7
 8005adc:	b002      	add	sp, #8
 8005ade:	bd80      	pop	{r7, pc}
 8005ae0:	ff8fffbf 	.word	0xff8fffbf

08005ae4 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8005ae4:	b580      	push	{r7, lr}
 8005ae6:	b084      	sub	sp, #16
 8005ae8:	af00      	add	r7, sp, #0
 8005aea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	68da      	ldr	r2, [r3, #12]
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	21a0      	movs	r1, #160	; 0xa0
 8005af8:	438a      	bics	r2, r1
 8005afa:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8005afc:	f7fe f868 	bl	8003bd0 <HAL_GetTick>
 8005b00:	0003      	movs	r3, r0
 8005b02:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005b04:	e00a      	b.n	8005b1c <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005b06:	f7fe f863 	bl	8003bd0 <HAL_GetTick>
 8005b0a:	0002      	movs	r2, r0
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	1ad2      	subs	r2, r2, r3
 8005b10:	23fa      	movs	r3, #250	; 0xfa
 8005b12:	009b      	lsls	r3, r3, #2
 8005b14:	429a      	cmp	r2, r3
 8005b16:	d901      	bls.n	8005b1c <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8005b18:	2303      	movs	r3, #3
 8005b1a:	e006      	b.n	8005b2a <HAL_RTC_WaitForSynchro+0x46>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	68db      	ldr	r3, [r3, #12]
 8005b22:	2220      	movs	r2, #32
 8005b24:	4013      	ands	r3, r2
 8005b26:	d0ee      	beq.n	8005b06 <HAL_RTC_WaitForSynchro+0x22>
    }
  }

  return HAL_OK;
 8005b28:	2300      	movs	r3, #0
}
 8005b2a:	0018      	movs	r0, r3
 8005b2c:	46bd      	mov	sp, r7
 8005b2e:	b004      	add	sp, #16
 8005b30:	bd80      	pop	{r7, pc}

08005b32 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8005b32:	b580      	push	{r7, lr}
 8005b34:	b084      	sub	sp, #16
 8005b36:	af00      	add	r7, sp, #0
 8005b38:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	68db      	ldr	r3, [r3, #12]
 8005b40:	2240      	movs	r2, #64	; 0x40
 8005b42:	4013      	ands	r3, r2
 8005b44:	d11a      	bne.n	8005b7c <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	2201      	movs	r2, #1
 8005b4c:	4252      	negs	r2, r2
 8005b4e:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8005b50:	f7fe f83e 	bl	8003bd0 <HAL_GetTick>
 8005b54:	0003      	movs	r3, r0
 8005b56:	60fb      	str	r3, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8005b58:	e00a      	b.n	8005b70 <RTC_EnterInitMode+0x3e>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8005b5a:	f7fe f839 	bl	8003bd0 <HAL_GetTick>
 8005b5e:	0002      	movs	r2, r0
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	1ad2      	subs	r2, r2, r3
 8005b64:	23fa      	movs	r3, #250	; 0xfa
 8005b66:	009b      	lsls	r3, r3, #2
 8005b68:	429a      	cmp	r2, r3
 8005b6a:	d901      	bls.n	8005b70 <RTC_EnterInitMode+0x3e>
      {
        return HAL_TIMEOUT;
 8005b6c:	2303      	movs	r3, #3
 8005b6e:	e006      	b.n	8005b7e <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	68db      	ldr	r3, [r3, #12]
 8005b76:	2240      	movs	r2, #64	; 0x40
 8005b78:	4013      	ands	r3, r2
 8005b7a:	d0ee      	beq.n	8005b5a <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 8005b7c:	2300      	movs	r3, #0
}
 8005b7e:	0018      	movs	r0, r3
 8005b80:	46bd      	mov	sp, r7
 8005b82:	b004      	add	sp, #16
 8005b84:	bd80      	pop	{r7, pc}
	...

08005b88 <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param  WakeUpCounter Wake up counter
  * @param  WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 8005b88:	b580      	push	{r7, lr}
 8005b8a:	b086      	sub	sp, #24
 8005b8c:	af00      	add	r7, sp, #0
 8005b8e:	60f8      	str	r0, [r7, #12]
 8005b90:	60b9      	str	r1, [r7, #8]
 8005b92:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	2220      	movs	r2, #32
 8005b98:	5c9b      	ldrb	r3, [r3, r2]
 8005b9a:	2b01      	cmp	r3, #1
 8005b9c:	d101      	bne.n	8005ba2 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a>
 8005b9e:	2302      	movs	r3, #2
 8005ba0:	e0ad      	b.n	8005cfe <HAL_RTCEx_SetWakeUpTimer_IT+0x176>
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	2220      	movs	r2, #32
 8005ba6:	2101      	movs	r1, #1
 8005ba8:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	2221      	movs	r2, #33	; 0x21
 8005bae:	2102      	movs	r1, #2
 8005bb0:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	22ca      	movs	r2, #202	; 0xca
 8005bb8:	625a      	str	r2, [r3, #36]	; 0x24
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	2253      	movs	r2, #83	; 0x53
 8005bc0:	625a      	str	r2, [r3, #36]	; 0x24

  /*Check RTC WUTWF flag is reset only when wake up timer enabled*/
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	689a      	ldr	r2, [r3, #8]
 8005bc8:	2380      	movs	r3, #128	; 0x80
 8005bca:	00db      	lsls	r3, r3, #3
 8005bcc:	4013      	ands	r3, r2
 8005bce:	d021      	beq.n	8005c14 <HAL_RTCEx_SetWakeUpTimer_IT+0x8c>
  {
    tickstart = HAL_GetTick();
 8005bd0:	f7fd fffe 	bl	8003bd0 <HAL_GetTick>
 8005bd4:	0003      	movs	r3, r0
 8005bd6:	617b      	str	r3, [r7, #20]

    /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 8005bd8:	e016      	b.n	8005c08 <HAL_RTCEx_SetWakeUpTimer_IT+0x80>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005bda:	f7fd fff9 	bl	8003bd0 <HAL_GetTick>
 8005bde:	0002      	movs	r2, r0
 8005be0:	697b      	ldr	r3, [r7, #20]
 8005be2:	1ad2      	subs	r2, r2, r3
 8005be4:	23fa      	movs	r3, #250	; 0xfa
 8005be6:	009b      	lsls	r3, r3, #2
 8005be8:	429a      	cmp	r2, r3
 8005bea:	d90d      	bls.n	8005c08 <HAL_RTCEx_SetWakeUpTimer_IT+0x80>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	22ff      	movs	r2, #255	; 0xff
 8005bf2:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	2221      	movs	r2, #33	; 0x21
 8005bf8:	2103      	movs	r1, #3
 8005bfa:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	2220      	movs	r2, #32
 8005c00:	2100      	movs	r1, #0
 8005c02:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8005c04:	2303      	movs	r3, #3
 8005c06:	e07a      	b.n	8005cfe <HAL_RTCEx_SetWakeUpTimer_IT+0x176>
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	68db      	ldr	r3, [r3, #12]
 8005c0e:	2204      	movs	r2, #4
 8005c10:	4013      	ands	r3, r2
 8005c12:	d1e2      	bne.n	8005bda <HAL_RTCEx_SetWakeUpTimer_IT+0x52>
      }
    }
  }
  /* Disable the Wake-Up timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	689a      	ldr	r2, [r3, #8]
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	493a      	ldr	r1, [pc, #232]	; (8005d08 <HAL_RTCEx_SetWakeUpTimer_IT+0x180>)
 8005c20:	400a      	ands	r2, r1
 8005c22:	609a      	str	r2, [r3, #8]

  /* Clear flag Wake-Up */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	68db      	ldr	r3, [r3, #12]
 8005c2a:	22ff      	movs	r2, #255	; 0xff
 8005c2c:	401a      	ands	r2, r3
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	4936      	ldr	r1, [pc, #216]	; (8005d0c <HAL_RTCEx_SetWakeUpTimer_IT+0x184>)
 8005c34:	430a      	orrs	r2, r1
 8005c36:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8005c38:	f7fd ffca 	bl	8003bd0 <HAL_GetTick>
 8005c3c:	0003      	movs	r3, r0
 8005c3e:	617b      	str	r3, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8005c40:	e016      	b.n	8005c70 <HAL_RTCEx_SetWakeUpTimer_IT+0xe8>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005c42:	f7fd ffc5 	bl	8003bd0 <HAL_GetTick>
 8005c46:	0002      	movs	r2, r0
 8005c48:	697b      	ldr	r3, [r7, #20]
 8005c4a:	1ad2      	subs	r2, r2, r3
 8005c4c:	23fa      	movs	r3, #250	; 0xfa
 8005c4e:	009b      	lsls	r3, r3, #2
 8005c50:	429a      	cmp	r2, r3
 8005c52:	d90d      	bls.n	8005c70 <HAL_RTCEx_SetWakeUpTimer_IT+0xe8>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	22ff      	movs	r2, #255	; 0xff
 8005c5a:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	2221      	movs	r2, #33	; 0x21
 8005c60:	2103      	movs	r1, #3
 8005c62:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	2220      	movs	r2, #32
 8005c68:	2100      	movs	r1, #0
 8005c6a:	5499      	strb	r1, [r3, r2]

      return HAL_TIMEOUT;
 8005c6c:	2303      	movs	r3, #3
 8005c6e:	e046      	b.n	8005cfe <HAL_RTCEx_SetWakeUpTimer_IT+0x176>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	68db      	ldr	r3, [r3, #12]
 8005c76:	2204      	movs	r2, #4
 8005c78:	4013      	ands	r3, r2
 8005c7a:	d0e2      	beq.n	8005c42 <HAL_RTCEx_SetWakeUpTimer_IT+0xba>
    }
  }

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	68ba      	ldr	r2, [r7, #8]
 8005c82:	615a      	str	r2, [r3, #20]

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	689a      	ldr	r2, [r3, #8]
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	2107      	movs	r1, #7
 8005c90:	438a      	bics	r2, r1
 8005c92:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	6899      	ldr	r1, [r3, #8]
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	687a      	ldr	r2, [r7, #4]
 8005ca0:	430a      	orrs	r2, r1
 8005ca2:	609a      	str	r2, [r3, #8]

  /* RTC WakeUpTimer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 8005ca4:	4b1a      	ldr	r3, [pc, #104]	; (8005d10 <HAL_RTCEx_SetWakeUpTimer_IT+0x188>)
 8005ca6:	681a      	ldr	r2, [r3, #0]
 8005ca8:	4b19      	ldr	r3, [pc, #100]	; (8005d10 <HAL_RTCEx_SetWakeUpTimer_IT+0x188>)
 8005caa:	2180      	movs	r1, #128	; 0x80
 8005cac:	0349      	lsls	r1, r1, #13
 8005cae:	430a      	orrs	r2, r1
 8005cb0:	601a      	str	r2, [r3, #0]

  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 8005cb2:	4b17      	ldr	r3, [pc, #92]	; (8005d10 <HAL_RTCEx_SetWakeUpTimer_IT+0x188>)
 8005cb4:	689a      	ldr	r2, [r3, #8]
 8005cb6:	4b16      	ldr	r3, [pc, #88]	; (8005d10 <HAL_RTCEx_SetWakeUpTimer_IT+0x188>)
 8005cb8:	2180      	movs	r1, #128	; 0x80
 8005cba:	0349      	lsls	r1, r1, #13
 8005cbc:	430a      	orrs	r2, r1
 8005cbe:	609a      	str	r2, [r3, #8]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	689a      	ldr	r2, [r3, #8]
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	2180      	movs	r1, #128	; 0x80
 8005ccc:	01c9      	lsls	r1, r1, #7
 8005cce:	430a      	orrs	r2, r1
 8005cd0:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	689a      	ldr	r2, [r3, #8]
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	2180      	movs	r1, #128	; 0x80
 8005cde:	00c9      	lsls	r1, r1, #3
 8005ce0:	430a      	orrs	r2, r1
 8005ce2:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	22ff      	movs	r2, #255	; 0xff
 8005cea:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	2221      	movs	r2, #33	; 0x21
 8005cf0:	2101      	movs	r1, #1
 8005cf2:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	2220      	movs	r2, #32
 8005cf8:	2100      	movs	r1, #0
 8005cfa:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005cfc:	2300      	movs	r3, #0
}
 8005cfe:	0018      	movs	r0, r3
 8005d00:	46bd      	mov	sp, r7
 8005d02:	b006      	add	sp, #24
 8005d04:	bd80      	pop	{r7, pc}
 8005d06:	46c0      	nop			; (mov r8, r8)
 8005d08:	fffffbff 	.word	0xfffffbff
 8005d0c:	fffffb7f 	.word	0xfffffb7f
 8005d10:	40010400 	.word	0x40010400

08005d14 <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @brief  Handle Wake Up Timer interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8005d14:	b580      	push	{r7, lr}
 8005d16:	b082      	sub	sp, #8
 8005d18:	af00      	add	r7, sp, #0
 8005d1a:	6078      	str	r0, [r7, #4]
  /* Get the pending status of the WAKEUPTIMER Interrupt */
  if (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != 0U)
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	68da      	ldr	r2, [r3, #12]
 8005d22:	2380      	movs	r3, #128	; 0x80
 8005d24:	00db      	lsls	r3, r3, #3
 8005d26:	4013      	ands	r3, r2
 8005d28:	d00d      	beq.n	8005d46 <HAL_RTCEx_WakeUpTimerIRQHandler+0x32>
  {
    /* WAKEUPTIMER callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    hrtc->WakeUpTimerEventCallback(hrtc);
#else
    HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	0018      	movs	r0, r3
 8005d2e:	f7fd faf7 	bl	8003320 <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

    /* Clear the WAKEUPTIMER interrupt pending bit */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	68db      	ldr	r3, [r3, #12]
 8005d38:	22ff      	movs	r2, #255	; 0xff
 8005d3a:	401a      	ands	r2, r3
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	4907      	ldr	r1, [pc, #28]	; (8005d60 <HAL_RTCEx_WakeUpTimerIRQHandler+0x4c>)
 8005d42:	430a      	orrs	r2, r1
 8005d44:	60da      	str	r2, [r3, #12]
  }

  /* Clear the EXTI's line Flag for RTC WakeUpTimer */
  __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 8005d46:	4b07      	ldr	r3, [pc, #28]	; (8005d64 <HAL_RTCEx_WakeUpTimerIRQHandler+0x50>)
 8005d48:	2280      	movs	r2, #128	; 0x80
 8005d4a:	0352      	lsls	r2, r2, #13
 8005d4c:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	2221      	movs	r2, #33	; 0x21
 8005d52:	2101      	movs	r1, #1
 8005d54:	5499      	strb	r1, [r3, r2]
}
 8005d56:	46c0      	nop			; (mov r8, r8)
 8005d58:	46bd      	mov	sp, r7
 8005d5a:	b002      	add	sp, #8
 8005d5c:	bd80      	pop	{r7, pc}
 8005d5e:	46c0      	nop			; (mov r8, r8)
 8005d60:	fffffb7f 	.word	0xfffffb7f
 8005d64:	40010400 	.word	0x40010400

08005d68 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005d68:	b580      	push	{r7, lr}
 8005d6a:	b082      	sub	sp, #8
 8005d6c:	af00      	add	r7, sp, #0
 8005d6e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d101      	bne.n	8005d7a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005d76:	2301      	movs	r3, #1
 8005d78:	e032      	b.n	8005de0 <HAL_TIM_Base_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	2239      	movs	r2, #57	; 0x39
 8005d7e:	5c9b      	ldrb	r3, [r3, r2]
 8005d80:	b2db      	uxtb	r3, r3
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d107      	bne.n	8005d96 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	2238      	movs	r2, #56	; 0x38
 8005d8a:	2100      	movs	r1, #0
 8005d8c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	0018      	movs	r0, r3
 8005d92:	f7fd fbcf 	bl	8003534 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	2239      	movs	r2, #57	; 0x39
 8005d9a:	2102      	movs	r1, #2
 8005d9c:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681a      	ldr	r2, [r3, #0]
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	3304      	adds	r3, #4
 8005da6:	0019      	movs	r1, r3
 8005da8:	0010      	movs	r0, r2
 8005daa:	f000 f93b 	bl	8006024 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	223e      	movs	r2, #62	; 0x3e
 8005db2:	2101      	movs	r1, #1
 8005db4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	223a      	movs	r2, #58	; 0x3a
 8005dba:	2101      	movs	r1, #1
 8005dbc:	5499      	strb	r1, [r3, r2]
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	223b      	movs	r2, #59	; 0x3b
 8005dc2:	2101      	movs	r1, #1
 8005dc4:	5499      	strb	r1, [r3, r2]
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	223c      	movs	r2, #60	; 0x3c
 8005dca:	2101      	movs	r1, #1
 8005dcc:	5499      	strb	r1, [r3, r2]
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	223d      	movs	r2, #61	; 0x3d
 8005dd2:	2101      	movs	r1, #1
 8005dd4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	2239      	movs	r2, #57	; 0x39
 8005dda:	2101      	movs	r1, #1
 8005ddc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005dde:	2300      	movs	r3, #0
}
 8005de0:	0018      	movs	r0, r3
 8005de2:	46bd      	mov	sp, r7
 8005de4:	b002      	add	sp, #8
 8005de6:	bd80      	pop	{r7, pc}

08005de8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005de8:	b580      	push	{r7, lr}
 8005dea:	b084      	sub	sp, #16
 8005dec:	af00      	add	r7, sp, #0
 8005dee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	2239      	movs	r2, #57	; 0x39
 8005df4:	5c9b      	ldrb	r3, [r3, r2]
 8005df6:	b2db      	uxtb	r3, r3
 8005df8:	2b01      	cmp	r3, #1
 8005dfa:	d001      	beq.n	8005e00 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005dfc:	2301      	movs	r3, #1
 8005dfe:	e033      	b.n	8005e68 <HAL_TIM_Base_Start+0x80>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	2239      	movs	r2, #57	; 0x39
 8005e04:	2102      	movs	r1, #2
 8005e06:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681a      	ldr	r2, [r3, #0]
 8005e0c:	2380      	movs	r3, #128	; 0x80
 8005e0e:	05db      	lsls	r3, r3, #23
 8005e10:	429a      	cmp	r2, r3
 8005e12:	d00e      	beq.n	8005e32 <HAL_TIM_Base_Start+0x4a>
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	4a15      	ldr	r2, [pc, #84]	; (8005e70 <HAL_TIM_Base_Start+0x88>)
 8005e1a:	4293      	cmp	r3, r2
 8005e1c:	d009      	beq.n	8005e32 <HAL_TIM_Base_Start+0x4a>
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	4a14      	ldr	r2, [pc, #80]	; (8005e74 <HAL_TIM_Base_Start+0x8c>)
 8005e24:	4293      	cmp	r3, r2
 8005e26:	d004      	beq.n	8005e32 <HAL_TIM_Base_Start+0x4a>
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	4a12      	ldr	r2, [pc, #72]	; (8005e78 <HAL_TIM_Base_Start+0x90>)
 8005e2e:	4293      	cmp	r3, r2
 8005e30:	d111      	bne.n	8005e56 <HAL_TIM_Base_Start+0x6e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	689b      	ldr	r3, [r3, #8]
 8005e38:	2207      	movs	r2, #7
 8005e3a:	4013      	ands	r3, r2
 8005e3c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	2b06      	cmp	r3, #6
 8005e42:	d010      	beq.n	8005e66 <HAL_TIM_Base_Start+0x7e>
    {
      __HAL_TIM_ENABLE(htim);
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	681a      	ldr	r2, [r3, #0]
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	2101      	movs	r1, #1
 8005e50:	430a      	orrs	r2, r1
 8005e52:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e54:	e007      	b.n	8005e66 <HAL_TIM_Base_Start+0x7e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	681a      	ldr	r2, [r3, #0]
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	2101      	movs	r1, #1
 8005e62:	430a      	orrs	r2, r1
 8005e64:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005e66:	2300      	movs	r3, #0
}
 8005e68:	0018      	movs	r0, r3
 8005e6a:	46bd      	mov	sp, r7
 8005e6c:	b004      	add	sp, #16
 8005e6e:	bd80      	pop	{r7, pc}
 8005e70:	40000400 	.word	0x40000400
 8005e74:	40010800 	.word	0x40010800
 8005e78:	40011400 	.word	0x40011400

08005e7c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005e7c:	b580      	push	{r7, lr}
 8005e7e:	b084      	sub	sp, #16
 8005e80:	af00      	add	r7, sp, #0
 8005e82:	6078      	str	r0, [r7, #4]
 8005e84:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005e86:	230f      	movs	r3, #15
 8005e88:	18fb      	adds	r3, r7, r3
 8005e8a:	2200      	movs	r2, #0
 8005e8c:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	2238      	movs	r2, #56	; 0x38
 8005e92:	5c9b      	ldrb	r3, [r3, r2]
 8005e94:	2b01      	cmp	r3, #1
 8005e96:	d101      	bne.n	8005e9c <HAL_TIM_ConfigClockSource+0x20>
 8005e98:	2302      	movs	r3, #2
 8005e9a:	e0bc      	b.n	8006016 <HAL_TIM_ConfigClockSource+0x19a>
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	2238      	movs	r2, #56	; 0x38
 8005ea0:	2101      	movs	r1, #1
 8005ea2:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	2239      	movs	r2, #57	; 0x39
 8005ea8:	2102      	movs	r1, #2
 8005eaa:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	689b      	ldr	r3, [r3, #8]
 8005eb2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005eb4:	68bb      	ldr	r3, [r7, #8]
 8005eb6:	2277      	movs	r2, #119	; 0x77
 8005eb8:	4393      	bics	r3, r2
 8005eba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005ebc:	68bb      	ldr	r3, [r7, #8]
 8005ebe:	4a58      	ldr	r2, [pc, #352]	; (8006020 <HAL_TIM_ConfigClockSource+0x1a4>)
 8005ec0:	4013      	ands	r3, r2
 8005ec2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	68ba      	ldr	r2, [r7, #8]
 8005eca:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005ecc:	683b      	ldr	r3, [r7, #0]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	2280      	movs	r2, #128	; 0x80
 8005ed2:	0192      	lsls	r2, r2, #6
 8005ed4:	4293      	cmp	r3, r2
 8005ed6:	d040      	beq.n	8005f5a <HAL_TIM_ConfigClockSource+0xde>
 8005ed8:	2280      	movs	r2, #128	; 0x80
 8005eda:	0192      	lsls	r2, r2, #6
 8005edc:	4293      	cmp	r3, r2
 8005ede:	d900      	bls.n	8005ee2 <HAL_TIM_ConfigClockSource+0x66>
 8005ee0:	e088      	b.n	8005ff4 <HAL_TIM_ConfigClockSource+0x178>
 8005ee2:	2280      	movs	r2, #128	; 0x80
 8005ee4:	0152      	lsls	r2, r2, #5
 8005ee6:	4293      	cmp	r3, r2
 8005ee8:	d100      	bne.n	8005eec <HAL_TIM_ConfigClockSource+0x70>
 8005eea:	e088      	b.n	8005ffe <HAL_TIM_ConfigClockSource+0x182>
 8005eec:	2280      	movs	r2, #128	; 0x80
 8005eee:	0152      	lsls	r2, r2, #5
 8005ef0:	4293      	cmp	r3, r2
 8005ef2:	d900      	bls.n	8005ef6 <HAL_TIM_ConfigClockSource+0x7a>
 8005ef4:	e07e      	b.n	8005ff4 <HAL_TIM_ConfigClockSource+0x178>
 8005ef6:	2b70      	cmp	r3, #112	; 0x70
 8005ef8:	d018      	beq.n	8005f2c <HAL_TIM_ConfigClockSource+0xb0>
 8005efa:	d900      	bls.n	8005efe <HAL_TIM_ConfigClockSource+0x82>
 8005efc:	e07a      	b.n	8005ff4 <HAL_TIM_ConfigClockSource+0x178>
 8005efe:	2b60      	cmp	r3, #96	; 0x60
 8005f00:	d04f      	beq.n	8005fa2 <HAL_TIM_ConfigClockSource+0x126>
 8005f02:	d900      	bls.n	8005f06 <HAL_TIM_ConfigClockSource+0x8a>
 8005f04:	e076      	b.n	8005ff4 <HAL_TIM_ConfigClockSource+0x178>
 8005f06:	2b50      	cmp	r3, #80	; 0x50
 8005f08:	d03b      	beq.n	8005f82 <HAL_TIM_ConfigClockSource+0x106>
 8005f0a:	d900      	bls.n	8005f0e <HAL_TIM_ConfigClockSource+0x92>
 8005f0c:	e072      	b.n	8005ff4 <HAL_TIM_ConfigClockSource+0x178>
 8005f0e:	2b40      	cmp	r3, #64	; 0x40
 8005f10:	d057      	beq.n	8005fc2 <HAL_TIM_ConfigClockSource+0x146>
 8005f12:	d900      	bls.n	8005f16 <HAL_TIM_ConfigClockSource+0x9a>
 8005f14:	e06e      	b.n	8005ff4 <HAL_TIM_ConfigClockSource+0x178>
 8005f16:	2b30      	cmp	r3, #48	; 0x30
 8005f18:	d063      	beq.n	8005fe2 <HAL_TIM_ConfigClockSource+0x166>
 8005f1a:	d86b      	bhi.n	8005ff4 <HAL_TIM_ConfigClockSource+0x178>
 8005f1c:	2b20      	cmp	r3, #32
 8005f1e:	d060      	beq.n	8005fe2 <HAL_TIM_ConfigClockSource+0x166>
 8005f20:	d868      	bhi.n	8005ff4 <HAL_TIM_ConfigClockSource+0x178>
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d05d      	beq.n	8005fe2 <HAL_TIM_ConfigClockSource+0x166>
 8005f26:	2b10      	cmp	r3, #16
 8005f28:	d05b      	beq.n	8005fe2 <HAL_TIM_ConfigClockSource+0x166>
 8005f2a:	e063      	b.n	8005ff4 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	6818      	ldr	r0, [r3, #0]
 8005f30:	683b      	ldr	r3, [r7, #0]
 8005f32:	6899      	ldr	r1, [r3, #8]
 8005f34:	683b      	ldr	r3, [r7, #0]
 8005f36:	685a      	ldr	r2, [r3, #4]
 8005f38:	683b      	ldr	r3, [r7, #0]
 8005f3a:	68db      	ldr	r3, [r3, #12]
 8005f3c:	f000 f94a 	bl	80061d4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	689b      	ldr	r3, [r3, #8]
 8005f46:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005f48:	68bb      	ldr	r3, [r7, #8]
 8005f4a:	2277      	movs	r2, #119	; 0x77
 8005f4c:	4313      	orrs	r3, r2
 8005f4e:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	68ba      	ldr	r2, [r7, #8]
 8005f56:	609a      	str	r2, [r3, #8]
      break;
 8005f58:	e052      	b.n	8006000 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	6818      	ldr	r0, [r3, #0]
 8005f5e:	683b      	ldr	r3, [r7, #0]
 8005f60:	6899      	ldr	r1, [r3, #8]
 8005f62:	683b      	ldr	r3, [r7, #0]
 8005f64:	685a      	ldr	r2, [r3, #4]
 8005f66:	683b      	ldr	r3, [r7, #0]
 8005f68:	68db      	ldr	r3, [r3, #12]
 8005f6a:	f000 f933 	bl	80061d4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	689a      	ldr	r2, [r3, #8]
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	2180      	movs	r1, #128	; 0x80
 8005f7a:	01c9      	lsls	r1, r1, #7
 8005f7c:	430a      	orrs	r2, r1
 8005f7e:	609a      	str	r2, [r3, #8]
      break;
 8005f80:	e03e      	b.n	8006000 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	6818      	ldr	r0, [r3, #0]
 8005f86:	683b      	ldr	r3, [r7, #0]
 8005f88:	6859      	ldr	r1, [r3, #4]
 8005f8a:	683b      	ldr	r3, [r7, #0]
 8005f8c:	68db      	ldr	r3, [r3, #12]
 8005f8e:	001a      	movs	r2, r3
 8005f90:	f000 f8a6 	bl	80060e0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	2150      	movs	r1, #80	; 0x50
 8005f9a:	0018      	movs	r0, r3
 8005f9c:	f000 f900 	bl	80061a0 <TIM_ITRx_SetConfig>
      break;
 8005fa0:	e02e      	b.n	8006000 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	6818      	ldr	r0, [r3, #0]
 8005fa6:	683b      	ldr	r3, [r7, #0]
 8005fa8:	6859      	ldr	r1, [r3, #4]
 8005faa:	683b      	ldr	r3, [r7, #0]
 8005fac:	68db      	ldr	r3, [r3, #12]
 8005fae:	001a      	movs	r2, r3
 8005fb0:	f000 f8c4 	bl	800613c <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	2160      	movs	r1, #96	; 0x60
 8005fba:	0018      	movs	r0, r3
 8005fbc:	f000 f8f0 	bl	80061a0 <TIM_ITRx_SetConfig>
      break;
 8005fc0:	e01e      	b.n	8006000 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	6818      	ldr	r0, [r3, #0]
 8005fc6:	683b      	ldr	r3, [r7, #0]
 8005fc8:	6859      	ldr	r1, [r3, #4]
 8005fca:	683b      	ldr	r3, [r7, #0]
 8005fcc:	68db      	ldr	r3, [r3, #12]
 8005fce:	001a      	movs	r2, r3
 8005fd0:	f000 f886 	bl	80060e0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	2140      	movs	r1, #64	; 0x40
 8005fda:	0018      	movs	r0, r3
 8005fdc:	f000 f8e0 	bl	80061a0 <TIM_ITRx_SetConfig>
      break;
 8005fe0:	e00e      	b.n	8006000 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681a      	ldr	r2, [r3, #0]
 8005fe6:	683b      	ldr	r3, [r7, #0]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	0019      	movs	r1, r3
 8005fec:	0010      	movs	r0, r2
 8005fee:	f000 f8d7 	bl	80061a0 <TIM_ITRx_SetConfig>
      break;
 8005ff2:	e005      	b.n	8006000 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8005ff4:	230f      	movs	r3, #15
 8005ff6:	18fb      	adds	r3, r7, r3
 8005ff8:	2201      	movs	r2, #1
 8005ffa:	701a      	strb	r2, [r3, #0]
      break;
 8005ffc:	e000      	b.n	8006000 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8005ffe:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	2239      	movs	r2, #57	; 0x39
 8006004:	2101      	movs	r1, #1
 8006006:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	2238      	movs	r2, #56	; 0x38
 800600c:	2100      	movs	r1, #0
 800600e:	5499      	strb	r1, [r3, r2]

  return status;
 8006010:	230f      	movs	r3, #15
 8006012:	18fb      	adds	r3, r7, r3
 8006014:	781b      	ldrb	r3, [r3, #0]
}
 8006016:	0018      	movs	r0, r3
 8006018:	46bd      	mov	sp, r7
 800601a:	b004      	add	sp, #16
 800601c:	bd80      	pop	{r7, pc}
 800601e:	46c0      	nop			; (mov r8, r8)
 8006020:	ffff00ff 	.word	0xffff00ff

08006024 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006024:	b580      	push	{r7, lr}
 8006026:	b084      	sub	sp, #16
 8006028:	af00      	add	r7, sp, #0
 800602a:	6078      	str	r0, [r7, #4]
 800602c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006034:	687a      	ldr	r2, [r7, #4]
 8006036:	2380      	movs	r3, #128	; 0x80
 8006038:	05db      	lsls	r3, r3, #23
 800603a:	429a      	cmp	r2, r3
 800603c:	d00b      	beq.n	8006056 <TIM_Base_SetConfig+0x32>
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	4a23      	ldr	r2, [pc, #140]	; (80060d0 <TIM_Base_SetConfig+0xac>)
 8006042:	4293      	cmp	r3, r2
 8006044:	d007      	beq.n	8006056 <TIM_Base_SetConfig+0x32>
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	4a22      	ldr	r2, [pc, #136]	; (80060d4 <TIM_Base_SetConfig+0xb0>)
 800604a:	4293      	cmp	r3, r2
 800604c:	d003      	beq.n	8006056 <TIM_Base_SetConfig+0x32>
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	4a21      	ldr	r2, [pc, #132]	; (80060d8 <TIM_Base_SetConfig+0xb4>)
 8006052:	4293      	cmp	r3, r2
 8006054:	d108      	bne.n	8006068 <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	2270      	movs	r2, #112	; 0x70
 800605a:	4393      	bics	r3, r2
 800605c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800605e:	683b      	ldr	r3, [r7, #0]
 8006060:	685b      	ldr	r3, [r3, #4]
 8006062:	68fa      	ldr	r2, [r7, #12]
 8006064:	4313      	orrs	r3, r2
 8006066:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006068:	687a      	ldr	r2, [r7, #4]
 800606a:	2380      	movs	r3, #128	; 0x80
 800606c:	05db      	lsls	r3, r3, #23
 800606e:	429a      	cmp	r2, r3
 8006070:	d00b      	beq.n	800608a <TIM_Base_SetConfig+0x66>
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	4a16      	ldr	r2, [pc, #88]	; (80060d0 <TIM_Base_SetConfig+0xac>)
 8006076:	4293      	cmp	r3, r2
 8006078:	d007      	beq.n	800608a <TIM_Base_SetConfig+0x66>
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	4a15      	ldr	r2, [pc, #84]	; (80060d4 <TIM_Base_SetConfig+0xb0>)
 800607e:	4293      	cmp	r3, r2
 8006080:	d003      	beq.n	800608a <TIM_Base_SetConfig+0x66>
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	4a14      	ldr	r2, [pc, #80]	; (80060d8 <TIM_Base_SetConfig+0xb4>)
 8006086:	4293      	cmp	r3, r2
 8006088:	d108      	bne.n	800609c <TIM_Base_SetConfig+0x78>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	4a13      	ldr	r2, [pc, #76]	; (80060dc <TIM_Base_SetConfig+0xb8>)
 800608e:	4013      	ands	r3, r2
 8006090:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006092:	683b      	ldr	r3, [r7, #0]
 8006094:	68db      	ldr	r3, [r3, #12]
 8006096:	68fa      	ldr	r2, [r7, #12]
 8006098:	4313      	orrs	r3, r2
 800609a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	2280      	movs	r2, #128	; 0x80
 80060a0:	4393      	bics	r3, r2
 80060a2:	001a      	movs	r2, r3
 80060a4:	683b      	ldr	r3, [r7, #0]
 80060a6:	691b      	ldr	r3, [r3, #16]
 80060a8:	4313      	orrs	r3, r2
 80060aa:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	68fa      	ldr	r2, [r7, #12]
 80060b0:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80060b2:	683b      	ldr	r3, [r7, #0]
 80060b4:	689a      	ldr	r2, [r3, #8]
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80060ba:	683b      	ldr	r3, [r7, #0]
 80060bc:	681a      	ldr	r2, [r3, #0]
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	2201      	movs	r2, #1
 80060c6:	615a      	str	r2, [r3, #20]
}
 80060c8:	46c0      	nop			; (mov r8, r8)
 80060ca:	46bd      	mov	sp, r7
 80060cc:	b004      	add	sp, #16
 80060ce:	bd80      	pop	{r7, pc}
 80060d0:	40000400 	.word	0x40000400
 80060d4:	40010800 	.word	0x40010800
 80060d8:	40011400 	.word	0x40011400
 80060dc:	fffffcff 	.word	0xfffffcff

080060e0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80060e0:	b580      	push	{r7, lr}
 80060e2:	b086      	sub	sp, #24
 80060e4:	af00      	add	r7, sp, #0
 80060e6:	60f8      	str	r0, [r7, #12]
 80060e8:	60b9      	str	r1, [r7, #8]
 80060ea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	6a1b      	ldr	r3, [r3, #32]
 80060f0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	6a1b      	ldr	r3, [r3, #32]
 80060f6:	2201      	movs	r2, #1
 80060f8:	4393      	bics	r3, r2
 80060fa:	001a      	movs	r2, r3
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	699b      	ldr	r3, [r3, #24]
 8006104:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006106:	693b      	ldr	r3, [r7, #16]
 8006108:	22f0      	movs	r2, #240	; 0xf0
 800610a:	4393      	bics	r3, r2
 800610c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	011b      	lsls	r3, r3, #4
 8006112:	693a      	ldr	r2, [r7, #16]
 8006114:	4313      	orrs	r3, r2
 8006116:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006118:	697b      	ldr	r3, [r7, #20]
 800611a:	220a      	movs	r2, #10
 800611c:	4393      	bics	r3, r2
 800611e:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006120:	697a      	ldr	r2, [r7, #20]
 8006122:	68bb      	ldr	r3, [r7, #8]
 8006124:	4313      	orrs	r3, r2
 8006126:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	693a      	ldr	r2, [r7, #16]
 800612c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	697a      	ldr	r2, [r7, #20]
 8006132:	621a      	str	r2, [r3, #32]
}
 8006134:	46c0      	nop			; (mov r8, r8)
 8006136:	46bd      	mov	sp, r7
 8006138:	b006      	add	sp, #24
 800613a:	bd80      	pop	{r7, pc}

0800613c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800613c:	b580      	push	{r7, lr}
 800613e:	b086      	sub	sp, #24
 8006140:	af00      	add	r7, sp, #0
 8006142:	60f8      	str	r0, [r7, #12]
 8006144:	60b9      	str	r1, [r7, #8]
 8006146:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	6a1b      	ldr	r3, [r3, #32]
 800614c:	2210      	movs	r2, #16
 800614e:	4393      	bics	r3, r2
 8006150:	001a      	movs	r2, r3
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	699b      	ldr	r3, [r3, #24]
 800615a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	6a1b      	ldr	r3, [r3, #32]
 8006160:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006162:	697b      	ldr	r3, [r7, #20]
 8006164:	4a0d      	ldr	r2, [pc, #52]	; (800619c <TIM_TI2_ConfigInputStage+0x60>)
 8006166:	4013      	ands	r3, r2
 8006168:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	031b      	lsls	r3, r3, #12
 800616e:	697a      	ldr	r2, [r7, #20]
 8006170:	4313      	orrs	r3, r2
 8006172:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006174:	693b      	ldr	r3, [r7, #16]
 8006176:	22a0      	movs	r2, #160	; 0xa0
 8006178:	4393      	bics	r3, r2
 800617a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800617c:	68bb      	ldr	r3, [r7, #8]
 800617e:	011b      	lsls	r3, r3, #4
 8006180:	693a      	ldr	r2, [r7, #16]
 8006182:	4313      	orrs	r3, r2
 8006184:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	697a      	ldr	r2, [r7, #20]
 800618a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	693a      	ldr	r2, [r7, #16]
 8006190:	621a      	str	r2, [r3, #32]
}
 8006192:	46c0      	nop			; (mov r8, r8)
 8006194:	46bd      	mov	sp, r7
 8006196:	b006      	add	sp, #24
 8006198:	bd80      	pop	{r7, pc}
 800619a:	46c0      	nop			; (mov r8, r8)
 800619c:	ffff0fff 	.word	0xffff0fff

080061a0 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80061a0:	b580      	push	{r7, lr}
 80061a2:	b084      	sub	sp, #16
 80061a4:	af00      	add	r7, sp, #0
 80061a6:	6078      	str	r0, [r7, #4]
 80061a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	689b      	ldr	r3, [r3, #8]
 80061ae:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	2270      	movs	r2, #112	; 0x70
 80061b4:	4393      	bics	r3, r2
 80061b6:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80061b8:	683a      	ldr	r2, [r7, #0]
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	4313      	orrs	r3, r2
 80061be:	2207      	movs	r2, #7
 80061c0:	4313      	orrs	r3, r2
 80061c2:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	68fa      	ldr	r2, [r7, #12]
 80061c8:	609a      	str	r2, [r3, #8]
}
 80061ca:	46c0      	nop			; (mov r8, r8)
 80061cc:	46bd      	mov	sp, r7
 80061ce:	b004      	add	sp, #16
 80061d0:	bd80      	pop	{r7, pc}
	...

080061d4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80061d4:	b580      	push	{r7, lr}
 80061d6:	b086      	sub	sp, #24
 80061d8:	af00      	add	r7, sp, #0
 80061da:	60f8      	str	r0, [r7, #12]
 80061dc:	60b9      	str	r1, [r7, #8]
 80061de:	607a      	str	r2, [r7, #4]
 80061e0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	689b      	ldr	r3, [r3, #8]
 80061e6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80061e8:	697b      	ldr	r3, [r7, #20]
 80061ea:	4a09      	ldr	r2, [pc, #36]	; (8006210 <TIM_ETR_SetConfig+0x3c>)
 80061ec:	4013      	ands	r3, r2
 80061ee:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80061f0:	683b      	ldr	r3, [r7, #0]
 80061f2:	021a      	lsls	r2, r3, #8
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	431a      	orrs	r2, r3
 80061f8:	68bb      	ldr	r3, [r7, #8]
 80061fa:	4313      	orrs	r3, r2
 80061fc:	697a      	ldr	r2, [r7, #20]
 80061fe:	4313      	orrs	r3, r2
 8006200:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	697a      	ldr	r2, [r7, #20]
 8006206:	609a      	str	r2, [r3, #8]
}
 8006208:	46c0      	nop			; (mov r8, r8)
 800620a:	46bd      	mov	sp, r7
 800620c:	b006      	add	sp, #24
 800620e:	bd80      	pop	{r7, pc}
 8006210:	ffff00ff 	.word	0xffff00ff

08006214 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006214:	b580      	push	{r7, lr}
 8006216:	b084      	sub	sp, #16
 8006218:	af00      	add	r7, sp, #0
 800621a:	6078      	str	r0, [r7, #4]
 800621c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	2238      	movs	r2, #56	; 0x38
 8006222:	5c9b      	ldrb	r3, [r3, r2]
 8006224:	2b01      	cmp	r3, #1
 8006226:	d101      	bne.n	800622c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006228:	2302      	movs	r3, #2
 800622a:	e047      	b.n	80062bc <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	2238      	movs	r2, #56	; 0x38
 8006230:	2101      	movs	r1, #1
 8006232:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	2239      	movs	r2, #57	; 0x39
 8006238:	2102      	movs	r1, #2
 800623a:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	685b      	ldr	r3, [r3, #4]
 8006242:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	689b      	ldr	r3, [r3, #8]
 800624a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	2270      	movs	r2, #112	; 0x70
 8006250:	4393      	bics	r3, r2
 8006252:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006254:	683b      	ldr	r3, [r7, #0]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	68fa      	ldr	r2, [r7, #12]
 800625a:	4313      	orrs	r3, r2
 800625c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	68fa      	ldr	r2, [r7, #12]
 8006264:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681a      	ldr	r2, [r3, #0]
 800626a:	2380      	movs	r3, #128	; 0x80
 800626c:	05db      	lsls	r3, r3, #23
 800626e:	429a      	cmp	r2, r3
 8006270:	d00e      	beq.n	8006290 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	4a13      	ldr	r2, [pc, #76]	; (80062c4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8006278:	4293      	cmp	r3, r2
 800627a:	d009      	beq.n	8006290 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	4a11      	ldr	r2, [pc, #68]	; (80062c8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8006282:	4293      	cmp	r3, r2
 8006284:	d004      	beq.n	8006290 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	4a10      	ldr	r2, [pc, #64]	; (80062cc <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800628c:	4293      	cmp	r3, r2
 800628e:	d10c      	bne.n	80062aa <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006290:	68bb      	ldr	r3, [r7, #8]
 8006292:	2280      	movs	r2, #128	; 0x80
 8006294:	4393      	bics	r3, r2
 8006296:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006298:	683b      	ldr	r3, [r7, #0]
 800629a:	685b      	ldr	r3, [r3, #4]
 800629c:	68ba      	ldr	r2, [r7, #8]
 800629e:	4313      	orrs	r3, r2
 80062a0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	68ba      	ldr	r2, [r7, #8]
 80062a8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	2239      	movs	r2, #57	; 0x39
 80062ae:	2101      	movs	r1, #1
 80062b0:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	2238      	movs	r2, #56	; 0x38
 80062b6:	2100      	movs	r1, #0
 80062b8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80062ba:	2300      	movs	r3, #0
}
 80062bc:	0018      	movs	r0, r3
 80062be:	46bd      	mov	sp, r7
 80062c0:	b004      	add	sp, #16
 80062c2:	bd80      	pop	{r7, pc}
 80062c4:	40000400 	.word	0x40000400
 80062c8:	40010800 	.word	0x40010800
 80062cc:	40011400 	.word	0x40011400

080062d0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80062d0:	b580      	push	{r7, lr}
 80062d2:	b082      	sub	sp, #8
 80062d4:	af00      	add	r7, sp, #0
 80062d6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d101      	bne.n	80062e2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80062de:	2301      	movs	r3, #1
 80062e0:	e044      	b.n	800636c <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d107      	bne.n	80062fa <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	2274      	movs	r2, #116	; 0x74
 80062ee:	2100      	movs	r1, #0
 80062f0:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	0018      	movs	r0, r3
 80062f6:	f7fd f9ad 	bl	8003654 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	2224      	movs	r2, #36	; 0x24
 80062fe:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	681a      	ldr	r2, [r3, #0]
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	2101      	movs	r1, #1
 800630c:	438a      	bics	r2, r1
 800630e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	0018      	movs	r0, r3
 8006314:	f000 fc36 	bl	8006b84 <UART_SetConfig>
 8006318:	0003      	movs	r3, r0
 800631a:	2b01      	cmp	r3, #1
 800631c:	d101      	bne.n	8006322 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800631e:	2301      	movs	r3, #1
 8006320:	e024      	b.n	800636c <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006326:	2b00      	cmp	r3, #0
 8006328:	d003      	beq.n	8006332 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	0018      	movs	r0, r3
 800632e:	f000 fee7 	bl	8007100 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	685a      	ldr	r2, [r3, #4]
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	490d      	ldr	r1, [pc, #52]	; (8006374 <HAL_UART_Init+0xa4>)
 800633e:	400a      	ands	r2, r1
 8006340:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	689a      	ldr	r2, [r3, #8]
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	212a      	movs	r1, #42	; 0x2a
 800634e:	438a      	bics	r2, r1
 8006350:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	681a      	ldr	r2, [r3, #0]
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	2101      	movs	r1, #1
 800635e:	430a      	orrs	r2, r1
 8006360:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	0018      	movs	r0, r3
 8006366:	f000 ff7f 	bl	8007268 <UART_CheckIdleState>
 800636a:	0003      	movs	r3, r0
}
 800636c:	0018      	movs	r0, r3
 800636e:	46bd      	mov	sp, r7
 8006370:	b002      	add	sp, #8
 8006372:	bd80      	pop	{r7, pc}
 8006374:	ffffb7ff 	.word	0xffffb7ff

08006378 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006378:	b580      	push	{r7, lr}
 800637a:	b08a      	sub	sp, #40	; 0x28
 800637c:	af02      	add	r7, sp, #8
 800637e:	60f8      	str	r0, [r7, #12]
 8006380:	60b9      	str	r1, [r7, #8]
 8006382:	603b      	str	r3, [r7, #0]
 8006384:	1dbb      	adds	r3, r7, #6
 8006386:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800638c:	2b20      	cmp	r3, #32
 800638e:	d000      	beq.n	8006392 <HAL_UART_Transmit+0x1a>
 8006390:	e095      	b.n	80064be <HAL_UART_Transmit+0x146>
  {
    if ((pData == NULL) || (Size == 0U))
 8006392:	68bb      	ldr	r3, [r7, #8]
 8006394:	2b00      	cmp	r3, #0
 8006396:	d003      	beq.n	80063a0 <HAL_UART_Transmit+0x28>
 8006398:	1dbb      	adds	r3, r7, #6
 800639a:	881b      	ldrh	r3, [r3, #0]
 800639c:	2b00      	cmp	r3, #0
 800639e:	d101      	bne.n	80063a4 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80063a0:	2301      	movs	r3, #1
 80063a2:	e08d      	b.n	80064c0 <HAL_UART_Transmit+0x148>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	689a      	ldr	r2, [r3, #8]
 80063a8:	2380      	movs	r3, #128	; 0x80
 80063aa:	015b      	lsls	r3, r3, #5
 80063ac:	429a      	cmp	r2, r3
 80063ae:	d109      	bne.n	80063c4 <HAL_UART_Transmit+0x4c>
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	691b      	ldr	r3, [r3, #16]
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d105      	bne.n	80063c4 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80063b8:	68bb      	ldr	r3, [r7, #8]
 80063ba:	2201      	movs	r2, #1
 80063bc:	4013      	ands	r3, r2
 80063be:	d001      	beq.n	80063c4 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 80063c0:	2301      	movs	r3, #1
 80063c2:	e07d      	b.n	80064c0 <HAL_UART_Transmit+0x148>
      }
    }

    __HAL_LOCK(huart);
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	2274      	movs	r2, #116	; 0x74
 80063c8:	5c9b      	ldrb	r3, [r3, r2]
 80063ca:	2b01      	cmp	r3, #1
 80063cc:	d101      	bne.n	80063d2 <HAL_UART_Transmit+0x5a>
 80063ce:	2302      	movs	r3, #2
 80063d0:	e076      	b.n	80064c0 <HAL_UART_Transmit+0x148>
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	2274      	movs	r2, #116	; 0x74
 80063d6:	2101      	movs	r1, #1
 80063d8:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	2280      	movs	r2, #128	; 0x80
 80063de:	2100      	movs	r1, #0
 80063e0:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	2221      	movs	r2, #33	; 0x21
 80063e6:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80063e8:	f7fd fbf2 	bl	8003bd0 <HAL_GetTick>
 80063ec:	0003      	movs	r3, r0
 80063ee:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	1dba      	adds	r2, r7, #6
 80063f4:	2150      	movs	r1, #80	; 0x50
 80063f6:	8812      	ldrh	r2, [r2, #0]
 80063f8:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	1dba      	adds	r2, r7, #6
 80063fe:	2152      	movs	r1, #82	; 0x52
 8006400:	8812      	ldrh	r2, [r2, #0]
 8006402:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	689a      	ldr	r2, [r3, #8]
 8006408:	2380      	movs	r3, #128	; 0x80
 800640a:	015b      	lsls	r3, r3, #5
 800640c:	429a      	cmp	r2, r3
 800640e:	d108      	bne.n	8006422 <HAL_UART_Transmit+0xaa>
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	691b      	ldr	r3, [r3, #16]
 8006414:	2b00      	cmp	r3, #0
 8006416:	d104      	bne.n	8006422 <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 8006418:	2300      	movs	r3, #0
 800641a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800641c:	68bb      	ldr	r3, [r7, #8]
 800641e:	61bb      	str	r3, [r7, #24]
 8006420:	e003      	b.n	800642a <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 8006422:	68bb      	ldr	r3, [r7, #8]
 8006424:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006426:	2300      	movs	r3, #0
 8006428:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	2274      	movs	r2, #116	; 0x74
 800642e:	2100      	movs	r1, #0
 8006430:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 8006432:	e02c      	b.n	800648e <HAL_UART_Transmit+0x116>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006434:	697a      	ldr	r2, [r7, #20]
 8006436:	68f8      	ldr	r0, [r7, #12]
 8006438:	683b      	ldr	r3, [r7, #0]
 800643a:	9300      	str	r3, [sp, #0]
 800643c:	0013      	movs	r3, r2
 800643e:	2200      	movs	r2, #0
 8006440:	2180      	movs	r1, #128	; 0x80
 8006442:	f000 ff59 	bl	80072f8 <UART_WaitOnFlagUntilTimeout>
 8006446:	1e03      	subs	r3, r0, #0
 8006448:	d001      	beq.n	800644e <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 800644a:	2303      	movs	r3, #3
 800644c:	e038      	b.n	80064c0 <HAL_UART_Transmit+0x148>
      }
      if (pdata8bits == NULL)
 800644e:	69fb      	ldr	r3, [r7, #28]
 8006450:	2b00      	cmp	r3, #0
 8006452:	d10b      	bne.n	800646c <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006454:	69bb      	ldr	r3, [r7, #24]
 8006456:	881b      	ldrh	r3, [r3, #0]
 8006458:	001a      	movs	r2, r3
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	05d2      	lsls	r2, r2, #23
 8006460:	0dd2      	lsrs	r2, r2, #23
 8006462:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006464:	69bb      	ldr	r3, [r7, #24]
 8006466:	3302      	adds	r3, #2
 8006468:	61bb      	str	r3, [r7, #24]
 800646a:	e007      	b.n	800647c <HAL_UART_Transmit+0x104>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800646c:	69fb      	ldr	r3, [r7, #28]
 800646e:	781a      	ldrb	r2, [r3, #0]
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006476:	69fb      	ldr	r3, [r7, #28]
 8006478:	3301      	adds	r3, #1
 800647a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	2252      	movs	r2, #82	; 0x52
 8006480:	5a9b      	ldrh	r3, [r3, r2]
 8006482:	b29b      	uxth	r3, r3
 8006484:	3b01      	subs	r3, #1
 8006486:	b299      	uxth	r1, r3
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	2252      	movs	r2, #82	; 0x52
 800648c:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	2252      	movs	r2, #82	; 0x52
 8006492:	5a9b      	ldrh	r3, [r3, r2]
 8006494:	b29b      	uxth	r3, r3
 8006496:	2b00      	cmp	r3, #0
 8006498:	d1cc      	bne.n	8006434 <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800649a:	697a      	ldr	r2, [r7, #20]
 800649c:	68f8      	ldr	r0, [r7, #12]
 800649e:	683b      	ldr	r3, [r7, #0]
 80064a0:	9300      	str	r3, [sp, #0]
 80064a2:	0013      	movs	r3, r2
 80064a4:	2200      	movs	r2, #0
 80064a6:	2140      	movs	r1, #64	; 0x40
 80064a8:	f000 ff26 	bl	80072f8 <UART_WaitOnFlagUntilTimeout>
 80064ac:	1e03      	subs	r3, r0, #0
 80064ae:	d001      	beq.n	80064b4 <HAL_UART_Transmit+0x13c>
    {
      return HAL_TIMEOUT;
 80064b0:	2303      	movs	r3, #3
 80064b2:	e005      	b.n	80064c0 <HAL_UART_Transmit+0x148>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	2220      	movs	r2, #32
 80064b8:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80064ba:	2300      	movs	r3, #0
 80064bc:	e000      	b.n	80064c0 <HAL_UART_Transmit+0x148>
  }
  else
  {
    return HAL_BUSY;
 80064be:	2302      	movs	r3, #2
  }
}
 80064c0:	0018      	movs	r0, r3
 80064c2:	46bd      	mov	sp, r7
 80064c4:	b008      	add	sp, #32
 80064c6:	bd80      	pop	{r7, pc}

080064c8 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80064c8:	b580      	push	{r7, lr}
 80064ca:	b088      	sub	sp, #32
 80064cc:	af00      	add	r7, sp, #0
 80064ce:	60f8      	str	r0, [r7, #12]
 80064d0:	60b9      	str	r1, [r7, #8]
 80064d2:	1dbb      	adds	r3, r7, #6
 80064d4:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80064da:	2b20      	cmp	r3, #32
 80064dc:	d155      	bne.n	800658a <HAL_UART_Receive_IT+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 80064de:	68bb      	ldr	r3, [r7, #8]
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d003      	beq.n	80064ec <HAL_UART_Receive_IT+0x24>
 80064e4:	1dbb      	adds	r3, r7, #6
 80064e6:	881b      	ldrh	r3, [r3, #0]
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d101      	bne.n	80064f0 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80064ec:	2301      	movs	r3, #1
 80064ee:	e04d      	b.n	800658c <HAL_UART_Receive_IT+0xc4>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	689a      	ldr	r2, [r3, #8]
 80064f4:	2380      	movs	r3, #128	; 0x80
 80064f6:	015b      	lsls	r3, r3, #5
 80064f8:	429a      	cmp	r2, r3
 80064fa:	d109      	bne.n	8006510 <HAL_UART_Receive_IT+0x48>
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	691b      	ldr	r3, [r3, #16]
 8006500:	2b00      	cmp	r3, #0
 8006502:	d105      	bne.n	8006510 <HAL_UART_Receive_IT+0x48>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8006504:	68bb      	ldr	r3, [r7, #8]
 8006506:	2201      	movs	r2, #1
 8006508:	4013      	ands	r3, r2
 800650a:	d001      	beq.n	8006510 <HAL_UART_Receive_IT+0x48>
      {
        return  HAL_ERROR;
 800650c:	2301      	movs	r3, #1
 800650e:	e03d      	b.n	800658c <HAL_UART_Receive_IT+0xc4>
      }
    }

    __HAL_LOCK(huart);
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	2274      	movs	r2, #116	; 0x74
 8006514:	5c9b      	ldrb	r3, [r3, r2]
 8006516:	2b01      	cmp	r3, #1
 8006518:	d101      	bne.n	800651e <HAL_UART_Receive_IT+0x56>
 800651a:	2302      	movs	r3, #2
 800651c:	e036      	b.n	800658c <HAL_UART_Receive_IT+0xc4>
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	2274      	movs	r2, #116	; 0x74
 8006522:	2101      	movs	r1, #1
 8006524:	5499      	strb	r1, [r3, r2]

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	2200      	movs	r2, #0
 800652a:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	4a18      	ldr	r2, [pc, #96]	; (8006594 <HAL_UART_Receive_IT+0xcc>)
 8006532:	4293      	cmp	r3, r2
 8006534:	d020      	beq.n	8006578 <HAL_UART_Receive_IT+0xb0>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	685a      	ldr	r2, [r3, #4]
 800653c:	2380      	movs	r3, #128	; 0x80
 800653e:	041b      	lsls	r3, r3, #16
 8006540:	4013      	ands	r3, r2
 8006542:	d019      	beq.n	8006578 <HAL_UART_Receive_IT+0xb0>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006544:	f3ef 8310 	mrs	r3, PRIMASK
 8006548:	613b      	str	r3, [r7, #16]
  return(result);
 800654a:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800654c:	61fb      	str	r3, [r7, #28]
 800654e:	2301      	movs	r3, #1
 8006550:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006552:	697b      	ldr	r3, [r7, #20]
 8006554:	f383 8810 	msr	PRIMASK, r3
}
 8006558:	46c0      	nop			; (mov r8, r8)
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	681a      	ldr	r2, [r3, #0]
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	2180      	movs	r1, #128	; 0x80
 8006566:	04c9      	lsls	r1, r1, #19
 8006568:	430a      	orrs	r2, r1
 800656a:	601a      	str	r2, [r3, #0]
 800656c:	69fb      	ldr	r3, [r7, #28]
 800656e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006570:	69bb      	ldr	r3, [r7, #24]
 8006572:	f383 8810 	msr	PRIMASK, r3
}
 8006576:	46c0      	nop			; (mov r8, r8)
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006578:	1dbb      	adds	r3, r7, #6
 800657a:	881a      	ldrh	r2, [r3, #0]
 800657c:	68b9      	ldr	r1, [r7, #8]
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	0018      	movs	r0, r3
 8006582:	f000 ff7d 	bl	8007480 <UART_Start_Receive_IT>
 8006586:	0003      	movs	r3, r0
 8006588:	e000      	b.n	800658c <HAL_UART_Receive_IT+0xc4>
  }
  else
  {
    return HAL_BUSY;
 800658a:	2302      	movs	r3, #2
  }
}
 800658c:	0018      	movs	r0, r3
 800658e:	46bd      	mov	sp, r7
 8006590:	b008      	add	sp, #32
 8006592:	bd80      	pop	{r7, pc}
 8006594:	40004800 	.word	0x40004800

08006598 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006598:	b590      	push	{r4, r7, lr}
 800659a:	b0ab      	sub	sp, #172	; 0xac
 800659c:	af00      	add	r7, sp, #0
 800659e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	69db      	ldr	r3, [r3, #28]
 80065a6:	22a4      	movs	r2, #164	; 0xa4
 80065a8:	18b9      	adds	r1, r7, r2
 80065aa:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	20a0      	movs	r0, #160	; 0xa0
 80065b4:	1839      	adds	r1, r7, r0
 80065b6:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	689b      	ldr	r3, [r3, #8]
 80065be:	219c      	movs	r1, #156	; 0x9c
 80065c0:	1879      	adds	r1, r7, r1
 80065c2:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80065c4:	0011      	movs	r1, r2
 80065c6:	18bb      	adds	r3, r7, r2
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	4a99      	ldr	r2, [pc, #612]	; (8006830 <HAL_UART_IRQHandler+0x298>)
 80065cc:	4013      	ands	r3, r2
 80065ce:	2298      	movs	r2, #152	; 0x98
 80065d0:	18bc      	adds	r4, r7, r2
 80065d2:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 80065d4:	18bb      	adds	r3, r7, r2
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d114      	bne.n	8006606 <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80065dc:	187b      	adds	r3, r7, r1
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	2220      	movs	r2, #32
 80065e2:	4013      	ands	r3, r2
 80065e4:	d00f      	beq.n	8006606 <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80065e6:	183b      	adds	r3, r7, r0
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	2220      	movs	r2, #32
 80065ec:	4013      	ands	r3, r2
 80065ee:	d00a      	beq.n	8006606 <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d100      	bne.n	80065fa <HAL_UART_IRQHandler+0x62>
 80065f8:	e298      	b.n	8006b2c <HAL_UART_IRQHandler+0x594>
      {
        huart->RxISR(huart);
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80065fe:	687a      	ldr	r2, [r7, #4]
 8006600:	0010      	movs	r0, r2
 8006602:	4798      	blx	r3
      }
      return;
 8006604:	e292      	b.n	8006b2c <HAL_UART_IRQHandler+0x594>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006606:	2398      	movs	r3, #152	; 0x98
 8006608:	18fb      	adds	r3, r7, r3
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	2b00      	cmp	r3, #0
 800660e:	d100      	bne.n	8006612 <HAL_UART_IRQHandler+0x7a>
 8006610:	e114      	b.n	800683c <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8006612:	239c      	movs	r3, #156	; 0x9c
 8006614:	18fb      	adds	r3, r7, r3
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	2201      	movs	r2, #1
 800661a:	4013      	ands	r3, r2
 800661c:	d106      	bne.n	800662c <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800661e:	23a0      	movs	r3, #160	; 0xa0
 8006620:	18fb      	adds	r3, r7, r3
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	4a83      	ldr	r2, [pc, #524]	; (8006834 <HAL_UART_IRQHandler+0x29c>)
 8006626:	4013      	ands	r3, r2
 8006628:	d100      	bne.n	800662c <HAL_UART_IRQHandler+0x94>
 800662a:	e107      	b.n	800683c <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800662c:	23a4      	movs	r3, #164	; 0xa4
 800662e:	18fb      	adds	r3, r7, r3
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	2201      	movs	r2, #1
 8006634:	4013      	ands	r3, r2
 8006636:	d012      	beq.n	800665e <HAL_UART_IRQHandler+0xc6>
 8006638:	23a0      	movs	r3, #160	; 0xa0
 800663a:	18fb      	adds	r3, r7, r3
 800663c:	681a      	ldr	r2, [r3, #0]
 800663e:	2380      	movs	r3, #128	; 0x80
 8006640:	005b      	lsls	r3, r3, #1
 8006642:	4013      	ands	r3, r2
 8006644:	d00b      	beq.n	800665e <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	2201      	movs	r2, #1
 800664c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	2280      	movs	r2, #128	; 0x80
 8006652:	589b      	ldr	r3, [r3, r2]
 8006654:	2201      	movs	r2, #1
 8006656:	431a      	orrs	r2, r3
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	2180      	movs	r1, #128	; 0x80
 800665c:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800665e:	23a4      	movs	r3, #164	; 0xa4
 8006660:	18fb      	adds	r3, r7, r3
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	2202      	movs	r2, #2
 8006666:	4013      	ands	r3, r2
 8006668:	d011      	beq.n	800668e <HAL_UART_IRQHandler+0xf6>
 800666a:	239c      	movs	r3, #156	; 0x9c
 800666c:	18fb      	adds	r3, r7, r3
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	2201      	movs	r2, #1
 8006672:	4013      	ands	r3, r2
 8006674:	d00b      	beq.n	800668e <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	2202      	movs	r2, #2
 800667c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	2280      	movs	r2, #128	; 0x80
 8006682:	589b      	ldr	r3, [r3, r2]
 8006684:	2204      	movs	r2, #4
 8006686:	431a      	orrs	r2, r3
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	2180      	movs	r1, #128	; 0x80
 800668c:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800668e:	23a4      	movs	r3, #164	; 0xa4
 8006690:	18fb      	adds	r3, r7, r3
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	2204      	movs	r2, #4
 8006696:	4013      	ands	r3, r2
 8006698:	d011      	beq.n	80066be <HAL_UART_IRQHandler+0x126>
 800669a:	239c      	movs	r3, #156	; 0x9c
 800669c:	18fb      	adds	r3, r7, r3
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	2201      	movs	r2, #1
 80066a2:	4013      	ands	r3, r2
 80066a4:	d00b      	beq.n	80066be <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	2204      	movs	r2, #4
 80066ac:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	2280      	movs	r2, #128	; 0x80
 80066b2:	589b      	ldr	r3, [r3, r2]
 80066b4:	2202      	movs	r2, #2
 80066b6:	431a      	orrs	r2, r3
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	2180      	movs	r1, #128	; 0x80
 80066bc:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80066be:	23a4      	movs	r3, #164	; 0xa4
 80066c0:	18fb      	adds	r3, r7, r3
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	2208      	movs	r2, #8
 80066c6:	4013      	ands	r3, r2
 80066c8:	d017      	beq.n	80066fa <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80066ca:	23a0      	movs	r3, #160	; 0xa0
 80066cc:	18fb      	adds	r3, r7, r3
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	2220      	movs	r2, #32
 80066d2:	4013      	ands	r3, r2
 80066d4:	d105      	bne.n	80066e2 <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80066d6:	239c      	movs	r3, #156	; 0x9c
 80066d8:	18fb      	adds	r3, r7, r3
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	2201      	movs	r2, #1
 80066de:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80066e0:	d00b      	beq.n	80066fa <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	2208      	movs	r2, #8
 80066e8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	2280      	movs	r2, #128	; 0x80
 80066ee:	589b      	ldr	r3, [r3, r2]
 80066f0:	2208      	movs	r2, #8
 80066f2:	431a      	orrs	r2, r3
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	2180      	movs	r1, #128	; 0x80
 80066f8:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80066fa:	23a4      	movs	r3, #164	; 0xa4
 80066fc:	18fb      	adds	r3, r7, r3
 80066fe:	681a      	ldr	r2, [r3, #0]
 8006700:	2380      	movs	r3, #128	; 0x80
 8006702:	011b      	lsls	r3, r3, #4
 8006704:	4013      	ands	r3, r2
 8006706:	d013      	beq.n	8006730 <HAL_UART_IRQHandler+0x198>
 8006708:	23a0      	movs	r3, #160	; 0xa0
 800670a:	18fb      	adds	r3, r7, r3
 800670c:	681a      	ldr	r2, [r3, #0]
 800670e:	2380      	movs	r3, #128	; 0x80
 8006710:	04db      	lsls	r3, r3, #19
 8006712:	4013      	ands	r3, r2
 8006714:	d00c      	beq.n	8006730 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	2280      	movs	r2, #128	; 0x80
 800671c:	0112      	lsls	r2, r2, #4
 800671e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	2280      	movs	r2, #128	; 0x80
 8006724:	589b      	ldr	r3, [r3, r2]
 8006726:	2220      	movs	r2, #32
 8006728:	431a      	orrs	r2, r3
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	2180      	movs	r1, #128	; 0x80
 800672e:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	2280      	movs	r2, #128	; 0x80
 8006734:	589b      	ldr	r3, [r3, r2]
 8006736:	2b00      	cmp	r3, #0
 8006738:	d100      	bne.n	800673c <HAL_UART_IRQHandler+0x1a4>
 800673a:	e1f9      	b.n	8006b30 <HAL_UART_IRQHandler+0x598>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800673c:	23a4      	movs	r3, #164	; 0xa4
 800673e:	18fb      	adds	r3, r7, r3
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	2220      	movs	r2, #32
 8006744:	4013      	ands	r3, r2
 8006746:	d00e      	beq.n	8006766 <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006748:	23a0      	movs	r3, #160	; 0xa0
 800674a:	18fb      	adds	r3, r7, r3
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	2220      	movs	r2, #32
 8006750:	4013      	ands	r3, r2
 8006752:	d008      	beq.n	8006766 <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006758:	2b00      	cmp	r3, #0
 800675a:	d004      	beq.n	8006766 <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006760:	687a      	ldr	r2, [r7, #4]
 8006762:	0010      	movs	r0, r2
 8006764:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	2280      	movs	r2, #128	; 0x80
 800676a:	589b      	ldr	r3, [r3, r2]
 800676c:	2194      	movs	r1, #148	; 0x94
 800676e:	187a      	adds	r2, r7, r1
 8006770:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	689b      	ldr	r3, [r3, #8]
 8006778:	2240      	movs	r2, #64	; 0x40
 800677a:	4013      	ands	r3, r2
 800677c:	2b40      	cmp	r3, #64	; 0x40
 800677e:	d004      	beq.n	800678a <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006780:	187b      	adds	r3, r7, r1
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	2228      	movs	r2, #40	; 0x28
 8006786:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006788:	d047      	beq.n	800681a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	0018      	movs	r0, r3
 800678e:	f000 ff27 	bl	80075e0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	689b      	ldr	r3, [r3, #8]
 8006798:	2240      	movs	r2, #64	; 0x40
 800679a:	4013      	ands	r3, r2
 800679c:	2b40      	cmp	r3, #64	; 0x40
 800679e:	d137      	bne.n	8006810 <HAL_UART_IRQHandler+0x278>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80067a0:	f3ef 8310 	mrs	r3, PRIMASK
 80067a4:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 80067a6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80067a8:	2090      	movs	r0, #144	; 0x90
 80067aa:	183a      	adds	r2, r7, r0
 80067ac:	6013      	str	r3, [r2, #0]
 80067ae:	2301      	movs	r3, #1
 80067b0:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80067b2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80067b4:	f383 8810 	msr	PRIMASK, r3
}
 80067b8:	46c0      	nop			; (mov r8, r8)
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	689a      	ldr	r2, [r3, #8]
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	2140      	movs	r1, #64	; 0x40
 80067c6:	438a      	bics	r2, r1
 80067c8:	609a      	str	r2, [r3, #8]
 80067ca:	183b      	adds	r3, r7, r0
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80067d0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80067d2:	f383 8810 	msr	PRIMASK, r3
}
 80067d6:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d012      	beq.n	8006806 <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067e4:	4a14      	ldr	r2, [pc, #80]	; (8006838 <HAL_UART_IRQHandler+0x2a0>)
 80067e6:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067ec:	0018      	movs	r0, r3
 80067ee:	f7fd ff23 	bl	8004638 <HAL_DMA_Abort_IT>
 80067f2:	1e03      	subs	r3, r0, #0
 80067f4:	d01a      	beq.n	800682c <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067fa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006800:	0018      	movs	r0, r3
 8006802:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006804:	e012      	b.n	800682c <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	0018      	movs	r0, r3
 800680a:	f000 f9a7 	bl	8006b5c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800680e:	e00d      	b.n	800682c <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	0018      	movs	r0, r3
 8006814:	f000 f9a2 	bl	8006b5c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006818:	e008      	b.n	800682c <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	0018      	movs	r0, r3
 800681e:	f000 f99d 	bl	8006b5c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	2280      	movs	r2, #128	; 0x80
 8006826:	2100      	movs	r1, #0
 8006828:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 800682a:	e181      	b.n	8006b30 <HAL_UART_IRQHandler+0x598>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800682c:	46c0      	nop			; (mov r8, r8)
    return;
 800682e:	e17f      	b.n	8006b30 <HAL_UART_IRQHandler+0x598>
 8006830:	0000080f 	.word	0x0000080f
 8006834:	04000120 	.word	0x04000120
 8006838:	080076a5 	.word	0x080076a5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006840:	2b01      	cmp	r3, #1
 8006842:	d000      	beq.n	8006846 <HAL_UART_IRQHandler+0x2ae>
 8006844:	e133      	b.n	8006aae <HAL_UART_IRQHandler+0x516>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006846:	23a4      	movs	r3, #164	; 0xa4
 8006848:	18fb      	adds	r3, r7, r3
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	2210      	movs	r2, #16
 800684e:	4013      	ands	r3, r2
 8006850:	d100      	bne.n	8006854 <HAL_UART_IRQHandler+0x2bc>
 8006852:	e12c      	b.n	8006aae <HAL_UART_IRQHandler+0x516>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006854:	23a0      	movs	r3, #160	; 0xa0
 8006856:	18fb      	adds	r3, r7, r3
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	2210      	movs	r2, #16
 800685c:	4013      	ands	r3, r2
 800685e:	d100      	bne.n	8006862 <HAL_UART_IRQHandler+0x2ca>
 8006860:	e125      	b.n	8006aae <HAL_UART_IRQHandler+0x516>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	2210      	movs	r2, #16
 8006868:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	689b      	ldr	r3, [r3, #8]
 8006870:	2240      	movs	r2, #64	; 0x40
 8006872:	4013      	ands	r3, r2
 8006874:	2b40      	cmp	r3, #64	; 0x40
 8006876:	d000      	beq.n	800687a <HAL_UART_IRQHandler+0x2e2>
 8006878:	e09d      	b.n	80069b6 <HAL_UART_IRQHandler+0x41e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	685a      	ldr	r2, [r3, #4]
 8006882:	217e      	movs	r1, #126	; 0x7e
 8006884:	187b      	adds	r3, r7, r1
 8006886:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8006888:	187b      	adds	r3, r7, r1
 800688a:	881b      	ldrh	r3, [r3, #0]
 800688c:	2b00      	cmp	r3, #0
 800688e:	d100      	bne.n	8006892 <HAL_UART_IRQHandler+0x2fa>
 8006890:	e150      	b.n	8006b34 <HAL_UART_IRQHandler+0x59c>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	2258      	movs	r2, #88	; 0x58
 8006896:	5a9b      	ldrh	r3, [r3, r2]
 8006898:	187a      	adds	r2, r7, r1
 800689a:	8812      	ldrh	r2, [r2, #0]
 800689c:	429a      	cmp	r2, r3
 800689e:	d300      	bcc.n	80068a2 <HAL_UART_IRQHandler+0x30a>
 80068a0:	e148      	b.n	8006b34 <HAL_UART_IRQHandler+0x59c>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	187a      	adds	r2, r7, r1
 80068a6:	215a      	movs	r1, #90	; 0x5a
 80068a8:	8812      	ldrh	r2, [r2, #0]
 80068aa:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	2220      	movs	r2, #32
 80068b6:	4013      	ands	r3, r2
 80068b8:	d16e      	bne.n	8006998 <HAL_UART_IRQHandler+0x400>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80068ba:	f3ef 8310 	mrs	r3, PRIMASK
 80068be:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 80068c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80068c2:	67bb      	str	r3, [r7, #120]	; 0x78
 80068c4:	2301      	movs	r3, #1
 80068c6:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80068c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068ca:	f383 8810 	msr	PRIMASK, r3
}
 80068ce:	46c0      	nop			; (mov r8, r8)
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	681a      	ldr	r2, [r3, #0]
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	499a      	ldr	r1, [pc, #616]	; (8006b44 <HAL_UART_IRQHandler+0x5ac>)
 80068dc:	400a      	ands	r2, r1
 80068de:	601a      	str	r2, [r3, #0]
 80068e0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80068e2:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80068e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068e6:	f383 8810 	msr	PRIMASK, r3
}
 80068ea:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80068ec:	f3ef 8310 	mrs	r3, PRIMASK
 80068f0:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 80068f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80068f4:	677b      	str	r3, [r7, #116]	; 0x74
 80068f6:	2301      	movs	r3, #1
 80068f8:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80068fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80068fc:	f383 8810 	msr	PRIMASK, r3
}
 8006900:	46c0      	nop			; (mov r8, r8)
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	689a      	ldr	r2, [r3, #8]
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	2101      	movs	r1, #1
 800690e:	438a      	bics	r2, r1
 8006910:	609a      	str	r2, [r3, #8]
 8006912:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006914:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006916:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006918:	f383 8810 	msr	PRIMASK, r3
}
 800691c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800691e:	f3ef 8310 	mrs	r3, PRIMASK
 8006922:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8006924:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006926:	673b      	str	r3, [r7, #112]	; 0x70
 8006928:	2301      	movs	r3, #1
 800692a:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800692c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800692e:	f383 8810 	msr	PRIMASK, r3
}
 8006932:	46c0      	nop			; (mov r8, r8)
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	689a      	ldr	r2, [r3, #8]
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	2140      	movs	r1, #64	; 0x40
 8006940:	438a      	bics	r2, r1
 8006942:	609a      	str	r2, [r3, #8]
 8006944:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006946:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006948:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800694a:	f383 8810 	msr	PRIMASK, r3
}
 800694e:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	2220      	movs	r2, #32
 8006954:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	2200      	movs	r2, #0
 800695a:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800695c:	f3ef 8310 	mrs	r3, PRIMASK
 8006960:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8006962:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006964:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006966:	2301      	movs	r3, #1
 8006968:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800696a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800696c:	f383 8810 	msr	PRIMASK, r3
}
 8006970:	46c0      	nop			; (mov r8, r8)
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	681a      	ldr	r2, [r3, #0]
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	2110      	movs	r1, #16
 800697e:	438a      	bics	r2, r1
 8006980:	601a      	str	r2, [r3, #0]
 8006982:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006984:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006986:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006988:	f383 8810 	msr	PRIMASK, r3
}
 800698c:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006992:	0018      	movs	r0, r3
 8006994:	f7fd fe10 	bl	80045b8 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	2258      	movs	r2, #88	; 0x58
 800699c:	5a9a      	ldrh	r2, [r3, r2]
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	215a      	movs	r1, #90	; 0x5a
 80069a2:	5a5b      	ldrh	r3, [r3, r1]
 80069a4:	b29b      	uxth	r3, r3
 80069a6:	1ad3      	subs	r3, r2, r3
 80069a8:	b29a      	uxth	r2, r3
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	0011      	movs	r1, r2
 80069ae:	0018      	movs	r0, r3
 80069b0:	f000 f8dc 	bl	8006b6c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80069b4:	e0be      	b.n	8006b34 <HAL_UART_IRQHandler+0x59c>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	2258      	movs	r2, #88	; 0x58
 80069ba:	5a99      	ldrh	r1, [r3, r2]
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	225a      	movs	r2, #90	; 0x5a
 80069c0:	5a9b      	ldrh	r3, [r3, r2]
 80069c2:	b29a      	uxth	r2, r3
 80069c4:	208e      	movs	r0, #142	; 0x8e
 80069c6:	183b      	adds	r3, r7, r0
 80069c8:	1a8a      	subs	r2, r1, r2
 80069ca:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	225a      	movs	r2, #90	; 0x5a
 80069d0:	5a9b      	ldrh	r3, [r3, r2]
 80069d2:	b29b      	uxth	r3, r3
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d100      	bne.n	80069da <HAL_UART_IRQHandler+0x442>
 80069d8:	e0ae      	b.n	8006b38 <HAL_UART_IRQHandler+0x5a0>
          && (nb_rx_data > 0U))
 80069da:	183b      	adds	r3, r7, r0
 80069dc:	881b      	ldrh	r3, [r3, #0]
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d100      	bne.n	80069e4 <HAL_UART_IRQHandler+0x44c>
 80069e2:	e0a9      	b.n	8006b38 <HAL_UART_IRQHandler+0x5a0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80069e4:	f3ef 8310 	mrs	r3, PRIMASK
 80069e8:	60fb      	str	r3, [r7, #12]
  return(result);
 80069ea:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80069ec:	2488      	movs	r4, #136	; 0x88
 80069ee:	193a      	adds	r2, r7, r4
 80069f0:	6013      	str	r3, [r2, #0]
 80069f2:	2301      	movs	r3, #1
 80069f4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80069f6:	693b      	ldr	r3, [r7, #16]
 80069f8:	f383 8810 	msr	PRIMASK, r3
}
 80069fc:	46c0      	nop			; (mov r8, r8)
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	681a      	ldr	r2, [r3, #0]
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	494f      	ldr	r1, [pc, #316]	; (8006b48 <HAL_UART_IRQHandler+0x5b0>)
 8006a0a:	400a      	ands	r2, r1
 8006a0c:	601a      	str	r2, [r3, #0]
 8006a0e:	193b      	adds	r3, r7, r4
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006a14:	697b      	ldr	r3, [r7, #20]
 8006a16:	f383 8810 	msr	PRIMASK, r3
}
 8006a1a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006a1c:	f3ef 8310 	mrs	r3, PRIMASK
 8006a20:	61bb      	str	r3, [r7, #24]
  return(result);
 8006a22:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a24:	2484      	movs	r4, #132	; 0x84
 8006a26:	193a      	adds	r2, r7, r4
 8006a28:	6013      	str	r3, [r2, #0]
 8006a2a:	2301      	movs	r3, #1
 8006a2c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006a2e:	69fb      	ldr	r3, [r7, #28]
 8006a30:	f383 8810 	msr	PRIMASK, r3
}
 8006a34:	46c0      	nop			; (mov r8, r8)
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	689a      	ldr	r2, [r3, #8]
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	2101      	movs	r1, #1
 8006a42:	438a      	bics	r2, r1
 8006a44:	609a      	str	r2, [r3, #8]
 8006a46:	193b      	adds	r3, r7, r4
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006a4c:	6a3b      	ldr	r3, [r7, #32]
 8006a4e:	f383 8810 	msr	PRIMASK, r3
}
 8006a52:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	2220      	movs	r2, #32
 8006a58:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	2200      	movs	r2, #0
 8006a5e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	2200      	movs	r2, #0
 8006a64:	665a      	str	r2, [r3, #100]	; 0x64
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006a66:	f3ef 8310 	mrs	r3, PRIMASK
 8006a6a:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8006a6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006a6e:	2480      	movs	r4, #128	; 0x80
 8006a70:	193a      	adds	r2, r7, r4
 8006a72:	6013      	str	r3, [r2, #0]
 8006a74:	2301      	movs	r3, #1
 8006a76:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006a78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a7a:	f383 8810 	msr	PRIMASK, r3
}
 8006a7e:	46c0      	nop			; (mov r8, r8)
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	681a      	ldr	r2, [r3, #0]
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	2110      	movs	r1, #16
 8006a8c:	438a      	bics	r2, r1
 8006a8e:	601a      	str	r2, [r3, #0]
 8006a90:	193b      	adds	r3, r7, r4
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006a96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a98:	f383 8810 	msr	PRIMASK, r3
}
 8006a9c:	46c0      	nop			; (mov r8, r8)
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006a9e:	183b      	adds	r3, r7, r0
 8006aa0:	881a      	ldrh	r2, [r3, #0]
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	0011      	movs	r1, r2
 8006aa6:	0018      	movs	r0, r3
 8006aa8:	f000 f860 	bl	8006b6c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006aac:	e044      	b.n	8006b38 <HAL_UART_IRQHandler+0x5a0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006aae:	23a4      	movs	r3, #164	; 0xa4
 8006ab0:	18fb      	adds	r3, r7, r3
 8006ab2:	681a      	ldr	r2, [r3, #0]
 8006ab4:	2380      	movs	r3, #128	; 0x80
 8006ab6:	035b      	lsls	r3, r3, #13
 8006ab8:	4013      	ands	r3, r2
 8006aba:	d010      	beq.n	8006ade <HAL_UART_IRQHandler+0x546>
 8006abc:	239c      	movs	r3, #156	; 0x9c
 8006abe:	18fb      	adds	r3, r7, r3
 8006ac0:	681a      	ldr	r2, [r3, #0]
 8006ac2:	2380      	movs	r3, #128	; 0x80
 8006ac4:	03db      	lsls	r3, r3, #15
 8006ac6:	4013      	ands	r3, r2
 8006ac8:	d009      	beq.n	8006ade <HAL_UART_IRQHandler+0x546>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	2280      	movs	r2, #128	; 0x80
 8006ad0:	0352      	lsls	r2, r2, #13
 8006ad2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	0018      	movs	r0, r3
 8006ad8:	f000 ff8e 	bl	80079f8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006adc:	e02f      	b.n	8006b3e <HAL_UART_IRQHandler+0x5a6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8006ade:	23a4      	movs	r3, #164	; 0xa4
 8006ae0:	18fb      	adds	r3, r7, r3
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	2280      	movs	r2, #128	; 0x80
 8006ae6:	4013      	ands	r3, r2
 8006ae8:	d00f      	beq.n	8006b0a <HAL_UART_IRQHandler+0x572>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8006aea:	23a0      	movs	r3, #160	; 0xa0
 8006aec:	18fb      	adds	r3, r7, r3
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	2280      	movs	r2, #128	; 0x80
 8006af2:	4013      	ands	r3, r2
 8006af4:	d009      	beq.n	8006b0a <HAL_UART_IRQHandler+0x572>
  {
    if (huart->TxISR != NULL)
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d01e      	beq.n	8006b3c <HAL_UART_IRQHandler+0x5a4>
    {
      huart->TxISR(huart);
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006b02:	687a      	ldr	r2, [r7, #4]
 8006b04:	0010      	movs	r0, r2
 8006b06:	4798      	blx	r3
    }
    return;
 8006b08:	e018      	b.n	8006b3c <HAL_UART_IRQHandler+0x5a4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006b0a:	23a4      	movs	r3, #164	; 0xa4
 8006b0c:	18fb      	adds	r3, r7, r3
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	2240      	movs	r2, #64	; 0x40
 8006b12:	4013      	ands	r3, r2
 8006b14:	d013      	beq.n	8006b3e <HAL_UART_IRQHandler+0x5a6>
 8006b16:	23a0      	movs	r3, #160	; 0xa0
 8006b18:	18fb      	adds	r3, r7, r3
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	2240      	movs	r2, #64	; 0x40
 8006b1e:	4013      	ands	r3, r2
 8006b20:	d00d      	beq.n	8006b3e <HAL_UART_IRQHandler+0x5a6>
  {
    UART_EndTransmit_IT(huart);
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	0018      	movs	r0, r3
 8006b26:	f000 fdd4 	bl	80076d2 <UART_EndTransmit_IT>
    return;
 8006b2a:	e008      	b.n	8006b3e <HAL_UART_IRQHandler+0x5a6>
      return;
 8006b2c:	46c0      	nop			; (mov r8, r8)
 8006b2e:	e006      	b.n	8006b3e <HAL_UART_IRQHandler+0x5a6>
    return;
 8006b30:	46c0      	nop			; (mov r8, r8)
 8006b32:	e004      	b.n	8006b3e <HAL_UART_IRQHandler+0x5a6>
      return;
 8006b34:	46c0      	nop			; (mov r8, r8)
 8006b36:	e002      	b.n	8006b3e <HAL_UART_IRQHandler+0x5a6>
      return;
 8006b38:	46c0      	nop			; (mov r8, r8)
 8006b3a:	e000      	b.n	8006b3e <HAL_UART_IRQHandler+0x5a6>
    return;
 8006b3c:	46c0      	nop			; (mov r8, r8)
  }

}
 8006b3e:	46bd      	mov	sp, r7
 8006b40:	b02b      	add	sp, #172	; 0xac
 8006b42:	bd90      	pop	{r4, r7, pc}
 8006b44:	fffffeff 	.word	0xfffffeff
 8006b48:	fffffedf 	.word	0xfffffedf

08006b4c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006b4c:	b580      	push	{r7, lr}
 8006b4e:	b082      	sub	sp, #8
 8006b50:	af00      	add	r7, sp, #0
 8006b52:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006b54:	46c0      	nop			; (mov r8, r8)
 8006b56:	46bd      	mov	sp, r7
 8006b58:	b002      	add	sp, #8
 8006b5a:	bd80      	pop	{r7, pc}

08006b5c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006b5c:	b580      	push	{r7, lr}
 8006b5e:	b082      	sub	sp, #8
 8006b60:	af00      	add	r7, sp, #0
 8006b62:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006b64:	46c0      	nop			; (mov r8, r8)
 8006b66:	46bd      	mov	sp, r7
 8006b68:	b002      	add	sp, #8
 8006b6a:	bd80      	pop	{r7, pc}

08006b6c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006b6c:	b580      	push	{r7, lr}
 8006b6e:	b082      	sub	sp, #8
 8006b70:	af00      	add	r7, sp, #0
 8006b72:	6078      	str	r0, [r7, #4]
 8006b74:	000a      	movs	r2, r1
 8006b76:	1cbb      	adds	r3, r7, #2
 8006b78:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006b7a:	46c0      	nop			; (mov r8, r8)
 8006b7c:	46bd      	mov	sp, r7
 8006b7e:	b002      	add	sp, #8
 8006b80:	bd80      	pop	{r7, pc}
	...

08006b84 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006b84:	b5b0      	push	{r4, r5, r7, lr}
 8006b86:	b08e      	sub	sp, #56	; 0x38
 8006b88:	af00      	add	r7, sp, #0
 8006b8a:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006b8c:	231a      	movs	r3, #26
 8006b8e:	2218      	movs	r2, #24
 8006b90:	4694      	mov	ip, r2
 8006b92:	44bc      	add	ip, r7
 8006b94:	4463      	add	r3, ip
 8006b96:	2200      	movs	r2, #0
 8006b98:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006b9a:	69fb      	ldr	r3, [r7, #28]
 8006b9c:	689a      	ldr	r2, [r3, #8]
 8006b9e:	69fb      	ldr	r3, [r7, #28]
 8006ba0:	691b      	ldr	r3, [r3, #16]
 8006ba2:	431a      	orrs	r2, r3
 8006ba4:	69fb      	ldr	r3, [r7, #28]
 8006ba6:	695b      	ldr	r3, [r3, #20]
 8006ba8:	431a      	orrs	r2, r3
 8006baa:	69fb      	ldr	r3, [r7, #28]
 8006bac:	69db      	ldr	r3, [r3, #28]
 8006bae:	4313      	orrs	r3, r2
 8006bb0:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006bb2:	69fb      	ldr	r3, [r7, #28]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	4ab0      	ldr	r2, [pc, #704]	; (8006e7c <UART_SetConfig+0x2f8>)
 8006bba:	4013      	ands	r3, r2
 8006bbc:	0019      	movs	r1, r3
 8006bbe:	69fb      	ldr	r3, [r7, #28]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006bc4:	430a      	orrs	r2, r1
 8006bc6:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006bc8:	69fb      	ldr	r3, [r7, #28]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	685b      	ldr	r3, [r3, #4]
 8006bce:	4aac      	ldr	r2, [pc, #688]	; (8006e80 <UART_SetConfig+0x2fc>)
 8006bd0:	4013      	ands	r3, r2
 8006bd2:	0019      	movs	r1, r3
 8006bd4:	69fb      	ldr	r3, [r7, #28]
 8006bd6:	68da      	ldr	r2, [r3, #12]
 8006bd8:	69fb      	ldr	r3, [r7, #28]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	430a      	orrs	r2, r1
 8006bde:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006be0:	69fb      	ldr	r3, [r7, #28]
 8006be2:	699b      	ldr	r3, [r3, #24]
 8006be4:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006be6:	69fb      	ldr	r3, [r7, #28]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	4aa6      	ldr	r2, [pc, #664]	; (8006e84 <UART_SetConfig+0x300>)
 8006bec:	4293      	cmp	r3, r2
 8006bee:	d004      	beq.n	8006bfa <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006bf0:	69fb      	ldr	r3, [r7, #28]
 8006bf2:	6a1b      	ldr	r3, [r3, #32]
 8006bf4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006bf6:	4313      	orrs	r3, r2
 8006bf8:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006bfa:	69fb      	ldr	r3, [r7, #28]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	689b      	ldr	r3, [r3, #8]
 8006c00:	4aa1      	ldr	r2, [pc, #644]	; (8006e88 <UART_SetConfig+0x304>)
 8006c02:	4013      	ands	r3, r2
 8006c04:	0019      	movs	r1, r3
 8006c06:	69fb      	ldr	r3, [r7, #28]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006c0c:	430a      	orrs	r2, r1
 8006c0e:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006c10:	69fb      	ldr	r3, [r7, #28]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	4a9d      	ldr	r2, [pc, #628]	; (8006e8c <UART_SetConfig+0x308>)
 8006c16:	4293      	cmp	r3, r2
 8006c18:	d136      	bne.n	8006c88 <UART_SetConfig+0x104>
 8006c1a:	4b9d      	ldr	r3, [pc, #628]	; (8006e90 <UART_SetConfig+0x30c>)
 8006c1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006c1e:	2203      	movs	r2, #3
 8006c20:	4013      	ands	r3, r2
 8006c22:	2b03      	cmp	r3, #3
 8006c24:	d020      	beq.n	8006c68 <UART_SetConfig+0xe4>
 8006c26:	d827      	bhi.n	8006c78 <UART_SetConfig+0xf4>
 8006c28:	2b02      	cmp	r3, #2
 8006c2a:	d00d      	beq.n	8006c48 <UART_SetConfig+0xc4>
 8006c2c:	d824      	bhi.n	8006c78 <UART_SetConfig+0xf4>
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d002      	beq.n	8006c38 <UART_SetConfig+0xb4>
 8006c32:	2b01      	cmp	r3, #1
 8006c34:	d010      	beq.n	8006c58 <UART_SetConfig+0xd4>
 8006c36:	e01f      	b.n	8006c78 <UART_SetConfig+0xf4>
 8006c38:	231b      	movs	r3, #27
 8006c3a:	2218      	movs	r2, #24
 8006c3c:	4694      	mov	ip, r2
 8006c3e:	44bc      	add	ip, r7
 8006c40:	4463      	add	r3, ip
 8006c42:	2201      	movs	r2, #1
 8006c44:	701a      	strb	r2, [r3, #0]
 8006c46:	e0c5      	b.n	8006dd4 <UART_SetConfig+0x250>
 8006c48:	231b      	movs	r3, #27
 8006c4a:	2218      	movs	r2, #24
 8006c4c:	4694      	mov	ip, r2
 8006c4e:	44bc      	add	ip, r7
 8006c50:	4463      	add	r3, ip
 8006c52:	2202      	movs	r2, #2
 8006c54:	701a      	strb	r2, [r3, #0]
 8006c56:	e0bd      	b.n	8006dd4 <UART_SetConfig+0x250>
 8006c58:	231b      	movs	r3, #27
 8006c5a:	2218      	movs	r2, #24
 8006c5c:	4694      	mov	ip, r2
 8006c5e:	44bc      	add	ip, r7
 8006c60:	4463      	add	r3, ip
 8006c62:	2204      	movs	r2, #4
 8006c64:	701a      	strb	r2, [r3, #0]
 8006c66:	e0b5      	b.n	8006dd4 <UART_SetConfig+0x250>
 8006c68:	231b      	movs	r3, #27
 8006c6a:	2218      	movs	r2, #24
 8006c6c:	4694      	mov	ip, r2
 8006c6e:	44bc      	add	ip, r7
 8006c70:	4463      	add	r3, ip
 8006c72:	2208      	movs	r2, #8
 8006c74:	701a      	strb	r2, [r3, #0]
 8006c76:	e0ad      	b.n	8006dd4 <UART_SetConfig+0x250>
 8006c78:	231b      	movs	r3, #27
 8006c7a:	2218      	movs	r2, #24
 8006c7c:	4694      	mov	ip, r2
 8006c7e:	44bc      	add	ip, r7
 8006c80:	4463      	add	r3, ip
 8006c82:	2210      	movs	r2, #16
 8006c84:	701a      	strb	r2, [r3, #0]
 8006c86:	e0a5      	b.n	8006dd4 <UART_SetConfig+0x250>
 8006c88:	69fb      	ldr	r3, [r7, #28]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	4a81      	ldr	r2, [pc, #516]	; (8006e94 <UART_SetConfig+0x310>)
 8006c8e:	4293      	cmp	r3, r2
 8006c90:	d136      	bne.n	8006d00 <UART_SetConfig+0x17c>
 8006c92:	4b7f      	ldr	r3, [pc, #508]	; (8006e90 <UART_SetConfig+0x30c>)
 8006c94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006c96:	220c      	movs	r2, #12
 8006c98:	4013      	ands	r3, r2
 8006c9a:	2b0c      	cmp	r3, #12
 8006c9c:	d020      	beq.n	8006ce0 <UART_SetConfig+0x15c>
 8006c9e:	d827      	bhi.n	8006cf0 <UART_SetConfig+0x16c>
 8006ca0:	2b08      	cmp	r3, #8
 8006ca2:	d00d      	beq.n	8006cc0 <UART_SetConfig+0x13c>
 8006ca4:	d824      	bhi.n	8006cf0 <UART_SetConfig+0x16c>
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d002      	beq.n	8006cb0 <UART_SetConfig+0x12c>
 8006caa:	2b04      	cmp	r3, #4
 8006cac:	d010      	beq.n	8006cd0 <UART_SetConfig+0x14c>
 8006cae:	e01f      	b.n	8006cf0 <UART_SetConfig+0x16c>
 8006cb0:	231b      	movs	r3, #27
 8006cb2:	2218      	movs	r2, #24
 8006cb4:	4694      	mov	ip, r2
 8006cb6:	44bc      	add	ip, r7
 8006cb8:	4463      	add	r3, ip
 8006cba:	2200      	movs	r2, #0
 8006cbc:	701a      	strb	r2, [r3, #0]
 8006cbe:	e089      	b.n	8006dd4 <UART_SetConfig+0x250>
 8006cc0:	231b      	movs	r3, #27
 8006cc2:	2218      	movs	r2, #24
 8006cc4:	4694      	mov	ip, r2
 8006cc6:	44bc      	add	ip, r7
 8006cc8:	4463      	add	r3, ip
 8006cca:	2202      	movs	r2, #2
 8006ccc:	701a      	strb	r2, [r3, #0]
 8006cce:	e081      	b.n	8006dd4 <UART_SetConfig+0x250>
 8006cd0:	231b      	movs	r3, #27
 8006cd2:	2218      	movs	r2, #24
 8006cd4:	4694      	mov	ip, r2
 8006cd6:	44bc      	add	ip, r7
 8006cd8:	4463      	add	r3, ip
 8006cda:	2204      	movs	r2, #4
 8006cdc:	701a      	strb	r2, [r3, #0]
 8006cde:	e079      	b.n	8006dd4 <UART_SetConfig+0x250>
 8006ce0:	231b      	movs	r3, #27
 8006ce2:	2218      	movs	r2, #24
 8006ce4:	4694      	mov	ip, r2
 8006ce6:	44bc      	add	ip, r7
 8006ce8:	4463      	add	r3, ip
 8006cea:	2208      	movs	r2, #8
 8006cec:	701a      	strb	r2, [r3, #0]
 8006cee:	e071      	b.n	8006dd4 <UART_SetConfig+0x250>
 8006cf0:	231b      	movs	r3, #27
 8006cf2:	2218      	movs	r2, #24
 8006cf4:	4694      	mov	ip, r2
 8006cf6:	44bc      	add	ip, r7
 8006cf8:	4463      	add	r3, ip
 8006cfa:	2210      	movs	r2, #16
 8006cfc:	701a      	strb	r2, [r3, #0]
 8006cfe:	e069      	b.n	8006dd4 <UART_SetConfig+0x250>
 8006d00:	69fb      	ldr	r3, [r7, #28]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	4a64      	ldr	r2, [pc, #400]	; (8006e98 <UART_SetConfig+0x314>)
 8006d06:	4293      	cmp	r3, r2
 8006d08:	d107      	bne.n	8006d1a <UART_SetConfig+0x196>
 8006d0a:	231b      	movs	r3, #27
 8006d0c:	2218      	movs	r2, #24
 8006d0e:	4694      	mov	ip, r2
 8006d10:	44bc      	add	ip, r7
 8006d12:	4463      	add	r3, ip
 8006d14:	2200      	movs	r2, #0
 8006d16:	701a      	strb	r2, [r3, #0]
 8006d18:	e05c      	b.n	8006dd4 <UART_SetConfig+0x250>
 8006d1a:	69fb      	ldr	r3, [r7, #28]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	4a5f      	ldr	r2, [pc, #380]	; (8006e9c <UART_SetConfig+0x318>)
 8006d20:	4293      	cmp	r3, r2
 8006d22:	d107      	bne.n	8006d34 <UART_SetConfig+0x1b0>
 8006d24:	231b      	movs	r3, #27
 8006d26:	2218      	movs	r2, #24
 8006d28:	4694      	mov	ip, r2
 8006d2a:	44bc      	add	ip, r7
 8006d2c:	4463      	add	r3, ip
 8006d2e:	2200      	movs	r2, #0
 8006d30:	701a      	strb	r2, [r3, #0]
 8006d32:	e04f      	b.n	8006dd4 <UART_SetConfig+0x250>
 8006d34:	69fb      	ldr	r3, [r7, #28]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	4a52      	ldr	r2, [pc, #328]	; (8006e84 <UART_SetConfig+0x300>)
 8006d3a:	4293      	cmp	r3, r2
 8006d3c:	d143      	bne.n	8006dc6 <UART_SetConfig+0x242>
 8006d3e:	4b54      	ldr	r3, [pc, #336]	; (8006e90 <UART_SetConfig+0x30c>)
 8006d40:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006d42:	23c0      	movs	r3, #192	; 0xc0
 8006d44:	011b      	lsls	r3, r3, #4
 8006d46:	4013      	ands	r3, r2
 8006d48:	22c0      	movs	r2, #192	; 0xc0
 8006d4a:	0112      	lsls	r2, r2, #4
 8006d4c:	4293      	cmp	r3, r2
 8006d4e:	d02a      	beq.n	8006da6 <UART_SetConfig+0x222>
 8006d50:	22c0      	movs	r2, #192	; 0xc0
 8006d52:	0112      	lsls	r2, r2, #4
 8006d54:	4293      	cmp	r3, r2
 8006d56:	d82e      	bhi.n	8006db6 <UART_SetConfig+0x232>
 8006d58:	2280      	movs	r2, #128	; 0x80
 8006d5a:	0112      	lsls	r2, r2, #4
 8006d5c:	4293      	cmp	r3, r2
 8006d5e:	d012      	beq.n	8006d86 <UART_SetConfig+0x202>
 8006d60:	2280      	movs	r2, #128	; 0x80
 8006d62:	0112      	lsls	r2, r2, #4
 8006d64:	4293      	cmp	r3, r2
 8006d66:	d826      	bhi.n	8006db6 <UART_SetConfig+0x232>
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d004      	beq.n	8006d76 <UART_SetConfig+0x1f2>
 8006d6c:	2280      	movs	r2, #128	; 0x80
 8006d6e:	00d2      	lsls	r2, r2, #3
 8006d70:	4293      	cmp	r3, r2
 8006d72:	d010      	beq.n	8006d96 <UART_SetConfig+0x212>
 8006d74:	e01f      	b.n	8006db6 <UART_SetConfig+0x232>
 8006d76:	231b      	movs	r3, #27
 8006d78:	2218      	movs	r2, #24
 8006d7a:	4694      	mov	ip, r2
 8006d7c:	44bc      	add	ip, r7
 8006d7e:	4463      	add	r3, ip
 8006d80:	2200      	movs	r2, #0
 8006d82:	701a      	strb	r2, [r3, #0]
 8006d84:	e026      	b.n	8006dd4 <UART_SetConfig+0x250>
 8006d86:	231b      	movs	r3, #27
 8006d88:	2218      	movs	r2, #24
 8006d8a:	4694      	mov	ip, r2
 8006d8c:	44bc      	add	ip, r7
 8006d8e:	4463      	add	r3, ip
 8006d90:	2202      	movs	r2, #2
 8006d92:	701a      	strb	r2, [r3, #0]
 8006d94:	e01e      	b.n	8006dd4 <UART_SetConfig+0x250>
 8006d96:	231b      	movs	r3, #27
 8006d98:	2218      	movs	r2, #24
 8006d9a:	4694      	mov	ip, r2
 8006d9c:	44bc      	add	ip, r7
 8006d9e:	4463      	add	r3, ip
 8006da0:	2204      	movs	r2, #4
 8006da2:	701a      	strb	r2, [r3, #0]
 8006da4:	e016      	b.n	8006dd4 <UART_SetConfig+0x250>
 8006da6:	231b      	movs	r3, #27
 8006da8:	2218      	movs	r2, #24
 8006daa:	4694      	mov	ip, r2
 8006dac:	44bc      	add	ip, r7
 8006dae:	4463      	add	r3, ip
 8006db0:	2208      	movs	r2, #8
 8006db2:	701a      	strb	r2, [r3, #0]
 8006db4:	e00e      	b.n	8006dd4 <UART_SetConfig+0x250>
 8006db6:	231b      	movs	r3, #27
 8006db8:	2218      	movs	r2, #24
 8006dba:	4694      	mov	ip, r2
 8006dbc:	44bc      	add	ip, r7
 8006dbe:	4463      	add	r3, ip
 8006dc0:	2210      	movs	r2, #16
 8006dc2:	701a      	strb	r2, [r3, #0]
 8006dc4:	e006      	b.n	8006dd4 <UART_SetConfig+0x250>
 8006dc6:	231b      	movs	r3, #27
 8006dc8:	2218      	movs	r2, #24
 8006dca:	4694      	mov	ip, r2
 8006dcc:	44bc      	add	ip, r7
 8006dce:	4463      	add	r3, ip
 8006dd0:	2210      	movs	r2, #16
 8006dd2:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006dd4:	69fb      	ldr	r3, [r7, #28]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	4a2a      	ldr	r2, [pc, #168]	; (8006e84 <UART_SetConfig+0x300>)
 8006dda:	4293      	cmp	r3, r2
 8006ddc:	d000      	beq.n	8006de0 <UART_SetConfig+0x25c>
 8006dde:	e09e      	b.n	8006f1e <UART_SetConfig+0x39a>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006de0:	231b      	movs	r3, #27
 8006de2:	2218      	movs	r2, #24
 8006de4:	4694      	mov	ip, r2
 8006de6:	44bc      	add	ip, r7
 8006de8:	4463      	add	r3, ip
 8006dea:	781b      	ldrb	r3, [r3, #0]
 8006dec:	2b08      	cmp	r3, #8
 8006dee:	d01d      	beq.n	8006e2c <UART_SetConfig+0x2a8>
 8006df0:	dc20      	bgt.n	8006e34 <UART_SetConfig+0x2b0>
 8006df2:	2b04      	cmp	r3, #4
 8006df4:	d015      	beq.n	8006e22 <UART_SetConfig+0x29e>
 8006df6:	dc1d      	bgt.n	8006e34 <UART_SetConfig+0x2b0>
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d002      	beq.n	8006e02 <UART_SetConfig+0x27e>
 8006dfc:	2b02      	cmp	r3, #2
 8006dfe:	d005      	beq.n	8006e0c <UART_SetConfig+0x288>
 8006e00:	e018      	b.n	8006e34 <UART_SetConfig+0x2b0>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006e02:	f7fe fc4f 	bl	80056a4 <HAL_RCC_GetPCLK1Freq>
 8006e06:	0003      	movs	r3, r0
 8006e08:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006e0a:	e01d      	b.n	8006e48 <UART_SetConfig+0x2c4>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006e0c:	4b20      	ldr	r3, [pc, #128]	; (8006e90 <UART_SetConfig+0x30c>)
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	2210      	movs	r2, #16
 8006e12:	4013      	ands	r3, r2
 8006e14:	d002      	beq.n	8006e1c <UART_SetConfig+0x298>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8006e16:	4b22      	ldr	r3, [pc, #136]	; (8006ea0 <UART_SetConfig+0x31c>)
 8006e18:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006e1a:	e015      	b.n	8006e48 <UART_SetConfig+0x2c4>
          pclk = (uint32_t) HSI_VALUE;
 8006e1c:	4b21      	ldr	r3, [pc, #132]	; (8006ea4 <UART_SetConfig+0x320>)
 8006e1e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006e20:	e012      	b.n	8006e48 <UART_SetConfig+0x2c4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006e22:	f7fe fb8f 	bl	8005544 <HAL_RCC_GetSysClockFreq>
 8006e26:	0003      	movs	r3, r0
 8006e28:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006e2a:	e00d      	b.n	8006e48 <UART_SetConfig+0x2c4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006e2c:	2380      	movs	r3, #128	; 0x80
 8006e2e:	021b      	lsls	r3, r3, #8
 8006e30:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006e32:	e009      	b.n	8006e48 <UART_SetConfig+0x2c4>
      default:
        pclk = 0U;
 8006e34:	2300      	movs	r3, #0
 8006e36:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8006e38:	231a      	movs	r3, #26
 8006e3a:	2218      	movs	r2, #24
 8006e3c:	4694      	mov	ip, r2
 8006e3e:	44bc      	add	ip, r7
 8006e40:	4463      	add	r3, ip
 8006e42:	2201      	movs	r2, #1
 8006e44:	701a      	strb	r2, [r3, #0]
        break;
 8006e46:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006e48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d100      	bne.n	8006e50 <UART_SetConfig+0x2cc>
 8006e4e:	e13c      	b.n	80070ca <UART_SetConfig+0x546>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006e50:	69fb      	ldr	r3, [r7, #28]
 8006e52:	685a      	ldr	r2, [r3, #4]
 8006e54:	0013      	movs	r3, r2
 8006e56:	005b      	lsls	r3, r3, #1
 8006e58:	189b      	adds	r3, r3, r2
 8006e5a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006e5c:	429a      	cmp	r2, r3
 8006e5e:	d305      	bcc.n	8006e6c <UART_SetConfig+0x2e8>
          (pclk > (4096U * huart->Init.BaudRate)))
 8006e60:	69fb      	ldr	r3, [r7, #28]
 8006e62:	685b      	ldr	r3, [r3, #4]
 8006e64:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006e66:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006e68:	429a      	cmp	r2, r3
 8006e6a:	d91d      	bls.n	8006ea8 <UART_SetConfig+0x324>
      {
        ret = HAL_ERROR;
 8006e6c:	231a      	movs	r3, #26
 8006e6e:	2218      	movs	r2, #24
 8006e70:	4694      	mov	ip, r2
 8006e72:	44bc      	add	ip, r7
 8006e74:	4463      	add	r3, ip
 8006e76:	2201      	movs	r2, #1
 8006e78:	701a      	strb	r2, [r3, #0]
 8006e7a:	e126      	b.n	80070ca <UART_SetConfig+0x546>
 8006e7c:	efff69f3 	.word	0xefff69f3
 8006e80:	ffffcfff 	.word	0xffffcfff
 8006e84:	40004800 	.word	0x40004800
 8006e88:	fffff4ff 	.word	0xfffff4ff
 8006e8c:	40013800 	.word	0x40013800
 8006e90:	40021000 	.word	0x40021000
 8006e94:	40004400 	.word	0x40004400
 8006e98:	40004c00 	.word	0x40004c00
 8006e9c:	40005000 	.word	0x40005000
 8006ea0:	003d0900 	.word	0x003d0900
 8006ea4:	00f42400 	.word	0x00f42400
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8006ea8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006eaa:	613b      	str	r3, [r7, #16]
 8006eac:	2300      	movs	r3, #0
 8006eae:	617b      	str	r3, [r7, #20]
 8006eb0:	6939      	ldr	r1, [r7, #16]
 8006eb2:	697a      	ldr	r2, [r7, #20]
 8006eb4:	000b      	movs	r3, r1
 8006eb6:	0e1b      	lsrs	r3, r3, #24
 8006eb8:	0010      	movs	r0, r2
 8006eba:	0205      	lsls	r5, r0, #8
 8006ebc:	431d      	orrs	r5, r3
 8006ebe:	000b      	movs	r3, r1
 8006ec0:	021c      	lsls	r4, r3, #8
 8006ec2:	69fb      	ldr	r3, [r7, #28]
 8006ec4:	685b      	ldr	r3, [r3, #4]
 8006ec6:	085b      	lsrs	r3, r3, #1
 8006ec8:	60bb      	str	r3, [r7, #8]
 8006eca:	2300      	movs	r3, #0
 8006ecc:	60fb      	str	r3, [r7, #12]
 8006ece:	68b8      	ldr	r0, [r7, #8]
 8006ed0:	68f9      	ldr	r1, [r7, #12]
 8006ed2:	1900      	adds	r0, r0, r4
 8006ed4:	4169      	adcs	r1, r5
 8006ed6:	69fb      	ldr	r3, [r7, #28]
 8006ed8:	685b      	ldr	r3, [r3, #4]
 8006eda:	603b      	str	r3, [r7, #0]
 8006edc:	2300      	movs	r3, #0
 8006ede:	607b      	str	r3, [r7, #4]
 8006ee0:	683a      	ldr	r2, [r7, #0]
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	f7f9 fa90 	bl	8000408 <__aeabi_uldivmod>
 8006ee8:	0002      	movs	r2, r0
 8006eea:	000b      	movs	r3, r1
 8006eec:	0013      	movs	r3, r2
 8006eee:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006ef0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006ef2:	23c0      	movs	r3, #192	; 0xc0
 8006ef4:	009b      	lsls	r3, r3, #2
 8006ef6:	429a      	cmp	r2, r3
 8006ef8:	d309      	bcc.n	8006f0e <UART_SetConfig+0x38a>
 8006efa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006efc:	2380      	movs	r3, #128	; 0x80
 8006efe:	035b      	lsls	r3, r3, #13
 8006f00:	429a      	cmp	r2, r3
 8006f02:	d204      	bcs.n	8006f0e <UART_SetConfig+0x38a>
        {
          huart->Instance->BRR = usartdiv;
 8006f04:	69fb      	ldr	r3, [r7, #28]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006f0a:	60da      	str	r2, [r3, #12]
 8006f0c:	e0dd      	b.n	80070ca <UART_SetConfig+0x546>
        }
        else
        {
          ret = HAL_ERROR;
 8006f0e:	231a      	movs	r3, #26
 8006f10:	2218      	movs	r2, #24
 8006f12:	4694      	mov	ip, r2
 8006f14:	44bc      	add	ip, r7
 8006f16:	4463      	add	r3, ip
 8006f18:	2201      	movs	r2, #1
 8006f1a:	701a      	strb	r2, [r3, #0]
 8006f1c:	e0d5      	b.n	80070ca <UART_SetConfig+0x546>
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006f1e:	69fb      	ldr	r3, [r7, #28]
 8006f20:	69da      	ldr	r2, [r3, #28]
 8006f22:	2380      	movs	r3, #128	; 0x80
 8006f24:	021b      	lsls	r3, r3, #8
 8006f26:	429a      	cmp	r2, r3
 8006f28:	d000      	beq.n	8006f2c <UART_SetConfig+0x3a8>
 8006f2a:	e074      	b.n	8007016 <UART_SetConfig+0x492>
  {
    switch (clocksource)
 8006f2c:	231b      	movs	r3, #27
 8006f2e:	2218      	movs	r2, #24
 8006f30:	4694      	mov	ip, r2
 8006f32:	44bc      	add	ip, r7
 8006f34:	4463      	add	r3, ip
 8006f36:	781b      	ldrb	r3, [r3, #0]
 8006f38:	2b08      	cmp	r3, #8
 8006f3a:	d822      	bhi.n	8006f82 <UART_SetConfig+0x3fe>
 8006f3c:	009a      	lsls	r2, r3, #2
 8006f3e:	4b6b      	ldr	r3, [pc, #428]	; (80070ec <UART_SetConfig+0x568>)
 8006f40:	18d3      	adds	r3, r2, r3
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006f46:	f7fe fbad 	bl	80056a4 <HAL_RCC_GetPCLK1Freq>
 8006f4a:	0003      	movs	r3, r0
 8006f4c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006f4e:	e022      	b.n	8006f96 <UART_SetConfig+0x412>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006f50:	f7fe fbbe 	bl	80056d0 <HAL_RCC_GetPCLK2Freq>
 8006f54:	0003      	movs	r3, r0
 8006f56:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006f58:	e01d      	b.n	8006f96 <UART_SetConfig+0x412>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006f5a:	4b65      	ldr	r3, [pc, #404]	; (80070f0 <UART_SetConfig+0x56c>)
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	2210      	movs	r2, #16
 8006f60:	4013      	ands	r3, r2
 8006f62:	d002      	beq.n	8006f6a <UART_SetConfig+0x3e6>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8006f64:	4b63      	ldr	r3, [pc, #396]	; (80070f4 <UART_SetConfig+0x570>)
 8006f66:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006f68:	e015      	b.n	8006f96 <UART_SetConfig+0x412>
          pclk = (uint32_t) HSI_VALUE;
 8006f6a:	4b63      	ldr	r3, [pc, #396]	; (80070f8 <UART_SetConfig+0x574>)
 8006f6c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006f6e:	e012      	b.n	8006f96 <UART_SetConfig+0x412>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006f70:	f7fe fae8 	bl	8005544 <HAL_RCC_GetSysClockFreq>
 8006f74:	0003      	movs	r3, r0
 8006f76:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006f78:	e00d      	b.n	8006f96 <UART_SetConfig+0x412>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006f7a:	2380      	movs	r3, #128	; 0x80
 8006f7c:	021b      	lsls	r3, r3, #8
 8006f7e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006f80:	e009      	b.n	8006f96 <UART_SetConfig+0x412>
      default:
        pclk = 0U;
 8006f82:	2300      	movs	r3, #0
 8006f84:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8006f86:	231a      	movs	r3, #26
 8006f88:	2218      	movs	r2, #24
 8006f8a:	4694      	mov	ip, r2
 8006f8c:	44bc      	add	ip, r7
 8006f8e:	4463      	add	r3, ip
 8006f90:	2201      	movs	r2, #1
 8006f92:	701a      	strb	r2, [r3, #0]
        break;
 8006f94:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006f96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d100      	bne.n	8006f9e <UART_SetConfig+0x41a>
 8006f9c:	e095      	b.n	80070ca <UART_SetConfig+0x546>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006f9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fa0:	005a      	lsls	r2, r3, #1
 8006fa2:	69fb      	ldr	r3, [r7, #28]
 8006fa4:	685b      	ldr	r3, [r3, #4]
 8006fa6:	085b      	lsrs	r3, r3, #1
 8006fa8:	18d2      	adds	r2, r2, r3
 8006faa:	69fb      	ldr	r3, [r7, #28]
 8006fac:	685b      	ldr	r3, [r3, #4]
 8006fae:	0019      	movs	r1, r3
 8006fb0:	0010      	movs	r0, r2
 8006fb2:	f7f9 f8b3 	bl	800011c <__udivsi3>
 8006fb6:	0003      	movs	r3, r0
 8006fb8:	b29b      	uxth	r3, r3
 8006fba:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006fbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fbe:	2b0f      	cmp	r3, #15
 8006fc0:	d921      	bls.n	8007006 <UART_SetConfig+0x482>
 8006fc2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006fc4:	2380      	movs	r3, #128	; 0x80
 8006fc6:	025b      	lsls	r3, r3, #9
 8006fc8:	429a      	cmp	r2, r3
 8006fca:	d21c      	bcs.n	8007006 <UART_SetConfig+0x482>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006fcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fce:	b29a      	uxth	r2, r3
 8006fd0:	200e      	movs	r0, #14
 8006fd2:	2418      	movs	r4, #24
 8006fd4:	193b      	adds	r3, r7, r4
 8006fd6:	181b      	adds	r3, r3, r0
 8006fd8:	210f      	movs	r1, #15
 8006fda:	438a      	bics	r2, r1
 8006fdc:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006fde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fe0:	085b      	lsrs	r3, r3, #1
 8006fe2:	b29b      	uxth	r3, r3
 8006fe4:	2207      	movs	r2, #7
 8006fe6:	4013      	ands	r3, r2
 8006fe8:	b299      	uxth	r1, r3
 8006fea:	193b      	adds	r3, r7, r4
 8006fec:	181b      	adds	r3, r3, r0
 8006fee:	193a      	adds	r2, r7, r4
 8006ff0:	1812      	adds	r2, r2, r0
 8006ff2:	8812      	ldrh	r2, [r2, #0]
 8006ff4:	430a      	orrs	r2, r1
 8006ff6:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8006ff8:	69fb      	ldr	r3, [r7, #28]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	193a      	adds	r2, r7, r4
 8006ffe:	1812      	adds	r2, r2, r0
 8007000:	8812      	ldrh	r2, [r2, #0]
 8007002:	60da      	str	r2, [r3, #12]
 8007004:	e061      	b.n	80070ca <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 8007006:	231a      	movs	r3, #26
 8007008:	2218      	movs	r2, #24
 800700a:	4694      	mov	ip, r2
 800700c:	44bc      	add	ip, r7
 800700e:	4463      	add	r3, ip
 8007010:	2201      	movs	r2, #1
 8007012:	701a      	strb	r2, [r3, #0]
 8007014:	e059      	b.n	80070ca <UART_SetConfig+0x546>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007016:	231b      	movs	r3, #27
 8007018:	2218      	movs	r2, #24
 800701a:	4694      	mov	ip, r2
 800701c:	44bc      	add	ip, r7
 800701e:	4463      	add	r3, ip
 8007020:	781b      	ldrb	r3, [r3, #0]
 8007022:	2b08      	cmp	r3, #8
 8007024:	d822      	bhi.n	800706c <UART_SetConfig+0x4e8>
 8007026:	009a      	lsls	r2, r3, #2
 8007028:	4b34      	ldr	r3, [pc, #208]	; (80070fc <UART_SetConfig+0x578>)
 800702a:	18d3      	adds	r3, r2, r3
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007030:	f7fe fb38 	bl	80056a4 <HAL_RCC_GetPCLK1Freq>
 8007034:	0003      	movs	r3, r0
 8007036:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007038:	e022      	b.n	8007080 <UART_SetConfig+0x4fc>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800703a:	f7fe fb49 	bl	80056d0 <HAL_RCC_GetPCLK2Freq>
 800703e:	0003      	movs	r3, r0
 8007040:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007042:	e01d      	b.n	8007080 <UART_SetConfig+0x4fc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007044:	4b2a      	ldr	r3, [pc, #168]	; (80070f0 <UART_SetConfig+0x56c>)
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	2210      	movs	r2, #16
 800704a:	4013      	ands	r3, r2
 800704c:	d002      	beq.n	8007054 <UART_SetConfig+0x4d0>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 800704e:	4b29      	ldr	r3, [pc, #164]	; (80070f4 <UART_SetConfig+0x570>)
 8007050:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007052:	e015      	b.n	8007080 <UART_SetConfig+0x4fc>
          pclk = (uint32_t) HSI_VALUE;
 8007054:	4b28      	ldr	r3, [pc, #160]	; (80070f8 <UART_SetConfig+0x574>)
 8007056:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007058:	e012      	b.n	8007080 <UART_SetConfig+0x4fc>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800705a:	f7fe fa73 	bl	8005544 <HAL_RCC_GetSysClockFreq>
 800705e:	0003      	movs	r3, r0
 8007060:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007062:	e00d      	b.n	8007080 <UART_SetConfig+0x4fc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007064:	2380      	movs	r3, #128	; 0x80
 8007066:	021b      	lsls	r3, r3, #8
 8007068:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800706a:	e009      	b.n	8007080 <UART_SetConfig+0x4fc>
      default:
        pclk = 0U;
 800706c:	2300      	movs	r3, #0
 800706e:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8007070:	231a      	movs	r3, #26
 8007072:	2218      	movs	r2, #24
 8007074:	4694      	mov	ip, r2
 8007076:	44bc      	add	ip, r7
 8007078:	4463      	add	r3, ip
 800707a:	2201      	movs	r2, #1
 800707c:	701a      	strb	r2, [r3, #0]
        break;
 800707e:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8007080:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007082:	2b00      	cmp	r3, #0
 8007084:	d021      	beq.n	80070ca <UART_SetConfig+0x546>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007086:	69fb      	ldr	r3, [r7, #28]
 8007088:	685b      	ldr	r3, [r3, #4]
 800708a:	085a      	lsrs	r2, r3, #1
 800708c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800708e:	18d2      	adds	r2, r2, r3
 8007090:	69fb      	ldr	r3, [r7, #28]
 8007092:	685b      	ldr	r3, [r3, #4]
 8007094:	0019      	movs	r1, r3
 8007096:	0010      	movs	r0, r2
 8007098:	f7f9 f840 	bl	800011c <__udivsi3>
 800709c:	0003      	movs	r3, r0
 800709e:	b29b      	uxth	r3, r3
 80070a0:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80070a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070a4:	2b0f      	cmp	r3, #15
 80070a6:	d909      	bls.n	80070bc <UART_SetConfig+0x538>
 80070a8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80070aa:	2380      	movs	r3, #128	; 0x80
 80070ac:	025b      	lsls	r3, r3, #9
 80070ae:	429a      	cmp	r2, r3
 80070b0:	d204      	bcs.n	80070bc <UART_SetConfig+0x538>
      {
        huart->Instance->BRR = usartdiv;
 80070b2:	69fb      	ldr	r3, [r7, #28]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80070b8:	60da      	str	r2, [r3, #12]
 80070ba:	e006      	b.n	80070ca <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 80070bc:	231a      	movs	r3, #26
 80070be:	2218      	movs	r2, #24
 80070c0:	4694      	mov	ip, r2
 80070c2:	44bc      	add	ip, r7
 80070c4:	4463      	add	r3, ip
 80070c6:	2201      	movs	r2, #1
 80070c8:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80070ca:	69fb      	ldr	r3, [r7, #28]
 80070cc:	2200      	movs	r2, #0
 80070ce:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80070d0:	69fb      	ldr	r3, [r7, #28]
 80070d2:	2200      	movs	r2, #0
 80070d4:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80070d6:	231a      	movs	r3, #26
 80070d8:	2218      	movs	r2, #24
 80070da:	4694      	mov	ip, r2
 80070dc:	44bc      	add	ip, r7
 80070de:	4463      	add	r3, ip
 80070e0:	781b      	ldrb	r3, [r3, #0]
}
 80070e2:	0018      	movs	r0, r3
 80070e4:	46bd      	mov	sp, r7
 80070e6:	b00e      	add	sp, #56	; 0x38
 80070e8:	bdb0      	pop	{r4, r5, r7, pc}
 80070ea:	46c0      	nop			; (mov r8, r8)
 80070ec:	08008798 	.word	0x08008798
 80070f0:	40021000 	.word	0x40021000
 80070f4:	003d0900 	.word	0x003d0900
 80070f8:	00f42400 	.word	0x00f42400
 80070fc:	080087bc 	.word	0x080087bc

08007100 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007100:	b580      	push	{r7, lr}
 8007102:	b082      	sub	sp, #8
 8007104:	af00      	add	r7, sp, #0
 8007106:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800710c:	2201      	movs	r2, #1
 800710e:	4013      	ands	r3, r2
 8007110:	d00b      	beq.n	800712a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	685b      	ldr	r3, [r3, #4]
 8007118:	4a4a      	ldr	r2, [pc, #296]	; (8007244 <UART_AdvFeatureConfig+0x144>)
 800711a:	4013      	ands	r3, r2
 800711c:	0019      	movs	r1, r3
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	430a      	orrs	r2, r1
 8007128:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800712e:	2202      	movs	r2, #2
 8007130:	4013      	ands	r3, r2
 8007132:	d00b      	beq.n	800714c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	685b      	ldr	r3, [r3, #4]
 800713a:	4a43      	ldr	r2, [pc, #268]	; (8007248 <UART_AdvFeatureConfig+0x148>)
 800713c:	4013      	ands	r3, r2
 800713e:	0019      	movs	r1, r3
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	430a      	orrs	r2, r1
 800714a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007150:	2204      	movs	r2, #4
 8007152:	4013      	ands	r3, r2
 8007154:	d00b      	beq.n	800716e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	685b      	ldr	r3, [r3, #4]
 800715c:	4a3b      	ldr	r2, [pc, #236]	; (800724c <UART_AdvFeatureConfig+0x14c>)
 800715e:	4013      	ands	r3, r2
 8007160:	0019      	movs	r1, r3
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	430a      	orrs	r2, r1
 800716c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007172:	2208      	movs	r2, #8
 8007174:	4013      	ands	r3, r2
 8007176:	d00b      	beq.n	8007190 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	685b      	ldr	r3, [r3, #4]
 800717e:	4a34      	ldr	r2, [pc, #208]	; (8007250 <UART_AdvFeatureConfig+0x150>)
 8007180:	4013      	ands	r3, r2
 8007182:	0019      	movs	r1, r3
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	430a      	orrs	r2, r1
 800718e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007194:	2210      	movs	r2, #16
 8007196:	4013      	ands	r3, r2
 8007198:	d00b      	beq.n	80071b2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	689b      	ldr	r3, [r3, #8]
 80071a0:	4a2c      	ldr	r2, [pc, #176]	; (8007254 <UART_AdvFeatureConfig+0x154>)
 80071a2:	4013      	ands	r3, r2
 80071a4:	0019      	movs	r1, r3
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	430a      	orrs	r2, r1
 80071b0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071b6:	2220      	movs	r2, #32
 80071b8:	4013      	ands	r3, r2
 80071ba:	d00b      	beq.n	80071d4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	689b      	ldr	r3, [r3, #8]
 80071c2:	4a25      	ldr	r2, [pc, #148]	; (8007258 <UART_AdvFeatureConfig+0x158>)
 80071c4:	4013      	ands	r3, r2
 80071c6:	0019      	movs	r1, r3
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	430a      	orrs	r2, r1
 80071d2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071d8:	2240      	movs	r2, #64	; 0x40
 80071da:	4013      	ands	r3, r2
 80071dc:	d01d      	beq.n	800721a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	685b      	ldr	r3, [r3, #4]
 80071e4:	4a1d      	ldr	r2, [pc, #116]	; (800725c <UART_AdvFeatureConfig+0x15c>)
 80071e6:	4013      	ands	r3, r2
 80071e8:	0019      	movs	r1, r3
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	430a      	orrs	r2, r1
 80071f4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80071fa:	2380      	movs	r3, #128	; 0x80
 80071fc:	035b      	lsls	r3, r3, #13
 80071fe:	429a      	cmp	r2, r3
 8007200:	d10b      	bne.n	800721a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	685b      	ldr	r3, [r3, #4]
 8007208:	4a15      	ldr	r2, [pc, #84]	; (8007260 <UART_AdvFeatureConfig+0x160>)
 800720a:	4013      	ands	r3, r2
 800720c:	0019      	movs	r1, r3
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	430a      	orrs	r2, r1
 8007218:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800721e:	2280      	movs	r2, #128	; 0x80
 8007220:	4013      	ands	r3, r2
 8007222:	d00b      	beq.n	800723c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	685b      	ldr	r3, [r3, #4]
 800722a:	4a0e      	ldr	r2, [pc, #56]	; (8007264 <UART_AdvFeatureConfig+0x164>)
 800722c:	4013      	ands	r3, r2
 800722e:	0019      	movs	r1, r3
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	430a      	orrs	r2, r1
 800723a:	605a      	str	r2, [r3, #4]
  }
}
 800723c:	46c0      	nop			; (mov r8, r8)
 800723e:	46bd      	mov	sp, r7
 8007240:	b002      	add	sp, #8
 8007242:	bd80      	pop	{r7, pc}
 8007244:	fffdffff 	.word	0xfffdffff
 8007248:	fffeffff 	.word	0xfffeffff
 800724c:	fffbffff 	.word	0xfffbffff
 8007250:	ffff7fff 	.word	0xffff7fff
 8007254:	ffffefff 	.word	0xffffefff
 8007258:	ffffdfff 	.word	0xffffdfff
 800725c:	ffefffff 	.word	0xffefffff
 8007260:	ff9fffff 	.word	0xff9fffff
 8007264:	fff7ffff 	.word	0xfff7ffff

08007268 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007268:	b580      	push	{r7, lr}
 800726a:	b086      	sub	sp, #24
 800726c:	af02      	add	r7, sp, #8
 800726e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	2280      	movs	r2, #128	; 0x80
 8007274:	2100      	movs	r1, #0
 8007276:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007278:	f7fc fcaa 	bl	8003bd0 <HAL_GetTick>
 800727c:	0003      	movs	r3, r0
 800727e:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	2208      	movs	r2, #8
 8007288:	4013      	ands	r3, r2
 800728a:	2b08      	cmp	r3, #8
 800728c:	d10c      	bne.n	80072a8 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	2280      	movs	r2, #128	; 0x80
 8007292:	0391      	lsls	r1, r2, #14
 8007294:	6878      	ldr	r0, [r7, #4]
 8007296:	4a17      	ldr	r2, [pc, #92]	; (80072f4 <UART_CheckIdleState+0x8c>)
 8007298:	9200      	str	r2, [sp, #0]
 800729a:	2200      	movs	r2, #0
 800729c:	f000 f82c 	bl	80072f8 <UART_WaitOnFlagUntilTimeout>
 80072a0:	1e03      	subs	r3, r0, #0
 80072a2:	d001      	beq.n	80072a8 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80072a4:	2303      	movs	r3, #3
 80072a6:	e021      	b.n	80072ec <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	2204      	movs	r2, #4
 80072b0:	4013      	ands	r3, r2
 80072b2:	2b04      	cmp	r3, #4
 80072b4:	d10c      	bne.n	80072d0 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	2280      	movs	r2, #128	; 0x80
 80072ba:	03d1      	lsls	r1, r2, #15
 80072bc:	6878      	ldr	r0, [r7, #4]
 80072be:	4a0d      	ldr	r2, [pc, #52]	; (80072f4 <UART_CheckIdleState+0x8c>)
 80072c0:	9200      	str	r2, [sp, #0]
 80072c2:	2200      	movs	r2, #0
 80072c4:	f000 f818 	bl	80072f8 <UART_WaitOnFlagUntilTimeout>
 80072c8:	1e03      	subs	r3, r0, #0
 80072ca:	d001      	beq.n	80072d0 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80072cc:	2303      	movs	r3, #3
 80072ce:	e00d      	b.n	80072ec <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	2220      	movs	r2, #32
 80072d4:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	2220      	movs	r2, #32
 80072da:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	2200      	movs	r2, #0
 80072e0:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	2274      	movs	r2, #116	; 0x74
 80072e6:	2100      	movs	r1, #0
 80072e8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80072ea:	2300      	movs	r3, #0
}
 80072ec:	0018      	movs	r0, r3
 80072ee:	46bd      	mov	sp, r7
 80072f0:	b004      	add	sp, #16
 80072f2:	bd80      	pop	{r7, pc}
 80072f4:	01ffffff 	.word	0x01ffffff

080072f8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80072f8:	b580      	push	{r7, lr}
 80072fa:	b094      	sub	sp, #80	; 0x50
 80072fc:	af00      	add	r7, sp, #0
 80072fe:	60f8      	str	r0, [r7, #12]
 8007300:	60b9      	str	r1, [r7, #8]
 8007302:	603b      	str	r3, [r7, #0]
 8007304:	1dfb      	adds	r3, r7, #7
 8007306:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007308:	e0a3      	b.n	8007452 <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800730a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800730c:	3301      	adds	r3, #1
 800730e:	d100      	bne.n	8007312 <UART_WaitOnFlagUntilTimeout+0x1a>
 8007310:	e09f      	b.n	8007452 <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007312:	f7fc fc5d 	bl	8003bd0 <HAL_GetTick>
 8007316:	0002      	movs	r2, r0
 8007318:	683b      	ldr	r3, [r7, #0]
 800731a:	1ad3      	subs	r3, r2, r3
 800731c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800731e:	429a      	cmp	r2, r3
 8007320:	d302      	bcc.n	8007328 <UART_WaitOnFlagUntilTimeout+0x30>
 8007322:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007324:	2b00      	cmp	r3, #0
 8007326:	d13d      	bne.n	80073a4 <UART_WaitOnFlagUntilTimeout+0xac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007328:	f3ef 8310 	mrs	r3, PRIMASK
 800732c:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 800732e:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007330:	647b      	str	r3, [r7, #68]	; 0x44
 8007332:	2301      	movs	r3, #1
 8007334:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007336:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007338:	f383 8810 	msr	PRIMASK, r3
}
 800733c:	46c0      	nop			; (mov r8, r8)
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	681a      	ldr	r2, [r3, #0]
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	494c      	ldr	r1, [pc, #304]	; (800747c <UART_WaitOnFlagUntilTimeout+0x184>)
 800734a:	400a      	ands	r2, r1
 800734c:	601a      	str	r2, [r3, #0]
 800734e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007350:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007352:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007354:	f383 8810 	msr	PRIMASK, r3
}
 8007358:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800735a:	f3ef 8310 	mrs	r3, PRIMASK
 800735e:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8007360:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007362:	643b      	str	r3, [r7, #64]	; 0x40
 8007364:	2301      	movs	r3, #1
 8007366:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007368:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800736a:	f383 8810 	msr	PRIMASK, r3
}
 800736e:	46c0      	nop			; (mov r8, r8)
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	689a      	ldr	r2, [r3, #8]
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	2101      	movs	r1, #1
 800737c:	438a      	bics	r2, r1
 800737e:	609a      	str	r2, [r3, #8]
 8007380:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007382:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007384:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007386:	f383 8810 	msr	PRIMASK, r3
}
 800738a:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	2220      	movs	r2, #32
 8007390:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	2220      	movs	r2, #32
 8007396:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	2274      	movs	r2, #116	; 0x74
 800739c:	2100      	movs	r1, #0
 800739e:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80073a0:	2303      	movs	r3, #3
 80073a2:	e067      	b.n	8007474 <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	2204      	movs	r2, #4
 80073ac:	4013      	ands	r3, r2
 80073ae:	d050      	beq.n	8007452 <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	69da      	ldr	r2, [r3, #28]
 80073b6:	2380      	movs	r3, #128	; 0x80
 80073b8:	011b      	lsls	r3, r3, #4
 80073ba:	401a      	ands	r2, r3
 80073bc:	2380      	movs	r3, #128	; 0x80
 80073be:	011b      	lsls	r3, r3, #4
 80073c0:	429a      	cmp	r2, r3
 80073c2:	d146      	bne.n	8007452 <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	2280      	movs	r2, #128	; 0x80
 80073ca:	0112      	lsls	r2, r2, #4
 80073cc:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80073ce:	f3ef 8310 	mrs	r3, PRIMASK
 80073d2:	613b      	str	r3, [r7, #16]
  return(result);
 80073d4:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80073d6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80073d8:	2301      	movs	r3, #1
 80073da:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80073dc:	697b      	ldr	r3, [r7, #20]
 80073de:	f383 8810 	msr	PRIMASK, r3
}
 80073e2:	46c0      	nop			; (mov r8, r8)
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	681a      	ldr	r2, [r3, #0]
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	4923      	ldr	r1, [pc, #140]	; (800747c <UART_WaitOnFlagUntilTimeout+0x184>)
 80073f0:	400a      	ands	r2, r1
 80073f2:	601a      	str	r2, [r3, #0]
 80073f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80073f6:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80073f8:	69bb      	ldr	r3, [r7, #24]
 80073fa:	f383 8810 	msr	PRIMASK, r3
}
 80073fe:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007400:	f3ef 8310 	mrs	r3, PRIMASK
 8007404:	61fb      	str	r3, [r7, #28]
  return(result);
 8007406:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007408:	64bb      	str	r3, [r7, #72]	; 0x48
 800740a:	2301      	movs	r3, #1
 800740c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800740e:	6a3b      	ldr	r3, [r7, #32]
 8007410:	f383 8810 	msr	PRIMASK, r3
}
 8007414:	46c0      	nop			; (mov r8, r8)
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	689a      	ldr	r2, [r3, #8]
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	2101      	movs	r1, #1
 8007422:	438a      	bics	r2, r1
 8007424:	609a      	str	r2, [r3, #8]
 8007426:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007428:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800742a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800742c:	f383 8810 	msr	PRIMASK, r3
}
 8007430:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	2220      	movs	r2, #32
 8007436:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	2220      	movs	r2, #32
 800743c:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	2280      	movs	r2, #128	; 0x80
 8007442:	2120      	movs	r1, #32
 8007444:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	2274      	movs	r2, #116	; 0x74
 800744a:	2100      	movs	r1, #0
 800744c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800744e:	2303      	movs	r3, #3
 8007450:	e010      	b.n	8007474 <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	69db      	ldr	r3, [r3, #28]
 8007458:	68ba      	ldr	r2, [r7, #8]
 800745a:	4013      	ands	r3, r2
 800745c:	68ba      	ldr	r2, [r7, #8]
 800745e:	1ad3      	subs	r3, r2, r3
 8007460:	425a      	negs	r2, r3
 8007462:	4153      	adcs	r3, r2
 8007464:	b2db      	uxtb	r3, r3
 8007466:	001a      	movs	r2, r3
 8007468:	1dfb      	adds	r3, r7, #7
 800746a:	781b      	ldrb	r3, [r3, #0]
 800746c:	429a      	cmp	r2, r3
 800746e:	d100      	bne.n	8007472 <UART_WaitOnFlagUntilTimeout+0x17a>
 8007470:	e74b      	b.n	800730a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007472:	2300      	movs	r3, #0
}
 8007474:	0018      	movs	r0, r3
 8007476:	46bd      	mov	sp, r7
 8007478:	b014      	add	sp, #80	; 0x50
 800747a:	bd80      	pop	{r7, pc}
 800747c:	fffffe5f 	.word	0xfffffe5f

08007480 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007480:	b580      	push	{r7, lr}
 8007482:	b08c      	sub	sp, #48	; 0x30
 8007484:	af00      	add	r7, sp, #0
 8007486:	60f8      	str	r0, [r7, #12]
 8007488:	60b9      	str	r1, [r7, #8]
 800748a:	1dbb      	adds	r3, r7, #6
 800748c:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	68ba      	ldr	r2, [r7, #8]
 8007492:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	1dba      	adds	r2, r7, #6
 8007498:	2158      	movs	r1, #88	; 0x58
 800749a:	8812      	ldrh	r2, [r2, #0]
 800749c:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	1dba      	adds	r2, r7, #6
 80074a2:	215a      	movs	r1, #90	; 0x5a
 80074a4:	8812      	ldrh	r2, [r2, #0]
 80074a6:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	2200      	movs	r2, #0
 80074ac:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	689a      	ldr	r2, [r3, #8]
 80074b2:	2380      	movs	r3, #128	; 0x80
 80074b4:	015b      	lsls	r3, r3, #5
 80074b6:	429a      	cmp	r2, r3
 80074b8:	d10d      	bne.n	80074d6 <UART_Start_Receive_IT+0x56>
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	691b      	ldr	r3, [r3, #16]
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d104      	bne.n	80074cc <UART_Start_Receive_IT+0x4c>
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	225c      	movs	r2, #92	; 0x5c
 80074c6:	4943      	ldr	r1, [pc, #268]	; (80075d4 <UART_Start_Receive_IT+0x154>)
 80074c8:	5299      	strh	r1, [r3, r2]
 80074ca:	e02e      	b.n	800752a <UART_Start_Receive_IT+0xaa>
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	225c      	movs	r2, #92	; 0x5c
 80074d0:	21ff      	movs	r1, #255	; 0xff
 80074d2:	5299      	strh	r1, [r3, r2]
 80074d4:	e029      	b.n	800752a <UART_Start_Receive_IT+0xaa>
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	689b      	ldr	r3, [r3, #8]
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d10d      	bne.n	80074fa <UART_Start_Receive_IT+0x7a>
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	691b      	ldr	r3, [r3, #16]
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d104      	bne.n	80074f0 <UART_Start_Receive_IT+0x70>
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	225c      	movs	r2, #92	; 0x5c
 80074ea:	21ff      	movs	r1, #255	; 0xff
 80074ec:	5299      	strh	r1, [r3, r2]
 80074ee:	e01c      	b.n	800752a <UART_Start_Receive_IT+0xaa>
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	225c      	movs	r2, #92	; 0x5c
 80074f4:	217f      	movs	r1, #127	; 0x7f
 80074f6:	5299      	strh	r1, [r3, r2]
 80074f8:	e017      	b.n	800752a <UART_Start_Receive_IT+0xaa>
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	689a      	ldr	r2, [r3, #8]
 80074fe:	2380      	movs	r3, #128	; 0x80
 8007500:	055b      	lsls	r3, r3, #21
 8007502:	429a      	cmp	r2, r3
 8007504:	d10d      	bne.n	8007522 <UART_Start_Receive_IT+0xa2>
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	691b      	ldr	r3, [r3, #16]
 800750a:	2b00      	cmp	r3, #0
 800750c:	d104      	bne.n	8007518 <UART_Start_Receive_IT+0x98>
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	225c      	movs	r2, #92	; 0x5c
 8007512:	217f      	movs	r1, #127	; 0x7f
 8007514:	5299      	strh	r1, [r3, r2]
 8007516:	e008      	b.n	800752a <UART_Start_Receive_IT+0xaa>
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	225c      	movs	r2, #92	; 0x5c
 800751c:	213f      	movs	r1, #63	; 0x3f
 800751e:	5299      	strh	r1, [r3, r2]
 8007520:	e003      	b.n	800752a <UART_Start_Receive_IT+0xaa>
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	225c      	movs	r2, #92	; 0x5c
 8007526:	2100      	movs	r1, #0
 8007528:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	2280      	movs	r2, #128	; 0x80
 800752e:	2100      	movs	r1, #0
 8007530:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	2222      	movs	r2, #34	; 0x22
 8007536:	67da      	str	r2, [r3, #124]	; 0x7c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007538:	f3ef 8310 	mrs	r3, PRIMASK
 800753c:	61fb      	str	r3, [r7, #28]
  return(result);
 800753e:	69fb      	ldr	r3, [r7, #28]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007540:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007542:	2301      	movs	r3, #1
 8007544:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007546:	6a3b      	ldr	r3, [r7, #32]
 8007548:	f383 8810 	msr	PRIMASK, r3
}
 800754c:	46c0      	nop			; (mov r8, r8)
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	689a      	ldr	r2, [r3, #8]
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	2101      	movs	r1, #1
 800755a:	430a      	orrs	r2, r1
 800755c:	609a      	str	r2, [r3, #8]
 800755e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007560:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007564:	f383 8810 	msr	PRIMASK, r3
}
 8007568:	46c0      	nop			; (mov r8, r8)

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	689a      	ldr	r2, [r3, #8]
 800756e:	2380      	movs	r3, #128	; 0x80
 8007570:	015b      	lsls	r3, r3, #5
 8007572:	429a      	cmp	r2, r3
 8007574:	d107      	bne.n	8007586 <UART_Start_Receive_IT+0x106>
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	691b      	ldr	r3, [r3, #16]
 800757a:	2b00      	cmp	r3, #0
 800757c:	d103      	bne.n	8007586 <UART_Start_Receive_IT+0x106>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	4a15      	ldr	r2, [pc, #84]	; (80075d8 <UART_Start_Receive_IT+0x158>)
 8007582:	665a      	str	r2, [r3, #100]	; 0x64
 8007584:	e002      	b.n	800758c <UART_Start_Receive_IT+0x10c>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	4a14      	ldr	r2, [pc, #80]	; (80075dc <UART_Start_Receive_IT+0x15c>)
 800758a:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	2274      	movs	r2, #116	; 0x74
 8007590:	2100      	movs	r1, #0
 8007592:	5499      	strb	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007594:	f3ef 8310 	mrs	r3, PRIMASK
 8007598:	613b      	str	r3, [r7, #16]
  return(result);
 800759a:	693b      	ldr	r3, [r7, #16]

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800759c:	62bb      	str	r3, [r7, #40]	; 0x28
 800759e:	2301      	movs	r3, #1
 80075a0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80075a2:	697b      	ldr	r3, [r7, #20]
 80075a4:	f383 8810 	msr	PRIMASK, r3
}
 80075a8:	46c0      	nop			; (mov r8, r8)
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	681a      	ldr	r2, [r3, #0]
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	2190      	movs	r1, #144	; 0x90
 80075b6:	0049      	lsls	r1, r1, #1
 80075b8:	430a      	orrs	r2, r1
 80075ba:	601a      	str	r2, [r3, #0]
 80075bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075be:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80075c0:	69bb      	ldr	r3, [r7, #24]
 80075c2:	f383 8810 	msr	PRIMASK, r3
}
 80075c6:	46c0      	nop			; (mov r8, r8)
  return HAL_OK;
 80075c8:	2300      	movs	r3, #0
}
 80075ca:	0018      	movs	r0, r3
 80075cc:	46bd      	mov	sp, r7
 80075ce:	b00c      	add	sp, #48	; 0x30
 80075d0:	bd80      	pop	{r7, pc}
 80075d2:	46c0      	nop			; (mov r8, r8)
 80075d4:	000001ff 	.word	0x000001ff
 80075d8:	08007891 	.word	0x08007891
 80075dc:	08007729 	.word	0x08007729

080075e0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80075e0:	b580      	push	{r7, lr}
 80075e2:	b08e      	sub	sp, #56	; 0x38
 80075e4:	af00      	add	r7, sp, #0
 80075e6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80075e8:	f3ef 8310 	mrs	r3, PRIMASK
 80075ec:	617b      	str	r3, [r7, #20]
  return(result);
 80075ee:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80075f0:	637b      	str	r3, [r7, #52]	; 0x34
 80075f2:	2301      	movs	r3, #1
 80075f4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80075f6:	69bb      	ldr	r3, [r7, #24]
 80075f8:	f383 8810 	msr	PRIMASK, r3
}
 80075fc:	46c0      	nop			; (mov r8, r8)
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	681a      	ldr	r2, [r3, #0]
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	4925      	ldr	r1, [pc, #148]	; (80076a0 <UART_EndRxTransfer+0xc0>)
 800760a:	400a      	ands	r2, r1
 800760c:	601a      	str	r2, [r3, #0]
 800760e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007610:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007612:	69fb      	ldr	r3, [r7, #28]
 8007614:	f383 8810 	msr	PRIMASK, r3
}
 8007618:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800761a:	f3ef 8310 	mrs	r3, PRIMASK
 800761e:	623b      	str	r3, [r7, #32]
  return(result);
 8007620:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007622:	633b      	str	r3, [r7, #48]	; 0x30
 8007624:	2301      	movs	r3, #1
 8007626:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800762a:	f383 8810 	msr	PRIMASK, r3
}
 800762e:	46c0      	nop			; (mov r8, r8)
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	689a      	ldr	r2, [r3, #8]
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	2101      	movs	r1, #1
 800763c:	438a      	bics	r2, r1
 800763e:	609a      	str	r2, [r3, #8]
 8007640:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007642:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007644:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007646:	f383 8810 	msr	PRIMASK, r3
}
 800764a:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007650:	2b01      	cmp	r3, #1
 8007652:	d118      	bne.n	8007686 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007654:	f3ef 8310 	mrs	r3, PRIMASK
 8007658:	60bb      	str	r3, [r7, #8]
  return(result);
 800765a:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800765c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800765e:	2301      	movs	r3, #1
 8007660:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	f383 8810 	msr	PRIMASK, r3
}
 8007668:	46c0      	nop			; (mov r8, r8)
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	681a      	ldr	r2, [r3, #0]
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	2110      	movs	r1, #16
 8007676:	438a      	bics	r2, r1
 8007678:	601a      	str	r2, [r3, #0]
 800767a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800767c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800767e:	693b      	ldr	r3, [r7, #16]
 8007680:	f383 8810 	msr	PRIMASK, r3
}
 8007684:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	2220      	movs	r2, #32
 800768a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	2200      	movs	r2, #0
 8007690:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	2200      	movs	r2, #0
 8007696:	665a      	str	r2, [r3, #100]	; 0x64
}
 8007698:	46c0      	nop			; (mov r8, r8)
 800769a:	46bd      	mov	sp, r7
 800769c:	b00e      	add	sp, #56	; 0x38
 800769e:	bd80      	pop	{r7, pc}
 80076a0:	fffffedf 	.word	0xfffffedf

080076a4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80076a4:	b580      	push	{r7, lr}
 80076a6:	b084      	sub	sp, #16
 80076a8:	af00      	add	r7, sp, #0
 80076aa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076b0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	225a      	movs	r2, #90	; 0x5a
 80076b6:	2100      	movs	r1, #0
 80076b8:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	2252      	movs	r2, #82	; 0x52
 80076be:	2100      	movs	r1, #0
 80076c0:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	0018      	movs	r0, r3
 80076c6:	f7ff fa49 	bl	8006b5c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80076ca:	46c0      	nop			; (mov r8, r8)
 80076cc:	46bd      	mov	sp, r7
 80076ce:	b004      	add	sp, #16
 80076d0:	bd80      	pop	{r7, pc}

080076d2 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80076d2:	b580      	push	{r7, lr}
 80076d4:	b086      	sub	sp, #24
 80076d6:	af00      	add	r7, sp, #0
 80076d8:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80076da:	f3ef 8310 	mrs	r3, PRIMASK
 80076de:	60bb      	str	r3, [r7, #8]
  return(result);
 80076e0:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80076e2:	617b      	str	r3, [r7, #20]
 80076e4:	2301      	movs	r3, #1
 80076e6:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	f383 8810 	msr	PRIMASK, r3
}
 80076ee:	46c0      	nop			; (mov r8, r8)
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	681a      	ldr	r2, [r3, #0]
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	2140      	movs	r1, #64	; 0x40
 80076fc:	438a      	bics	r2, r1
 80076fe:	601a      	str	r2, [r3, #0]
 8007700:	697b      	ldr	r3, [r7, #20]
 8007702:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007704:	693b      	ldr	r3, [r7, #16]
 8007706:	f383 8810 	msr	PRIMASK, r3
}
 800770a:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	2220      	movs	r2, #32
 8007710:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	2200      	movs	r2, #0
 8007716:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	0018      	movs	r0, r3
 800771c:	f7ff fa16 	bl	8006b4c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007720:	46c0      	nop			; (mov r8, r8)
 8007722:	46bd      	mov	sp, r7
 8007724:	b006      	add	sp, #24
 8007726:	bd80      	pop	{r7, pc}

08007728 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8007728:	b580      	push	{r7, lr}
 800772a:	b090      	sub	sp, #64	; 0x40
 800772c:	af00      	add	r7, sp, #0
 800772e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8007730:	203e      	movs	r0, #62	; 0x3e
 8007732:	183b      	adds	r3, r7, r0
 8007734:	687a      	ldr	r2, [r7, #4]
 8007736:	215c      	movs	r1, #92	; 0x5c
 8007738:	5a52      	ldrh	r2, [r2, r1]
 800773a:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007740:	2b22      	cmp	r3, #34	; 0x22
 8007742:	d000      	beq.n	8007746 <UART_RxISR_8BIT+0x1e>
 8007744:	e095      	b.n	8007872 <UART_RxISR_8BIT+0x14a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800774c:	213c      	movs	r1, #60	; 0x3c
 800774e:	187b      	adds	r3, r7, r1
 8007750:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007752:	187b      	adds	r3, r7, r1
 8007754:	881b      	ldrh	r3, [r3, #0]
 8007756:	b2da      	uxtb	r2, r3
 8007758:	183b      	adds	r3, r7, r0
 800775a:	881b      	ldrh	r3, [r3, #0]
 800775c:	b2d9      	uxtb	r1, r3
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007762:	400a      	ands	r2, r1
 8007764:	b2d2      	uxtb	r2, r2
 8007766:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800776c:	1c5a      	adds	r2, r3, #1
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	225a      	movs	r2, #90	; 0x5a
 8007776:	5a9b      	ldrh	r3, [r3, r2]
 8007778:	b29b      	uxth	r3, r3
 800777a:	3b01      	subs	r3, #1
 800777c:	b299      	uxth	r1, r3
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	225a      	movs	r2, #90	; 0x5a
 8007782:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	225a      	movs	r2, #90	; 0x5a
 8007788:	5a9b      	ldrh	r3, [r3, r2]
 800778a:	b29b      	uxth	r3, r3
 800778c:	2b00      	cmp	r3, #0
 800778e:	d178      	bne.n	8007882 <UART_RxISR_8BIT+0x15a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007790:	f3ef 8310 	mrs	r3, PRIMASK
 8007794:	61bb      	str	r3, [r7, #24]
  return(result);
 8007796:	69bb      	ldr	r3, [r7, #24]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007798:	63bb      	str	r3, [r7, #56]	; 0x38
 800779a:	2301      	movs	r3, #1
 800779c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800779e:	69fb      	ldr	r3, [r7, #28]
 80077a0:	f383 8810 	msr	PRIMASK, r3
}
 80077a4:	46c0      	nop			; (mov r8, r8)
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	681a      	ldr	r2, [r3, #0]
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	4936      	ldr	r1, [pc, #216]	; (800788c <UART_RxISR_8BIT+0x164>)
 80077b2:	400a      	ands	r2, r1
 80077b4:	601a      	str	r2, [r3, #0]
 80077b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077b8:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80077ba:	6a3b      	ldr	r3, [r7, #32]
 80077bc:	f383 8810 	msr	PRIMASK, r3
}
 80077c0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80077c2:	f3ef 8310 	mrs	r3, PRIMASK
 80077c6:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80077c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80077ca:	637b      	str	r3, [r7, #52]	; 0x34
 80077cc:	2301      	movs	r3, #1
 80077ce:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80077d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077d2:	f383 8810 	msr	PRIMASK, r3
}
 80077d6:	46c0      	nop			; (mov r8, r8)
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	689a      	ldr	r2, [r3, #8]
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	2101      	movs	r1, #1
 80077e4:	438a      	bics	r2, r1
 80077e6:	609a      	str	r2, [r3, #8]
 80077e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80077ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80077ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077ee:	f383 8810 	msr	PRIMASK, r3
}
 80077f2:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	2220      	movs	r2, #32
 80077f8:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	2200      	movs	r2, #0
 80077fe:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007804:	2b01      	cmp	r3, #1
 8007806:	d12f      	bne.n	8007868 <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	2200      	movs	r2, #0
 800780c:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800780e:	f3ef 8310 	mrs	r3, PRIMASK
 8007812:	60fb      	str	r3, [r7, #12]
  return(result);
 8007814:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007816:	633b      	str	r3, [r7, #48]	; 0x30
 8007818:	2301      	movs	r3, #1
 800781a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800781c:	693b      	ldr	r3, [r7, #16]
 800781e:	f383 8810 	msr	PRIMASK, r3
}
 8007822:	46c0      	nop			; (mov r8, r8)
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	681a      	ldr	r2, [r3, #0]
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	2110      	movs	r1, #16
 8007830:	438a      	bics	r2, r1
 8007832:	601a      	str	r2, [r3, #0]
 8007834:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007836:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007838:	697b      	ldr	r3, [r7, #20]
 800783a:	f383 8810 	msr	PRIMASK, r3
}
 800783e:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	69db      	ldr	r3, [r3, #28]
 8007846:	2210      	movs	r2, #16
 8007848:	4013      	ands	r3, r2
 800784a:	2b10      	cmp	r3, #16
 800784c:	d103      	bne.n	8007856 <UART_RxISR_8BIT+0x12e>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	2210      	movs	r2, #16
 8007854:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	2258      	movs	r2, #88	; 0x58
 800785a:	5a9a      	ldrh	r2, [r3, r2]
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	0011      	movs	r1, r2
 8007860:	0018      	movs	r0, r3
 8007862:	f7ff f983 	bl	8006b6c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007866:	e00c      	b.n	8007882 <UART_RxISR_8BIT+0x15a>
        HAL_UART_RxCpltCallback(huart);
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	0018      	movs	r0, r3
 800786c:	f7fb ff92 	bl	8003794 <HAL_UART_RxCpltCallback>
}
 8007870:	e007      	b.n	8007882 <UART_RxISR_8BIT+0x15a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	699a      	ldr	r2, [r3, #24]
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	2108      	movs	r1, #8
 800787e:	430a      	orrs	r2, r1
 8007880:	619a      	str	r2, [r3, #24]
}
 8007882:	46c0      	nop			; (mov r8, r8)
 8007884:	46bd      	mov	sp, r7
 8007886:	b010      	add	sp, #64	; 0x40
 8007888:	bd80      	pop	{r7, pc}
 800788a:	46c0      	nop			; (mov r8, r8)
 800788c:	fffffedf 	.word	0xfffffedf

08007890 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8007890:	b580      	push	{r7, lr}
 8007892:	b090      	sub	sp, #64	; 0x40
 8007894:	af00      	add	r7, sp, #0
 8007896:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8007898:	203e      	movs	r0, #62	; 0x3e
 800789a:	183b      	adds	r3, r7, r0
 800789c:	687a      	ldr	r2, [r7, #4]
 800789e:	215c      	movs	r1, #92	; 0x5c
 80078a0:	5a52      	ldrh	r2, [r2, r1]
 80078a2:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80078a8:	2b22      	cmp	r3, #34	; 0x22
 80078aa:	d000      	beq.n	80078ae <UART_RxISR_16BIT+0x1e>
 80078ac:	e095      	b.n	80079da <UART_RxISR_16BIT+0x14a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80078b4:	213c      	movs	r1, #60	; 0x3c
 80078b6:	187b      	adds	r3, r7, r1
 80078b8:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80078be:	63bb      	str	r3, [r7, #56]	; 0x38
    *tmp = (uint16_t)(uhdata & uhMask);
 80078c0:	187b      	adds	r3, r7, r1
 80078c2:	183a      	adds	r2, r7, r0
 80078c4:	881b      	ldrh	r3, [r3, #0]
 80078c6:	8812      	ldrh	r2, [r2, #0]
 80078c8:	4013      	ands	r3, r2
 80078ca:	b29a      	uxth	r2, r3
 80078cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078ce:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80078d4:	1c9a      	adds	r2, r3, #2
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	225a      	movs	r2, #90	; 0x5a
 80078de:	5a9b      	ldrh	r3, [r3, r2]
 80078e0:	b29b      	uxth	r3, r3
 80078e2:	3b01      	subs	r3, #1
 80078e4:	b299      	uxth	r1, r3
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	225a      	movs	r2, #90	; 0x5a
 80078ea:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	225a      	movs	r2, #90	; 0x5a
 80078f0:	5a9b      	ldrh	r3, [r3, r2]
 80078f2:	b29b      	uxth	r3, r3
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d178      	bne.n	80079ea <UART_RxISR_16BIT+0x15a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80078f8:	f3ef 8310 	mrs	r3, PRIMASK
 80078fc:	617b      	str	r3, [r7, #20]
  return(result);
 80078fe:	697b      	ldr	r3, [r7, #20]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007900:	637b      	str	r3, [r7, #52]	; 0x34
 8007902:	2301      	movs	r3, #1
 8007904:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007906:	69bb      	ldr	r3, [r7, #24]
 8007908:	f383 8810 	msr	PRIMASK, r3
}
 800790c:	46c0      	nop			; (mov r8, r8)
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	681a      	ldr	r2, [r3, #0]
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	4936      	ldr	r1, [pc, #216]	; (80079f4 <UART_RxISR_16BIT+0x164>)
 800791a:	400a      	ands	r2, r1
 800791c:	601a      	str	r2, [r3, #0]
 800791e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007920:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007922:	69fb      	ldr	r3, [r7, #28]
 8007924:	f383 8810 	msr	PRIMASK, r3
}
 8007928:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800792a:	f3ef 8310 	mrs	r3, PRIMASK
 800792e:	623b      	str	r3, [r7, #32]
  return(result);
 8007930:	6a3b      	ldr	r3, [r7, #32]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007932:	633b      	str	r3, [r7, #48]	; 0x30
 8007934:	2301      	movs	r3, #1
 8007936:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800793a:	f383 8810 	msr	PRIMASK, r3
}
 800793e:	46c0      	nop			; (mov r8, r8)
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	689a      	ldr	r2, [r3, #8]
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	2101      	movs	r1, #1
 800794c:	438a      	bics	r2, r1
 800794e:	609a      	str	r2, [r3, #8]
 8007950:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007952:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007954:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007956:	f383 8810 	msr	PRIMASK, r3
}
 800795a:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	2220      	movs	r2, #32
 8007960:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	2200      	movs	r2, #0
 8007966:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800796c:	2b01      	cmp	r3, #1
 800796e:	d12f      	bne.n	80079d0 <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	2200      	movs	r2, #0
 8007974:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007976:	f3ef 8310 	mrs	r3, PRIMASK
 800797a:	60bb      	str	r3, [r7, #8]
  return(result);
 800797c:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800797e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007980:	2301      	movs	r3, #1
 8007982:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	f383 8810 	msr	PRIMASK, r3
}
 800798a:	46c0      	nop			; (mov r8, r8)
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	681a      	ldr	r2, [r3, #0]
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	2110      	movs	r1, #16
 8007998:	438a      	bics	r2, r1
 800799a:	601a      	str	r2, [r3, #0]
 800799c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800799e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80079a0:	693b      	ldr	r3, [r7, #16]
 80079a2:	f383 8810 	msr	PRIMASK, r3
}
 80079a6:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	69db      	ldr	r3, [r3, #28]
 80079ae:	2210      	movs	r2, #16
 80079b0:	4013      	ands	r3, r2
 80079b2:	2b10      	cmp	r3, #16
 80079b4:	d103      	bne.n	80079be <UART_RxISR_16BIT+0x12e>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	2210      	movs	r2, #16
 80079bc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	2258      	movs	r2, #88	; 0x58
 80079c2:	5a9a      	ldrh	r2, [r3, r2]
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	0011      	movs	r1, r2
 80079c8:	0018      	movs	r0, r3
 80079ca:	f7ff f8cf 	bl	8006b6c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80079ce:	e00c      	b.n	80079ea <UART_RxISR_16BIT+0x15a>
        HAL_UART_RxCpltCallback(huart);
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	0018      	movs	r0, r3
 80079d4:	f7fb fede 	bl	8003794 <HAL_UART_RxCpltCallback>
}
 80079d8:	e007      	b.n	80079ea <UART_RxISR_16BIT+0x15a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	699a      	ldr	r2, [r3, #24]
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	2108      	movs	r1, #8
 80079e6:	430a      	orrs	r2, r1
 80079e8:	619a      	str	r2, [r3, #24]
}
 80079ea:	46c0      	nop			; (mov r8, r8)
 80079ec:	46bd      	mov	sp, r7
 80079ee:	b010      	add	sp, #64	; 0x40
 80079f0:	bd80      	pop	{r7, pc}
 80079f2:	46c0      	nop			; (mov r8, r8)
 80079f4:	fffffedf 	.word	0xfffffedf

080079f8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80079f8:	b580      	push	{r7, lr}
 80079fa:	b082      	sub	sp, #8
 80079fc:	af00      	add	r7, sp, #0
 80079fe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007a00:	46c0      	nop			; (mov r8, r8)
 8007a02:	46bd      	mov	sp, r7
 8007a04:	b002      	add	sp, #8
 8007a06:	bd80      	pop	{r7, pc}

08007a08 <__errno>:
 8007a08:	4b01      	ldr	r3, [pc, #4]	; (8007a10 <__errno+0x8>)
 8007a0a:	6818      	ldr	r0, [r3, #0]
 8007a0c:	4770      	bx	lr
 8007a0e:	46c0      	nop			; (mov r8, r8)
 8007a10:	2000000c 	.word	0x2000000c

08007a14 <__libc_init_array>:
 8007a14:	b570      	push	{r4, r5, r6, lr}
 8007a16:	2600      	movs	r6, #0
 8007a18:	4d0c      	ldr	r5, [pc, #48]	; (8007a4c <__libc_init_array+0x38>)
 8007a1a:	4c0d      	ldr	r4, [pc, #52]	; (8007a50 <__libc_init_array+0x3c>)
 8007a1c:	1b64      	subs	r4, r4, r5
 8007a1e:	10a4      	asrs	r4, r4, #2
 8007a20:	42a6      	cmp	r6, r4
 8007a22:	d109      	bne.n	8007a38 <__libc_init_array+0x24>
 8007a24:	2600      	movs	r6, #0
 8007a26:	f000 fc47 	bl	80082b8 <_init>
 8007a2a:	4d0a      	ldr	r5, [pc, #40]	; (8007a54 <__libc_init_array+0x40>)
 8007a2c:	4c0a      	ldr	r4, [pc, #40]	; (8007a58 <__libc_init_array+0x44>)
 8007a2e:	1b64      	subs	r4, r4, r5
 8007a30:	10a4      	asrs	r4, r4, #2
 8007a32:	42a6      	cmp	r6, r4
 8007a34:	d105      	bne.n	8007a42 <__libc_init_array+0x2e>
 8007a36:	bd70      	pop	{r4, r5, r6, pc}
 8007a38:	00b3      	lsls	r3, r6, #2
 8007a3a:	58eb      	ldr	r3, [r5, r3]
 8007a3c:	4798      	blx	r3
 8007a3e:	3601      	adds	r6, #1
 8007a40:	e7ee      	b.n	8007a20 <__libc_init_array+0xc>
 8007a42:	00b3      	lsls	r3, r6, #2
 8007a44:	58eb      	ldr	r3, [r5, r3]
 8007a46:	4798      	blx	r3
 8007a48:	3601      	adds	r6, #1
 8007a4a:	e7f2      	b.n	8007a32 <__libc_init_array+0x1e>
 8007a4c:	0800881c 	.word	0x0800881c
 8007a50:	0800881c 	.word	0x0800881c
 8007a54:	0800881c 	.word	0x0800881c
 8007a58:	08008820 	.word	0x08008820

08007a5c <memcpy>:
 8007a5c:	2300      	movs	r3, #0
 8007a5e:	b510      	push	{r4, lr}
 8007a60:	429a      	cmp	r2, r3
 8007a62:	d100      	bne.n	8007a66 <memcpy+0xa>
 8007a64:	bd10      	pop	{r4, pc}
 8007a66:	5ccc      	ldrb	r4, [r1, r3]
 8007a68:	54c4      	strb	r4, [r0, r3]
 8007a6a:	3301      	adds	r3, #1
 8007a6c:	e7f8      	b.n	8007a60 <memcpy+0x4>

08007a6e <memset>:
 8007a6e:	0003      	movs	r3, r0
 8007a70:	1882      	adds	r2, r0, r2
 8007a72:	4293      	cmp	r3, r2
 8007a74:	d100      	bne.n	8007a78 <memset+0xa>
 8007a76:	4770      	bx	lr
 8007a78:	7019      	strb	r1, [r3, #0]
 8007a7a:	3301      	adds	r3, #1
 8007a7c:	e7f9      	b.n	8007a72 <memset+0x4>
	...

08007a80 <siprintf>:
 8007a80:	b40e      	push	{r1, r2, r3}
 8007a82:	b500      	push	{lr}
 8007a84:	490b      	ldr	r1, [pc, #44]	; (8007ab4 <siprintf+0x34>)
 8007a86:	b09c      	sub	sp, #112	; 0x70
 8007a88:	ab1d      	add	r3, sp, #116	; 0x74
 8007a8a:	9002      	str	r0, [sp, #8]
 8007a8c:	9006      	str	r0, [sp, #24]
 8007a8e:	9107      	str	r1, [sp, #28]
 8007a90:	9104      	str	r1, [sp, #16]
 8007a92:	4809      	ldr	r0, [pc, #36]	; (8007ab8 <siprintf+0x38>)
 8007a94:	4909      	ldr	r1, [pc, #36]	; (8007abc <siprintf+0x3c>)
 8007a96:	cb04      	ldmia	r3!, {r2}
 8007a98:	9105      	str	r1, [sp, #20]
 8007a9a:	6800      	ldr	r0, [r0, #0]
 8007a9c:	a902      	add	r1, sp, #8
 8007a9e:	9301      	str	r3, [sp, #4]
 8007aa0:	f000 f870 	bl	8007b84 <_svfiprintf_r>
 8007aa4:	2300      	movs	r3, #0
 8007aa6:	9a02      	ldr	r2, [sp, #8]
 8007aa8:	7013      	strb	r3, [r2, #0]
 8007aaa:	b01c      	add	sp, #112	; 0x70
 8007aac:	bc08      	pop	{r3}
 8007aae:	b003      	add	sp, #12
 8007ab0:	4718      	bx	r3
 8007ab2:	46c0      	nop			; (mov r8, r8)
 8007ab4:	7fffffff 	.word	0x7fffffff
 8007ab8:	2000000c 	.word	0x2000000c
 8007abc:	ffff0208 	.word	0xffff0208

08007ac0 <__ssputs_r>:
 8007ac0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007ac2:	688e      	ldr	r6, [r1, #8]
 8007ac4:	b085      	sub	sp, #20
 8007ac6:	0007      	movs	r7, r0
 8007ac8:	000c      	movs	r4, r1
 8007aca:	9203      	str	r2, [sp, #12]
 8007acc:	9301      	str	r3, [sp, #4]
 8007ace:	429e      	cmp	r6, r3
 8007ad0:	d83c      	bhi.n	8007b4c <__ssputs_r+0x8c>
 8007ad2:	2390      	movs	r3, #144	; 0x90
 8007ad4:	898a      	ldrh	r2, [r1, #12]
 8007ad6:	00db      	lsls	r3, r3, #3
 8007ad8:	421a      	tst	r2, r3
 8007ada:	d034      	beq.n	8007b46 <__ssputs_r+0x86>
 8007adc:	2503      	movs	r5, #3
 8007ade:	6909      	ldr	r1, [r1, #16]
 8007ae0:	6823      	ldr	r3, [r4, #0]
 8007ae2:	1a5b      	subs	r3, r3, r1
 8007ae4:	9302      	str	r3, [sp, #8]
 8007ae6:	6963      	ldr	r3, [r4, #20]
 8007ae8:	9802      	ldr	r0, [sp, #8]
 8007aea:	435d      	muls	r5, r3
 8007aec:	0feb      	lsrs	r3, r5, #31
 8007aee:	195d      	adds	r5, r3, r5
 8007af0:	9b01      	ldr	r3, [sp, #4]
 8007af2:	106d      	asrs	r5, r5, #1
 8007af4:	3301      	adds	r3, #1
 8007af6:	181b      	adds	r3, r3, r0
 8007af8:	42ab      	cmp	r3, r5
 8007afa:	d900      	bls.n	8007afe <__ssputs_r+0x3e>
 8007afc:	001d      	movs	r5, r3
 8007afe:	0553      	lsls	r3, r2, #21
 8007b00:	d532      	bpl.n	8007b68 <__ssputs_r+0xa8>
 8007b02:	0029      	movs	r1, r5
 8007b04:	0038      	movs	r0, r7
 8007b06:	f000 fb27 	bl	8008158 <_malloc_r>
 8007b0a:	1e06      	subs	r6, r0, #0
 8007b0c:	d109      	bne.n	8007b22 <__ssputs_r+0x62>
 8007b0e:	230c      	movs	r3, #12
 8007b10:	603b      	str	r3, [r7, #0]
 8007b12:	2340      	movs	r3, #64	; 0x40
 8007b14:	2001      	movs	r0, #1
 8007b16:	89a2      	ldrh	r2, [r4, #12]
 8007b18:	4240      	negs	r0, r0
 8007b1a:	4313      	orrs	r3, r2
 8007b1c:	81a3      	strh	r3, [r4, #12]
 8007b1e:	b005      	add	sp, #20
 8007b20:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007b22:	9a02      	ldr	r2, [sp, #8]
 8007b24:	6921      	ldr	r1, [r4, #16]
 8007b26:	f7ff ff99 	bl	8007a5c <memcpy>
 8007b2a:	89a3      	ldrh	r3, [r4, #12]
 8007b2c:	4a14      	ldr	r2, [pc, #80]	; (8007b80 <__ssputs_r+0xc0>)
 8007b2e:	401a      	ands	r2, r3
 8007b30:	2380      	movs	r3, #128	; 0x80
 8007b32:	4313      	orrs	r3, r2
 8007b34:	81a3      	strh	r3, [r4, #12]
 8007b36:	9b02      	ldr	r3, [sp, #8]
 8007b38:	6126      	str	r6, [r4, #16]
 8007b3a:	18f6      	adds	r6, r6, r3
 8007b3c:	6026      	str	r6, [r4, #0]
 8007b3e:	6165      	str	r5, [r4, #20]
 8007b40:	9e01      	ldr	r6, [sp, #4]
 8007b42:	1aed      	subs	r5, r5, r3
 8007b44:	60a5      	str	r5, [r4, #8]
 8007b46:	9b01      	ldr	r3, [sp, #4]
 8007b48:	429e      	cmp	r6, r3
 8007b4a:	d900      	bls.n	8007b4e <__ssputs_r+0x8e>
 8007b4c:	9e01      	ldr	r6, [sp, #4]
 8007b4e:	0032      	movs	r2, r6
 8007b50:	9903      	ldr	r1, [sp, #12]
 8007b52:	6820      	ldr	r0, [r4, #0]
 8007b54:	f000 faa3 	bl	800809e <memmove>
 8007b58:	68a3      	ldr	r3, [r4, #8]
 8007b5a:	2000      	movs	r0, #0
 8007b5c:	1b9b      	subs	r3, r3, r6
 8007b5e:	60a3      	str	r3, [r4, #8]
 8007b60:	6823      	ldr	r3, [r4, #0]
 8007b62:	199e      	adds	r6, r3, r6
 8007b64:	6026      	str	r6, [r4, #0]
 8007b66:	e7da      	b.n	8007b1e <__ssputs_r+0x5e>
 8007b68:	002a      	movs	r2, r5
 8007b6a:	0038      	movs	r0, r7
 8007b6c:	f000 fb52 	bl	8008214 <_realloc_r>
 8007b70:	1e06      	subs	r6, r0, #0
 8007b72:	d1e0      	bne.n	8007b36 <__ssputs_r+0x76>
 8007b74:	0038      	movs	r0, r7
 8007b76:	6921      	ldr	r1, [r4, #16]
 8007b78:	f000 faa4 	bl	80080c4 <_free_r>
 8007b7c:	e7c7      	b.n	8007b0e <__ssputs_r+0x4e>
 8007b7e:	46c0      	nop			; (mov r8, r8)
 8007b80:	fffffb7f 	.word	0xfffffb7f

08007b84 <_svfiprintf_r>:
 8007b84:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007b86:	b0a1      	sub	sp, #132	; 0x84
 8007b88:	9003      	str	r0, [sp, #12]
 8007b8a:	001d      	movs	r5, r3
 8007b8c:	898b      	ldrh	r3, [r1, #12]
 8007b8e:	000f      	movs	r7, r1
 8007b90:	0016      	movs	r6, r2
 8007b92:	061b      	lsls	r3, r3, #24
 8007b94:	d511      	bpl.n	8007bba <_svfiprintf_r+0x36>
 8007b96:	690b      	ldr	r3, [r1, #16]
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d10e      	bne.n	8007bba <_svfiprintf_r+0x36>
 8007b9c:	2140      	movs	r1, #64	; 0x40
 8007b9e:	f000 fadb 	bl	8008158 <_malloc_r>
 8007ba2:	6038      	str	r0, [r7, #0]
 8007ba4:	6138      	str	r0, [r7, #16]
 8007ba6:	2800      	cmp	r0, #0
 8007ba8:	d105      	bne.n	8007bb6 <_svfiprintf_r+0x32>
 8007baa:	230c      	movs	r3, #12
 8007bac:	9a03      	ldr	r2, [sp, #12]
 8007bae:	3801      	subs	r0, #1
 8007bb0:	6013      	str	r3, [r2, #0]
 8007bb2:	b021      	add	sp, #132	; 0x84
 8007bb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007bb6:	2340      	movs	r3, #64	; 0x40
 8007bb8:	617b      	str	r3, [r7, #20]
 8007bba:	2300      	movs	r3, #0
 8007bbc:	ac08      	add	r4, sp, #32
 8007bbe:	6163      	str	r3, [r4, #20]
 8007bc0:	3320      	adds	r3, #32
 8007bc2:	7663      	strb	r3, [r4, #25]
 8007bc4:	3310      	adds	r3, #16
 8007bc6:	76a3      	strb	r3, [r4, #26]
 8007bc8:	9507      	str	r5, [sp, #28]
 8007bca:	0035      	movs	r5, r6
 8007bcc:	782b      	ldrb	r3, [r5, #0]
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d001      	beq.n	8007bd6 <_svfiprintf_r+0x52>
 8007bd2:	2b25      	cmp	r3, #37	; 0x25
 8007bd4:	d147      	bne.n	8007c66 <_svfiprintf_r+0xe2>
 8007bd6:	1bab      	subs	r3, r5, r6
 8007bd8:	9305      	str	r3, [sp, #20]
 8007bda:	42b5      	cmp	r5, r6
 8007bdc:	d00c      	beq.n	8007bf8 <_svfiprintf_r+0x74>
 8007bde:	0032      	movs	r2, r6
 8007be0:	0039      	movs	r1, r7
 8007be2:	9803      	ldr	r0, [sp, #12]
 8007be4:	f7ff ff6c 	bl	8007ac0 <__ssputs_r>
 8007be8:	1c43      	adds	r3, r0, #1
 8007bea:	d100      	bne.n	8007bee <_svfiprintf_r+0x6a>
 8007bec:	e0ae      	b.n	8007d4c <_svfiprintf_r+0x1c8>
 8007bee:	6962      	ldr	r2, [r4, #20]
 8007bf0:	9b05      	ldr	r3, [sp, #20]
 8007bf2:	4694      	mov	ip, r2
 8007bf4:	4463      	add	r3, ip
 8007bf6:	6163      	str	r3, [r4, #20]
 8007bf8:	782b      	ldrb	r3, [r5, #0]
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d100      	bne.n	8007c00 <_svfiprintf_r+0x7c>
 8007bfe:	e0a5      	b.n	8007d4c <_svfiprintf_r+0x1c8>
 8007c00:	2201      	movs	r2, #1
 8007c02:	2300      	movs	r3, #0
 8007c04:	4252      	negs	r2, r2
 8007c06:	6062      	str	r2, [r4, #4]
 8007c08:	a904      	add	r1, sp, #16
 8007c0a:	3254      	adds	r2, #84	; 0x54
 8007c0c:	1852      	adds	r2, r2, r1
 8007c0e:	1c6e      	adds	r6, r5, #1
 8007c10:	6023      	str	r3, [r4, #0]
 8007c12:	60e3      	str	r3, [r4, #12]
 8007c14:	60a3      	str	r3, [r4, #8]
 8007c16:	7013      	strb	r3, [r2, #0]
 8007c18:	65a3      	str	r3, [r4, #88]	; 0x58
 8007c1a:	2205      	movs	r2, #5
 8007c1c:	7831      	ldrb	r1, [r6, #0]
 8007c1e:	4854      	ldr	r0, [pc, #336]	; (8007d70 <_svfiprintf_r+0x1ec>)
 8007c20:	f000 fa32 	bl	8008088 <memchr>
 8007c24:	1c75      	adds	r5, r6, #1
 8007c26:	2800      	cmp	r0, #0
 8007c28:	d11f      	bne.n	8007c6a <_svfiprintf_r+0xe6>
 8007c2a:	6822      	ldr	r2, [r4, #0]
 8007c2c:	06d3      	lsls	r3, r2, #27
 8007c2e:	d504      	bpl.n	8007c3a <_svfiprintf_r+0xb6>
 8007c30:	2353      	movs	r3, #83	; 0x53
 8007c32:	a904      	add	r1, sp, #16
 8007c34:	185b      	adds	r3, r3, r1
 8007c36:	2120      	movs	r1, #32
 8007c38:	7019      	strb	r1, [r3, #0]
 8007c3a:	0713      	lsls	r3, r2, #28
 8007c3c:	d504      	bpl.n	8007c48 <_svfiprintf_r+0xc4>
 8007c3e:	2353      	movs	r3, #83	; 0x53
 8007c40:	a904      	add	r1, sp, #16
 8007c42:	185b      	adds	r3, r3, r1
 8007c44:	212b      	movs	r1, #43	; 0x2b
 8007c46:	7019      	strb	r1, [r3, #0]
 8007c48:	7833      	ldrb	r3, [r6, #0]
 8007c4a:	2b2a      	cmp	r3, #42	; 0x2a
 8007c4c:	d016      	beq.n	8007c7c <_svfiprintf_r+0xf8>
 8007c4e:	0035      	movs	r5, r6
 8007c50:	2100      	movs	r1, #0
 8007c52:	200a      	movs	r0, #10
 8007c54:	68e3      	ldr	r3, [r4, #12]
 8007c56:	782a      	ldrb	r2, [r5, #0]
 8007c58:	1c6e      	adds	r6, r5, #1
 8007c5a:	3a30      	subs	r2, #48	; 0x30
 8007c5c:	2a09      	cmp	r2, #9
 8007c5e:	d94e      	bls.n	8007cfe <_svfiprintf_r+0x17a>
 8007c60:	2900      	cmp	r1, #0
 8007c62:	d111      	bne.n	8007c88 <_svfiprintf_r+0x104>
 8007c64:	e017      	b.n	8007c96 <_svfiprintf_r+0x112>
 8007c66:	3501      	adds	r5, #1
 8007c68:	e7b0      	b.n	8007bcc <_svfiprintf_r+0x48>
 8007c6a:	4b41      	ldr	r3, [pc, #260]	; (8007d70 <_svfiprintf_r+0x1ec>)
 8007c6c:	6822      	ldr	r2, [r4, #0]
 8007c6e:	1ac0      	subs	r0, r0, r3
 8007c70:	2301      	movs	r3, #1
 8007c72:	4083      	lsls	r3, r0
 8007c74:	4313      	orrs	r3, r2
 8007c76:	002e      	movs	r6, r5
 8007c78:	6023      	str	r3, [r4, #0]
 8007c7a:	e7ce      	b.n	8007c1a <_svfiprintf_r+0x96>
 8007c7c:	9b07      	ldr	r3, [sp, #28]
 8007c7e:	1d19      	adds	r1, r3, #4
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	9107      	str	r1, [sp, #28]
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	db01      	blt.n	8007c8c <_svfiprintf_r+0x108>
 8007c88:	930b      	str	r3, [sp, #44]	; 0x2c
 8007c8a:	e004      	b.n	8007c96 <_svfiprintf_r+0x112>
 8007c8c:	425b      	negs	r3, r3
 8007c8e:	60e3      	str	r3, [r4, #12]
 8007c90:	2302      	movs	r3, #2
 8007c92:	4313      	orrs	r3, r2
 8007c94:	6023      	str	r3, [r4, #0]
 8007c96:	782b      	ldrb	r3, [r5, #0]
 8007c98:	2b2e      	cmp	r3, #46	; 0x2e
 8007c9a:	d10a      	bne.n	8007cb2 <_svfiprintf_r+0x12e>
 8007c9c:	786b      	ldrb	r3, [r5, #1]
 8007c9e:	2b2a      	cmp	r3, #42	; 0x2a
 8007ca0:	d135      	bne.n	8007d0e <_svfiprintf_r+0x18a>
 8007ca2:	9b07      	ldr	r3, [sp, #28]
 8007ca4:	3502      	adds	r5, #2
 8007ca6:	1d1a      	adds	r2, r3, #4
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	9207      	str	r2, [sp, #28]
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	db2b      	blt.n	8007d08 <_svfiprintf_r+0x184>
 8007cb0:	9309      	str	r3, [sp, #36]	; 0x24
 8007cb2:	4e30      	ldr	r6, [pc, #192]	; (8007d74 <_svfiprintf_r+0x1f0>)
 8007cb4:	2203      	movs	r2, #3
 8007cb6:	0030      	movs	r0, r6
 8007cb8:	7829      	ldrb	r1, [r5, #0]
 8007cba:	f000 f9e5 	bl	8008088 <memchr>
 8007cbe:	2800      	cmp	r0, #0
 8007cc0:	d006      	beq.n	8007cd0 <_svfiprintf_r+0x14c>
 8007cc2:	2340      	movs	r3, #64	; 0x40
 8007cc4:	1b80      	subs	r0, r0, r6
 8007cc6:	4083      	lsls	r3, r0
 8007cc8:	6822      	ldr	r2, [r4, #0]
 8007cca:	3501      	adds	r5, #1
 8007ccc:	4313      	orrs	r3, r2
 8007cce:	6023      	str	r3, [r4, #0]
 8007cd0:	7829      	ldrb	r1, [r5, #0]
 8007cd2:	2206      	movs	r2, #6
 8007cd4:	4828      	ldr	r0, [pc, #160]	; (8007d78 <_svfiprintf_r+0x1f4>)
 8007cd6:	1c6e      	adds	r6, r5, #1
 8007cd8:	7621      	strb	r1, [r4, #24]
 8007cda:	f000 f9d5 	bl	8008088 <memchr>
 8007cde:	2800      	cmp	r0, #0
 8007ce0:	d03c      	beq.n	8007d5c <_svfiprintf_r+0x1d8>
 8007ce2:	4b26      	ldr	r3, [pc, #152]	; (8007d7c <_svfiprintf_r+0x1f8>)
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d125      	bne.n	8007d34 <_svfiprintf_r+0x1b0>
 8007ce8:	2207      	movs	r2, #7
 8007cea:	9b07      	ldr	r3, [sp, #28]
 8007cec:	3307      	adds	r3, #7
 8007cee:	4393      	bics	r3, r2
 8007cf0:	3308      	adds	r3, #8
 8007cf2:	9307      	str	r3, [sp, #28]
 8007cf4:	6963      	ldr	r3, [r4, #20]
 8007cf6:	9a04      	ldr	r2, [sp, #16]
 8007cf8:	189b      	adds	r3, r3, r2
 8007cfa:	6163      	str	r3, [r4, #20]
 8007cfc:	e765      	b.n	8007bca <_svfiprintf_r+0x46>
 8007cfe:	4343      	muls	r3, r0
 8007d00:	0035      	movs	r5, r6
 8007d02:	2101      	movs	r1, #1
 8007d04:	189b      	adds	r3, r3, r2
 8007d06:	e7a6      	b.n	8007c56 <_svfiprintf_r+0xd2>
 8007d08:	2301      	movs	r3, #1
 8007d0a:	425b      	negs	r3, r3
 8007d0c:	e7d0      	b.n	8007cb0 <_svfiprintf_r+0x12c>
 8007d0e:	2300      	movs	r3, #0
 8007d10:	200a      	movs	r0, #10
 8007d12:	001a      	movs	r2, r3
 8007d14:	3501      	adds	r5, #1
 8007d16:	6063      	str	r3, [r4, #4]
 8007d18:	7829      	ldrb	r1, [r5, #0]
 8007d1a:	1c6e      	adds	r6, r5, #1
 8007d1c:	3930      	subs	r1, #48	; 0x30
 8007d1e:	2909      	cmp	r1, #9
 8007d20:	d903      	bls.n	8007d2a <_svfiprintf_r+0x1a6>
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d0c5      	beq.n	8007cb2 <_svfiprintf_r+0x12e>
 8007d26:	9209      	str	r2, [sp, #36]	; 0x24
 8007d28:	e7c3      	b.n	8007cb2 <_svfiprintf_r+0x12e>
 8007d2a:	4342      	muls	r2, r0
 8007d2c:	0035      	movs	r5, r6
 8007d2e:	2301      	movs	r3, #1
 8007d30:	1852      	adds	r2, r2, r1
 8007d32:	e7f1      	b.n	8007d18 <_svfiprintf_r+0x194>
 8007d34:	ab07      	add	r3, sp, #28
 8007d36:	9300      	str	r3, [sp, #0]
 8007d38:	003a      	movs	r2, r7
 8007d3a:	0021      	movs	r1, r4
 8007d3c:	4b10      	ldr	r3, [pc, #64]	; (8007d80 <_svfiprintf_r+0x1fc>)
 8007d3e:	9803      	ldr	r0, [sp, #12]
 8007d40:	e000      	b.n	8007d44 <_svfiprintf_r+0x1c0>
 8007d42:	bf00      	nop
 8007d44:	9004      	str	r0, [sp, #16]
 8007d46:	9b04      	ldr	r3, [sp, #16]
 8007d48:	3301      	adds	r3, #1
 8007d4a:	d1d3      	bne.n	8007cf4 <_svfiprintf_r+0x170>
 8007d4c:	89bb      	ldrh	r3, [r7, #12]
 8007d4e:	980d      	ldr	r0, [sp, #52]	; 0x34
 8007d50:	065b      	lsls	r3, r3, #25
 8007d52:	d400      	bmi.n	8007d56 <_svfiprintf_r+0x1d2>
 8007d54:	e72d      	b.n	8007bb2 <_svfiprintf_r+0x2e>
 8007d56:	2001      	movs	r0, #1
 8007d58:	4240      	negs	r0, r0
 8007d5a:	e72a      	b.n	8007bb2 <_svfiprintf_r+0x2e>
 8007d5c:	ab07      	add	r3, sp, #28
 8007d5e:	9300      	str	r3, [sp, #0]
 8007d60:	003a      	movs	r2, r7
 8007d62:	0021      	movs	r1, r4
 8007d64:	4b06      	ldr	r3, [pc, #24]	; (8007d80 <_svfiprintf_r+0x1fc>)
 8007d66:	9803      	ldr	r0, [sp, #12]
 8007d68:	f000 f87c 	bl	8007e64 <_printf_i>
 8007d6c:	e7ea      	b.n	8007d44 <_svfiprintf_r+0x1c0>
 8007d6e:	46c0      	nop			; (mov r8, r8)
 8007d70:	080087e0 	.word	0x080087e0
 8007d74:	080087e6 	.word	0x080087e6
 8007d78:	080087ea 	.word	0x080087ea
 8007d7c:	00000000 	.word	0x00000000
 8007d80:	08007ac1 	.word	0x08007ac1

08007d84 <_printf_common>:
 8007d84:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007d86:	0015      	movs	r5, r2
 8007d88:	9301      	str	r3, [sp, #4]
 8007d8a:	688a      	ldr	r2, [r1, #8]
 8007d8c:	690b      	ldr	r3, [r1, #16]
 8007d8e:	000c      	movs	r4, r1
 8007d90:	9000      	str	r0, [sp, #0]
 8007d92:	4293      	cmp	r3, r2
 8007d94:	da00      	bge.n	8007d98 <_printf_common+0x14>
 8007d96:	0013      	movs	r3, r2
 8007d98:	0022      	movs	r2, r4
 8007d9a:	602b      	str	r3, [r5, #0]
 8007d9c:	3243      	adds	r2, #67	; 0x43
 8007d9e:	7812      	ldrb	r2, [r2, #0]
 8007da0:	2a00      	cmp	r2, #0
 8007da2:	d001      	beq.n	8007da8 <_printf_common+0x24>
 8007da4:	3301      	adds	r3, #1
 8007da6:	602b      	str	r3, [r5, #0]
 8007da8:	6823      	ldr	r3, [r4, #0]
 8007daa:	069b      	lsls	r3, r3, #26
 8007dac:	d502      	bpl.n	8007db4 <_printf_common+0x30>
 8007dae:	682b      	ldr	r3, [r5, #0]
 8007db0:	3302      	adds	r3, #2
 8007db2:	602b      	str	r3, [r5, #0]
 8007db4:	6822      	ldr	r2, [r4, #0]
 8007db6:	2306      	movs	r3, #6
 8007db8:	0017      	movs	r7, r2
 8007dba:	401f      	ands	r7, r3
 8007dbc:	421a      	tst	r2, r3
 8007dbe:	d027      	beq.n	8007e10 <_printf_common+0x8c>
 8007dc0:	0023      	movs	r3, r4
 8007dc2:	3343      	adds	r3, #67	; 0x43
 8007dc4:	781b      	ldrb	r3, [r3, #0]
 8007dc6:	1e5a      	subs	r2, r3, #1
 8007dc8:	4193      	sbcs	r3, r2
 8007dca:	6822      	ldr	r2, [r4, #0]
 8007dcc:	0692      	lsls	r2, r2, #26
 8007dce:	d430      	bmi.n	8007e32 <_printf_common+0xae>
 8007dd0:	0022      	movs	r2, r4
 8007dd2:	9901      	ldr	r1, [sp, #4]
 8007dd4:	9800      	ldr	r0, [sp, #0]
 8007dd6:	9e08      	ldr	r6, [sp, #32]
 8007dd8:	3243      	adds	r2, #67	; 0x43
 8007dda:	47b0      	blx	r6
 8007ddc:	1c43      	adds	r3, r0, #1
 8007dde:	d025      	beq.n	8007e2c <_printf_common+0xa8>
 8007de0:	2306      	movs	r3, #6
 8007de2:	6820      	ldr	r0, [r4, #0]
 8007de4:	682a      	ldr	r2, [r5, #0]
 8007de6:	68e1      	ldr	r1, [r4, #12]
 8007de8:	2500      	movs	r5, #0
 8007dea:	4003      	ands	r3, r0
 8007dec:	2b04      	cmp	r3, #4
 8007dee:	d103      	bne.n	8007df8 <_printf_common+0x74>
 8007df0:	1a8d      	subs	r5, r1, r2
 8007df2:	43eb      	mvns	r3, r5
 8007df4:	17db      	asrs	r3, r3, #31
 8007df6:	401d      	ands	r5, r3
 8007df8:	68a3      	ldr	r3, [r4, #8]
 8007dfa:	6922      	ldr	r2, [r4, #16]
 8007dfc:	4293      	cmp	r3, r2
 8007dfe:	dd01      	ble.n	8007e04 <_printf_common+0x80>
 8007e00:	1a9b      	subs	r3, r3, r2
 8007e02:	18ed      	adds	r5, r5, r3
 8007e04:	2700      	movs	r7, #0
 8007e06:	42bd      	cmp	r5, r7
 8007e08:	d120      	bne.n	8007e4c <_printf_common+0xc8>
 8007e0a:	2000      	movs	r0, #0
 8007e0c:	e010      	b.n	8007e30 <_printf_common+0xac>
 8007e0e:	3701      	adds	r7, #1
 8007e10:	68e3      	ldr	r3, [r4, #12]
 8007e12:	682a      	ldr	r2, [r5, #0]
 8007e14:	1a9b      	subs	r3, r3, r2
 8007e16:	42bb      	cmp	r3, r7
 8007e18:	ddd2      	ble.n	8007dc0 <_printf_common+0x3c>
 8007e1a:	0022      	movs	r2, r4
 8007e1c:	2301      	movs	r3, #1
 8007e1e:	9901      	ldr	r1, [sp, #4]
 8007e20:	9800      	ldr	r0, [sp, #0]
 8007e22:	9e08      	ldr	r6, [sp, #32]
 8007e24:	3219      	adds	r2, #25
 8007e26:	47b0      	blx	r6
 8007e28:	1c43      	adds	r3, r0, #1
 8007e2a:	d1f0      	bne.n	8007e0e <_printf_common+0x8a>
 8007e2c:	2001      	movs	r0, #1
 8007e2e:	4240      	negs	r0, r0
 8007e30:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007e32:	2030      	movs	r0, #48	; 0x30
 8007e34:	18e1      	adds	r1, r4, r3
 8007e36:	3143      	adds	r1, #67	; 0x43
 8007e38:	7008      	strb	r0, [r1, #0]
 8007e3a:	0021      	movs	r1, r4
 8007e3c:	1c5a      	adds	r2, r3, #1
 8007e3e:	3145      	adds	r1, #69	; 0x45
 8007e40:	7809      	ldrb	r1, [r1, #0]
 8007e42:	18a2      	adds	r2, r4, r2
 8007e44:	3243      	adds	r2, #67	; 0x43
 8007e46:	3302      	adds	r3, #2
 8007e48:	7011      	strb	r1, [r2, #0]
 8007e4a:	e7c1      	b.n	8007dd0 <_printf_common+0x4c>
 8007e4c:	0022      	movs	r2, r4
 8007e4e:	2301      	movs	r3, #1
 8007e50:	9901      	ldr	r1, [sp, #4]
 8007e52:	9800      	ldr	r0, [sp, #0]
 8007e54:	9e08      	ldr	r6, [sp, #32]
 8007e56:	321a      	adds	r2, #26
 8007e58:	47b0      	blx	r6
 8007e5a:	1c43      	adds	r3, r0, #1
 8007e5c:	d0e6      	beq.n	8007e2c <_printf_common+0xa8>
 8007e5e:	3701      	adds	r7, #1
 8007e60:	e7d1      	b.n	8007e06 <_printf_common+0x82>
	...

08007e64 <_printf_i>:
 8007e64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007e66:	b08b      	sub	sp, #44	; 0x2c
 8007e68:	9206      	str	r2, [sp, #24]
 8007e6a:	000a      	movs	r2, r1
 8007e6c:	3243      	adds	r2, #67	; 0x43
 8007e6e:	9307      	str	r3, [sp, #28]
 8007e70:	9005      	str	r0, [sp, #20]
 8007e72:	9204      	str	r2, [sp, #16]
 8007e74:	7e0a      	ldrb	r2, [r1, #24]
 8007e76:	000c      	movs	r4, r1
 8007e78:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007e7a:	2a78      	cmp	r2, #120	; 0x78
 8007e7c:	d806      	bhi.n	8007e8c <_printf_i+0x28>
 8007e7e:	2a62      	cmp	r2, #98	; 0x62
 8007e80:	d808      	bhi.n	8007e94 <_printf_i+0x30>
 8007e82:	2a00      	cmp	r2, #0
 8007e84:	d100      	bne.n	8007e88 <_printf_i+0x24>
 8007e86:	e0c0      	b.n	800800a <_printf_i+0x1a6>
 8007e88:	2a58      	cmp	r2, #88	; 0x58
 8007e8a:	d052      	beq.n	8007f32 <_printf_i+0xce>
 8007e8c:	0026      	movs	r6, r4
 8007e8e:	3642      	adds	r6, #66	; 0x42
 8007e90:	7032      	strb	r2, [r6, #0]
 8007e92:	e022      	b.n	8007eda <_printf_i+0x76>
 8007e94:	0010      	movs	r0, r2
 8007e96:	3863      	subs	r0, #99	; 0x63
 8007e98:	2815      	cmp	r0, #21
 8007e9a:	d8f7      	bhi.n	8007e8c <_printf_i+0x28>
 8007e9c:	f7f8 f934 	bl	8000108 <__gnu_thumb1_case_shi>
 8007ea0:	001f0016 	.word	0x001f0016
 8007ea4:	fff6fff6 	.word	0xfff6fff6
 8007ea8:	fff6fff6 	.word	0xfff6fff6
 8007eac:	fff6001f 	.word	0xfff6001f
 8007eb0:	fff6fff6 	.word	0xfff6fff6
 8007eb4:	00a8fff6 	.word	0x00a8fff6
 8007eb8:	009a0036 	.word	0x009a0036
 8007ebc:	fff6fff6 	.word	0xfff6fff6
 8007ec0:	fff600b9 	.word	0xfff600b9
 8007ec4:	fff60036 	.word	0xfff60036
 8007ec8:	009efff6 	.word	0x009efff6
 8007ecc:	0026      	movs	r6, r4
 8007ece:	681a      	ldr	r2, [r3, #0]
 8007ed0:	3642      	adds	r6, #66	; 0x42
 8007ed2:	1d11      	adds	r1, r2, #4
 8007ed4:	6019      	str	r1, [r3, #0]
 8007ed6:	6813      	ldr	r3, [r2, #0]
 8007ed8:	7033      	strb	r3, [r6, #0]
 8007eda:	2301      	movs	r3, #1
 8007edc:	e0a7      	b.n	800802e <_printf_i+0x1ca>
 8007ede:	6808      	ldr	r0, [r1, #0]
 8007ee0:	6819      	ldr	r1, [r3, #0]
 8007ee2:	1d0a      	adds	r2, r1, #4
 8007ee4:	0605      	lsls	r5, r0, #24
 8007ee6:	d50b      	bpl.n	8007f00 <_printf_i+0x9c>
 8007ee8:	680d      	ldr	r5, [r1, #0]
 8007eea:	601a      	str	r2, [r3, #0]
 8007eec:	2d00      	cmp	r5, #0
 8007eee:	da03      	bge.n	8007ef8 <_printf_i+0x94>
 8007ef0:	232d      	movs	r3, #45	; 0x2d
 8007ef2:	9a04      	ldr	r2, [sp, #16]
 8007ef4:	426d      	negs	r5, r5
 8007ef6:	7013      	strb	r3, [r2, #0]
 8007ef8:	4b61      	ldr	r3, [pc, #388]	; (8008080 <_printf_i+0x21c>)
 8007efa:	270a      	movs	r7, #10
 8007efc:	9303      	str	r3, [sp, #12]
 8007efe:	e032      	b.n	8007f66 <_printf_i+0x102>
 8007f00:	680d      	ldr	r5, [r1, #0]
 8007f02:	601a      	str	r2, [r3, #0]
 8007f04:	0641      	lsls	r1, r0, #25
 8007f06:	d5f1      	bpl.n	8007eec <_printf_i+0x88>
 8007f08:	b22d      	sxth	r5, r5
 8007f0a:	e7ef      	b.n	8007eec <_printf_i+0x88>
 8007f0c:	680d      	ldr	r5, [r1, #0]
 8007f0e:	6819      	ldr	r1, [r3, #0]
 8007f10:	1d08      	adds	r0, r1, #4
 8007f12:	6018      	str	r0, [r3, #0]
 8007f14:	062e      	lsls	r6, r5, #24
 8007f16:	d501      	bpl.n	8007f1c <_printf_i+0xb8>
 8007f18:	680d      	ldr	r5, [r1, #0]
 8007f1a:	e003      	b.n	8007f24 <_printf_i+0xc0>
 8007f1c:	066d      	lsls	r5, r5, #25
 8007f1e:	d5fb      	bpl.n	8007f18 <_printf_i+0xb4>
 8007f20:	680d      	ldr	r5, [r1, #0]
 8007f22:	b2ad      	uxth	r5, r5
 8007f24:	4b56      	ldr	r3, [pc, #344]	; (8008080 <_printf_i+0x21c>)
 8007f26:	270a      	movs	r7, #10
 8007f28:	9303      	str	r3, [sp, #12]
 8007f2a:	2a6f      	cmp	r2, #111	; 0x6f
 8007f2c:	d117      	bne.n	8007f5e <_printf_i+0xfa>
 8007f2e:	2708      	movs	r7, #8
 8007f30:	e015      	b.n	8007f5e <_printf_i+0xfa>
 8007f32:	3145      	adds	r1, #69	; 0x45
 8007f34:	700a      	strb	r2, [r1, #0]
 8007f36:	4a52      	ldr	r2, [pc, #328]	; (8008080 <_printf_i+0x21c>)
 8007f38:	9203      	str	r2, [sp, #12]
 8007f3a:	681a      	ldr	r2, [r3, #0]
 8007f3c:	6821      	ldr	r1, [r4, #0]
 8007f3e:	ca20      	ldmia	r2!, {r5}
 8007f40:	601a      	str	r2, [r3, #0]
 8007f42:	0608      	lsls	r0, r1, #24
 8007f44:	d550      	bpl.n	8007fe8 <_printf_i+0x184>
 8007f46:	07cb      	lsls	r3, r1, #31
 8007f48:	d502      	bpl.n	8007f50 <_printf_i+0xec>
 8007f4a:	2320      	movs	r3, #32
 8007f4c:	4319      	orrs	r1, r3
 8007f4e:	6021      	str	r1, [r4, #0]
 8007f50:	2710      	movs	r7, #16
 8007f52:	2d00      	cmp	r5, #0
 8007f54:	d103      	bne.n	8007f5e <_printf_i+0xfa>
 8007f56:	2320      	movs	r3, #32
 8007f58:	6822      	ldr	r2, [r4, #0]
 8007f5a:	439a      	bics	r2, r3
 8007f5c:	6022      	str	r2, [r4, #0]
 8007f5e:	0023      	movs	r3, r4
 8007f60:	2200      	movs	r2, #0
 8007f62:	3343      	adds	r3, #67	; 0x43
 8007f64:	701a      	strb	r2, [r3, #0]
 8007f66:	6863      	ldr	r3, [r4, #4]
 8007f68:	60a3      	str	r3, [r4, #8]
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	db03      	blt.n	8007f76 <_printf_i+0x112>
 8007f6e:	2204      	movs	r2, #4
 8007f70:	6821      	ldr	r1, [r4, #0]
 8007f72:	4391      	bics	r1, r2
 8007f74:	6021      	str	r1, [r4, #0]
 8007f76:	2d00      	cmp	r5, #0
 8007f78:	d102      	bne.n	8007f80 <_printf_i+0x11c>
 8007f7a:	9e04      	ldr	r6, [sp, #16]
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d00c      	beq.n	8007f9a <_printf_i+0x136>
 8007f80:	9e04      	ldr	r6, [sp, #16]
 8007f82:	0028      	movs	r0, r5
 8007f84:	0039      	movs	r1, r7
 8007f86:	f7f8 f94f 	bl	8000228 <__aeabi_uidivmod>
 8007f8a:	9b03      	ldr	r3, [sp, #12]
 8007f8c:	3e01      	subs	r6, #1
 8007f8e:	5c5b      	ldrb	r3, [r3, r1]
 8007f90:	7033      	strb	r3, [r6, #0]
 8007f92:	002b      	movs	r3, r5
 8007f94:	0005      	movs	r5, r0
 8007f96:	429f      	cmp	r7, r3
 8007f98:	d9f3      	bls.n	8007f82 <_printf_i+0x11e>
 8007f9a:	2f08      	cmp	r7, #8
 8007f9c:	d109      	bne.n	8007fb2 <_printf_i+0x14e>
 8007f9e:	6823      	ldr	r3, [r4, #0]
 8007fa0:	07db      	lsls	r3, r3, #31
 8007fa2:	d506      	bpl.n	8007fb2 <_printf_i+0x14e>
 8007fa4:	6863      	ldr	r3, [r4, #4]
 8007fa6:	6922      	ldr	r2, [r4, #16]
 8007fa8:	4293      	cmp	r3, r2
 8007faa:	dc02      	bgt.n	8007fb2 <_printf_i+0x14e>
 8007fac:	2330      	movs	r3, #48	; 0x30
 8007fae:	3e01      	subs	r6, #1
 8007fb0:	7033      	strb	r3, [r6, #0]
 8007fb2:	9b04      	ldr	r3, [sp, #16]
 8007fb4:	1b9b      	subs	r3, r3, r6
 8007fb6:	6123      	str	r3, [r4, #16]
 8007fb8:	9b07      	ldr	r3, [sp, #28]
 8007fba:	0021      	movs	r1, r4
 8007fbc:	9300      	str	r3, [sp, #0]
 8007fbe:	9805      	ldr	r0, [sp, #20]
 8007fc0:	9b06      	ldr	r3, [sp, #24]
 8007fc2:	aa09      	add	r2, sp, #36	; 0x24
 8007fc4:	f7ff fede 	bl	8007d84 <_printf_common>
 8007fc8:	1c43      	adds	r3, r0, #1
 8007fca:	d135      	bne.n	8008038 <_printf_i+0x1d4>
 8007fcc:	2001      	movs	r0, #1
 8007fce:	4240      	negs	r0, r0
 8007fd0:	b00b      	add	sp, #44	; 0x2c
 8007fd2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007fd4:	2220      	movs	r2, #32
 8007fd6:	6809      	ldr	r1, [r1, #0]
 8007fd8:	430a      	orrs	r2, r1
 8007fda:	6022      	str	r2, [r4, #0]
 8007fdc:	0022      	movs	r2, r4
 8007fde:	2178      	movs	r1, #120	; 0x78
 8007fe0:	3245      	adds	r2, #69	; 0x45
 8007fe2:	7011      	strb	r1, [r2, #0]
 8007fe4:	4a27      	ldr	r2, [pc, #156]	; (8008084 <_printf_i+0x220>)
 8007fe6:	e7a7      	b.n	8007f38 <_printf_i+0xd4>
 8007fe8:	0648      	lsls	r0, r1, #25
 8007fea:	d5ac      	bpl.n	8007f46 <_printf_i+0xe2>
 8007fec:	b2ad      	uxth	r5, r5
 8007fee:	e7aa      	b.n	8007f46 <_printf_i+0xe2>
 8007ff0:	681a      	ldr	r2, [r3, #0]
 8007ff2:	680d      	ldr	r5, [r1, #0]
 8007ff4:	1d10      	adds	r0, r2, #4
 8007ff6:	6949      	ldr	r1, [r1, #20]
 8007ff8:	6018      	str	r0, [r3, #0]
 8007ffa:	6813      	ldr	r3, [r2, #0]
 8007ffc:	062e      	lsls	r6, r5, #24
 8007ffe:	d501      	bpl.n	8008004 <_printf_i+0x1a0>
 8008000:	6019      	str	r1, [r3, #0]
 8008002:	e002      	b.n	800800a <_printf_i+0x1a6>
 8008004:	066d      	lsls	r5, r5, #25
 8008006:	d5fb      	bpl.n	8008000 <_printf_i+0x19c>
 8008008:	8019      	strh	r1, [r3, #0]
 800800a:	2300      	movs	r3, #0
 800800c:	9e04      	ldr	r6, [sp, #16]
 800800e:	6123      	str	r3, [r4, #16]
 8008010:	e7d2      	b.n	8007fb8 <_printf_i+0x154>
 8008012:	681a      	ldr	r2, [r3, #0]
 8008014:	1d11      	adds	r1, r2, #4
 8008016:	6019      	str	r1, [r3, #0]
 8008018:	6816      	ldr	r6, [r2, #0]
 800801a:	2100      	movs	r1, #0
 800801c:	0030      	movs	r0, r6
 800801e:	6862      	ldr	r2, [r4, #4]
 8008020:	f000 f832 	bl	8008088 <memchr>
 8008024:	2800      	cmp	r0, #0
 8008026:	d001      	beq.n	800802c <_printf_i+0x1c8>
 8008028:	1b80      	subs	r0, r0, r6
 800802a:	6060      	str	r0, [r4, #4]
 800802c:	6863      	ldr	r3, [r4, #4]
 800802e:	6123      	str	r3, [r4, #16]
 8008030:	2300      	movs	r3, #0
 8008032:	9a04      	ldr	r2, [sp, #16]
 8008034:	7013      	strb	r3, [r2, #0]
 8008036:	e7bf      	b.n	8007fb8 <_printf_i+0x154>
 8008038:	6923      	ldr	r3, [r4, #16]
 800803a:	0032      	movs	r2, r6
 800803c:	9906      	ldr	r1, [sp, #24]
 800803e:	9805      	ldr	r0, [sp, #20]
 8008040:	9d07      	ldr	r5, [sp, #28]
 8008042:	47a8      	blx	r5
 8008044:	1c43      	adds	r3, r0, #1
 8008046:	d0c1      	beq.n	8007fcc <_printf_i+0x168>
 8008048:	6823      	ldr	r3, [r4, #0]
 800804a:	079b      	lsls	r3, r3, #30
 800804c:	d415      	bmi.n	800807a <_printf_i+0x216>
 800804e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008050:	68e0      	ldr	r0, [r4, #12]
 8008052:	4298      	cmp	r0, r3
 8008054:	dabc      	bge.n	8007fd0 <_printf_i+0x16c>
 8008056:	0018      	movs	r0, r3
 8008058:	e7ba      	b.n	8007fd0 <_printf_i+0x16c>
 800805a:	0022      	movs	r2, r4
 800805c:	2301      	movs	r3, #1
 800805e:	9906      	ldr	r1, [sp, #24]
 8008060:	9805      	ldr	r0, [sp, #20]
 8008062:	9e07      	ldr	r6, [sp, #28]
 8008064:	3219      	adds	r2, #25
 8008066:	47b0      	blx	r6
 8008068:	1c43      	adds	r3, r0, #1
 800806a:	d0af      	beq.n	8007fcc <_printf_i+0x168>
 800806c:	3501      	adds	r5, #1
 800806e:	68e3      	ldr	r3, [r4, #12]
 8008070:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008072:	1a9b      	subs	r3, r3, r2
 8008074:	42ab      	cmp	r3, r5
 8008076:	dcf0      	bgt.n	800805a <_printf_i+0x1f6>
 8008078:	e7e9      	b.n	800804e <_printf_i+0x1ea>
 800807a:	2500      	movs	r5, #0
 800807c:	e7f7      	b.n	800806e <_printf_i+0x20a>
 800807e:	46c0      	nop			; (mov r8, r8)
 8008080:	080087f1 	.word	0x080087f1
 8008084:	08008802 	.word	0x08008802

08008088 <memchr>:
 8008088:	b2c9      	uxtb	r1, r1
 800808a:	1882      	adds	r2, r0, r2
 800808c:	4290      	cmp	r0, r2
 800808e:	d101      	bne.n	8008094 <memchr+0xc>
 8008090:	2000      	movs	r0, #0
 8008092:	4770      	bx	lr
 8008094:	7803      	ldrb	r3, [r0, #0]
 8008096:	428b      	cmp	r3, r1
 8008098:	d0fb      	beq.n	8008092 <memchr+0xa>
 800809a:	3001      	adds	r0, #1
 800809c:	e7f6      	b.n	800808c <memchr+0x4>

0800809e <memmove>:
 800809e:	b510      	push	{r4, lr}
 80080a0:	4288      	cmp	r0, r1
 80080a2:	d902      	bls.n	80080aa <memmove+0xc>
 80080a4:	188b      	adds	r3, r1, r2
 80080a6:	4298      	cmp	r0, r3
 80080a8:	d303      	bcc.n	80080b2 <memmove+0x14>
 80080aa:	2300      	movs	r3, #0
 80080ac:	e007      	b.n	80080be <memmove+0x20>
 80080ae:	5c8b      	ldrb	r3, [r1, r2]
 80080b0:	5483      	strb	r3, [r0, r2]
 80080b2:	3a01      	subs	r2, #1
 80080b4:	d2fb      	bcs.n	80080ae <memmove+0x10>
 80080b6:	bd10      	pop	{r4, pc}
 80080b8:	5ccc      	ldrb	r4, [r1, r3]
 80080ba:	54c4      	strb	r4, [r0, r3]
 80080bc:	3301      	adds	r3, #1
 80080be:	429a      	cmp	r2, r3
 80080c0:	d1fa      	bne.n	80080b8 <memmove+0x1a>
 80080c2:	e7f8      	b.n	80080b6 <memmove+0x18>

080080c4 <_free_r>:
 80080c4:	b570      	push	{r4, r5, r6, lr}
 80080c6:	0005      	movs	r5, r0
 80080c8:	2900      	cmp	r1, #0
 80080ca:	d010      	beq.n	80080ee <_free_r+0x2a>
 80080cc:	1f0c      	subs	r4, r1, #4
 80080ce:	6823      	ldr	r3, [r4, #0]
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	da00      	bge.n	80080d6 <_free_r+0x12>
 80080d4:	18e4      	adds	r4, r4, r3
 80080d6:	0028      	movs	r0, r5
 80080d8:	f000 f8d4 	bl	8008284 <__malloc_lock>
 80080dc:	4a1d      	ldr	r2, [pc, #116]	; (8008154 <_free_r+0x90>)
 80080de:	6813      	ldr	r3, [r2, #0]
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d105      	bne.n	80080f0 <_free_r+0x2c>
 80080e4:	6063      	str	r3, [r4, #4]
 80080e6:	6014      	str	r4, [r2, #0]
 80080e8:	0028      	movs	r0, r5
 80080ea:	f000 f8d3 	bl	8008294 <__malloc_unlock>
 80080ee:	bd70      	pop	{r4, r5, r6, pc}
 80080f0:	42a3      	cmp	r3, r4
 80080f2:	d908      	bls.n	8008106 <_free_r+0x42>
 80080f4:	6821      	ldr	r1, [r4, #0]
 80080f6:	1860      	adds	r0, r4, r1
 80080f8:	4283      	cmp	r3, r0
 80080fa:	d1f3      	bne.n	80080e4 <_free_r+0x20>
 80080fc:	6818      	ldr	r0, [r3, #0]
 80080fe:	685b      	ldr	r3, [r3, #4]
 8008100:	1841      	adds	r1, r0, r1
 8008102:	6021      	str	r1, [r4, #0]
 8008104:	e7ee      	b.n	80080e4 <_free_r+0x20>
 8008106:	001a      	movs	r2, r3
 8008108:	685b      	ldr	r3, [r3, #4]
 800810a:	2b00      	cmp	r3, #0
 800810c:	d001      	beq.n	8008112 <_free_r+0x4e>
 800810e:	42a3      	cmp	r3, r4
 8008110:	d9f9      	bls.n	8008106 <_free_r+0x42>
 8008112:	6811      	ldr	r1, [r2, #0]
 8008114:	1850      	adds	r0, r2, r1
 8008116:	42a0      	cmp	r0, r4
 8008118:	d10b      	bne.n	8008132 <_free_r+0x6e>
 800811a:	6820      	ldr	r0, [r4, #0]
 800811c:	1809      	adds	r1, r1, r0
 800811e:	1850      	adds	r0, r2, r1
 8008120:	6011      	str	r1, [r2, #0]
 8008122:	4283      	cmp	r3, r0
 8008124:	d1e0      	bne.n	80080e8 <_free_r+0x24>
 8008126:	6818      	ldr	r0, [r3, #0]
 8008128:	685b      	ldr	r3, [r3, #4]
 800812a:	1841      	adds	r1, r0, r1
 800812c:	6011      	str	r1, [r2, #0]
 800812e:	6053      	str	r3, [r2, #4]
 8008130:	e7da      	b.n	80080e8 <_free_r+0x24>
 8008132:	42a0      	cmp	r0, r4
 8008134:	d902      	bls.n	800813c <_free_r+0x78>
 8008136:	230c      	movs	r3, #12
 8008138:	602b      	str	r3, [r5, #0]
 800813a:	e7d5      	b.n	80080e8 <_free_r+0x24>
 800813c:	6821      	ldr	r1, [r4, #0]
 800813e:	1860      	adds	r0, r4, r1
 8008140:	4283      	cmp	r3, r0
 8008142:	d103      	bne.n	800814c <_free_r+0x88>
 8008144:	6818      	ldr	r0, [r3, #0]
 8008146:	685b      	ldr	r3, [r3, #4]
 8008148:	1841      	adds	r1, r0, r1
 800814a:	6021      	str	r1, [r4, #0]
 800814c:	6063      	str	r3, [r4, #4]
 800814e:	6054      	str	r4, [r2, #4]
 8008150:	e7ca      	b.n	80080e8 <_free_r+0x24>
 8008152:	46c0      	nop			; (mov r8, r8)
 8008154:	20000090 	.word	0x20000090

08008158 <_malloc_r>:
 8008158:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800815a:	2303      	movs	r3, #3
 800815c:	1ccd      	adds	r5, r1, #3
 800815e:	439d      	bics	r5, r3
 8008160:	3508      	adds	r5, #8
 8008162:	0006      	movs	r6, r0
 8008164:	2d0c      	cmp	r5, #12
 8008166:	d21f      	bcs.n	80081a8 <_malloc_r+0x50>
 8008168:	250c      	movs	r5, #12
 800816a:	42a9      	cmp	r1, r5
 800816c:	d81e      	bhi.n	80081ac <_malloc_r+0x54>
 800816e:	0030      	movs	r0, r6
 8008170:	f000 f888 	bl	8008284 <__malloc_lock>
 8008174:	4925      	ldr	r1, [pc, #148]	; (800820c <_malloc_r+0xb4>)
 8008176:	680a      	ldr	r2, [r1, #0]
 8008178:	0014      	movs	r4, r2
 800817a:	2c00      	cmp	r4, #0
 800817c:	d11a      	bne.n	80081b4 <_malloc_r+0x5c>
 800817e:	4f24      	ldr	r7, [pc, #144]	; (8008210 <_malloc_r+0xb8>)
 8008180:	683b      	ldr	r3, [r7, #0]
 8008182:	2b00      	cmp	r3, #0
 8008184:	d104      	bne.n	8008190 <_malloc_r+0x38>
 8008186:	0021      	movs	r1, r4
 8008188:	0030      	movs	r0, r6
 800818a:	f000 f869 	bl	8008260 <_sbrk_r>
 800818e:	6038      	str	r0, [r7, #0]
 8008190:	0029      	movs	r1, r5
 8008192:	0030      	movs	r0, r6
 8008194:	f000 f864 	bl	8008260 <_sbrk_r>
 8008198:	1c43      	adds	r3, r0, #1
 800819a:	d12b      	bne.n	80081f4 <_malloc_r+0x9c>
 800819c:	230c      	movs	r3, #12
 800819e:	0030      	movs	r0, r6
 80081a0:	6033      	str	r3, [r6, #0]
 80081a2:	f000 f877 	bl	8008294 <__malloc_unlock>
 80081a6:	e003      	b.n	80081b0 <_malloc_r+0x58>
 80081a8:	2d00      	cmp	r5, #0
 80081aa:	dade      	bge.n	800816a <_malloc_r+0x12>
 80081ac:	230c      	movs	r3, #12
 80081ae:	6033      	str	r3, [r6, #0]
 80081b0:	2000      	movs	r0, #0
 80081b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80081b4:	6823      	ldr	r3, [r4, #0]
 80081b6:	1b5b      	subs	r3, r3, r5
 80081b8:	d419      	bmi.n	80081ee <_malloc_r+0x96>
 80081ba:	2b0b      	cmp	r3, #11
 80081bc:	d903      	bls.n	80081c6 <_malloc_r+0x6e>
 80081be:	6023      	str	r3, [r4, #0]
 80081c0:	18e4      	adds	r4, r4, r3
 80081c2:	6025      	str	r5, [r4, #0]
 80081c4:	e003      	b.n	80081ce <_malloc_r+0x76>
 80081c6:	6863      	ldr	r3, [r4, #4]
 80081c8:	42a2      	cmp	r2, r4
 80081ca:	d10e      	bne.n	80081ea <_malloc_r+0x92>
 80081cc:	600b      	str	r3, [r1, #0]
 80081ce:	0030      	movs	r0, r6
 80081d0:	f000 f860 	bl	8008294 <__malloc_unlock>
 80081d4:	0020      	movs	r0, r4
 80081d6:	2207      	movs	r2, #7
 80081d8:	300b      	adds	r0, #11
 80081da:	1d23      	adds	r3, r4, #4
 80081dc:	4390      	bics	r0, r2
 80081de:	1ac2      	subs	r2, r0, r3
 80081e0:	4298      	cmp	r0, r3
 80081e2:	d0e6      	beq.n	80081b2 <_malloc_r+0x5a>
 80081e4:	1a1b      	subs	r3, r3, r0
 80081e6:	50a3      	str	r3, [r4, r2]
 80081e8:	e7e3      	b.n	80081b2 <_malloc_r+0x5a>
 80081ea:	6053      	str	r3, [r2, #4]
 80081ec:	e7ef      	b.n	80081ce <_malloc_r+0x76>
 80081ee:	0022      	movs	r2, r4
 80081f0:	6864      	ldr	r4, [r4, #4]
 80081f2:	e7c2      	b.n	800817a <_malloc_r+0x22>
 80081f4:	2303      	movs	r3, #3
 80081f6:	1cc4      	adds	r4, r0, #3
 80081f8:	439c      	bics	r4, r3
 80081fa:	42a0      	cmp	r0, r4
 80081fc:	d0e1      	beq.n	80081c2 <_malloc_r+0x6a>
 80081fe:	1a21      	subs	r1, r4, r0
 8008200:	0030      	movs	r0, r6
 8008202:	f000 f82d 	bl	8008260 <_sbrk_r>
 8008206:	1c43      	adds	r3, r0, #1
 8008208:	d1db      	bne.n	80081c2 <_malloc_r+0x6a>
 800820a:	e7c7      	b.n	800819c <_malloc_r+0x44>
 800820c:	20000090 	.word	0x20000090
 8008210:	20000094 	.word	0x20000094

08008214 <_realloc_r>:
 8008214:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008216:	0007      	movs	r7, r0
 8008218:	000d      	movs	r5, r1
 800821a:	0016      	movs	r6, r2
 800821c:	2900      	cmp	r1, #0
 800821e:	d105      	bne.n	800822c <_realloc_r+0x18>
 8008220:	0011      	movs	r1, r2
 8008222:	f7ff ff99 	bl	8008158 <_malloc_r>
 8008226:	0004      	movs	r4, r0
 8008228:	0020      	movs	r0, r4
 800822a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800822c:	2a00      	cmp	r2, #0
 800822e:	d103      	bne.n	8008238 <_realloc_r+0x24>
 8008230:	f7ff ff48 	bl	80080c4 <_free_r>
 8008234:	0034      	movs	r4, r6
 8008236:	e7f7      	b.n	8008228 <_realloc_r+0x14>
 8008238:	f000 f834 	bl	80082a4 <_malloc_usable_size_r>
 800823c:	002c      	movs	r4, r5
 800823e:	42b0      	cmp	r0, r6
 8008240:	d2f2      	bcs.n	8008228 <_realloc_r+0x14>
 8008242:	0031      	movs	r1, r6
 8008244:	0038      	movs	r0, r7
 8008246:	f7ff ff87 	bl	8008158 <_malloc_r>
 800824a:	1e04      	subs	r4, r0, #0
 800824c:	d0ec      	beq.n	8008228 <_realloc_r+0x14>
 800824e:	0029      	movs	r1, r5
 8008250:	0032      	movs	r2, r6
 8008252:	f7ff fc03 	bl	8007a5c <memcpy>
 8008256:	0029      	movs	r1, r5
 8008258:	0038      	movs	r0, r7
 800825a:	f7ff ff33 	bl	80080c4 <_free_r>
 800825e:	e7e3      	b.n	8008228 <_realloc_r+0x14>

08008260 <_sbrk_r>:
 8008260:	2300      	movs	r3, #0
 8008262:	b570      	push	{r4, r5, r6, lr}
 8008264:	4d06      	ldr	r5, [pc, #24]	; (8008280 <_sbrk_r+0x20>)
 8008266:	0004      	movs	r4, r0
 8008268:	0008      	movs	r0, r1
 800826a:	602b      	str	r3, [r5, #0]
 800826c:	f7fb f8d2 	bl	8003414 <_sbrk>
 8008270:	1c43      	adds	r3, r0, #1
 8008272:	d103      	bne.n	800827c <_sbrk_r+0x1c>
 8008274:	682b      	ldr	r3, [r5, #0]
 8008276:	2b00      	cmp	r3, #0
 8008278:	d000      	beq.n	800827c <_sbrk_r+0x1c>
 800827a:	6023      	str	r3, [r4, #0]
 800827c:	bd70      	pop	{r4, r5, r6, pc}
 800827e:	46c0      	nop			; (mov r8, r8)
 8008280:	200007ac 	.word	0x200007ac

08008284 <__malloc_lock>:
 8008284:	b510      	push	{r4, lr}
 8008286:	4802      	ldr	r0, [pc, #8]	; (8008290 <__malloc_lock+0xc>)
 8008288:	f000 f814 	bl	80082b4 <__retarget_lock_acquire_recursive>
 800828c:	bd10      	pop	{r4, pc}
 800828e:	46c0      	nop			; (mov r8, r8)
 8008290:	200007b4 	.word	0x200007b4

08008294 <__malloc_unlock>:
 8008294:	b510      	push	{r4, lr}
 8008296:	4802      	ldr	r0, [pc, #8]	; (80082a0 <__malloc_unlock+0xc>)
 8008298:	f000 f80d 	bl	80082b6 <__retarget_lock_release_recursive>
 800829c:	bd10      	pop	{r4, pc}
 800829e:	46c0      	nop			; (mov r8, r8)
 80082a0:	200007b4 	.word	0x200007b4

080082a4 <_malloc_usable_size_r>:
 80082a4:	1f0b      	subs	r3, r1, #4
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	1f18      	subs	r0, r3, #4
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	da01      	bge.n	80082b2 <_malloc_usable_size_r+0xe>
 80082ae:	580b      	ldr	r3, [r1, r0]
 80082b0:	18c0      	adds	r0, r0, r3
 80082b2:	4770      	bx	lr

080082b4 <__retarget_lock_acquire_recursive>:
 80082b4:	4770      	bx	lr

080082b6 <__retarget_lock_release_recursive>:
 80082b6:	4770      	bx	lr

080082b8 <_init>:
 80082b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80082ba:	46c0      	nop			; (mov r8, r8)
 80082bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80082be:	bc08      	pop	{r3}
 80082c0:	469e      	mov	lr, r3
 80082c2:	4770      	bx	lr

080082c4 <_fini>:
 80082c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80082c6:	46c0      	nop			; (mov r8, r8)
 80082c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80082ca:	bc08      	pop	{r3}
 80082cc:	469e      	mov	lr, r3
 80082ce:	4770      	bx	lr
