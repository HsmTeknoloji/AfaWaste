
AfaWaste.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007a58  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000544  08007b18  08007b18  00017b18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800805c  0800805c  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  0800805c  0800805c  0001805c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008064  08008064  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008064  08008064  00018064  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008068  08008068  00018068  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  0800806c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000007d4  20000070  080080dc  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000844  080080dc  00020844  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001d478  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003879  00000000  00000000  0003d510  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011c8  00000000  00000000  00040d90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001040  00000000  00000000  00041f58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000182c0  00000000  00000000  00042f98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017ce3  00000000  00000000  0005b258  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008f074  00000000  00000000  00072f3b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00101faf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004314  00000000  00000000  00102004  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000070 	.word	0x20000070
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08007b00 	.word	0x08007b00

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000074 	.word	0x20000074
 8000104:	08007b00 	.word	0x08007b00

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	; 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f8f0 	bl	8000404 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			; (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__divsi3>:
 8000230:	4603      	mov	r3, r0
 8000232:	430b      	orrs	r3, r1
 8000234:	d47f      	bmi.n	8000336 <__divsi3+0x106>
 8000236:	2200      	movs	r2, #0
 8000238:	0843      	lsrs	r3, r0, #1
 800023a:	428b      	cmp	r3, r1
 800023c:	d374      	bcc.n	8000328 <__divsi3+0xf8>
 800023e:	0903      	lsrs	r3, r0, #4
 8000240:	428b      	cmp	r3, r1
 8000242:	d35f      	bcc.n	8000304 <__divsi3+0xd4>
 8000244:	0a03      	lsrs	r3, r0, #8
 8000246:	428b      	cmp	r3, r1
 8000248:	d344      	bcc.n	80002d4 <__divsi3+0xa4>
 800024a:	0b03      	lsrs	r3, r0, #12
 800024c:	428b      	cmp	r3, r1
 800024e:	d328      	bcc.n	80002a2 <__divsi3+0x72>
 8000250:	0c03      	lsrs	r3, r0, #16
 8000252:	428b      	cmp	r3, r1
 8000254:	d30d      	bcc.n	8000272 <__divsi3+0x42>
 8000256:	22ff      	movs	r2, #255	; 0xff
 8000258:	0209      	lsls	r1, r1, #8
 800025a:	ba12      	rev	r2, r2
 800025c:	0c03      	lsrs	r3, r0, #16
 800025e:	428b      	cmp	r3, r1
 8000260:	d302      	bcc.n	8000268 <__divsi3+0x38>
 8000262:	1212      	asrs	r2, r2, #8
 8000264:	0209      	lsls	r1, r1, #8
 8000266:	d065      	beq.n	8000334 <__divsi3+0x104>
 8000268:	0b03      	lsrs	r3, r0, #12
 800026a:	428b      	cmp	r3, r1
 800026c:	d319      	bcc.n	80002a2 <__divsi3+0x72>
 800026e:	e000      	b.n	8000272 <__divsi3+0x42>
 8000270:	0a09      	lsrs	r1, r1, #8
 8000272:	0bc3      	lsrs	r3, r0, #15
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x4c>
 8000278:	03cb      	lsls	r3, r1, #15
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0b83      	lsrs	r3, r0, #14
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x58>
 8000284:	038b      	lsls	r3, r1, #14
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0b43      	lsrs	r3, r0, #13
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x64>
 8000290:	034b      	lsls	r3, r1, #13
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0b03      	lsrs	r3, r0, #12
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x70>
 800029c:	030b      	lsls	r3, r1, #12
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0ac3      	lsrs	r3, r0, #11
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x7c>
 80002a8:	02cb      	lsls	r3, r1, #11
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0a83      	lsrs	r3, r0, #10
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x88>
 80002b4:	028b      	lsls	r3, r1, #10
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0a43      	lsrs	r3, r0, #9
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x94>
 80002c0:	024b      	lsls	r3, r1, #9
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0a03      	lsrs	r3, r0, #8
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0xa0>
 80002cc:	020b      	lsls	r3, r1, #8
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	d2cd      	bcs.n	8000270 <__divsi3+0x40>
 80002d4:	09c3      	lsrs	r3, r0, #7
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d301      	bcc.n	80002de <__divsi3+0xae>
 80002da:	01cb      	lsls	r3, r1, #7
 80002dc:	1ac0      	subs	r0, r0, r3
 80002de:	4152      	adcs	r2, r2
 80002e0:	0983      	lsrs	r3, r0, #6
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xba>
 80002e6:	018b      	lsls	r3, r1, #6
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	0943      	lsrs	r3, r0, #5
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xc6>
 80002f2:	014b      	lsls	r3, r1, #5
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0903      	lsrs	r3, r0, #4
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xd2>
 80002fe:	010b      	lsls	r3, r1, #4
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	08c3      	lsrs	r3, r0, #3
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xde>
 800030a:	00cb      	lsls	r3, r1, #3
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0883      	lsrs	r3, r0, #2
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xea>
 8000316:	008b      	lsls	r3, r1, #2
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0843      	lsrs	r3, r0, #1
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xf6>
 8000322:	004b      	lsls	r3, r1, #1
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	1a41      	subs	r1, r0, r1
 800032a:	d200      	bcs.n	800032e <__divsi3+0xfe>
 800032c:	4601      	mov	r1, r0
 800032e:	4152      	adcs	r2, r2
 8000330:	4610      	mov	r0, r2
 8000332:	4770      	bx	lr
 8000334:	e05d      	b.n	80003f2 <__divsi3+0x1c2>
 8000336:	0fca      	lsrs	r2, r1, #31
 8000338:	d000      	beq.n	800033c <__divsi3+0x10c>
 800033a:	4249      	negs	r1, r1
 800033c:	1003      	asrs	r3, r0, #32
 800033e:	d300      	bcc.n	8000342 <__divsi3+0x112>
 8000340:	4240      	negs	r0, r0
 8000342:	4053      	eors	r3, r2
 8000344:	2200      	movs	r2, #0
 8000346:	469c      	mov	ip, r3
 8000348:	0903      	lsrs	r3, r0, #4
 800034a:	428b      	cmp	r3, r1
 800034c:	d32d      	bcc.n	80003aa <__divsi3+0x17a>
 800034e:	0a03      	lsrs	r3, r0, #8
 8000350:	428b      	cmp	r3, r1
 8000352:	d312      	bcc.n	800037a <__divsi3+0x14a>
 8000354:	22fc      	movs	r2, #252	; 0xfc
 8000356:	0189      	lsls	r1, r1, #6
 8000358:	ba12      	rev	r2, r2
 800035a:	0a03      	lsrs	r3, r0, #8
 800035c:	428b      	cmp	r3, r1
 800035e:	d30c      	bcc.n	800037a <__divsi3+0x14a>
 8000360:	0189      	lsls	r1, r1, #6
 8000362:	1192      	asrs	r2, r2, #6
 8000364:	428b      	cmp	r3, r1
 8000366:	d308      	bcc.n	800037a <__divsi3+0x14a>
 8000368:	0189      	lsls	r1, r1, #6
 800036a:	1192      	asrs	r2, r2, #6
 800036c:	428b      	cmp	r3, r1
 800036e:	d304      	bcc.n	800037a <__divsi3+0x14a>
 8000370:	0189      	lsls	r1, r1, #6
 8000372:	d03a      	beq.n	80003ea <__divsi3+0x1ba>
 8000374:	1192      	asrs	r2, r2, #6
 8000376:	e000      	b.n	800037a <__divsi3+0x14a>
 8000378:	0989      	lsrs	r1, r1, #6
 800037a:	09c3      	lsrs	r3, r0, #7
 800037c:	428b      	cmp	r3, r1
 800037e:	d301      	bcc.n	8000384 <__divsi3+0x154>
 8000380:	01cb      	lsls	r3, r1, #7
 8000382:	1ac0      	subs	r0, r0, r3
 8000384:	4152      	adcs	r2, r2
 8000386:	0983      	lsrs	r3, r0, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x160>
 800038c:	018b      	lsls	r3, r1, #6
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	0943      	lsrs	r3, r0, #5
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x16c>
 8000398:	014b      	lsls	r3, r1, #5
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0903      	lsrs	r3, r0, #4
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x178>
 80003a4:	010b      	lsls	r3, r1, #4
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	08c3      	lsrs	r3, r0, #3
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x184>
 80003b0:	00cb      	lsls	r3, r1, #3
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0883      	lsrs	r3, r0, #2
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x190>
 80003bc:	008b      	lsls	r3, r1, #2
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	d2d9      	bcs.n	8000378 <__divsi3+0x148>
 80003c4:	0843      	lsrs	r3, r0, #1
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d301      	bcc.n	80003ce <__divsi3+0x19e>
 80003ca:	004b      	lsls	r3, r1, #1
 80003cc:	1ac0      	subs	r0, r0, r3
 80003ce:	4152      	adcs	r2, r2
 80003d0:	1a41      	subs	r1, r0, r1
 80003d2:	d200      	bcs.n	80003d6 <__divsi3+0x1a6>
 80003d4:	4601      	mov	r1, r0
 80003d6:	4663      	mov	r3, ip
 80003d8:	4152      	adcs	r2, r2
 80003da:	105b      	asrs	r3, r3, #1
 80003dc:	4610      	mov	r0, r2
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x1b4>
 80003e0:	4240      	negs	r0, r0
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	d500      	bpl.n	80003e8 <__divsi3+0x1b8>
 80003e6:	4249      	negs	r1, r1
 80003e8:	4770      	bx	lr
 80003ea:	4663      	mov	r3, ip
 80003ec:	105b      	asrs	r3, r3, #1
 80003ee:	d300      	bcc.n	80003f2 <__divsi3+0x1c2>
 80003f0:	4240      	negs	r0, r0
 80003f2:	b501      	push	{r0, lr}
 80003f4:	2000      	movs	r0, #0
 80003f6:	f000 f805 	bl	8000404 <__aeabi_idiv0>
 80003fa:	bd02      	pop	{r1, pc}

080003fc <__aeabi_idivmod>:
 80003fc:	2900      	cmp	r1, #0
 80003fe:	d0f8      	beq.n	80003f2 <__divsi3+0x1c2>
 8000400:	e716      	b.n	8000230 <__divsi3>
 8000402:	4770      	bx	lr

08000404 <__aeabi_idiv0>:
 8000404:	4770      	bx	lr
 8000406:	46c0      	nop			; (mov r8, r8)

08000408 <__aeabi_uldivmod>:
 8000408:	2b00      	cmp	r3, #0
 800040a:	d111      	bne.n	8000430 <__aeabi_uldivmod+0x28>
 800040c:	2a00      	cmp	r2, #0
 800040e:	d10f      	bne.n	8000430 <__aeabi_uldivmod+0x28>
 8000410:	2900      	cmp	r1, #0
 8000412:	d100      	bne.n	8000416 <__aeabi_uldivmod+0xe>
 8000414:	2800      	cmp	r0, #0
 8000416:	d002      	beq.n	800041e <__aeabi_uldivmod+0x16>
 8000418:	2100      	movs	r1, #0
 800041a:	43c9      	mvns	r1, r1
 800041c:	1c08      	adds	r0, r1, #0
 800041e:	b407      	push	{r0, r1, r2}
 8000420:	4802      	ldr	r0, [pc, #8]	; (800042c <__aeabi_uldivmod+0x24>)
 8000422:	a102      	add	r1, pc, #8	; (adr r1, 800042c <__aeabi_uldivmod+0x24>)
 8000424:	1840      	adds	r0, r0, r1
 8000426:	9002      	str	r0, [sp, #8]
 8000428:	bd03      	pop	{r0, r1, pc}
 800042a:	46c0      	nop			; (mov r8, r8)
 800042c:	ffffffd9 	.word	0xffffffd9
 8000430:	b403      	push	{r0, r1}
 8000432:	4668      	mov	r0, sp
 8000434:	b501      	push	{r0, lr}
 8000436:	9802      	ldr	r0, [sp, #8]
 8000438:	f000 f846 	bl	80004c8 <__udivmoddi4>
 800043c:	9b01      	ldr	r3, [sp, #4]
 800043e:	469e      	mov	lr, r3
 8000440:	b002      	add	sp, #8
 8000442:	bc0c      	pop	{r2, r3}
 8000444:	4770      	bx	lr
 8000446:	46c0      	nop			; (mov r8, r8)

08000448 <__aeabi_lmul>:
 8000448:	b5f0      	push	{r4, r5, r6, r7, lr}
 800044a:	0415      	lsls	r5, r2, #16
 800044c:	0c2d      	lsrs	r5, r5, #16
 800044e:	000f      	movs	r7, r1
 8000450:	0001      	movs	r1, r0
 8000452:	002e      	movs	r6, r5
 8000454:	46c6      	mov	lr, r8
 8000456:	4684      	mov	ip, r0
 8000458:	0400      	lsls	r0, r0, #16
 800045a:	0c14      	lsrs	r4, r2, #16
 800045c:	0c00      	lsrs	r0, r0, #16
 800045e:	0c09      	lsrs	r1, r1, #16
 8000460:	4346      	muls	r6, r0
 8000462:	434d      	muls	r5, r1
 8000464:	4360      	muls	r0, r4
 8000466:	4361      	muls	r1, r4
 8000468:	1940      	adds	r0, r0, r5
 800046a:	0c34      	lsrs	r4, r6, #16
 800046c:	1824      	adds	r4, r4, r0
 800046e:	b500      	push	{lr}
 8000470:	42a5      	cmp	r5, r4
 8000472:	d903      	bls.n	800047c <__aeabi_lmul+0x34>
 8000474:	2080      	movs	r0, #128	; 0x80
 8000476:	0240      	lsls	r0, r0, #9
 8000478:	4680      	mov	r8, r0
 800047a:	4441      	add	r1, r8
 800047c:	0c25      	lsrs	r5, r4, #16
 800047e:	186d      	adds	r5, r5, r1
 8000480:	4661      	mov	r1, ip
 8000482:	4359      	muls	r1, r3
 8000484:	437a      	muls	r2, r7
 8000486:	0430      	lsls	r0, r6, #16
 8000488:	1949      	adds	r1, r1, r5
 800048a:	0424      	lsls	r4, r4, #16
 800048c:	0c00      	lsrs	r0, r0, #16
 800048e:	1820      	adds	r0, r4, r0
 8000490:	1889      	adds	r1, r1, r2
 8000492:	bc80      	pop	{r7}
 8000494:	46b8      	mov	r8, r7
 8000496:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000498 <__aeabi_f2uiz>:
 8000498:	219e      	movs	r1, #158	; 0x9e
 800049a:	b510      	push	{r4, lr}
 800049c:	05c9      	lsls	r1, r1, #23
 800049e:	1c04      	adds	r4, r0, #0
 80004a0:	f000 fb3c 	bl	8000b1c <__aeabi_fcmpge>
 80004a4:	2800      	cmp	r0, #0
 80004a6:	d103      	bne.n	80004b0 <__aeabi_f2uiz+0x18>
 80004a8:	1c20      	adds	r0, r4, #0
 80004aa:	f000 faa1 	bl	80009f0 <__aeabi_f2iz>
 80004ae:	bd10      	pop	{r4, pc}
 80004b0:	219e      	movs	r1, #158	; 0x9e
 80004b2:	1c20      	adds	r0, r4, #0
 80004b4:	05c9      	lsls	r1, r1, #23
 80004b6:	f000 f8d3 	bl	8000660 <__aeabi_fsub>
 80004ba:	f000 fa99 	bl	80009f0 <__aeabi_f2iz>
 80004be:	2380      	movs	r3, #128	; 0x80
 80004c0:	061b      	lsls	r3, r3, #24
 80004c2:	469c      	mov	ip, r3
 80004c4:	4460      	add	r0, ip
 80004c6:	e7f2      	b.n	80004ae <__aeabi_f2uiz+0x16>

080004c8 <__udivmoddi4>:
 80004c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004ca:	4657      	mov	r7, sl
 80004cc:	464e      	mov	r6, r9
 80004ce:	4645      	mov	r5, r8
 80004d0:	46de      	mov	lr, fp
 80004d2:	b5e0      	push	{r5, r6, r7, lr}
 80004d4:	0004      	movs	r4, r0
 80004d6:	000d      	movs	r5, r1
 80004d8:	4692      	mov	sl, r2
 80004da:	4699      	mov	r9, r3
 80004dc:	b083      	sub	sp, #12
 80004de:	428b      	cmp	r3, r1
 80004e0:	d830      	bhi.n	8000544 <__udivmoddi4+0x7c>
 80004e2:	d02d      	beq.n	8000540 <__udivmoddi4+0x78>
 80004e4:	4649      	mov	r1, r9
 80004e6:	4650      	mov	r0, sl
 80004e8:	f000 fb40 	bl	8000b6c <__clzdi2>
 80004ec:	0029      	movs	r1, r5
 80004ee:	0006      	movs	r6, r0
 80004f0:	0020      	movs	r0, r4
 80004f2:	f000 fb3b 	bl	8000b6c <__clzdi2>
 80004f6:	1a33      	subs	r3, r6, r0
 80004f8:	4698      	mov	r8, r3
 80004fa:	3b20      	subs	r3, #32
 80004fc:	469b      	mov	fp, r3
 80004fe:	d433      	bmi.n	8000568 <__udivmoddi4+0xa0>
 8000500:	465a      	mov	r2, fp
 8000502:	4653      	mov	r3, sl
 8000504:	4093      	lsls	r3, r2
 8000506:	4642      	mov	r2, r8
 8000508:	001f      	movs	r7, r3
 800050a:	4653      	mov	r3, sl
 800050c:	4093      	lsls	r3, r2
 800050e:	001e      	movs	r6, r3
 8000510:	42af      	cmp	r7, r5
 8000512:	d83a      	bhi.n	800058a <__udivmoddi4+0xc2>
 8000514:	42af      	cmp	r7, r5
 8000516:	d100      	bne.n	800051a <__udivmoddi4+0x52>
 8000518:	e078      	b.n	800060c <__udivmoddi4+0x144>
 800051a:	465b      	mov	r3, fp
 800051c:	1ba4      	subs	r4, r4, r6
 800051e:	41bd      	sbcs	r5, r7
 8000520:	2b00      	cmp	r3, #0
 8000522:	da00      	bge.n	8000526 <__udivmoddi4+0x5e>
 8000524:	e075      	b.n	8000612 <__udivmoddi4+0x14a>
 8000526:	2200      	movs	r2, #0
 8000528:	2300      	movs	r3, #0
 800052a:	9200      	str	r2, [sp, #0]
 800052c:	9301      	str	r3, [sp, #4]
 800052e:	2301      	movs	r3, #1
 8000530:	465a      	mov	r2, fp
 8000532:	4093      	lsls	r3, r2
 8000534:	9301      	str	r3, [sp, #4]
 8000536:	2301      	movs	r3, #1
 8000538:	4642      	mov	r2, r8
 800053a:	4093      	lsls	r3, r2
 800053c:	9300      	str	r3, [sp, #0]
 800053e:	e028      	b.n	8000592 <__udivmoddi4+0xca>
 8000540:	4282      	cmp	r2, r0
 8000542:	d9cf      	bls.n	80004e4 <__udivmoddi4+0x1c>
 8000544:	2200      	movs	r2, #0
 8000546:	2300      	movs	r3, #0
 8000548:	9200      	str	r2, [sp, #0]
 800054a:	9301      	str	r3, [sp, #4]
 800054c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800054e:	2b00      	cmp	r3, #0
 8000550:	d001      	beq.n	8000556 <__udivmoddi4+0x8e>
 8000552:	601c      	str	r4, [r3, #0]
 8000554:	605d      	str	r5, [r3, #4]
 8000556:	9800      	ldr	r0, [sp, #0]
 8000558:	9901      	ldr	r1, [sp, #4]
 800055a:	b003      	add	sp, #12
 800055c:	bcf0      	pop	{r4, r5, r6, r7}
 800055e:	46bb      	mov	fp, r7
 8000560:	46b2      	mov	sl, r6
 8000562:	46a9      	mov	r9, r5
 8000564:	46a0      	mov	r8, r4
 8000566:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000568:	4642      	mov	r2, r8
 800056a:	2320      	movs	r3, #32
 800056c:	1a9b      	subs	r3, r3, r2
 800056e:	4652      	mov	r2, sl
 8000570:	40da      	lsrs	r2, r3
 8000572:	4641      	mov	r1, r8
 8000574:	0013      	movs	r3, r2
 8000576:	464a      	mov	r2, r9
 8000578:	408a      	lsls	r2, r1
 800057a:	0017      	movs	r7, r2
 800057c:	4642      	mov	r2, r8
 800057e:	431f      	orrs	r7, r3
 8000580:	4653      	mov	r3, sl
 8000582:	4093      	lsls	r3, r2
 8000584:	001e      	movs	r6, r3
 8000586:	42af      	cmp	r7, r5
 8000588:	d9c4      	bls.n	8000514 <__udivmoddi4+0x4c>
 800058a:	2200      	movs	r2, #0
 800058c:	2300      	movs	r3, #0
 800058e:	9200      	str	r2, [sp, #0]
 8000590:	9301      	str	r3, [sp, #4]
 8000592:	4643      	mov	r3, r8
 8000594:	2b00      	cmp	r3, #0
 8000596:	d0d9      	beq.n	800054c <__udivmoddi4+0x84>
 8000598:	07fb      	lsls	r3, r7, #31
 800059a:	0872      	lsrs	r2, r6, #1
 800059c:	431a      	orrs	r2, r3
 800059e:	4646      	mov	r6, r8
 80005a0:	087b      	lsrs	r3, r7, #1
 80005a2:	e00e      	b.n	80005c2 <__udivmoddi4+0xfa>
 80005a4:	42ab      	cmp	r3, r5
 80005a6:	d101      	bne.n	80005ac <__udivmoddi4+0xe4>
 80005a8:	42a2      	cmp	r2, r4
 80005aa:	d80c      	bhi.n	80005c6 <__udivmoddi4+0xfe>
 80005ac:	1aa4      	subs	r4, r4, r2
 80005ae:	419d      	sbcs	r5, r3
 80005b0:	2001      	movs	r0, #1
 80005b2:	1924      	adds	r4, r4, r4
 80005b4:	416d      	adcs	r5, r5
 80005b6:	2100      	movs	r1, #0
 80005b8:	3e01      	subs	r6, #1
 80005ba:	1824      	adds	r4, r4, r0
 80005bc:	414d      	adcs	r5, r1
 80005be:	2e00      	cmp	r6, #0
 80005c0:	d006      	beq.n	80005d0 <__udivmoddi4+0x108>
 80005c2:	42ab      	cmp	r3, r5
 80005c4:	d9ee      	bls.n	80005a4 <__udivmoddi4+0xdc>
 80005c6:	3e01      	subs	r6, #1
 80005c8:	1924      	adds	r4, r4, r4
 80005ca:	416d      	adcs	r5, r5
 80005cc:	2e00      	cmp	r6, #0
 80005ce:	d1f8      	bne.n	80005c2 <__udivmoddi4+0xfa>
 80005d0:	9800      	ldr	r0, [sp, #0]
 80005d2:	9901      	ldr	r1, [sp, #4]
 80005d4:	465b      	mov	r3, fp
 80005d6:	1900      	adds	r0, r0, r4
 80005d8:	4169      	adcs	r1, r5
 80005da:	2b00      	cmp	r3, #0
 80005dc:	db24      	blt.n	8000628 <__udivmoddi4+0x160>
 80005de:	002b      	movs	r3, r5
 80005e0:	465a      	mov	r2, fp
 80005e2:	4644      	mov	r4, r8
 80005e4:	40d3      	lsrs	r3, r2
 80005e6:	002a      	movs	r2, r5
 80005e8:	40e2      	lsrs	r2, r4
 80005ea:	001c      	movs	r4, r3
 80005ec:	465b      	mov	r3, fp
 80005ee:	0015      	movs	r5, r2
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	db2a      	blt.n	800064a <__udivmoddi4+0x182>
 80005f4:	0026      	movs	r6, r4
 80005f6:	409e      	lsls	r6, r3
 80005f8:	0033      	movs	r3, r6
 80005fa:	0026      	movs	r6, r4
 80005fc:	4647      	mov	r7, r8
 80005fe:	40be      	lsls	r6, r7
 8000600:	0032      	movs	r2, r6
 8000602:	1a80      	subs	r0, r0, r2
 8000604:	4199      	sbcs	r1, r3
 8000606:	9000      	str	r0, [sp, #0]
 8000608:	9101      	str	r1, [sp, #4]
 800060a:	e79f      	b.n	800054c <__udivmoddi4+0x84>
 800060c:	42a3      	cmp	r3, r4
 800060e:	d8bc      	bhi.n	800058a <__udivmoddi4+0xc2>
 8000610:	e783      	b.n	800051a <__udivmoddi4+0x52>
 8000612:	4642      	mov	r2, r8
 8000614:	2320      	movs	r3, #32
 8000616:	2100      	movs	r1, #0
 8000618:	1a9b      	subs	r3, r3, r2
 800061a:	2200      	movs	r2, #0
 800061c:	9100      	str	r1, [sp, #0]
 800061e:	9201      	str	r2, [sp, #4]
 8000620:	2201      	movs	r2, #1
 8000622:	40da      	lsrs	r2, r3
 8000624:	9201      	str	r2, [sp, #4]
 8000626:	e786      	b.n	8000536 <__udivmoddi4+0x6e>
 8000628:	4642      	mov	r2, r8
 800062a:	2320      	movs	r3, #32
 800062c:	1a9b      	subs	r3, r3, r2
 800062e:	002a      	movs	r2, r5
 8000630:	4646      	mov	r6, r8
 8000632:	409a      	lsls	r2, r3
 8000634:	0023      	movs	r3, r4
 8000636:	40f3      	lsrs	r3, r6
 8000638:	4644      	mov	r4, r8
 800063a:	4313      	orrs	r3, r2
 800063c:	002a      	movs	r2, r5
 800063e:	40e2      	lsrs	r2, r4
 8000640:	001c      	movs	r4, r3
 8000642:	465b      	mov	r3, fp
 8000644:	0015      	movs	r5, r2
 8000646:	2b00      	cmp	r3, #0
 8000648:	dad4      	bge.n	80005f4 <__udivmoddi4+0x12c>
 800064a:	4642      	mov	r2, r8
 800064c:	002f      	movs	r7, r5
 800064e:	2320      	movs	r3, #32
 8000650:	0026      	movs	r6, r4
 8000652:	4097      	lsls	r7, r2
 8000654:	1a9b      	subs	r3, r3, r2
 8000656:	40de      	lsrs	r6, r3
 8000658:	003b      	movs	r3, r7
 800065a:	4333      	orrs	r3, r6
 800065c:	e7cd      	b.n	80005fa <__udivmoddi4+0x132>
 800065e:	46c0      	nop			; (mov r8, r8)

08000660 <__aeabi_fsub>:
 8000660:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000662:	4646      	mov	r6, r8
 8000664:	46d6      	mov	lr, sl
 8000666:	464f      	mov	r7, r9
 8000668:	0243      	lsls	r3, r0, #9
 800066a:	0a5b      	lsrs	r3, r3, #9
 800066c:	00da      	lsls	r2, r3, #3
 800066e:	4694      	mov	ip, r2
 8000670:	024a      	lsls	r2, r1, #9
 8000672:	b5c0      	push	{r6, r7, lr}
 8000674:	0044      	lsls	r4, r0, #1
 8000676:	0a56      	lsrs	r6, r2, #9
 8000678:	1c05      	adds	r5, r0, #0
 800067a:	46b0      	mov	r8, r6
 800067c:	0e24      	lsrs	r4, r4, #24
 800067e:	004e      	lsls	r6, r1, #1
 8000680:	0992      	lsrs	r2, r2, #6
 8000682:	001f      	movs	r7, r3
 8000684:	0020      	movs	r0, r4
 8000686:	4692      	mov	sl, r2
 8000688:	0fed      	lsrs	r5, r5, #31
 800068a:	0e36      	lsrs	r6, r6, #24
 800068c:	0fc9      	lsrs	r1, r1, #31
 800068e:	2eff      	cmp	r6, #255	; 0xff
 8000690:	d100      	bne.n	8000694 <__aeabi_fsub+0x34>
 8000692:	e07f      	b.n	8000794 <__aeabi_fsub+0x134>
 8000694:	2201      	movs	r2, #1
 8000696:	4051      	eors	r1, r2
 8000698:	428d      	cmp	r5, r1
 800069a:	d051      	beq.n	8000740 <__aeabi_fsub+0xe0>
 800069c:	1ba2      	subs	r2, r4, r6
 800069e:	4691      	mov	r9, r2
 80006a0:	2a00      	cmp	r2, #0
 80006a2:	dc00      	bgt.n	80006a6 <__aeabi_fsub+0x46>
 80006a4:	e07e      	b.n	80007a4 <__aeabi_fsub+0x144>
 80006a6:	2e00      	cmp	r6, #0
 80006a8:	d100      	bne.n	80006ac <__aeabi_fsub+0x4c>
 80006aa:	e099      	b.n	80007e0 <__aeabi_fsub+0x180>
 80006ac:	2cff      	cmp	r4, #255	; 0xff
 80006ae:	d100      	bne.n	80006b2 <__aeabi_fsub+0x52>
 80006b0:	e08c      	b.n	80007cc <__aeabi_fsub+0x16c>
 80006b2:	2380      	movs	r3, #128	; 0x80
 80006b4:	4652      	mov	r2, sl
 80006b6:	04db      	lsls	r3, r3, #19
 80006b8:	431a      	orrs	r2, r3
 80006ba:	4692      	mov	sl, r2
 80006bc:	464a      	mov	r2, r9
 80006be:	2301      	movs	r3, #1
 80006c0:	2a1b      	cmp	r2, #27
 80006c2:	dc08      	bgt.n	80006d6 <__aeabi_fsub+0x76>
 80006c4:	4653      	mov	r3, sl
 80006c6:	2120      	movs	r1, #32
 80006c8:	40d3      	lsrs	r3, r2
 80006ca:	1a89      	subs	r1, r1, r2
 80006cc:	4652      	mov	r2, sl
 80006ce:	408a      	lsls	r2, r1
 80006d0:	1e51      	subs	r1, r2, #1
 80006d2:	418a      	sbcs	r2, r1
 80006d4:	4313      	orrs	r3, r2
 80006d6:	4662      	mov	r2, ip
 80006d8:	1ad3      	subs	r3, r2, r3
 80006da:	015a      	lsls	r2, r3, #5
 80006dc:	d400      	bmi.n	80006e0 <__aeabi_fsub+0x80>
 80006de:	e0f3      	b.n	80008c8 <__aeabi_fsub+0x268>
 80006e0:	019b      	lsls	r3, r3, #6
 80006e2:	099e      	lsrs	r6, r3, #6
 80006e4:	0030      	movs	r0, r6
 80006e6:	f000 fa23 	bl	8000b30 <__clzsi2>
 80006ea:	3805      	subs	r0, #5
 80006ec:	4086      	lsls	r6, r0
 80006ee:	4284      	cmp	r4, r0
 80006f0:	dd00      	ble.n	80006f4 <__aeabi_fsub+0x94>
 80006f2:	e0f7      	b.n	80008e4 <__aeabi_fsub+0x284>
 80006f4:	0032      	movs	r2, r6
 80006f6:	1b04      	subs	r4, r0, r4
 80006f8:	2020      	movs	r0, #32
 80006fa:	3401      	adds	r4, #1
 80006fc:	40e2      	lsrs	r2, r4
 80006fe:	1b04      	subs	r4, r0, r4
 8000700:	40a6      	lsls	r6, r4
 8000702:	0033      	movs	r3, r6
 8000704:	1e5e      	subs	r6, r3, #1
 8000706:	41b3      	sbcs	r3, r6
 8000708:	2400      	movs	r4, #0
 800070a:	4313      	orrs	r3, r2
 800070c:	075a      	lsls	r2, r3, #29
 800070e:	d004      	beq.n	800071a <__aeabi_fsub+0xba>
 8000710:	220f      	movs	r2, #15
 8000712:	401a      	ands	r2, r3
 8000714:	2a04      	cmp	r2, #4
 8000716:	d000      	beq.n	800071a <__aeabi_fsub+0xba>
 8000718:	3304      	adds	r3, #4
 800071a:	015a      	lsls	r2, r3, #5
 800071c:	d400      	bmi.n	8000720 <__aeabi_fsub+0xc0>
 800071e:	e0d6      	b.n	80008ce <__aeabi_fsub+0x26e>
 8000720:	1c62      	adds	r2, r4, #1
 8000722:	2cfe      	cmp	r4, #254	; 0xfe
 8000724:	d100      	bne.n	8000728 <__aeabi_fsub+0xc8>
 8000726:	e0da      	b.n	80008de <__aeabi_fsub+0x27e>
 8000728:	019b      	lsls	r3, r3, #6
 800072a:	0a5f      	lsrs	r7, r3, #9
 800072c:	b2d0      	uxtb	r0, r2
 800072e:	05c0      	lsls	r0, r0, #23
 8000730:	4338      	orrs	r0, r7
 8000732:	07ed      	lsls	r5, r5, #31
 8000734:	4328      	orrs	r0, r5
 8000736:	bce0      	pop	{r5, r6, r7}
 8000738:	46ba      	mov	sl, r7
 800073a:	46b1      	mov	r9, r6
 800073c:	46a8      	mov	r8, r5
 800073e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000740:	1ba2      	subs	r2, r4, r6
 8000742:	4691      	mov	r9, r2
 8000744:	2a00      	cmp	r2, #0
 8000746:	dd63      	ble.n	8000810 <__aeabi_fsub+0x1b0>
 8000748:	2e00      	cmp	r6, #0
 800074a:	d100      	bne.n	800074e <__aeabi_fsub+0xee>
 800074c:	e099      	b.n	8000882 <__aeabi_fsub+0x222>
 800074e:	2cff      	cmp	r4, #255	; 0xff
 8000750:	d03c      	beq.n	80007cc <__aeabi_fsub+0x16c>
 8000752:	2380      	movs	r3, #128	; 0x80
 8000754:	4652      	mov	r2, sl
 8000756:	04db      	lsls	r3, r3, #19
 8000758:	431a      	orrs	r2, r3
 800075a:	4692      	mov	sl, r2
 800075c:	464a      	mov	r2, r9
 800075e:	2301      	movs	r3, #1
 8000760:	2a1b      	cmp	r2, #27
 8000762:	dc08      	bgt.n	8000776 <__aeabi_fsub+0x116>
 8000764:	4653      	mov	r3, sl
 8000766:	2120      	movs	r1, #32
 8000768:	40d3      	lsrs	r3, r2
 800076a:	1a89      	subs	r1, r1, r2
 800076c:	4652      	mov	r2, sl
 800076e:	408a      	lsls	r2, r1
 8000770:	1e51      	subs	r1, r2, #1
 8000772:	418a      	sbcs	r2, r1
 8000774:	4313      	orrs	r3, r2
 8000776:	4463      	add	r3, ip
 8000778:	015a      	lsls	r2, r3, #5
 800077a:	d400      	bmi.n	800077e <__aeabi_fsub+0x11e>
 800077c:	e0a4      	b.n	80008c8 <__aeabi_fsub+0x268>
 800077e:	3401      	adds	r4, #1
 8000780:	2cff      	cmp	r4, #255	; 0xff
 8000782:	d100      	bne.n	8000786 <__aeabi_fsub+0x126>
 8000784:	e0ab      	b.n	80008de <__aeabi_fsub+0x27e>
 8000786:	2201      	movs	r2, #1
 8000788:	4997      	ldr	r1, [pc, #604]	; (80009e8 <__aeabi_fsub+0x388>)
 800078a:	401a      	ands	r2, r3
 800078c:	085b      	lsrs	r3, r3, #1
 800078e:	400b      	ands	r3, r1
 8000790:	4313      	orrs	r3, r2
 8000792:	e7bb      	b.n	800070c <__aeabi_fsub+0xac>
 8000794:	2a00      	cmp	r2, #0
 8000796:	d032      	beq.n	80007fe <__aeabi_fsub+0x19e>
 8000798:	428d      	cmp	r5, r1
 800079a:	d035      	beq.n	8000808 <__aeabi_fsub+0x1a8>
 800079c:	22ff      	movs	r2, #255	; 0xff
 800079e:	4252      	negs	r2, r2
 80007a0:	4691      	mov	r9, r2
 80007a2:	44a1      	add	r9, r4
 80007a4:	464a      	mov	r2, r9
 80007a6:	2a00      	cmp	r2, #0
 80007a8:	d051      	beq.n	800084e <__aeabi_fsub+0x1ee>
 80007aa:	1b30      	subs	r0, r6, r4
 80007ac:	2c00      	cmp	r4, #0
 80007ae:	d000      	beq.n	80007b2 <__aeabi_fsub+0x152>
 80007b0:	e09c      	b.n	80008ec <__aeabi_fsub+0x28c>
 80007b2:	4663      	mov	r3, ip
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d100      	bne.n	80007ba <__aeabi_fsub+0x15a>
 80007b8:	e0df      	b.n	800097a <__aeabi_fsub+0x31a>
 80007ba:	3801      	subs	r0, #1
 80007bc:	2800      	cmp	r0, #0
 80007be:	d100      	bne.n	80007c2 <__aeabi_fsub+0x162>
 80007c0:	e0f7      	b.n	80009b2 <__aeabi_fsub+0x352>
 80007c2:	2eff      	cmp	r6, #255	; 0xff
 80007c4:	d000      	beq.n	80007c8 <__aeabi_fsub+0x168>
 80007c6:	e099      	b.n	80008fc <__aeabi_fsub+0x29c>
 80007c8:	000d      	movs	r5, r1
 80007ca:	4643      	mov	r3, r8
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d100      	bne.n	80007d2 <__aeabi_fsub+0x172>
 80007d0:	e085      	b.n	80008de <__aeabi_fsub+0x27e>
 80007d2:	2780      	movs	r7, #128	; 0x80
 80007d4:	03ff      	lsls	r7, r7, #15
 80007d6:	431f      	orrs	r7, r3
 80007d8:	027f      	lsls	r7, r7, #9
 80007da:	20ff      	movs	r0, #255	; 0xff
 80007dc:	0a7f      	lsrs	r7, r7, #9
 80007de:	e7a6      	b.n	800072e <__aeabi_fsub+0xce>
 80007e0:	4652      	mov	r2, sl
 80007e2:	2a00      	cmp	r2, #0
 80007e4:	d074      	beq.n	80008d0 <__aeabi_fsub+0x270>
 80007e6:	2201      	movs	r2, #1
 80007e8:	4252      	negs	r2, r2
 80007ea:	4690      	mov	r8, r2
 80007ec:	44c1      	add	r9, r8
 80007ee:	464a      	mov	r2, r9
 80007f0:	2a00      	cmp	r2, #0
 80007f2:	d100      	bne.n	80007f6 <__aeabi_fsub+0x196>
 80007f4:	e0c8      	b.n	8000988 <__aeabi_fsub+0x328>
 80007f6:	2cff      	cmp	r4, #255	; 0xff
 80007f8:	d000      	beq.n	80007fc <__aeabi_fsub+0x19c>
 80007fa:	e75f      	b.n	80006bc <__aeabi_fsub+0x5c>
 80007fc:	e7e6      	b.n	80007cc <__aeabi_fsub+0x16c>
 80007fe:	2201      	movs	r2, #1
 8000800:	4051      	eors	r1, r2
 8000802:	42a9      	cmp	r1, r5
 8000804:	d000      	beq.n	8000808 <__aeabi_fsub+0x1a8>
 8000806:	e749      	b.n	800069c <__aeabi_fsub+0x3c>
 8000808:	22ff      	movs	r2, #255	; 0xff
 800080a:	4252      	negs	r2, r2
 800080c:	4691      	mov	r9, r2
 800080e:	44a1      	add	r9, r4
 8000810:	464a      	mov	r2, r9
 8000812:	2a00      	cmp	r2, #0
 8000814:	d043      	beq.n	800089e <__aeabi_fsub+0x23e>
 8000816:	1b31      	subs	r1, r6, r4
 8000818:	2c00      	cmp	r4, #0
 800081a:	d100      	bne.n	800081e <__aeabi_fsub+0x1be>
 800081c:	e08c      	b.n	8000938 <__aeabi_fsub+0x2d8>
 800081e:	2eff      	cmp	r6, #255	; 0xff
 8000820:	d100      	bne.n	8000824 <__aeabi_fsub+0x1c4>
 8000822:	e092      	b.n	800094a <__aeabi_fsub+0x2ea>
 8000824:	2380      	movs	r3, #128	; 0x80
 8000826:	4662      	mov	r2, ip
 8000828:	04db      	lsls	r3, r3, #19
 800082a:	431a      	orrs	r2, r3
 800082c:	4694      	mov	ip, r2
 800082e:	2301      	movs	r3, #1
 8000830:	291b      	cmp	r1, #27
 8000832:	dc09      	bgt.n	8000848 <__aeabi_fsub+0x1e8>
 8000834:	2020      	movs	r0, #32
 8000836:	4663      	mov	r3, ip
 8000838:	4662      	mov	r2, ip
 800083a:	40cb      	lsrs	r3, r1
 800083c:	1a41      	subs	r1, r0, r1
 800083e:	408a      	lsls	r2, r1
 8000840:	0011      	movs	r1, r2
 8000842:	1e48      	subs	r0, r1, #1
 8000844:	4181      	sbcs	r1, r0
 8000846:	430b      	orrs	r3, r1
 8000848:	0034      	movs	r4, r6
 800084a:	4453      	add	r3, sl
 800084c:	e794      	b.n	8000778 <__aeabi_fsub+0x118>
 800084e:	22fe      	movs	r2, #254	; 0xfe
 8000850:	1c66      	adds	r6, r4, #1
 8000852:	4232      	tst	r2, r6
 8000854:	d164      	bne.n	8000920 <__aeabi_fsub+0x2c0>
 8000856:	2c00      	cmp	r4, #0
 8000858:	d000      	beq.n	800085c <__aeabi_fsub+0x1fc>
 800085a:	e082      	b.n	8000962 <__aeabi_fsub+0x302>
 800085c:	4663      	mov	r3, ip
 800085e:	2b00      	cmp	r3, #0
 8000860:	d100      	bne.n	8000864 <__aeabi_fsub+0x204>
 8000862:	e0ab      	b.n	80009bc <__aeabi_fsub+0x35c>
 8000864:	4653      	mov	r3, sl
 8000866:	2b00      	cmp	r3, #0
 8000868:	d100      	bne.n	800086c <__aeabi_fsub+0x20c>
 800086a:	e760      	b.n	800072e <__aeabi_fsub+0xce>
 800086c:	4663      	mov	r3, ip
 800086e:	4652      	mov	r2, sl
 8000870:	1a9b      	subs	r3, r3, r2
 8000872:	015a      	lsls	r2, r3, #5
 8000874:	d400      	bmi.n	8000878 <__aeabi_fsub+0x218>
 8000876:	e0aa      	b.n	80009ce <__aeabi_fsub+0x36e>
 8000878:	4663      	mov	r3, ip
 800087a:	4652      	mov	r2, sl
 800087c:	000d      	movs	r5, r1
 800087e:	1ad3      	subs	r3, r2, r3
 8000880:	e744      	b.n	800070c <__aeabi_fsub+0xac>
 8000882:	4652      	mov	r2, sl
 8000884:	2a00      	cmp	r2, #0
 8000886:	d023      	beq.n	80008d0 <__aeabi_fsub+0x270>
 8000888:	2201      	movs	r2, #1
 800088a:	4252      	negs	r2, r2
 800088c:	4690      	mov	r8, r2
 800088e:	44c1      	add	r9, r8
 8000890:	464a      	mov	r2, r9
 8000892:	2a00      	cmp	r2, #0
 8000894:	d075      	beq.n	8000982 <__aeabi_fsub+0x322>
 8000896:	2cff      	cmp	r4, #255	; 0xff
 8000898:	d000      	beq.n	800089c <__aeabi_fsub+0x23c>
 800089a:	e75f      	b.n	800075c <__aeabi_fsub+0xfc>
 800089c:	e796      	b.n	80007cc <__aeabi_fsub+0x16c>
 800089e:	26fe      	movs	r6, #254	; 0xfe
 80008a0:	3401      	adds	r4, #1
 80008a2:	4226      	tst	r6, r4
 80008a4:	d153      	bne.n	800094e <__aeabi_fsub+0x2ee>
 80008a6:	2800      	cmp	r0, #0
 80008a8:	d172      	bne.n	8000990 <__aeabi_fsub+0x330>
 80008aa:	4663      	mov	r3, ip
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d100      	bne.n	80008b2 <__aeabi_fsub+0x252>
 80008b0:	e093      	b.n	80009da <__aeabi_fsub+0x37a>
 80008b2:	4653      	mov	r3, sl
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	d100      	bne.n	80008ba <__aeabi_fsub+0x25a>
 80008b8:	e739      	b.n	800072e <__aeabi_fsub+0xce>
 80008ba:	4463      	add	r3, ip
 80008bc:	2400      	movs	r4, #0
 80008be:	015a      	lsls	r2, r3, #5
 80008c0:	d502      	bpl.n	80008c8 <__aeabi_fsub+0x268>
 80008c2:	4a4a      	ldr	r2, [pc, #296]	; (80009ec <__aeabi_fsub+0x38c>)
 80008c4:	3401      	adds	r4, #1
 80008c6:	4013      	ands	r3, r2
 80008c8:	075a      	lsls	r2, r3, #29
 80008ca:	d000      	beq.n	80008ce <__aeabi_fsub+0x26e>
 80008cc:	e720      	b.n	8000710 <__aeabi_fsub+0xb0>
 80008ce:	08db      	lsrs	r3, r3, #3
 80008d0:	2cff      	cmp	r4, #255	; 0xff
 80008d2:	d100      	bne.n	80008d6 <__aeabi_fsub+0x276>
 80008d4:	e77a      	b.n	80007cc <__aeabi_fsub+0x16c>
 80008d6:	025b      	lsls	r3, r3, #9
 80008d8:	0a5f      	lsrs	r7, r3, #9
 80008da:	b2e0      	uxtb	r0, r4
 80008dc:	e727      	b.n	800072e <__aeabi_fsub+0xce>
 80008de:	20ff      	movs	r0, #255	; 0xff
 80008e0:	2700      	movs	r7, #0
 80008e2:	e724      	b.n	800072e <__aeabi_fsub+0xce>
 80008e4:	4b41      	ldr	r3, [pc, #260]	; (80009ec <__aeabi_fsub+0x38c>)
 80008e6:	1a24      	subs	r4, r4, r0
 80008e8:	4033      	ands	r3, r6
 80008ea:	e70f      	b.n	800070c <__aeabi_fsub+0xac>
 80008ec:	2eff      	cmp	r6, #255	; 0xff
 80008ee:	d100      	bne.n	80008f2 <__aeabi_fsub+0x292>
 80008f0:	e76a      	b.n	80007c8 <__aeabi_fsub+0x168>
 80008f2:	2380      	movs	r3, #128	; 0x80
 80008f4:	4662      	mov	r2, ip
 80008f6:	04db      	lsls	r3, r3, #19
 80008f8:	431a      	orrs	r2, r3
 80008fa:	4694      	mov	ip, r2
 80008fc:	2301      	movs	r3, #1
 80008fe:	281b      	cmp	r0, #27
 8000900:	dc09      	bgt.n	8000916 <__aeabi_fsub+0x2b6>
 8000902:	2420      	movs	r4, #32
 8000904:	4663      	mov	r3, ip
 8000906:	4662      	mov	r2, ip
 8000908:	40c3      	lsrs	r3, r0
 800090a:	1a20      	subs	r0, r4, r0
 800090c:	4082      	lsls	r2, r0
 800090e:	0010      	movs	r0, r2
 8000910:	1e44      	subs	r4, r0, #1
 8000912:	41a0      	sbcs	r0, r4
 8000914:	4303      	orrs	r3, r0
 8000916:	4652      	mov	r2, sl
 8000918:	000d      	movs	r5, r1
 800091a:	0034      	movs	r4, r6
 800091c:	1ad3      	subs	r3, r2, r3
 800091e:	e6dc      	b.n	80006da <__aeabi_fsub+0x7a>
 8000920:	4663      	mov	r3, ip
 8000922:	4652      	mov	r2, sl
 8000924:	1a9e      	subs	r6, r3, r2
 8000926:	0173      	lsls	r3, r6, #5
 8000928:	d417      	bmi.n	800095a <__aeabi_fsub+0x2fa>
 800092a:	2e00      	cmp	r6, #0
 800092c:	d000      	beq.n	8000930 <__aeabi_fsub+0x2d0>
 800092e:	e6d9      	b.n	80006e4 <__aeabi_fsub+0x84>
 8000930:	2500      	movs	r5, #0
 8000932:	2000      	movs	r0, #0
 8000934:	2700      	movs	r7, #0
 8000936:	e6fa      	b.n	800072e <__aeabi_fsub+0xce>
 8000938:	4663      	mov	r3, ip
 800093a:	2b00      	cmp	r3, #0
 800093c:	d044      	beq.n	80009c8 <__aeabi_fsub+0x368>
 800093e:	3901      	subs	r1, #1
 8000940:	2900      	cmp	r1, #0
 8000942:	d04c      	beq.n	80009de <__aeabi_fsub+0x37e>
 8000944:	2eff      	cmp	r6, #255	; 0xff
 8000946:	d000      	beq.n	800094a <__aeabi_fsub+0x2ea>
 8000948:	e771      	b.n	800082e <__aeabi_fsub+0x1ce>
 800094a:	4643      	mov	r3, r8
 800094c:	e73e      	b.n	80007cc <__aeabi_fsub+0x16c>
 800094e:	2cff      	cmp	r4, #255	; 0xff
 8000950:	d0c5      	beq.n	80008de <__aeabi_fsub+0x27e>
 8000952:	4652      	mov	r2, sl
 8000954:	4462      	add	r2, ip
 8000956:	0853      	lsrs	r3, r2, #1
 8000958:	e7b6      	b.n	80008c8 <__aeabi_fsub+0x268>
 800095a:	4663      	mov	r3, ip
 800095c:	000d      	movs	r5, r1
 800095e:	1ad6      	subs	r6, r2, r3
 8000960:	e6c0      	b.n	80006e4 <__aeabi_fsub+0x84>
 8000962:	4662      	mov	r2, ip
 8000964:	2a00      	cmp	r2, #0
 8000966:	d116      	bne.n	8000996 <__aeabi_fsub+0x336>
 8000968:	4653      	mov	r3, sl
 800096a:	2b00      	cmp	r3, #0
 800096c:	d000      	beq.n	8000970 <__aeabi_fsub+0x310>
 800096e:	e72b      	b.n	80007c8 <__aeabi_fsub+0x168>
 8000970:	2780      	movs	r7, #128	; 0x80
 8000972:	2500      	movs	r5, #0
 8000974:	20ff      	movs	r0, #255	; 0xff
 8000976:	03ff      	lsls	r7, r7, #15
 8000978:	e6d9      	b.n	800072e <__aeabi_fsub+0xce>
 800097a:	000d      	movs	r5, r1
 800097c:	4643      	mov	r3, r8
 800097e:	0034      	movs	r4, r6
 8000980:	e7a6      	b.n	80008d0 <__aeabi_fsub+0x270>
 8000982:	4653      	mov	r3, sl
 8000984:	4463      	add	r3, ip
 8000986:	e6f7      	b.n	8000778 <__aeabi_fsub+0x118>
 8000988:	4663      	mov	r3, ip
 800098a:	4652      	mov	r2, sl
 800098c:	1a9b      	subs	r3, r3, r2
 800098e:	e6a4      	b.n	80006da <__aeabi_fsub+0x7a>
 8000990:	4662      	mov	r2, ip
 8000992:	2a00      	cmp	r2, #0
 8000994:	d0d9      	beq.n	800094a <__aeabi_fsub+0x2ea>
 8000996:	4652      	mov	r2, sl
 8000998:	2a00      	cmp	r2, #0
 800099a:	d100      	bne.n	800099e <__aeabi_fsub+0x33e>
 800099c:	e716      	b.n	80007cc <__aeabi_fsub+0x16c>
 800099e:	2280      	movs	r2, #128	; 0x80
 80009a0:	03d2      	lsls	r2, r2, #15
 80009a2:	4213      	tst	r3, r2
 80009a4:	d100      	bne.n	80009a8 <__aeabi_fsub+0x348>
 80009a6:	e711      	b.n	80007cc <__aeabi_fsub+0x16c>
 80009a8:	4640      	mov	r0, r8
 80009aa:	4210      	tst	r0, r2
 80009ac:	d000      	beq.n	80009b0 <__aeabi_fsub+0x350>
 80009ae:	e70d      	b.n	80007cc <__aeabi_fsub+0x16c>
 80009b0:	e70a      	b.n	80007c8 <__aeabi_fsub+0x168>
 80009b2:	4652      	mov	r2, sl
 80009b4:	000d      	movs	r5, r1
 80009b6:	0034      	movs	r4, r6
 80009b8:	1ad3      	subs	r3, r2, r3
 80009ba:	e68e      	b.n	80006da <__aeabi_fsub+0x7a>
 80009bc:	4653      	mov	r3, sl
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d008      	beq.n	80009d4 <__aeabi_fsub+0x374>
 80009c2:	000d      	movs	r5, r1
 80009c4:	4647      	mov	r7, r8
 80009c6:	e6b2      	b.n	800072e <__aeabi_fsub+0xce>
 80009c8:	4643      	mov	r3, r8
 80009ca:	0034      	movs	r4, r6
 80009cc:	e780      	b.n	80008d0 <__aeabi_fsub+0x270>
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d000      	beq.n	80009d4 <__aeabi_fsub+0x374>
 80009d2:	e779      	b.n	80008c8 <__aeabi_fsub+0x268>
 80009d4:	2500      	movs	r5, #0
 80009d6:	2700      	movs	r7, #0
 80009d8:	e6a9      	b.n	800072e <__aeabi_fsub+0xce>
 80009da:	4647      	mov	r7, r8
 80009dc:	e6a7      	b.n	800072e <__aeabi_fsub+0xce>
 80009de:	4653      	mov	r3, sl
 80009e0:	0034      	movs	r4, r6
 80009e2:	4463      	add	r3, ip
 80009e4:	e6c8      	b.n	8000778 <__aeabi_fsub+0x118>
 80009e6:	46c0      	nop			; (mov r8, r8)
 80009e8:	7dffffff 	.word	0x7dffffff
 80009ec:	fbffffff 	.word	0xfbffffff

080009f0 <__aeabi_f2iz>:
 80009f0:	0241      	lsls	r1, r0, #9
 80009f2:	0042      	lsls	r2, r0, #1
 80009f4:	0fc3      	lsrs	r3, r0, #31
 80009f6:	0a49      	lsrs	r1, r1, #9
 80009f8:	2000      	movs	r0, #0
 80009fa:	0e12      	lsrs	r2, r2, #24
 80009fc:	2a7e      	cmp	r2, #126	; 0x7e
 80009fe:	d903      	bls.n	8000a08 <__aeabi_f2iz+0x18>
 8000a00:	2a9d      	cmp	r2, #157	; 0x9d
 8000a02:	d902      	bls.n	8000a0a <__aeabi_f2iz+0x1a>
 8000a04:	4a09      	ldr	r2, [pc, #36]	; (8000a2c <__aeabi_f2iz+0x3c>)
 8000a06:	1898      	adds	r0, r3, r2
 8000a08:	4770      	bx	lr
 8000a0a:	2080      	movs	r0, #128	; 0x80
 8000a0c:	0400      	lsls	r0, r0, #16
 8000a0e:	4301      	orrs	r1, r0
 8000a10:	2a95      	cmp	r2, #149	; 0x95
 8000a12:	dc07      	bgt.n	8000a24 <__aeabi_f2iz+0x34>
 8000a14:	2096      	movs	r0, #150	; 0x96
 8000a16:	1a82      	subs	r2, r0, r2
 8000a18:	40d1      	lsrs	r1, r2
 8000a1a:	4248      	negs	r0, r1
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d1f3      	bne.n	8000a08 <__aeabi_f2iz+0x18>
 8000a20:	0008      	movs	r0, r1
 8000a22:	e7f1      	b.n	8000a08 <__aeabi_f2iz+0x18>
 8000a24:	3a96      	subs	r2, #150	; 0x96
 8000a26:	4091      	lsls	r1, r2
 8000a28:	e7f7      	b.n	8000a1a <__aeabi_f2iz+0x2a>
 8000a2a:	46c0      	nop			; (mov r8, r8)
 8000a2c:	7fffffff 	.word	0x7fffffff

08000a30 <__aeabi_i2f>:
 8000a30:	b570      	push	{r4, r5, r6, lr}
 8000a32:	2800      	cmp	r0, #0
 8000a34:	d013      	beq.n	8000a5e <__aeabi_i2f+0x2e>
 8000a36:	17c3      	asrs	r3, r0, #31
 8000a38:	18c5      	adds	r5, r0, r3
 8000a3a:	405d      	eors	r5, r3
 8000a3c:	0fc4      	lsrs	r4, r0, #31
 8000a3e:	0028      	movs	r0, r5
 8000a40:	f000 f876 	bl	8000b30 <__clzsi2>
 8000a44:	239e      	movs	r3, #158	; 0x9e
 8000a46:	0001      	movs	r1, r0
 8000a48:	1a1b      	subs	r3, r3, r0
 8000a4a:	2b96      	cmp	r3, #150	; 0x96
 8000a4c:	dc0f      	bgt.n	8000a6e <__aeabi_i2f+0x3e>
 8000a4e:	2808      	cmp	r0, #8
 8000a50:	dd01      	ble.n	8000a56 <__aeabi_i2f+0x26>
 8000a52:	3908      	subs	r1, #8
 8000a54:	408d      	lsls	r5, r1
 8000a56:	026d      	lsls	r5, r5, #9
 8000a58:	0a6d      	lsrs	r5, r5, #9
 8000a5a:	b2d8      	uxtb	r0, r3
 8000a5c:	e002      	b.n	8000a64 <__aeabi_i2f+0x34>
 8000a5e:	2400      	movs	r4, #0
 8000a60:	2000      	movs	r0, #0
 8000a62:	2500      	movs	r5, #0
 8000a64:	05c0      	lsls	r0, r0, #23
 8000a66:	4328      	orrs	r0, r5
 8000a68:	07e4      	lsls	r4, r4, #31
 8000a6a:	4320      	orrs	r0, r4
 8000a6c:	bd70      	pop	{r4, r5, r6, pc}
 8000a6e:	2b99      	cmp	r3, #153	; 0x99
 8000a70:	dd0b      	ble.n	8000a8a <__aeabi_i2f+0x5a>
 8000a72:	2205      	movs	r2, #5
 8000a74:	002e      	movs	r6, r5
 8000a76:	1a12      	subs	r2, r2, r0
 8000a78:	40d6      	lsrs	r6, r2
 8000a7a:	0002      	movs	r2, r0
 8000a7c:	321b      	adds	r2, #27
 8000a7e:	4095      	lsls	r5, r2
 8000a80:	0028      	movs	r0, r5
 8000a82:	1e45      	subs	r5, r0, #1
 8000a84:	41a8      	sbcs	r0, r5
 8000a86:	0035      	movs	r5, r6
 8000a88:	4305      	orrs	r5, r0
 8000a8a:	2905      	cmp	r1, #5
 8000a8c:	dd01      	ble.n	8000a92 <__aeabi_i2f+0x62>
 8000a8e:	1f4a      	subs	r2, r1, #5
 8000a90:	4095      	lsls	r5, r2
 8000a92:	002a      	movs	r2, r5
 8000a94:	4e08      	ldr	r6, [pc, #32]	; (8000ab8 <__aeabi_i2f+0x88>)
 8000a96:	4032      	ands	r2, r6
 8000a98:	0768      	lsls	r0, r5, #29
 8000a9a:	d009      	beq.n	8000ab0 <__aeabi_i2f+0x80>
 8000a9c:	200f      	movs	r0, #15
 8000a9e:	4028      	ands	r0, r5
 8000aa0:	2804      	cmp	r0, #4
 8000aa2:	d005      	beq.n	8000ab0 <__aeabi_i2f+0x80>
 8000aa4:	3204      	adds	r2, #4
 8000aa6:	0150      	lsls	r0, r2, #5
 8000aa8:	d502      	bpl.n	8000ab0 <__aeabi_i2f+0x80>
 8000aaa:	239f      	movs	r3, #159	; 0x9f
 8000aac:	4032      	ands	r2, r6
 8000aae:	1a5b      	subs	r3, r3, r1
 8000ab0:	0192      	lsls	r2, r2, #6
 8000ab2:	0a55      	lsrs	r5, r2, #9
 8000ab4:	b2d8      	uxtb	r0, r3
 8000ab6:	e7d5      	b.n	8000a64 <__aeabi_i2f+0x34>
 8000ab8:	fbffffff 	.word	0xfbffffff

08000abc <__aeabi_cfrcmple>:
 8000abc:	4684      	mov	ip, r0
 8000abe:	1c08      	adds	r0, r1, #0
 8000ac0:	4661      	mov	r1, ip
 8000ac2:	e7ff      	b.n	8000ac4 <__aeabi_cfcmpeq>

08000ac4 <__aeabi_cfcmpeq>:
 8000ac4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000ac6:	f000 f8d1 	bl	8000c6c <__lesf2>
 8000aca:	2800      	cmp	r0, #0
 8000acc:	d401      	bmi.n	8000ad2 <__aeabi_cfcmpeq+0xe>
 8000ace:	2100      	movs	r1, #0
 8000ad0:	42c8      	cmn	r0, r1
 8000ad2:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000ad4 <__aeabi_fcmpeq>:
 8000ad4:	b510      	push	{r4, lr}
 8000ad6:	f000 f855 	bl	8000b84 <__eqsf2>
 8000ada:	4240      	negs	r0, r0
 8000adc:	3001      	adds	r0, #1
 8000ade:	bd10      	pop	{r4, pc}

08000ae0 <__aeabi_fcmplt>:
 8000ae0:	b510      	push	{r4, lr}
 8000ae2:	f000 f8c3 	bl	8000c6c <__lesf2>
 8000ae6:	2800      	cmp	r0, #0
 8000ae8:	db01      	blt.n	8000aee <__aeabi_fcmplt+0xe>
 8000aea:	2000      	movs	r0, #0
 8000aec:	bd10      	pop	{r4, pc}
 8000aee:	2001      	movs	r0, #1
 8000af0:	bd10      	pop	{r4, pc}
 8000af2:	46c0      	nop			; (mov r8, r8)

08000af4 <__aeabi_fcmple>:
 8000af4:	b510      	push	{r4, lr}
 8000af6:	f000 f8b9 	bl	8000c6c <__lesf2>
 8000afa:	2800      	cmp	r0, #0
 8000afc:	dd01      	ble.n	8000b02 <__aeabi_fcmple+0xe>
 8000afe:	2000      	movs	r0, #0
 8000b00:	bd10      	pop	{r4, pc}
 8000b02:	2001      	movs	r0, #1
 8000b04:	bd10      	pop	{r4, pc}
 8000b06:	46c0      	nop			; (mov r8, r8)

08000b08 <__aeabi_fcmpgt>:
 8000b08:	b510      	push	{r4, lr}
 8000b0a:	f000 f863 	bl	8000bd4 <__gesf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	dc01      	bgt.n	8000b16 <__aeabi_fcmpgt+0xe>
 8000b12:	2000      	movs	r0, #0
 8000b14:	bd10      	pop	{r4, pc}
 8000b16:	2001      	movs	r0, #1
 8000b18:	bd10      	pop	{r4, pc}
 8000b1a:	46c0      	nop			; (mov r8, r8)

08000b1c <__aeabi_fcmpge>:
 8000b1c:	b510      	push	{r4, lr}
 8000b1e:	f000 f859 	bl	8000bd4 <__gesf2>
 8000b22:	2800      	cmp	r0, #0
 8000b24:	da01      	bge.n	8000b2a <__aeabi_fcmpge+0xe>
 8000b26:	2000      	movs	r0, #0
 8000b28:	bd10      	pop	{r4, pc}
 8000b2a:	2001      	movs	r0, #1
 8000b2c:	bd10      	pop	{r4, pc}
 8000b2e:	46c0      	nop			; (mov r8, r8)

08000b30 <__clzsi2>:
 8000b30:	211c      	movs	r1, #28
 8000b32:	2301      	movs	r3, #1
 8000b34:	041b      	lsls	r3, r3, #16
 8000b36:	4298      	cmp	r0, r3
 8000b38:	d301      	bcc.n	8000b3e <__clzsi2+0xe>
 8000b3a:	0c00      	lsrs	r0, r0, #16
 8000b3c:	3910      	subs	r1, #16
 8000b3e:	0a1b      	lsrs	r3, r3, #8
 8000b40:	4298      	cmp	r0, r3
 8000b42:	d301      	bcc.n	8000b48 <__clzsi2+0x18>
 8000b44:	0a00      	lsrs	r0, r0, #8
 8000b46:	3908      	subs	r1, #8
 8000b48:	091b      	lsrs	r3, r3, #4
 8000b4a:	4298      	cmp	r0, r3
 8000b4c:	d301      	bcc.n	8000b52 <__clzsi2+0x22>
 8000b4e:	0900      	lsrs	r0, r0, #4
 8000b50:	3904      	subs	r1, #4
 8000b52:	a202      	add	r2, pc, #8	; (adr r2, 8000b5c <__clzsi2+0x2c>)
 8000b54:	5c10      	ldrb	r0, [r2, r0]
 8000b56:	1840      	adds	r0, r0, r1
 8000b58:	4770      	bx	lr
 8000b5a:	46c0      	nop			; (mov r8, r8)
 8000b5c:	02020304 	.word	0x02020304
 8000b60:	01010101 	.word	0x01010101
	...

08000b6c <__clzdi2>:
 8000b6c:	b510      	push	{r4, lr}
 8000b6e:	2900      	cmp	r1, #0
 8000b70:	d103      	bne.n	8000b7a <__clzdi2+0xe>
 8000b72:	f7ff ffdd 	bl	8000b30 <__clzsi2>
 8000b76:	3020      	adds	r0, #32
 8000b78:	e002      	b.n	8000b80 <__clzdi2+0x14>
 8000b7a:	1c08      	adds	r0, r1, #0
 8000b7c:	f7ff ffd8 	bl	8000b30 <__clzsi2>
 8000b80:	bd10      	pop	{r4, pc}
 8000b82:	46c0      	nop			; (mov r8, r8)

08000b84 <__eqsf2>:
 8000b84:	b570      	push	{r4, r5, r6, lr}
 8000b86:	0042      	lsls	r2, r0, #1
 8000b88:	024e      	lsls	r6, r1, #9
 8000b8a:	004c      	lsls	r4, r1, #1
 8000b8c:	0245      	lsls	r5, r0, #9
 8000b8e:	0a6d      	lsrs	r5, r5, #9
 8000b90:	0e12      	lsrs	r2, r2, #24
 8000b92:	0fc3      	lsrs	r3, r0, #31
 8000b94:	0a76      	lsrs	r6, r6, #9
 8000b96:	0e24      	lsrs	r4, r4, #24
 8000b98:	0fc9      	lsrs	r1, r1, #31
 8000b9a:	2aff      	cmp	r2, #255	; 0xff
 8000b9c:	d00f      	beq.n	8000bbe <__eqsf2+0x3a>
 8000b9e:	2cff      	cmp	r4, #255	; 0xff
 8000ba0:	d011      	beq.n	8000bc6 <__eqsf2+0x42>
 8000ba2:	2001      	movs	r0, #1
 8000ba4:	42a2      	cmp	r2, r4
 8000ba6:	d000      	beq.n	8000baa <__eqsf2+0x26>
 8000ba8:	bd70      	pop	{r4, r5, r6, pc}
 8000baa:	42b5      	cmp	r5, r6
 8000bac:	d1fc      	bne.n	8000ba8 <__eqsf2+0x24>
 8000bae:	428b      	cmp	r3, r1
 8000bb0:	d00d      	beq.n	8000bce <__eqsf2+0x4a>
 8000bb2:	2a00      	cmp	r2, #0
 8000bb4:	d1f8      	bne.n	8000ba8 <__eqsf2+0x24>
 8000bb6:	0028      	movs	r0, r5
 8000bb8:	1e45      	subs	r5, r0, #1
 8000bba:	41a8      	sbcs	r0, r5
 8000bbc:	e7f4      	b.n	8000ba8 <__eqsf2+0x24>
 8000bbe:	2001      	movs	r0, #1
 8000bc0:	2d00      	cmp	r5, #0
 8000bc2:	d1f1      	bne.n	8000ba8 <__eqsf2+0x24>
 8000bc4:	e7eb      	b.n	8000b9e <__eqsf2+0x1a>
 8000bc6:	2001      	movs	r0, #1
 8000bc8:	2e00      	cmp	r6, #0
 8000bca:	d1ed      	bne.n	8000ba8 <__eqsf2+0x24>
 8000bcc:	e7e9      	b.n	8000ba2 <__eqsf2+0x1e>
 8000bce:	2000      	movs	r0, #0
 8000bd0:	e7ea      	b.n	8000ba8 <__eqsf2+0x24>
 8000bd2:	46c0      	nop			; (mov r8, r8)

08000bd4 <__gesf2>:
 8000bd4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000bd6:	0042      	lsls	r2, r0, #1
 8000bd8:	0246      	lsls	r6, r0, #9
 8000bda:	024d      	lsls	r5, r1, #9
 8000bdc:	004c      	lsls	r4, r1, #1
 8000bde:	0fc3      	lsrs	r3, r0, #31
 8000be0:	0a76      	lsrs	r6, r6, #9
 8000be2:	0e12      	lsrs	r2, r2, #24
 8000be4:	0a6d      	lsrs	r5, r5, #9
 8000be6:	0e24      	lsrs	r4, r4, #24
 8000be8:	0fc8      	lsrs	r0, r1, #31
 8000bea:	2aff      	cmp	r2, #255	; 0xff
 8000bec:	d01f      	beq.n	8000c2e <__gesf2+0x5a>
 8000bee:	2cff      	cmp	r4, #255	; 0xff
 8000bf0:	d010      	beq.n	8000c14 <__gesf2+0x40>
 8000bf2:	2a00      	cmp	r2, #0
 8000bf4:	d11f      	bne.n	8000c36 <__gesf2+0x62>
 8000bf6:	4271      	negs	r1, r6
 8000bf8:	4171      	adcs	r1, r6
 8000bfa:	2c00      	cmp	r4, #0
 8000bfc:	d101      	bne.n	8000c02 <__gesf2+0x2e>
 8000bfe:	2d00      	cmp	r5, #0
 8000c00:	d01e      	beq.n	8000c40 <__gesf2+0x6c>
 8000c02:	2900      	cmp	r1, #0
 8000c04:	d10e      	bne.n	8000c24 <__gesf2+0x50>
 8000c06:	4283      	cmp	r3, r0
 8000c08:	d01e      	beq.n	8000c48 <__gesf2+0x74>
 8000c0a:	2102      	movs	r1, #2
 8000c0c:	1e58      	subs	r0, r3, #1
 8000c0e:	4008      	ands	r0, r1
 8000c10:	3801      	subs	r0, #1
 8000c12:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000c14:	2d00      	cmp	r5, #0
 8000c16:	d126      	bne.n	8000c66 <__gesf2+0x92>
 8000c18:	2a00      	cmp	r2, #0
 8000c1a:	d1f4      	bne.n	8000c06 <__gesf2+0x32>
 8000c1c:	4271      	negs	r1, r6
 8000c1e:	4171      	adcs	r1, r6
 8000c20:	2900      	cmp	r1, #0
 8000c22:	d0f0      	beq.n	8000c06 <__gesf2+0x32>
 8000c24:	2800      	cmp	r0, #0
 8000c26:	d1f4      	bne.n	8000c12 <__gesf2+0x3e>
 8000c28:	2001      	movs	r0, #1
 8000c2a:	4240      	negs	r0, r0
 8000c2c:	e7f1      	b.n	8000c12 <__gesf2+0x3e>
 8000c2e:	2e00      	cmp	r6, #0
 8000c30:	d119      	bne.n	8000c66 <__gesf2+0x92>
 8000c32:	2cff      	cmp	r4, #255	; 0xff
 8000c34:	d0ee      	beq.n	8000c14 <__gesf2+0x40>
 8000c36:	2c00      	cmp	r4, #0
 8000c38:	d1e5      	bne.n	8000c06 <__gesf2+0x32>
 8000c3a:	2d00      	cmp	r5, #0
 8000c3c:	d1e3      	bne.n	8000c06 <__gesf2+0x32>
 8000c3e:	e7e4      	b.n	8000c0a <__gesf2+0x36>
 8000c40:	2000      	movs	r0, #0
 8000c42:	2e00      	cmp	r6, #0
 8000c44:	d0e5      	beq.n	8000c12 <__gesf2+0x3e>
 8000c46:	e7e0      	b.n	8000c0a <__gesf2+0x36>
 8000c48:	42a2      	cmp	r2, r4
 8000c4a:	dc05      	bgt.n	8000c58 <__gesf2+0x84>
 8000c4c:	dbea      	blt.n	8000c24 <__gesf2+0x50>
 8000c4e:	42ae      	cmp	r6, r5
 8000c50:	d802      	bhi.n	8000c58 <__gesf2+0x84>
 8000c52:	d3e7      	bcc.n	8000c24 <__gesf2+0x50>
 8000c54:	2000      	movs	r0, #0
 8000c56:	e7dc      	b.n	8000c12 <__gesf2+0x3e>
 8000c58:	4241      	negs	r1, r0
 8000c5a:	4141      	adcs	r1, r0
 8000c5c:	4248      	negs	r0, r1
 8000c5e:	2102      	movs	r1, #2
 8000c60:	4008      	ands	r0, r1
 8000c62:	3801      	subs	r0, #1
 8000c64:	e7d5      	b.n	8000c12 <__gesf2+0x3e>
 8000c66:	2002      	movs	r0, #2
 8000c68:	4240      	negs	r0, r0
 8000c6a:	e7d2      	b.n	8000c12 <__gesf2+0x3e>

08000c6c <__lesf2>:
 8000c6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c6e:	0042      	lsls	r2, r0, #1
 8000c70:	0246      	lsls	r6, r0, #9
 8000c72:	024d      	lsls	r5, r1, #9
 8000c74:	004c      	lsls	r4, r1, #1
 8000c76:	0fc3      	lsrs	r3, r0, #31
 8000c78:	0a76      	lsrs	r6, r6, #9
 8000c7a:	0e12      	lsrs	r2, r2, #24
 8000c7c:	0a6d      	lsrs	r5, r5, #9
 8000c7e:	0e24      	lsrs	r4, r4, #24
 8000c80:	0fc8      	lsrs	r0, r1, #31
 8000c82:	2aff      	cmp	r2, #255	; 0xff
 8000c84:	d00d      	beq.n	8000ca2 <__lesf2+0x36>
 8000c86:	2cff      	cmp	r4, #255	; 0xff
 8000c88:	d00f      	beq.n	8000caa <__lesf2+0x3e>
 8000c8a:	2a00      	cmp	r2, #0
 8000c8c:	d123      	bne.n	8000cd6 <__lesf2+0x6a>
 8000c8e:	4271      	negs	r1, r6
 8000c90:	4171      	adcs	r1, r6
 8000c92:	2c00      	cmp	r4, #0
 8000c94:	d10f      	bne.n	8000cb6 <__lesf2+0x4a>
 8000c96:	2d00      	cmp	r5, #0
 8000c98:	d10d      	bne.n	8000cb6 <__lesf2+0x4a>
 8000c9a:	2000      	movs	r0, #0
 8000c9c:	2e00      	cmp	r6, #0
 8000c9e:	d014      	beq.n	8000cca <__lesf2+0x5e>
 8000ca0:	e00d      	b.n	8000cbe <__lesf2+0x52>
 8000ca2:	2e00      	cmp	r6, #0
 8000ca4:	d110      	bne.n	8000cc8 <__lesf2+0x5c>
 8000ca6:	2cff      	cmp	r4, #255	; 0xff
 8000ca8:	d115      	bne.n	8000cd6 <__lesf2+0x6a>
 8000caa:	2d00      	cmp	r5, #0
 8000cac:	d10c      	bne.n	8000cc8 <__lesf2+0x5c>
 8000cae:	2a00      	cmp	r2, #0
 8000cb0:	d103      	bne.n	8000cba <__lesf2+0x4e>
 8000cb2:	4271      	negs	r1, r6
 8000cb4:	4171      	adcs	r1, r6
 8000cb6:	2900      	cmp	r1, #0
 8000cb8:	d108      	bne.n	8000ccc <__lesf2+0x60>
 8000cba:	4283      	cmp	r3, r0
 8000cbc:	d010      	beq.n	8000ce0 <__lesf2+0x74>
 8000cbe:	2102      	movs	r1, #2
 8000cc0:	1e58      	subs	r0, r3, #1
 8000cc2:	4008      	ands	r0, r1
 8000cc4:	3801      	subs	r0, #1
 8000cc6:	e000      	b.n	8000cca <__lesf2+0x5e>
 8000cc8:	2002      	movs	r0, #2
 8000cca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000ccc:	2800      	cmp	r0, #0
 8000cce:	d1fc      	bne.n	8000cca <__lesf2+0x5e>
 8000cd0:	2001      	movs	r0, #1
 8000cd2:	4240      	negs	r0, r0
 8000cd4:	e7f9      	b.n	8000cca <__lesf2+0x5e>
 8000cd6:	2c00      	cmp	r4, #0
 8000cd8:	d1ef      	bne.n	8000cba <__lesf2+0x4e>
 8000cda:	2d00      	cmp	r5, #0
 8000cdc:	d1ed      	bne.n	8000cba <__lesf2+0x4e>
 8000cde:	e7ee      	b.n	8000cbe <__lesf2+0x52>
 8000ce0:	42a2      	cmp	r2, r4
 8000ce2:	dc05      	bgt.n	8000cf0 <__lesf2+0x84>
 8000ce4:	dbf2      	blt.n	8000ccc <__lesf2+0x60>
 8000ce6:	42ae      	cmp	r6, r5
 8000ce8:	d802      	bhi.n	8000cf0 <__lesf2+0x84>
 8000cea:	d3ef      	bcc.n	8000ccc <__lesf2+0x60>
 8000cec:	2000      	movs	r0, #0
 8000cee:	e7ec      	b.n	8000cca <__lesf2+0x5e>
 8000cf0:	4241      	negs	r1, r0
 8000cf2:	4141      	adcs	r1, r0
 8000cf4:	4248      	negs	r0, r1
 8000cf6:	2102      	movs	r1, #2
 8000cf8:	4008      	ands	r0, r1
 8000cfa:	3801      	subs	r0, #1
 8000cfc:	e7e5      	b.n	8000cca <__lesf2+0x5e>
 8000cfe:	46c0      	nop			; (mov r8, r8)

08000d00 <MX_ADC_Init>:

ADC_HandleTypeDef hadc;

/* ADC init function */
void MX_ADC_Init(void)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b082      	sub	sp, #8
 8000d04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000d06:	003b      	movs	r3, r7
 8000d08:	0018      	movs	r0, r3
 8000d0a:	2308      	movs	r3, #8
 8000d0c:	001a      	movs	r2, r3
 8000d0e:	2100      	movs	r1, #0
 8000d10:	f006 fad1 	bl	80072b6 <memset>
  /* USER CODE BEGIN ADC_Init 1 */

  /* USER CODE END ADC_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8000d14:	4b30      	ldr	r3, [pc, #192]	; (8000dd8 <MX_ADC_Init+0xd8>)
 8000d16:	4a31      	ldr	r2, [pc, #196]	; (8000ddc <MX_ADC_Init+0xdc>)
 8000d18:	601a      	str	r2, [r3, #0]
  hadc.Init.OversamplingMode = DISABLE;
 8000d1a:	4b2f      	ldr	r3, [pc, #188]	; (8000dd8 <MX_ADC_Init+0xd8>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000d20:	4b2d      	ldr	r3, [pc, #180]	; (8000dd8 <MX_ADC_Init+0xd8>)
 8000d22:	2280      	movs	r2, #128	; 0x80
 8000d24:	0612      	lsls	r2, r2, #24
 8000d26:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8000d28:	4b2b      	ldr	r3, [pc, #172]	; (8000dd8 <MX_ADC_Init+0xd8>)
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	609a      	str	r2, [r3, #8]
  hadc.Init.SamplingTime = ADC_SAMPLETIME_160CYCLES_5;
 8000d2e:	4b2a      	ldr	r3, [pc, #168]	; (8000dd8 <MX_ADC_Init+0xd8>)
 8000d30:	2207      	movs	r2, #7
 8000d32:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8000d34:	4b28      	ldr	r3, [pc, #160]	; (8000dd8 <MX_ADC_Init+0xd8>)
 8000d36:	2201      	movs	r2, #1
 8000d38:	611a      	str	r2, [r3, #16]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000d3a:	4b27      	ldr	r3, [pc, #156]	; (8000dd8 <MX_ADC_Init+0xd8>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	60da      	str	r2, [r3, #12]
  hadc.Init.ContinuousConvMode = DISABLE;
 8000d40:	4b25      	ldr	r3, [pc, #148]	; (8000dd8 <MX_ADC_Init+0xd8>)
 8000d42:	2220      	movs	r2, #32
 8000d44:	2100      	movs	r1, #0
 8000d46:	5499      	strb	r1, [r3, r2]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8000d48:	4b23      	ldr	r3, [pc, #140]	; (8000dd8 <MX_ADC_Init+0xd8>)
 8000d4a:	2221      	movs	r2, #33	; 0x21
 8000d4c:	2100      	movs	r1, #0
 8000d4e:	5499      	strb	r1, [r3, r2]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000d50:	4b21      	ldr	r3, [pc, #132]	; (8000dd8 <MX_ADC_Init+0xd8>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000d56:	4b20      	ldr	r3, [pc, #128]	; (8000dd8 <MX_ADC_Init+0xd8>)
 8000d58:	22c2      	movs	r2, #194	; 0xc2
 8000d5a:	32ff      	adds	r2, #255	; 0xff
 8000d5c:	625a      	str	r2, [r3, #36]	; 0x24
  hadc.Init.DMAContinuousRequests = DISABLE;
 8000d5e:	4b1e      	ldr	r3, [pc, #120]	; (8000dd8 <MX_ADC_Init+0xd8>)
 8000d60:	222c      	movs	r2, #44	; 0x2c
 8000d62:	2100      	movs	r1, #0
 8000d64:	5499      	strb	r1, [r3, r2]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000d66:	4b1c      	ldr	r3, [pc, #112]	; (8000dd8 <MX_ADC_Init+0xd8>)
 8000d68:	2204      	movs	r2, #4
 8000d6a:	615a      	str	r2, [r3, #20]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000d6c:	4b1a      	ldr	r3, [pc, #104]	; (8000dd8 <MX_ADC_Init+0xd8>)
 8000d6e:	2200      	movs	r2, #0
 8000d70:	631a      	str	r2, [r3, #48]	; 0x30
  hadc.Init.LowPowerAutoWait = DISABLE;
 8000d72:	4b19      	ldr	r3, [pc, #100]	; (8000dd8 <MX_ADC_Init+0xd8>)
 8000d74:	2200      	movs	r2, #0
 8000d76:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerFrequencyMode = DISABLE;
 8000d78:	4b17      	ldr	r3, [pc, #92]	; (8000dd8 <MX_ADC_Init+0xd8>)
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8000d7e:	4b16      	ldr	r3, [pc, #88]	; (8000dd8 <MX_ADC_Init+0xd8>)
 8000d80:	2200      	movs	r2, #0
 8000d82:	61da      	str	r2, [r3, #28]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8000d84:	4b14      	ldr	r3, [pc, #80]	; (8000dd8 <MX_ADC_Init+0xd8>)
 8000d86:	0018      	movs	r0, r3
 8000d88:	f002 fb90 	bl	80034ac <HAL_ADC_Init>
 8000d8c:	1e03      	subs	r3, r0, #0
 8000d8e:	d001      	beq.n	8000d94 <MX_ADC_Init+0x94>
  {
    Error_Handler();
 8000d90:	f001 fe56 	bl	8002a40 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8000d94:	003b      	movs	r3, r7
 8000d96:	4a12      	ldr	r2, [pc, #72]	; (8000de0 <MX_ADC_Init+0xe0>)
 8000d98:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8000d9a:	003b      	movs	r3, r7
 8000d9c:	2280      	movs	r2, #128	; 0x80
 8000d9e:	0152      	lsls	r2, r2, #5
 8000da0:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000da2:	003a      	movs	r2, r7
 8000da4:	4b0c      	ldr	r3, [pc, #48]	; (8000dd8 <MX_ADC_Init+0xd8>)
 8000da6:	0011      	movs	r1, r2
 8000da8:	0018      	movs	r0, r3
 8000daa:	f002 fe3d 	bl	8003a28 <HAL_ADC_ConfigChannel>
 8000dae:	1e03      	subs	r3, r0, #0
 8000db0:	d001      	beq.n	8000db6 <MX_ADC_Init+0xb6>
  {
    Error_Handler();
 8000db2:	f001 fe45 	bl	8002a40 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 8000db6:	003b      	movs	r3, r7
 8000db8:	4a0a      	ldr	r2, [pc, #40]	; (8000de4 <MX_ADC_Init+0xe4>)
 8000dba:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000dbc:	003a      	movs	r2, r7
 8000dbe:	4b06      	ldr	r3, [pc, #24]	; (8000dd8 <MX_ADC_Init+0xd8>)
 8000dc0:	0011      	movs	r1, r2
 8000dc2:	0018      	movs	r0, r3
 8000dc4:	f002 fe30 	bl	8003a28 <HAL_ADC_ConfigChannel>
 8000dc8:	1e03      	subs	r3, r0, #0
 8000dca:	d001      	beq.n	8000dd0 <MX_ADC_Init+0xd0>
  {
    Error_Handler();
 8000dcc:	f001 fe38 	bl	8002a40 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8000dd0:	46c0      	nop			; (mov r8, r8)
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	b002      	add	sp, #8
 8000dd6:	bd80      	pop	{r7, pc}
 8000dd8:	200000a8 	.word	0x200000a8
 8000ddc:	40012400 	.word	0x40012400
 8000de0:	48040000 	.word	0x48040000
 8000de4:	44020000 	.word	0x44020000

08000de8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b082      	sub	sp, #8
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]

  if(adcHandle->Instance==ADC1)
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	4a0a      	ldr	r2, [pc, #40]	; (8000e20 <HAL_ADC_MspInit+0x38>)
 8000df6:	4293      	cmp	r3, r2
 8000df8:	d10e      	bne.n	8000e18 <HAL_ADC_MspInit+0x30>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000dfa:	4b0a      	ldr	r3, [pc, #40]	; (8000e24 <HAL_ADC_MspInit+0x3c>)
 8000dfc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000dfe:	4b09      	ldr	r3, [pc, #36]	; (8000e24 <HAL_ADC_MspInit+0x3c>)
 8000e00:	2180      	movs	r1, #128	; 0x80
 8000e02:	0089      	lsls	r1, r1, #2
 8000e04:	430a      	orrs	r2, r1
 8000e06:	635a      	str	r2, [r3, #52]	; 0x34

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_COMP_IRQn, 0, 0);
 8000e08:	2200      	movs	r2, #0
 8000e0a:	2100      	movs	r1, #0
 8000e0c:	200c      	movs	r0, #12
 8000e0e:	f002 ffc5 	bl	8003d9c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_COMP_IRQn);
 8000e12:	200c      	movs	r0, #12
 8000e14:	f002 ffd7 	bl	8003dc6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000e18:	46c0      	nop			; (mov r8, r8)
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	b002      	add	sp, #8
 8000e1e:	bd80      	pop	{r7, pc}
 8000e20:	40012400 	.word	0x40012400
 8000e24:	40021000 	.word	0x40021000

08000e28 <HAL_ADC_ConvCpltCallback>:
  }
}

/* USER CODE BEGIN 1 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b086      	sub	sp, #24
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]
//		calcTemp = calcTemp / (int32_t)(*TEMP130_CAL_ADDR - *TEMP30_CAL_ADDR);
//		tempinC = calcTemp + 30;
//		HAL_ADC_Start_IT(hadc);
////	}

	if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC))
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	2204      	movs	r2, #4
 8000e38:	4013      	ands	r3, r2
 8000e3a:	2b04      	cmp	r3, #4
 8000e3c:	d111      	bne.n	8000e62 <HAL_ADC_ConvCpltCallback+0x3a>
	{
		adcParameters.adcRawData[adcParameters.adcIndx] = HAL_ADC_GetValue(hadc);
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	0018      	movs	r0, r3
 8000e42:	f002 fd19 	bl	8003878 <HAL_ADC_GetValue>
 8000e46:	0001      	movs	r1, r0
 8000e48:	4b32      	ldr	r3, [pc, #200]	; (8000f14 <HAL_ADC_ConvCpltCallback+0xec>)
 8000e4a:	7b1b      	ldrb	r3, [r3, #12]
 8000e4c:	001a      	movs	r2, r3
 8000e4e:	b289      	uxth	r1, r1
 8000e50:	4b30      	ldr	r3, [pc, #192]	; (8000f14 <HAL_ADC_ConvCpltCallback+0xec>)
 8000e52:	0052      	lsls	r2, r2, #1
 8000e54:	52d1      	strh	r1, [r2, r3]
		adcParameters.adcIndx++;
 8000e56:	4b2f      	ldr	r3, [pc, #188]	; (8000f14 <HAL_ADC_ConvCpltCallback+0xec>)
 8000e58:	7b1b      	ldrb	r3, [r3, #12]
 8000e5a:	3301      	adds	r3, #1
 8000e5c:	b2da      	uxtb	r2, r3
 8000e5e:	4b2d      	ldr	r3, [pc, #180]	; (8000f14 <HAL_ADC_ConvCpltCallback+0xec>)
 8000e60:	731a      	strb	r2, [r3, #12]
	}

	if(adcParameters.adcIndx >= 2)
 8000e62:	4b2c      	ldr	r3, [pc, #176]	; (8000f14 <HAL_ADC_ConvCpltCallback+0xec>)
 8000e64:	7b1b      	ldrb	r3, [r3, #12]
 8000e66:	2b01      	cmp	r3, #1
 8000e68:	d94f      	bls.n	8000f0a <HAL_ADC_ConvCpltCallback+0xe2>
	{
		adcParameters.adcIndx = 0;
 8000e6a:	4b2a      	ldr	r3, [pc, #168]	; (8000f14 <HAL_ADC_ConvCpltCallback+0xec>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	731a      	strb	r2, [r3, #12]

		volatile int32_t tmpVal = 0;
 8000e70:	2300      	movs	r3, #0
 8000e72:	617b      	str	r3, [r7, #20]
		volatile int32_t volVal = 0;
 8000e74:	2300      	movs	r3, #0
 8000e76:	613b      	str	r3, [r7, #16]

		if((int32_t)adcParameters.adcRawData[0] > (int32_t)adcParameters.adcRawData[1])
 8000e78:	4b26      	ldr	r3, [pc, #152]	; (8000f14 <HAL_ADC_ConvCpltCallback+0xec>)
 8000e7a:	881a      	ldrh	r2, [r3, #0]
 8000e7c:	4b25      	ldr	r3, [pc, #148]	; (8000f14 <HAL_ADC_ConvCpltCallback+0xec>)
 8000e7e:	885b      	ldrh	r3, [r3, #2]
 8000e80:	429a      	cmp	r2, r3
 8000e82:	d906      	bls.n	8000e92 <HAL_ADC_ConvCpltCallback+0x6a>
		{
			tmpVal = (int32_t)adcParameters.adcRawData[1];
 8000e84:	4b23      	ldr	r3, [pc, #140]	; (8000f14 <HAL_ADC_ConvCpltCallback+0xec>)
 8000e86:	885b      	ldrh	r3, [r3, #2]
 8000e88:	617b      	str	r3, [r7, #20]
			volVal = (int32_t)adcParameters.adcRawData[0];
 8000e8a:	4b22      	ldr	r3, [pc, #136]	; (8000f14 <HAL_ADC_ConvCpltCallback+0xec>)
 8000e8c:	881b      	ldrh	r3, [r3, #0]
 8000e8e:	613b      	str	r3, [r7, #16]
 8000e90:	e005      	b.n	8000e9e <HAL_ADC_ConvCpltCallback+0x76>
		}
		else
		{
			tmpVal = (int32_t)adcParameters.adcRawData[0];
 8000e92:	4b20      	ldr	r3, [pc, #128]	; (8000f14 <HAL_ADC_ConvCpltCallback+0xec>)
 8000e94:	881b      	ldrh	r3, [r3, #0]
 8000e96:	617b      	str	r3, [r7, #20]
			volVal = (int32_t)adcParameters.adcRawData[1];
 8000e98:	4b1e      	ldr	r3, [pc, #120]	; (8000f14 <HAL_ADC_ConvCpltCallback+0xec>)
 8000e9a:	885b      	ldrh	r3, [r3, #2]
 8000e9c:	613b      	str	r3, [r7, #16]
		}

		adcParameters.supplyVoltage = 3300 * (*VREFINT_CAL_ADDR) / volVal;
 8000e9e:	4b1e      	ldr	r3, [pc, #120]	; (8000f18 <HAL_ADC_ConvCpltCallback+0xf0>)
 8000ea0:	881b      	ldrh	r3, [r3, #0]
 8000ea2:	001a      	movs	r2, r3
 8000ea4:	4b1d      	ldr	r3, [pc, #116]	; (8000f1c <HAL_ADC_ConvCpltCallback+0xf4>)
 8000ea6:	4353      	muls	r3, r2
 8000ea8:	693a      	ldr	r2, [r7, #16]
 8000eaa:	0011      	movs	r1, r2
 8000eac:	0018      	movs	r0, r3
 8000eae:	f7ff f9bf 	bl	8000230 <__divsi3>
 8000eb2:	0003      	movs	r3, r0
 8000eb4:	0018      	movs	r0, r3
 8000eb6:	f7ff fdbb 	bl	8000a30 <__aeabi_i2f>
 8000eba:	1c02      	adds	r2, r0, #0
 8000ebc:	4b15      	ldr	r3, [pc, #84]	; (8000f14 <HAL_ADC_ConvCpltCallback+0xec>)
 8000ebe:	609a      	str	r2, [r3, #8]

		volatile int32_t calcTemp = 0;
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	60fb      	str	r3, [r7, #12]
		calcTemp = (((int32_t)tmpVal) - (int32_t) *TEMP30_CAL_ADDR);
 8000ec4:	697b      	ldr	r3, [r7, #20]
 8000ec6:	4a16      	ldr	r2, [pc, #88]	; (8000f20 <HAL_ADC_ConvCpltCallback+0xf8>)
 8000ec8:	8812      	ldrh	r2, [r2, #0]
 8000eca:	1a9b      	subs	r3, r3, r2
 8000ecc:	60fb      	str	r3, [r7, #12]
		calcTemp = calcTemp * (int32_t)(130 - 30);
 8000ece:	68fb      	ldr	r3, [r7, #12]
 8000ed0:	2264      	movs	r2, #100	; 0x64
 8000ed2:	4353      	muls	r3, r2
 8000ed4:	60fb      	str	r3, [r7, #12]
		calcTemp = calcTemp / (int32_t)(*TEMP130_CAL_ADDR - *TEMP30_CAL_ADDR);
 8000ed6:	68fb      	ldr	r3, [r7, #12]
 8000ed8:	4a12      	ldr	r2, [pc, #72]	; (8000f24 <HAL_ADC_ConvCpltCallback+0xfc>)
 8000eda:	8812      	ldrh	r2, [r2, #0]
 8000edc:	0011      	movs	r1, r2
 8000ede:	4a10      	ldr	r2, [pc, #64]	; (8000f20 <HAL_ADC_ConvCpltCallback+0xf8>)
 8000ee0:	8812      	ldrh	r2, [r2, #0]
 8000ee2:	1a8a      	subs	r2, r1, r2
 8000ee4:	0011      	movs	r1, r2
 8000ee6:	0018      	movs	r0, r3
 8000ee8:	f7ff f9a2 	bl	8000230 <__divsi3>
 8000eec:	0003      	movs	r3, r0
 8000eee:	60fb      	str	r3, [r7, #12]
		adcParameters.tempCelcius = calcTemp + 30;
 8000ef0:	68fb      	ldr	r3, [r7, #12]
 8000ef2:	331e      	adds	r3, #30
 8000ef4:	001a      	movs	r2, r3
 8000ef6:	4b07      	ldr	r3, [pc, #28]	; (8000f14 <HAL_ADC_ConvCpltCallback+0xec>)
 8000ef8:	605a      	str	r2, [r3, #4]

		if(adcParameters.adcReadEnableFlag)
 8000efa:	4b06      	ldr	r3, [pc, #24]	; (8000f14 <HAL_ADC_ConvCpltCallback+0xec>)
 8000efc:	7b5b      	ldrb	r3, [r3, #13]
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d003      	beq.n	8000f0a <HAL_ADC_ConvCpltCallback+0xe2>
		{
			HAL_ADC_Start_IT(hadc);
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	0018      	movs	r0, r3
 8000f06:	f002 fc45 	bl	8003794 <HAL_ADC_Start_IT>
		}
	}

}
 8000f0a:	46c0      	nop			; (mov r8, r8)
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	b006      	add	sp, #24
 8000f10:	bd80      	pop	{r7, pc}
 8000f12:	46c0      	nop			; (mov r8, r8)
 8000f14:	20000098 	.word	0x20000098
 8000f18:	1ff80078 	.word	0x1ff80078
 8000f1c:	00000ce4 	.word	0x00000ce4
 8000f20:	1ff8007a 	.word	0x1ff8007a
 8000f24:	1ff8007e 	.word	0x1ff8007e

08000f28 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000f28:	b590      	push	{r4, r7, lr}
 8000f2a:	b089      	sub	sp, #36	; 0x24
 8000f2c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f2e:	240c      	movs	r4, #12
 8000f30:	193b      	adds	r3, r7, r4
 8000f32:	0018      	movs	r0, r3
 8000f34:	2314      	movs	r3, #20
 8000f36:	001a      	movs	r2, r3
 8000f38:	2100      	movs	r1, #0
 8000f3a:	f006 f9bc 	bl	80072b6 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f3e:	4b3c      	ldr	r3, [pc, #240]	; (8001030 <MX_GPIO_Init+0x108>)
 8000f40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000f42:	4b3b      	ldr	r3, [pc, #236]	; (8001030 <MX_GPIO_Init+0x108>)
 8000f44:	2101      	movs	r1, #1
 8000f46:	430a      	orrs	r2, r1
 8000f48:	62da      	str	r2, [r3, #44]	; 0x2c
 8000f4a:	4b39      	ldr	r3, [pc, #228]	; (8001030 <MX_GPIO_Init+0x108>)
 8000f4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f4e:	2201      	movs	r2, #1
 8000f50:	4013      	ands	r3, r2
 8000f52:	60bb      	str	r3, [r7, #8]
 8000f54:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f56:	4b36      	ldr	r3, [pc, #216]	; (8001030 <MX_GPIO_Init+0x108>)
 8000f58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000f5a:	4b35      	ldr	r3, [pc, #212]	; (8001030 <MX_GPIO_Init+0x108>)
 8000f5c:	2104      	movs	r1, #4
 8000f5e:	430a      	orrs	r2, r1
 8000f60:	62da      	str	r2, [r3, #44]	; 0x2c
 8000f62:	4b33      	ldr	r3, [pc, #204]	; (8001030 <MX_GPIO_Init+0x108>)
 8000f64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f66:	2204      	movs	r2, #4
 8000f68:	4013      	ands	r3, r2
 8000f6a:	607b      	str	r3, [r7, #4]
 8000f6c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f6e:	4b30      	ldr	r3, [pc, #192]	; (8001030 <MX_GPIO_Init+0x108>)
 8000f70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000f72:	4b2f      	ldr	r3, [pc, #188]	; (8001030 <MX_GPIO_Init+0x108>)
 8000f74:	2102      	movs	r1, #2
 8000f76:	430a      	orrs	r2, r1
 8000f78:	62da      	str	r2, [r3, #44]	; 0x2c
 8000f7a:	4b2d      	ldr	r3, [pc, #180]	; (8001030 <MX_GPIO_Init+0x108>)
 8000f7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f7e:	2202      	movs	r2, #2
 8000f80:	4013      	ands	r3, r2
 8000f82:	603b      	str	r3, [r7, #0]
 8000f84:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LTE_ENABLE_Pin|LTE_PWRKEY_Pin|AT_MODE_Pin, GPIO_PIN_RESET);
 8000f86:	23a0      	movs	r3, #160	; 0xa0
 8000f88:	05db      	lsls	r3, r3, #23
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	2113      	movs	r1, #19
 8000f8e:	0018      	movs	r0, r3
 8000f90:	f003 f93c 	bl	800420c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ULT_ENABLE_Pin|ULT_EMIT_Pin, GPIO_PIN_RESET);
 8000f94:	23c0      	movs	r3, #192	; 0xc0
 8000f96:	011b      	lsls	r3, r3, #4
 8000f98:	4826      	ldr	r0, [pc, #152]	; (8001034 <MX_GPIO_Init+0x10c>)
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	0019      	movs	r1, r3
 8000f9e:	f003 f935 	bl	800420c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = LTE_ENABLE_Pin|LTE_PWRKEY_Pin|AT_MODE_Pin;
 8000fa2:	193b      	adds	r3, r7, r4
 8000fa4:	2213      	movs	r2, #19
 8000fa6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fa8:	193b      	adds	r3, r7, r4
 8000faa:	2201      	movs	r2, #1
 8000fac:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000fae:	193b      	adds	r3, r7, r4
 8000fb0:	2202      	movs	r2, #2
 8000fb2:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fb4:	193b      	adds	r3, r7, r4
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fba:	193a      	adds	r2, r7, r4
 8000fbc:	23a0      	movs	r3, #160	; 0xa0
 8000fbe:	05db      	lsls	r3, r3, #23
 8000fc0:	0011      	movs	r1, r2
 8000fc2:	0018      	movs	r0, r3
 8000fc4:	f002 ffa4 	bl	8003f10 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = ULT_ENABLE_Pin|ULT_EMIT_Pin;
 8000fc8:	0021      	movs	r1, r4
 8000fca:	187b      	adds	r3, r7, r1
 8000fcc:	22c0      	movs	r2, #192	; 0xc0
 8000fce:	0112      	lsls	r2, r2, #4
 8000fd0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fd2:	000c      	movs	r4, r1
 8000fd4:	193b      	adds	r3, r7, r4
 8000fd6:	2201      	movs	r2, #1
 8000fd8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000fda:	193b      	adds	r3, r7, r4
 8000fdc:	2202      	movs	r2, #2
 8000fde:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fe0:	193b      	adds	r3, r7, r4
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fe6:	193b      	adds	r3, r7, r4
 8000fe8:	4a12      	ldr	r2, [pc, #72]	; (8001034 <MX_GPIO_Init+0x10c>)
 8000fea:	0019      	movs	r1, r3
 8000fec:	0010      	movs	r0, r2
 8000fee:	f002 ff8f 	bl	8003f10 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ULT_ECHO_Pin;
 8000ff2:	0021      	movs	r1, r4
 8000ff4:	187b      	adds	r3, r7, r1
 8000ff6:	2220      	movs	r2, #32
 8000ff8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000ffa:	187b      	adds	r3, r7, r1
 8000ffc:	2284      	movs	r2, #132	; 0x84
 8000ffe:	0392      	lsls	r2, r2, #14
 8001000:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001002:	187b      	adds	r3, r7, r1
 8001004:	2201      	movs	r2, #1
 8001006:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(ULT_ECHO_GPIO_Port, &GPIO_InitStruct);
 8001008:	187a      	adds	r2, r7, r1
 800100a:	23a0      	movs	r3, #160	; 0xa0
 800100c:	05db      	lsls	r3, r3, #23
 800100e:	0011      	movs	r1, r2
 8001010:	0018      	movs	r0, r3
 8001012:	f002 ff7d 	bl	8003f10 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8001016:	2200      	movs	r2, #0
 8001018:	2100      	movs	r1, #0
 800101a:	2007      	movs	r0, #7
 800101c:	f002 febe 	bl	8003d9c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8001020:	2007      	movs	r0, #7
 8001022:	f002 fed0 	bl	8003dc6 <HAL_NVIC_EnableIRQ>

}
 8001026:	46c0      	nop			; (mov r8, r8)
 8001028:	46bd      	mov	sp, r7
 800102a:	b009      	add	sp, #36	; 0x24
 800102c:	bd90      	pop	{r4, r7, pc}
 800102e:	46c0      	nop			; (mov r8, r8)
 8001030:	40021000 	.word	0x40021000
 8001034:	50000400 	.word	0x50000400

08001038 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 2 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b082      	sub	sp, #8
 800103c:	af00      	add	r7, sp, #0
 800103e:	0002      	movs	r2, r0
 8001040:	1dbb      	adds	r3, r7, #6
 8001042:	801a      	strh	r2, [r3, #0]
	if(GPIO_Pin == ULT_ECHO_Pin)
 8001044:	1dbb      	adds	r3, r7, #6
 8001046:	881b      	ldrh	r3, [r3, #0]
 8001048:	2b20      	cmp	r3, #32
 800104a:	d10c      	bne.n	8001066 <HAL_GPIO_EXTI_Callback+0x2e>
	{
		if(usrParameters.usrReadyRead)
 800104c:	4b08      	ldr	r3, [pc, #32]	; (8001070 <HAL_GPIO_EXTI_Callback+0x38>)
 800104e:	781b      	ldrb	r3, [r3, #0]
 8001050:	2b00      	cmp	r3, #0
 8001052:	d008      	beq.n	8001066 <HAL_GPIO_EXTI_Callback+0x2e>
		{
			usrParameters.usrReadyRead = 0;
 8001054:	4b06      	ldr	r3, [pc, #24]	; (8001070 <HAL_GPIO_EXTI_Callback+0x38>)
 8001056:	2200      	movs	r2, #0
 8001058:	701a      	strb	r2, [r3, #0]
			usrParameters.measurementValue = __HAL_TIM_GET_COUNTER(&htim2);
 800105a:	4b06      	ldr	r3, [pc, #24]	; (8001074 <HAL_GPIO_EXTI_Callback+0x3c>)
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001060:	b29a      	uxth	r2, r3
 8001062:	4b03      	ldr	r3, [pc, #12]	; (8001070 <HAL_GPIO_EXTI_Callback+0x38>)
 8001064:	80da      	strh	r2, [r3, #6]
		}
	}
}
 8001066:	46c0      	nop			; (mov r8, r8)
 8001068:	46bd      	mov	sp, r7
 800106a:	b002      	add	sp, #8
 800106c:	bd80      	pop	{r7, pc}
 800106e:	46c0      	nop			; (mov r8, r8)
 8001070:	200006d4 	.word	0x200006d4
 8001074:	20000384 	.word	0x20000384

08001078 <LTEInitParams>:
#include "waste.h"

lteParams_typedef lteParameters;
lteMessages_typedef lteMessages;

void LTEInitParams() {
 8001078:	b580      	push	{r7, lr}
 800107a:	af00      	add	r7, sp, #0
	strcpy(lteMessages.AT, "AT\r");
 800107c:	4a90      	ldr	r2, [pc, #576]	; (80012c0 <LTEInitParams+0x248>)
 800107e:	4b91      	ldr	r3, [pc, #580]	; (80012c4 <LTEInitParams+0x24c>)
 8001080:	0010      	movs	r0, r2
 8001082:	0019      	movs	r1, r3
 8001084:	2304      	movs	r3, #4
 8001086:	001a      	movs	r2, r3
 8001088:	f006 f90c 	bl	80072a4 <memcpy>
	strcpy(lteMessages.ATI, "ATI\r");
 800108c:	4b8c      	ldr	r3, [pc, #560]	; (80012c0 <LTEInitParams+0x248>)
 800108e:	4a8e      	ldr	r2, [pc, #568]	; (80012c8 <LTEInitParams+0x250>)
 8001090:	3304      	adds	r3, #4
 8001092:	0011      	movs	r1, r2
 8001094:	2205      	movs	r2, #5
 8001096:	0018      	movs	r0, r3
 8001098:	f006 f904 	bl	80072a4 <memcpy>
	strcpy(lteMessages.AT_QPOWD, "AT+QPOWD=1\r");
 800109c:	4b88      	ldr	r3, [pc, #544]	; (80012c0 <LTEInitParams+0x248>)
 800109e:	2209      	movs	r2, #9
 80010a0:	498a      	ldr	r1, [pc, #552]	; (80012cc <LTEInitParams+0x254>)
 80010a2:	189b      	adds	r3, r3, r2
 80010a4:	220c      	movs	r2, #12
 80010a6:	0018      	movs	r0, r3
 80010a8:	f006 f8fc 	bl	80072a4 <memcpy>
	strcpy(lteMessages.AT_CGSN, "AT+CGSN\r");
 80010ac:	4b84      	ldr	r3, [pc, #528]	; (80012c0 <LTEInitParams+0x248>)
 80010ae:	2215      	movs	r2, #21
 80010b0:	4987      	ldr	r1, [pc, #540]	; (80012d0 <LTEInitParams+0x258>)
 80010b2:	189b      	adds	r3, r3, r2
 80010b4:	2209      	movs	r2, #9
 80010b6:	0018      	movs	r0, r3
 80010b8:	f006 f8f4 	bl	80072a4 <memcpy>
	strcpy(lteMessages.AT_QIOPEN, "AT+QIOPEN=1,0,\"TCP\",\"listener.aws.afatek.com.tr\",20000\r");
 80010bc:	4a85      	ldr	r2, [pc, #532]	; (80012d4 <LTEInitParams+0x25c>)
 80010be:	4b86      	ldr	r3, [pc, #536]	; (80012d8 <LTEInitParams+0x260>)
 80010c0:	0010      	movs	r0, r2
 80010c2:	0019      	movs	r1, r3
 80010c4:	2338      	movs	r3, #56	; 0x38
 80010c6:	001a      	movs	r2, r3
 80010c8:	f006 f8ec 	bl	80072a4 <memcpy>
	lteMessages.AT_QIOPEN[10] = ConvertIdToChar(lteParameters.contexId);
 80010cc:	4a83      	ldr	r2, [pc, #524]	; (80012dc <LTEInitParams+0x264>)
 80010ce:	2387      	movs	r3, #135	; 0x87
 80010d0:	005b      	lsls	r3, r3, #1
 80010d2:	5cd3      	ldrb	r3, [r2, r3]
 80010d4:	0018      	movs	r0, r3
 80010d6:	f000 fef5 	bl	8001ec4 <ConvertIdToChar>
 80010da:	0003      	movs	r3, r0
 80010dc:	0019      	movs	r1, r3
 80010de:	4b78      	ldr	r3, [pc, #480]	; (80012c0 <LTEInitParams+0x248>)
 80010e0:	224d      	movs	r2, #77	; 0x4d
 80010e2:	5499      	strb	r1, [r3, r2]
	lteMessages.AT_QIOPEN[12] = ConvertIdToChar(lteParameters.sessionId);
 80010e4:	4a7d      	ldr	r2, [pc, #500]	; (80012dc <LTEInitParams+0x264>)
 80010e6:	2310      	movs	r3, #16
 80010e8:	33ff      	adds	r3, #255	; 0xff
 80010ea:	5cd3      	ldrb	r3, [r2, r3]
 80010ec:	0018      	movs	r0, r3
 80010ee:	f000 fee9 	bl	8001ec4 <ConvertIdToChar>
 80010f2:	0003      	movs	r3, r0
 80010f4:	0019      	movs	r1, r3
 80010f6:	4b72      	ldr	r3, [pc, #456]	; (80012c0 <LTEInitParams+0x248>)
 80010f8:	224f      	movs	r2, #79	; 0x4f
 80010fa:	5499      	strb	r1, [r3, r2]
	strcpy(lteMessages.AT_QISEND, "AT+QISEND=0,215\r");
 80010fc:	4a78      	ldr	r2, [pc, #480]	; (80012e0 <LTEInitParams+0x268>)
 80010fe:	4b79      	ldr	r3, [pc, #484]	; (80012e4 <LTEInitParams+0x26c>)
 8001100:	0010      	movs	r0, r2
 8001102:	0019      	movs	r1, r3
 8001104:	2311      	movs	r3, #17
 8001106:	001a      	movs	r2, r3
 8001108:	f006 f8cc 	bl	80072a4 <memcpy>
	lteMessages.AT_QISEND[10] = ConvertIdToChar(lteParameters.sessionId);
 800110c:	4a73      	ldr	r2, [pc, #460]	; (80012dc <LTEInitParams+0x264>)
 800110e:	2310      	movs	r3, #16
 8001110:	33ff      	adds	r3, #255	; 0xff
 8001112:	5cd3      	ldrb	r3, [r2, r3]
 8001114:	0018      	movs	r0, r3
 8001116:	f000 fed5 	bl	8001ec4 <ConvertIdToChar>
 800111a:	0003      	movs	r3, r0
 800111c:	0019      	movs	r1, r3
 800111e:	4b68      	ldr	r3, [pc, #416]	; (80012c0 <LTEInitParams+0x248>)
 8001120:	2289      	movs	r2, #137	; 0x89
 8001122:	5499      	strb	r1, [r3, r2]
	strcpy(lteMessages.AT_QIRD, "AT+QIRD=0,50\r");
 8001124:	4a70      	ldr	r2, [pc, #448]	; (80012e8 <LTEInitParams+0x270>)
 8001126:	4b71      	ldr	r3, [pc, #452]	; (80012ec <LTEInitParams+0x274>)
 8001128:	0010      	movs	r0, r2
 800112a:	0019      	movs	r1, r3
 800112c:	230e      	movs	r3, #14
 800112e:	001a      	movs	r2, r3
 8001130:	f006 f8b8 	bl	80072a4 <memcpy>
	lteMessages.AT_QIRD[8] = ConvertIdToChar(lteParameters.sessionId);
 8001134:	4a69      	ldr	r2, [pc, #420]	; (80012dc <LTEInitParams+0x264>)
 8001136:	2310      	movs	r3, #16
 8001138:	33ff      	adds	r3, #255	; 0xff
 800113a:	5cd3      	ldrb	r3, [r2, r3]
 800113c:	0018      	movs	r0, r3
 800113e:	f000 fec1 	bl	8001ec4 <ConvertIdToChar>
 8001142:	0003      	movs	r3, r0
 8001144:	0019      	movs	r1, r3
 8001146:	4b5e      	ldr	r3, [pc, #376]	; (80012c0 <LTEInitParams+0x248>)
 8001148:	2297      	movs	r2, #151	; 0x97
 800114a:	5499      	strb	r1, [r3, r2]
	strcpy(lteMessages.AT_QICLOSE, "AT+QICLOSE=0\r");
 800114c:	4b5c      	ldr	r3, [pc, #368]	; (80012c0 <LTEInitParams+0x248>)
 800114e:	229c      	movs	r2, #156	; 0x9c
 8001150:	4967      	ldr	r1, [pc, #412]	; (80012f0 <LTEInitParams+0x278>)
 8001152:	189b      	adds	r3, r3, r2
 8001154:	220e      	movs	r2, #14
 8001156:	0018      	movs	r0, r3
 8001158:	f006 f8a4 	bl	80072a4 <memcpy>
	lteMessages.AT_QICLOSE[11] = ConvertIdToChar(lteParameters.sessionId);
 800115c:	4a5f      	ldr	r2, [pc, #380]	; (80012dc <LTEInitParams+0x264>)
 800115e:	2310      	movs	r3, #16
 8001160:	33ff      	adds	r3, #255	; 0xff
 8001162:	5cd3      	ldrb	r3, [r2, r3]
 8001164:	0018      	movs	r0, r3
 8001166:	f000 fead 	bl	8001ec4 <ConvertIdToChar>
 800116a:	0003      	movs	r3, r0
 800116c:	0019      	movs	r1, r3
 800116e:	4b54      	ldr	r3, [pc, #336]	; (80012c0 <LTEInitParams+0x248>)
 8001170:	22a7      	movs	r2, #167	; 0xa7
 8001172:	5499      	strb	r1, [r3, r2]
	strcpy(lteMessages.AT_QIACT, "AT+QIACT=1\r");
 8001174:	4b52      	ldr	r3, [pc, #328]	; (80012c0 <LTEInitParams+0x248>)
 8001176:	22aa      	movs	r2, #170	; 0xaa
 8001178:	495e      	ldr	r1, [pc, #376]	; (80012f4 <LTEInitParams+0x27c>)
 800117a:	189b      	adds	r3, r3, r2
 800117c:	220c      	movs	r2, #12
 800117e:	0018      	movs	r0, r3
 8001180:	f006 f890 	bl	80072a4 <memcpy>
	lteMessages.AT_QIACT[9] = ConvertIdToChar(lteParameters.contexId);
 8001184:	4a55      	ldr	r2, [pc, #340]	; (80012dc <LTEInitParams+0x264>)
 8001186:	2387      	movs	r3, #135	; 0x87
 8001188:	005b      	lsls	r3, r3, #1
 800118a:	5cd3      	ldrb	r3, [r2, r3]
 800118c:	0018      	movs	r0, r3
 800118e:	f000 fe99 	bl	8001ec4 <ConvertIdToChar>
 8001192:	0003      	movs	r3, r0
 8001194:	0019      	movs	r1, r3
 8001196:	4b4a      	ldr	r3, [pc, #296]	; (80012c0 <LTEInitParams+0x248>)
 8001198:	22b3      	movs	r2, #179	; 0xb3
 800119a:	5499      	strb	r1, [r3, r2]
	strcpy(lteMessages.AT_QIDEACT, "AT+QIDEACT=1\r");
 800119c:	4b48      	ldr	r3, [pc, #288]	; (80012c0 <LTEInitParams+0x248>)
 800119e:	22b6      	movs	r2, #182	; 0xb6
 80011a0:	4955      	ldr	r1, [pc, #340]	; (80012f8 <LTEInitParams+0x280>)
 80011a2:	189b      	adds	r3, r3, r2
 80011a4:	220e      	movs	r2, #14
 80011a6:	0018      	movs	r0, r3
 80011a8:	f006 f87c 	bl	80072a4 <memcpy>
	lteMessages.AT_QIDEACT[11] = ConvertIdToChar(lteParameters.contexId);
 80011ac:	4a4b      	ldr	r2, [pc, #300]	; (80012dc <LTEInitParams+0x264>)
 80011ae:	2387      	movs	r3, #135	; 0x87
 80011b0:	005b      	lsls	r3, r3, #1
 80011b2:	5cd3      	ldrb	r3, [r2, r3]
 80011b4:	0018      	movs	r0, r3
 80011b6:	f000 fe85 	bl	8001ec4 <ConvertIdToChar>
 80011ba:	0003      	movs	r3, r0
 80011bc:	0019      	movs	r1, r3
 80011be:	4b40      	ldr	r3, [pc, #256]	; (80012c0 <LTEInitParams+0x248>)
 80011c0:	22c1      	movs	r2, #193	; 0xc1
 80011c2:	5499      	strb	r1, [r3, r2]
	strcpy(lteMessages.AT_QICSGP, "AT+QICSGP=1,1,\"mgb\",\"\",\"\",3\r");
 80011c4:	4b3e      	ldr	r3, [pc, #248]	; (80012c0 <LTEInitParams+0x248>)
 80011c6:	22c4      	movs	r2, #196	; 0xc4
 80011c8:	494c      	ldr	r1, [pc, #304]	; (80012fc <LTEInitParams+0x284>)
 80011ca:	189b      	adds	r3, r3, r2
 80011cc:	221d      	movs	r2, #29
 80011ce:	0018      	movs	r0, r3
 80011d0:	f006 f868 	bl	80072a4 <memcpy>
	lteMessages.AT_QICSGP[10] = ConvertIdToChar(lteParameters.contexId);
 80011d4:	4a41      	ldr	r2, [pc, #260]	; (80012dc <LTEInitParams+0x264>)
 80011d6:	2387      	movs	r3, #135	; 0x87
 80011d8:	005b      	lsls	r3, r3, #1
 80011da:	5cd3      	ldrb	r3, [r2, r3]
 80011dc:	0018      	movs	r0, r3
 80011de:	f000 fe71 	bl	8001ec4 <ConvertIdToChar>
 80011e2:	0003      	movs	r3, r0
 80011e4:	0019      	movs	r1, r3
 80011e6:	4b36      	ldr	r3, [pc, #216]	; (80012c0 <LTEInitParams+0x248>)
 80011e8:	22ce      	movs	r2, #206	; 0xce
 80011ea:	5499      	strb	r1, [r3, r2]
	strcpy(lteMessages.AT_QGPS_ON, "AT+QGPS=1\r");
 80011ec:	4b34      	ldr	r3, [pc, #208]	; (80012c0 <LTEInitParams+0x248>)
 80011ee:	221e      	movs	r2, #30
 80011f0:	4943      	ldr	r1, [pc, #268]	; (8001300 <LTEInitParams+0x288>)
 80011f2:	189b      	adds	r3, r3, r2
 80011f4:	220b      	movs	r2, #11
 80011f6:	0018      	movs	r0, r3
 80011f8:	f006 f854 	bl	80072a4 <memcpy>
	strcpy(lteMessages.AT_QGPS_OFF, "AT+QGPSEND\r");
 80011fc:	4b30      	ldr	r3, [pc, #192]	; (80012c0 <LTEInitParams+0x248>)
 80011fe:	2229      	movs	r2, #41	; 0x29
 8001200:	4940      	ldr	r1, [pc, #256]	; (8001304 <LTEInitParams+0x28c>)
 8001202:	189b      	adds	r3, r3, r2
 8001204:	220c      	movs	r2, #12
 8001206:	0018      	movs	r0, r3
 8001208:	f006 f84c 	bl	80072a4 <memcpy>
	strcpy(lteMessages.AT_QGPSLOC, "AT+QGPSLOC=2\r");
 800120c:	4b2c      	ldr	r3, [pc, #176]	; (80012c0 <LTEInitParams+0x248>)
 800120e:	2235      	movs	r2, #53	; 0x35
 8001210:	493d      	ldr	r1, [pc, #244]	; (8001308 <LTEInitParams+0x290>)
 8001212:	189b      	adds	r3, r3, r2
 8001214:	220e      	movs	r2, #14
 8001216:	0018      	movs	r0, r3
 8001218:	f006 f844 	bl	80072a4 <memcpy>
	strcpy(lteMessages.AT_CFUN, "AT+CFUN=1,1\r");
 800121c:	4b28      	ldr	r3, [pc, #160]	; (80012c0 <LTEInitParams+0x248>)
 800121e:	22e1      	movs	r2, #225	; 0xe1
 8001220:	493a      	ldr	r1, [pc, #232]	; (800130c <LTEInitParams+0x294>)
 8001222:	189b      	adds	r3, r3, r2
 8001224:	220d      	movs	r2, #13
 8001226:	0018      	movs	r0, r3
 8001228:	f006 f83c 	bl	80072a4 <memcpy>
	strcpy(lteMessages.AT_CFUNS, "AT+CFUN=0\r");
 800122c:	4b24      	ldr	r3, [pc, #144]	; (80012c0 <LTEInitParams+0x248>)
 800122e:	22ee      	movs	r2, #238	; 0xee
 8001230:	4937      	ldr	r1, [pc, #220]	; (8001310 <LTEInitParams+0x298>)
 8001232:	189b      	adds	r3, r3, r2
 8001234:	220b      	movs	r2, #11
 8001236:	0018      	movs	r0, r3
 8001238:	f006 f834 	bl	80072a4 <memcpy>
	strcpy(lteMessages.AT_CIMI, "AT+CIMI\r");
 800123c:	4a20      	ldr	r2, [pc, #128]	; (80012c0 <LTEInitParams+0x248>)
 800123e:	2326      	movs	r3, #38	; 0x26
 8001240:	33ff      	adds	r3, #255	; 0xff
 8001242:	4934      	ldr	r1, [pc, #208]	; (8001314 <LTEInitParams+0x29c>)
 8001244:	18d3      	adds	r3, r2, r3
 8001246:	2209      	movs	r2, #9
 8001248:	0018      	movs	r0, r3
 800124a:	f006 f82b 	bl	80072a4 <memcpy>
	strcpy(lteMessages.AT_QGPSCFG, "AT+QGPSCFG=\"nmeasrc\",1\r");
 800124e:	4b1c      	ldr	r3, [pc, #112]	; (80012c0 <LTEInitParams+0x248>)
 8001250:	22f9      	movs	r2, #249	; 0xf9
 8001252:	4931      	ldr	r1, [pc, #196]	; (8001318 <LTEInitParams+0x2a0>)
 8001254:	189b      	adds	r3, r3, r2
 8001256:	2218      	movs	r2, #24
 8001258:	0018      	movs	r0, r3
 800125a:	f006 f823 	bl	80072a4 <memcpy>
	strcpy(lteMessages.AT_QGPSGNMEA, "AT+QGPSGNMEA=\"GGA\"\r");
 800125e:	4a18      	ldr	r2, [pc, #96]	; (80012c0 <LTEInitParams+0x248>)
 8001260:	2312      	movs	r3, #18
 8001262:	33ff      	adds	r3, #255	; 0xff
 8001264:	492d      	ldr	r1, [pc, #180]	; (800131c <LTEInitParams+0x2a4>)
 8001266:	18d3      	adds	r3, r2, r3
 8001268:	2214      	movs	r2, #20
 800126a:	0018      	movs	r0, r3
 800126c:	f006 f81a 	bl	80072a4 <memcpy>
	strcpy(lteMessages.POWER_ON, "POWER_ON");
 8001270:	4a2b      	ldr	r2, [pc, #172]	; (8001320 <LTEInitParams+0x2a8>)
 8001272:	4b2c      	ldr	r3, [pc, #176]	; (8001324 <LTEInitParams+0x2ac>)
 8001274:	0010      	movs	r0, r2
 8001276:	0019      	movs	r1, r3
 8001278:	2309      	movs	r3, #9
 800127a:	001a      	movs	r2, r3
 800127c:	f006 f812 	bl	80072a4 <memcpy>
	strcpy(lteMessages.POWER_OFF, "POWER_OFF");
 8001280:	4a29      	ldr	r2, [pc, #164]	; (8001328 <LTEInitParams+0x2b0>)
 8001282:	4b2a      	ldr	r3, [pc, #168]	; (800132c <LTEInitParams+0x2b4>)
 8001284:	0010      	movs	r0, r2
 8001286:	0019      	movs	r1, r3
 8001288:	230a      	movs	r3, #10
 800128a:	001a      	movs	r2, r3
 800128c:	f006 f80a 	bl	80072a4 <memcpy>
	strcpy(lteMessages.SENDDATA, "SENDDATA");
 8001290:	4a27      	ldr	r2, [pc, #156]	; (8001330 <LTEInitParams+0x2b8>)
 8001292:	4b28      	ldr	r3, [pc, #160]	; (8001334 <LTEInitParams+0x2bc>)
 8001294:	0010      	movs	r0, r2
 8001296:	0019      	movs	r1, r3
 8001298:	2309      	movs	r3, #9
 800129a:	001a      	movs	r2, r3
 800129c:	f006 f802 	bl	80072a4 <memcpy>

	memset(lteParameters.latitudeData, '*', 11);
 80012a0:	4b25      	ldr	r3, [pc, #148]	; (8001338 <LTEInitParams+0x2c0>)
 80012a2:	220b      	movs	r2, #11
 80012a4:	212a      	movs	r1, #42	; 0x2a
 80012a6:	0018      	movs	r0, r3
 80012a8:	f006 f805 	bl	80072b6 <memset>
	memset(lteParameters.longitudeData, '*', 11);
 80012ac:	4b23      	ldr	r3, [pc, #140]	; (800133c <LTEInitParams+0x2c4>)
 80012ae:	220b      	movs	r2, #11
 80012b0:	212a      	movs	r1, #42	; 0x2a
 80012b2:	0018      	movs	r0, r3
 80012b4:	f005 ffff 	bl	80072b6 <memset>
}
 80012b8:	46c0      	nop			; (mov r8, r8)
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bd80      	pop	{r7, pc}
 80012be:	46c0      	nop			; (mov r8, r8)
 80012c0:	20000104 	.word	0x20000104
 80012c4:	08007b18 	.word	0x08007b18
 80012c8:	08007b1c 	.word	0x08007b1c
 80012cc:	08007b24 	.word	0x08007b24
 80012d0:	08007b30 	.word	0x08007b30
 80012d4:	20000147 	.word	0x20000147
 80012d8:	08007b3c 	.word	0x08007b3c
 80012dc:	2000024c 	.word	0x2000024c
 80012e0:	20000183 	.word	0x20000183
 80012e4:	08007b74 	.word	0x08007b74
 80012e8:	20000193 	.word	0x20000193
 80012ec:	08007b88 	.word	0x08007b88
 80012f0:	08007b98 	.word	0x08007b98
 80012f4:	08007ba8 	.word	0x08007ba8
 80012f8:	08007bb4 	.word	0x08007bb4
 80012fc:	08007bc4 	.word	0x08007bc4
 8001300:	08007be4 	.word	0x08007be4
 8001304:	08007bf0 	.word	0x08007bf0
 8001308:	08007bfc 	.word	0x08007bfc
 800130c:	08007c0c 	.word	0x08007c0c
 8001310:	08007c1c 	.word	0x08007c1c
 8001314:	08007c28 	.word	0x08007c28
 8001318:	08007c34 	.word	0x08007c34
 800131c:	08007c4c 	.word	0x08007c4c
 8001320:	2000023a 	.word	0x2000023a
 8001324:	08007c60 	.word	0x08007c60
 8001328:	20000242 	.word	0x20000242
 800132c:	08007c6c 	.word	0x08007c6c
 8001330:	20000232 	.word	0x20000232
 8001334:	08007c78 	.word	0x08007c78
 8001338:	2000026a 	.word	0x2000026a
 800133c:	20000275 	.word	0x20000275

08001340 <LTEPowerOn>:

void LTEPowerOn() {
 8001340:	b580      	push	{r7, lr}
 8001342:	af00      	add	r7, sp, #0

	DebugSendData("LTE Power On", 12);
 8001344:	4b12      	ldr	r3, [pc, #72]	; (8001390 <LTEPowerOn+0x50>)
 8001346:	210c      	movs	r1, #12
 8001348:	0018      	movs	r0, r3
 800134a:	f001 ff8b 	bl	8003264 <DebugSendData>
	LTEActiveBuffer();
 800134e:	f000 fbd3 	bl	8001af8 <LTEActiveBuffer>
	HAL_GPIO_WritePin(LTE_PWRKEY_GPIO_Port, LTE_PWRKEY_Pin, GPIO_PIN_SET); // LTE module power key pressed
 8001352:	23a0      	movs	r3, #160	; 0xa0
 8001354:	05db      	lsls	r3, r3, #23
 8001356:	2201      	movs	r2, #1
 8001358:	2101      	movs	r1, #1
 800135a:	0018      	movs	r0, r3
 800135c:	f002 ff56 	bl	800420c <HAL_GPIO_WritePin>
	HAL_Delay(LTE_PWRKEY_ENABLE_TIME); // Wait about 2000 ms for process
 8001360:	23fa      	movs	r3, #250	; 0xfa
 8001362:	00db      	lsls	r3, r3, #3
 8001364:	0018      	movs	r0, r3
 8001366:	f002 f861 	bl	800342c <HAL_Delay>
	HAL_GPIO_WritePin(LTE_PWRKEY_GPIO_Port, LTE_PWRKEY_Pin, GPIO_PIN_RESET); // LTE module power key released
 800136a:	23a0      	movs	r3, #160	; 0xa0
 800136c:	05db      	lsls	r3, r3, #23
 800136e:	2200      	movs	r2, #0
 8001370:	2101      	movs	r1, #1
 8001372:	0018      	movs	r0, r3
 8001374:	f002 ff4a 	bl	800420c <HAL_GPIO_WritePin>
	LTEResponseParserBuffer(60000, lteMessages.POWER_ON, sizeof(lteMessages.POWER_ON));
 8001378:	4b06      	ldr	r3, [pc, #24]	; (8001394 <LTEPowerOn+0x54>)
 800137a:	4807      	ldr	r0, [pc, #28]	; (8001398 <LTEPowerOn+0x58>)
 800137c:	2208      	movs	r2, #8
 800137e:	0019      	movs	r1, r3
 8001380:	f000 fc14 	bl	8001bac <LTEResponseParserBuffer>
	LTEPassiveBuffer();
 8001384:	f000 fbd6 	bl	8001b34 <LTEPassiveBuffer>
}
 8001388:	46c0      	nop			; (mov r8, r8)
 800138a:	46bd      	mov	sp, r7
 800138c:	bd80      	pop	{r7, pc}
 800138e:	46c0      	nop			; (mov r8, r8)
 8001390:	08007c84 	.word	0x08007c84
 8001394:	2000023a 	.word	0x2000023a
 8001398:	0000ea60 	.word	0x0000ea60

0800139c <LTEPowerOff>:

void LTEPowerOff() {
 800139c:	b580      	push	{r7, lr}
 800139e:	b082      	sub	sp, #8
 80013a0:	af00      	add	r7, sp, #0

	DebugSendData("LTE Power Off", 13);
 80013a2:	4b1d      	ldr	r3, [pc, #116]	; (8001418 <LTEPowerOff+0x7c>)
 80013a4:	210d      	movs	r1, #13
 80013a6:	0018      	movs	r0, r3
 80013a8:	f001 ff5c 	bl	8003264 <DebugSendData>
	LTEActiveBuffer();
 80013ac:	f000 fba4 	bl	8001af8 <LTEActiveBuffer>
	HAL_GPIO_WritePin(LTE_PWRKEY_GPIO_Port, LTE_PWRKEY_Pin, GPIO_PIN_SET); // LTE module power key pressed
 80013b0:	23a0      	movs	r3, #160	; 0xa0
 80013b2:	05db      	lsls	r3, r3, #23
 80013b4:	2201      	movs	r2, #1
 80013b6:	2101      	movs	r1, #1
 80013b8:	0018      	movs	r0, r3
 80013ba:	f002 ff27 	bl	800420c <HAL_GPIO_WritePin>
	HAL_Delay(LTE_PWRKEY_DISABLE_TIME); // Wait about 2000 ms for process
 80013be:	4b17      	ldr	r3, [pc, #92]	; (800141c <LTEPowerOff+0x80>)
 80013c0:	0018      	movs	r0, r3
 80013c2:	f002 f833 	bl	800342c <HAL_Delay>
	HAL_GPIO_WritePin(LTE_PWRKEY_GPIO_Port, LTE_PWRKEY_Pin, GPIO_PIN_RESET); // LTE module power key released
 80013c6:	23a0      	movs	r3, #160	; 0xa0
 80013c8:	05db      	lsls	r3, r3, #23
 80013ca:	2200      	movs	r2, #0
 80013cc:	2101      	movs	r1, #1
 80013ce:	0018      	movs	r0, r3
 80013d0:	f002 ff1c 	bl	800420c <HAL_GPIO_WritePin>
	for (int i = 0; i < 15; ++i) {
 80013d4:	2300      	movs	r3, #0
 80013d6:	607b      	str	r3, [r7, #4]
 80013d8:	e015      	b.n	8001406 <LTEPowerOff+0x6a>
		LTEResponseParserBuffer(2000, lteMessages.POWER_OFF, sizeof(lteMessages.POWER_OFF));
 80013da:	4911      	ldr	r1, [pc, #68]	; (8001420 <LTEPowerOff+0x84>)
 80013dc:	23fa      	movs	r3, #250	; 0xfa
 80013de:	00db      	lsls	r3, r3, #3
 80013e0:	2209      	movs	r2, #9
 80013e2:	0018      	movs	r0, r3
 80013e4:	f000 fbe2 	bl	8001bac <LTEResponseParserBuffer>
		if (lteParameters.uartResMessage == MESG_POWERDOWN) {
 80013e8:	4a0e      	ldr	r2, [pc, #56]	; (8001424 <LTEPowerOff+0x88>)
 80013ea:	2386      	movs	r3, #134	; 0x86
 80013ec:	005b      	lsls	r3, r3, #1
 80013ee:	5cd3      	ldrb	r3, [r2, r3]
 80013f0:	2b02      	cmp	r3, #2
 80013f2:	d105      	bne.n	8001400 <LTEPowerOff+0x64>
			DebugSendData("LTE Power Passive", 17);
 80013f4:	4b0c      	ldr	r3, [pc, #48]	; (8001428 <LTEPowerOff+0x8c>)
 80013f6:	2111      	movs	r1, #17
 80013f8:	0018      	movs	r0, r3
 80013fa:	f001 ff33 	bl	8003264 <DebugSendData>
			break;
 80013fe:	e005      	b.n	800140c <LTEPowerOff+0x70>
	for (int i = 0; i < 15; ++i) {
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	3301      	adds	r3, #1
 8001404:	607b      	str	r3, [r7, #4]
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	2b0e      	cmp	r3, #14
 800140a:	dde6      	ble.n	80013da <LTEPowerOff+0x3e>
		}
	}
	LTEPassiveBuffer();
 800140c:	f000 fb92 	bl	8001b34 <LTEPassiveBuffer>
}
 8001410:	46c0      	nop			; (mov r8, r8)
 8001412:	46bd      	mov	sp, r7
 8001414:	b002      	add	sp, #8
 8001416:	bd80      	pop	{r7, pc}
 8001418:	08007c94 	.word	0x08007c94
 800141c:	00001388 	.word	0x00001388
 8001420:	20000242 	.word	0x20000242
 8001424:	2000024c 	.word	0x2000024c
 8001428:	08007ca4 	.word	0x08007ca4

0800142c <LTEEnable>:

void LTEEnable() {
 800142c:	b580      	push	{r7, lr}
 800142e:	af00      	add	r7, sp, #0
	DebugSendData("LTE Enable", 10);
 8001430:	4b09      	ldr	r3, [pc, #36]	; (8001458 <LTEEnable+0x2c>)
 8001432:	210a      	movs	r1, #10
 8001434:	0018      	movs	r0, r3
 8001436:	f001 ff15 	bl	8003264 <DebugSendData>
	HAL_GPIO_WritePin(LTE_ENABLE_GPIO_Port, LTE_ENABLE_Pin, GPIO_PIN_SET); // LTE module power key pressed
 800143a:	23a0      	movs	r3, #160	; 0xa0
 800143c:	05db      	lsls	r3, r3, #23
 800143e:	2201      	movs	r2, #1
 8001440:	2102      	movs	r1, #2
 8001442:	0018      	movs	r0, r3
 8001444:	f002 fee2 	bl	800420c <HAL_GPIO_WritePin>
	HAL_Delay(1000);
 8001448:	23fa      	movs	r3, #250	; 0xfa
 800144a:	009b      	lsls	r3, r3, #2
 800144c:	0018      	movs	r0, r3
 800144e:	f001 ffed 	bl	800342c <HAL_Delay>
}
 8001452:	46c0      	nop			; (mov r8, r8)
 8001454:	46bd      	mov	sp, r7
 8001456:	bd80      	pop	{r7, pc}
 8001458:	08007cb8 	.word	0x08007cb8

0800145c <LTEDisable>:

void LTEDisable() {
 800145c:	b580      	push	{r7, lr}
 800145e:	af00      	add	r7, sp, #0
	DebugSendData("LTE Disable", 11);
 8001460:	4b0c      	ldr	r3, [pc, #48]	; (8001494 <LTEDisable+0x38>)
 8001462:	210b      	movs	r1, #11
 8001464:	0018      	movs	r0, r3
 8001466:	f001 fefd 	bl	8003264 <DebugSendData>
	HAL_GPIO_WritePin(LTE_ENABLE_GPIO_Port, LTE_ENABLE_Pin, GPIO_PIN_RESET); // LTE module power key pressed
 800146a:	23a0      	movs	r3, #160	; 0xa0
 800146c:	05db      	lsls	r3, r3, #23
 800146e:	2200      	movs	r2, #0
 8001470:	2102      	movs	r1, #2
 8001472:	0018      	movs	r0, r3
 8001474:	f002 feca 	bl	800420c <HAL_GPIO_WritePin>
	HAL_Delay(1000);
 8001478:	23fa      	movs	r3, #250	; 0xfa
 800147a:	009b      	lsls	r3, r3, #2
 800147c:	0018      	movs	r0, r3
 800147e:	f001 ffd5 	bl	800342c <HAL_Delay>
	lteParameters.powerState=PWR_PASSIVE;
 8001482:	4a05      	ldr	r2, [pc, #20]	; (8001498 <LTEDisable+0x3c>)
 8001484:	230e      	movs	r3, #14
 8001486:	33ff      	adds	r3, #255	; 0xff
 8001488:	2101      	movs	r1, #1
 800148a:	54d1      	strb	r1, [r2, r3]
}
 800148c:	46c0      	nop			; (mov r8, r8)
 800148e:	46bd      	mov	sp, r7
 8001490:	bd80      	pop	{r7, pc}
 8001492:	46c0      	nop			; (mov r8, r8)
 8001494:	08007cc4 	.word	0x08007cc4
 8001498:	2000024c 	.word	0x2000024c

0800149c <LTEPowerOffWithUart>:
		}
	}
	LTEPassiveBuffer();
}

void LTEPowerOffWithUart() {
 800149c:	b590      	push	{r4, r7, lr}
 800149e:	b0a1      	sub	sp, #132	; 0x84
 80014a0:	af20      	add	r7, sp, #128	; 0x80
	if (lteParameters.powerState == PWR_ACTIVE) {
 80014a2:	4a16      	ldr	r2, [pc, #88]	; (80014fc <LTEPowerOffWithUart+0x60>)
 80014a4:	230e      	movs	r3, #14
 80014a6:	33ff      	adds	r3, #255	; 0xff
 80014a8:	5cd3      	ldrb	r3, [r2, r3]
 80014aa:	2b02      	cmp	r3, #2
 80014ac:	d121      	bne.n	80014f2 <LTEPowerOffWithUart+0x56>
		DebugSendData("LTE Power Off With Uart", 23);
 80014ae:	4b14      	ldr	r3, [pc, #80]	; (8001500 <LTEPowerOffWithUart+0x64>)
 80014b0:	2117      	movs	r1, #23
 80014b2:	0018      	movs	r0, r3
 80014b4:	f001 fed6 	bl	8003264 <DebugSendData>
		LTEActiveBuffer();
 80014b8:	f000 fb1e 	bl	8001af8 <LTEActiveBuffer>
		LTESendData(huart1, lteMessages.AT_QPOWD, sizeof(lteMessages.AT_QPOWD));
 80014bc:	4c11      	ldr	r4, [pc, #68]	; (8001504 <LTEPowerOffWithUart+0x68>)
 80014be:	230c      	movs	r3, #12
 80014c0:	931e      	str	r3, [sp, #120]	; 0x78
 80014c2:	4b11      	ldr	r3, [pc, #68]	; (8001508 <LTEPowerOffWithUart+0x6c>)
 80014c4:	931d      	str	r3, [sp, #116]	; 0x74
 80014c6:	466b      	mov	r3, sp
 80014c8:	0018      	movs	r0, r3
 80014ca:	0023      	movs	r3, r4
 80014cc:	3310      	adds	r3, #16
 80014ce:	2274      	movs	r2, #116	; 0x74
 80014d0:	0019      	movs	r1, r3
 80014d2:	f005 fee7 	bl	80072a4 <memcpy>
 80014d6:	6820      	ldr	r0, [r4, #0]
 80014d8:	6861      	ldr	r1, [r4, #4]
 80014da:	68a2      	ldr	r2, [r4, #8]
 80014dc:	68e3      	ldr	r3, [r4, #12]
 80014de:	f000 fb47 	bl	8001b70 <LTESendData>
		LTEResponseParserBuffer(5000, lteMessages.AT_QPOWD, sizeof(lteMessages.AT_QPOWD));
 80014e2:	4b09      	ldr	r3, [pc, #36]	; (8001508 <LTEPowerOffWithUart+0x6c>)
 80014e4:	4809      	ldr	r0, [pc, #36]	; (800150c <LTEPowerOffWithUart+0x70>)
 80014e6:	220c      	movs	r2, #12
 80014e8:	0019      	movs	r1, r3
 80014ea:	f000 fb5f 	bl	8001bac <LTEResponseParserBuffer>
		LTEPassiveBuffer();
 80014ee:	f000 fb21 	bl	8001b34 <LTEPassiveBuffer>
	}
}
 80014f2:	46c0      	nop			; (mov r8, r8)
 80014f4:	46bd      	mov	sp, r7
 80014f6:	b001      	add	sp, #4
 80014f8:	bd90      	pop	{r4, r7, pc}
 80014fa:	46c0      	nop			; (mov r8, r8)
 80014fc:	2000024c 	.word	0x2000024c
 8001500:	08007cf8 	.word	0x08007cf8
 8001504:	200004c8 	.word	0x200004c8
 8001508:	2000010d 	.word	0x2000010d
 800150c:	00001388 	.word	0x00001388

08001510 <LTEGetIMEI>:

void LTEGetIMEI() {
 8001510:	b590      	push	{r4, r7, lr}
 8001512:	b0a3      	sub	sp, #140	; 0x8c
 8001514:	af20      	add	r7, sp, #128	; 0x80
	DebugSendData("LTE Get IMEI", 12);
 8001516:	4b1c      	ldr	r3, [pc, #112]	; (8001588 <LTEGetIMEI+0x78>)
 8001518:	210c      	movs	r1, #12
 800151a:	0018      	movs	r0, r3
 800151c:	f001 fea2 	bl	8003264 <DebugSendData>
	LTEActiveBuffer();
 8001520:	f000 faea 	bl	8001af8 <LTEActiveBuffer>
	LTESendData(huart1, lteMessages.AT_CGSN, sizeof(lteMessages.AT_CGSN));
 8001524:	4c19      	ldr	r4, [pc, #100]	; (800158c <LTEGetIMEI+0x7c>)
 8001526:	2309      	movs	r3, #9
 8001528:	931e      	str	r3, [sp, #120]	; 0x78
 800152a:	4b19      	ldr	r3, [pc, #100]	; (8001590 <LTEGetIMEI+0x80>)
 800152c:	931d      	str	r3, [sp, #116]	; 0x74
 800152e:	466b      	mov	r3, sp
 8001530:	0018      	movs	r0, r3
 8001532:	0023      	movs	r3, r4
 8001534:	3310      	adds	r3, #16
 8001536:	2274      	movs	r2, #116	; 0x74
 8001538:	0019      	movs	r1, r3
 800153a:	f005 feb3 	bl	80072a4 <memcpy>
 800153e:	6820      	ldr	r0, [r4, #0]
 8001540:	6861      	ldr	r1, [r4, #4]
 8001542:	68a2      	ldr	r2, [r4, #8]
 8001544:	68e3      	ldr	r3, [r4, #12]
 8001546:	f000 fb13 	bl	8001b70 <LTESendData>
	for (int i = 0; i < 5; ++i) {
 800154a:	2300      	movs	r3, #0
 800154c:	607b      	str	r3, [r7, #4]
 800154e:	e00f      	b.n	8001570 <LTEGetIMEI+0x60>
		LTEResponseParserBuffer(2000, lteMessages.AT_CGSN, sizeof(lteMessages.AT_CGSN));
 8001550:	490f      	ldr	r1, [pc, #60]	; (8001590 <LTEGetIMEI+0x80>)
 8001552:	23fa      	movs	r3, #250	; 0xfa
 8001554:	00db      	lsls	r3, r3, #3
 8001556:	2209      	movs	r2, #9
 8001558:	0018      	movs	r0, r3
 800155a:	f000 fb27 	bl	8001bac <LTEResponseParserBuffer>
		if (lteParameters.uartResHeader == HEAD_OK) {
 800155e:	4a0d      	ldr	r2, [pc, #52]	; (8001594 <LTEGetIMEI+0x84>)
 8001560:	230c      	movs	r3, #12
 8001562:	33ff      	adds	r3, #255	; 0xff
 8001564:	5cd3      	ldrb	r3, [r2, r3]
 8001566:	2b02      	cmp	r3, #2
 8001568:	d006      	beq.n	8001578 <LTEGetIMEI+0x68>
	for (int i = 0; i < 5; ++i) {
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	3301      	adds	r3, #1
 800156e:	607b      	str	r3, [r7, #4]
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	2b04      	cmp	r3, #4
 8001574:	ddec      	ble.n	8001550 <LTEGetIMEI+0x40>
 8001576:	e000      	b.n	800157a <LTEGetIMEI+0x6a>
			break;
 8001578:	46c0      	nop			; (mov r8, r8)
		}
	}
	LTEPassiveBuffer();
 800157a:	f000 fadb 	bl	8001b34 <LTEPassiveBuffer>
}
 800157e:	46c0      	nop			; (mov r8, r8)
 8001580:	46bd      	mov	sp, r7
 8001582:	b003      	add	sp, #12
 8001584:	bd90      	pop	{r4, r7, pc}
 8001586:	46c0      	nop			; (mov r8, r8)
 8001588:	08007d10 	.word	0x08007d10
 800158c:	200004c8 	.word	0x200004c8
 8001590:	20000119 	.word	0x20000119
 8001594:	2000024c 	.word	0x2000024c

08001598 <LTEGetImsi>:

void LTEGetImsi() {
 8001598:	b590      	push	{r4, r7, lr}
 800159a:	b0a3      	sub	sp, #140	; 0x8c
 800159c:	af20      	add	r7, sp, #128	; 0x80
	DebugSendData("LTE Get IMSI", 12);
 800159e:	4b1c      	ldr	r3, [pc, #112]	; (8001610 <LTEGetImsi+0x78>)
 80015a0:	210c      	movs	r1, #12
 80015a2:	0018      	movs	r0, r3
 80015a4:	f001 fe5e 	bl	8003264 <DebugSendData>
	LTEActiveBuffer();
 80015a8:	f000 faa6 	bl	8001af8 <LTEActiveBuffer>
	LTESendData(huart1, lteMessages.AT_CIMI, sizeof(lteMessages.AT_CIMI));
 80015ac:	4c19      	ldr	r4, [pc, #100]	; (8001614 <LTEGetImsi+0x7c>)
 80015ae:	2309      	movs	r3, #9
 80015b0:	931e      	str	r3, [sp, #120]	; 0x78
 80015b2:	4b19      	ldr	r3, [pc, #100]	; (8001618 <LTEGetImsi+0x80>)
 80015b4:	931d      	str	r3, [sp, #116]	; 0x74
 80015b6:	466b      	mov	r3, sp
 80015b8:	0018      	movs	r0, r3
 80015ba:	0023      	movs	r3, r4
 80015bc:	3310      	adds	r3, #16
 80015be:	2274      	movs	r2, #116	; 0x74
 80015c0:	0019      	movs	r1, r3
 80015c2:	f005 fe6f 	bl	80072a4 <memcpy>
 80015c6:	6820      	ldr	r0, [r4, #0]
 80015c8:	6861      	ldr	r1, [r4, #4]
 80015ca:	68a2      	ldr	r2, [r4, #8]
 80015cc:	68e3      	ldr	r3, [r4, #12]
 80015ce:	f000 facf 	bl	8001b70 <LTESendData>
	for (int i = 0; i < 5; ++i) {
 80015d2:	2300      	movs	r3, #0
 80015d4:	607b      	str	r3, [r7, #4]
 80015d6:	e00f      	b.n	80015f8 <LTEGetImsi+0x60>
		LTEResponseParserBuffer(2000, lteMessages.AT_CIMI, sizeof(lteMessages.AT_CIMI));
 80015d8:	490f      	ldr	r1, [pc, #60]	; (8001618 <LTEGetImsi+0x80>)
 80015da:	23fa      	movs	r3, #250	; 0xfa
 80015dc:	00db      	lsls	r3, r3, #3
 80015de:	2209      	movs	r2, #9
 80015e0:	0018      	movs	r0, r3
 80015e2:	f000 fae3 	bl	8001bac <LTEResponseParserBuffer>
		if (lteParameters.uartResHeader == HEAD_OK) {
 80015e6:	4a0d      	ldr	r2, [pc, #52]	; (800161c <LTEGetImsi+0x84>)
 80015e8:	230c      	movs	r3, #12
 80015ea:	33ff      	adds	r3, #255	; 0xff
 80015ec:	5cd3      	ldrb	r3, [r2, r3]
 80015ee:	2b02      	cmp	r3, #2
 80015f0:	d006      	beq.n	8001600 <LTEGetImsi+0x68>
	for (int i = 0; i < 5; ++i) {
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	3301      	adds	r3, #1
 80015f6:	607b      	str	r3, [r7, #4]
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	2b04      	cmp	r3, #4
 80015fc:	ddec      	ble.n	80015d8 <LTEGetImsi+0x40>
 80015fe:	e000      	b.n	8001602 <LTEGetImsi+0x6a>
			break;
 8001600:	46c0      	nop			; (mov r8, r8)
		}
	}
	LTEPassiveBuffer();
 8001602:	f000 fa97 	bl	8001b34 <LTEPassiveBuffer>
}
 8001606:	46c0      	nop			; (mov r8, r8)
 8001608:	46bd      	mov	sp, r7
 800160a:	b003      	add	sp, #12
 800160c:	bd90      	pop	{r4, r7, pc}
 800160e:	46c0      	nop			; (mov r8, r8)
 8001610:	08007d20 	.word	0x08007d20
 8001614:	200004c8 	.word	0x200004c8
 8001618:	20000229 	.word	0x20000229
 800161c:	2000024c 	.word	0x2000024c

08001620 <LTEOpenConnection>:

void LTEOpenConnection() {
 8001620:	b590      	push	{r4, r7, lr}
 8001622:	b0a3      	sub	sp, #140	; 0x8c
 8001624:	af20      	add	r7, sp, #128	; 0x80
	DebugSendData("LTE Open Connection", 19);
 8001626:	4b1c      	ldr	r3, [pc, #112]	; (8001698 <LTEOpenConnection+0x78>)
 8001628:	2113      	movs	r1, #19
 800162a:	0018      	movs	r0, r3
 800162c:	f001 fe1a 	bl	8003264 <DebugSendData>
	LTEActiveBuffer();
 8001630:	f000 fa62 	bl	8001af8 <LTEActiveBuffer>
	LTESendData(huart1, lteMessages.AT_QIOPEN, sizeof(lteMessages.AT_QIOPEN));
 8001634:	4c19      	ldr	r4, [pc, #100]	; (800169c <LTEOpenConnection+0x7c>)
 8001636:	233c      	movs	r3, #60	; 0x3c
 8001638:	931e      	str	r3, [sp, #120]	; 0x78
 800163a:	4b19      	ldr	r3, [pc, #100]	; (80016a0 <LTEOpenConnection+0x80>)
 800163c:	931d      	str	r3, [sp, #116]	; 0x74
 800163e:	466b      	mov	r3, sp
 8001640:	0018      	movs	r0, r3
 8001642:	0023      	movs	r3, r4
 8001644:	3310      	adds	r3, #16
 8001646:	2274      	movs	r2, #116	; 0x74
 8001648:	0019      	movs	r1, r3
 800164a:	f005 fe2b 	bl	80072a4 <memcpy>
 800164e:	6820      	ldr	r0, [r4, #0]
 8001650:	6861      	ldr	r1, [r4, #4]
 8001652:	68a2      	ldr	r2, [r4, #8]
 8001654:	68e3      	ldr	r3, [r4, #12]
 8001656:	f000 fa8b 	bl	8001b70 <LTESendData>
	for (int i = 0; i < 5; ++i) {
 800165a:	2300      	movs	r3, #0
 800165c:	607b      	str	r3, [r7, #4]
 800165e:	e00f      	b.n	8001680 <LTEOpenConnection+0x60>
		LTEResponseParserBuffer(2000, lteMessages.AT_QIOPEN, sizeof(lteMessages.AT_QIOPEN));
 8001660:	490f      	ldr	r1, [pc, #60]	; (80016a0 <LTEOpenConnection+0x80>)
 8001662:	23fa      	movs	r3, #250	; 0xfa
 8001664:	00db      	lsls	r3, r3, #3
 8001666:	223c      	movs	r2, #60	; 0x3c
 8001668:	0018      	movs	r0, r3
 800166a:	f000 fa9f 	bl	8001bac <LTEResponseParserBuffer>
		if (lteParameters.uartResHeader == HEAD_OK) {
 800166e:	4a0d      	ldr	r2, [pc, #52]	; (80016a4 <LTEOpenConnection+0x84>)
 8001670:	230c      	movs	r3, #12
 8001672:	33ff      	adds	r3, #255	; 0xff
 8001674:	5cd3      	ldrb	r3, [r2, r3]
 8001676:	2b02      	cmp	r3, #2
 8001678:	d006      	beq.n	8001688 <LTEOpenConnection+0x68>
	for (int i = 0; i < 5; ++i) {
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	3301      	adds	r3, #1
 800167e:	607b      	str	r3, [r7, #4]
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	2b04      	cmp	r3, #4
 8001684:	ddec      	ble.n	8001660 <LTEOpenConnection+0x40>
 8001686:	e000      	b.n	800168a <LTEOpenConnection+0x6a>
			break;
 8001688:	46c0      	nop			; (mov r8, r8)
		}
	}
	LTEPassiveBuffer();
 800168a:	f000 fa53 	bl	8001b34 <LTEPassiveBuffer>
}
 800168e:	46c0      	nop			; (mov r8, r8)
 8001690:	46bd      	mov	sp, r7
 8001692:	b003      	add	sp, #12
 8001694:	bd90      	pop	{r4, r7, pc}
 8001696:	46c0      	nop			; (mov r8, r8)
 8001698:	08007d30 	.word	0x08007d30
 800169c:	200004c8 	.word	0x200004c8
 80016a0:	20000147 	.word	0x20000147
 80016a4:	2000024c 	.word	0x2000024c

080016a8 <LTEPrepToSendData>:

void LTEPrepToSendData() {
 80016a8:	b590      	push	{r4, r7, lr}
 80016aa:	b0a3      	sub	sp, #140	; 0x8c
 80016ac:	af20      	add	r7, sp, #128	; 0x80
	DebugSendData("LTE Prep To Send Data", 21);
 80016ae:	4b1c      	ldr	r3, [pc, #112]	; (8001720 <LTEPrepToSendData+0x78>)
 80016b0:	2115      	movs	r1, #21
 80016b2:	0018      	movs	r0, r3
 80016b4:	f001 fdd6 	bl	8003264 <DebugSendData>
	LTEActiveBuffer();
 80016b8:	f000 fa1e 	bl	8001af8 <LTEActiveBuffer>
	LTESendData(huart1, lteMessages.AT_QISEND, sizeof(lteMessages.AT_QISEND));
 80016bc:	4c19      	ldr	r4, [pc, #100]	; (8001724 <LTEPrepToSendData+0x7c>)
 80016be:	2310      	movs	r3, #16
 80016c0:	931e      	str	r3, [sp, #120]	; 0x78
 80016c2:	4b19      	ldr	r3, [pc, #100]	; (8001728 <LTEPrepToSendData+0x80>)
 80016c4:	931d      	str	r3, [sp, #116]	; 0x74
 80016c6:	466b      	mov	r3, sp
 80016c8:	0018      	movs	r0, r3
 80016ca:	0023      	movs	r3, r4
 80016cc:	3310      	adds	r3, #16
 80016ce:	2274      	movs	r2, #116	; 0x74
 80016d0:	0019      	movs	r1, r3
 80016d2:	f005 fde7 	bl	80072a4 <memcpy>
 80016d6:	6820      	ldr	r0, [r4, #0]
 80016d8:	6861      	ldr	r1, [r4, #4]
 80016da:	68a2      	ldr	r2, [r4, #8]
 80016dc:	68e3      	ldr	r3, [r4, #12]
 80016de:	f000 fa47 	bl	8001b70 <LTESendData>
	for (int i = 0; i < 5; ++i) {
 80016e2:	2300      	movs	r3, #0
 80016e4:	607b      	str	r3, [r7, #4]
 80016e6:	e00f      	b.n	8001708 <LTEPrepToSendData+0x60>
		LTEResponseParserBuffer(2000, lteMessages.AT_QISEND, sizeof(lteMessages.AT_QISEND));
 80016e8:	490f      	ldr	r1, [pc, #60]	; (8001728 <LTEPrepToSendData+0x80>)
 80016ea:	23fa      	movs	r3, #250	; 0xfa
 80016ec:	00db      	lsls	r3, r3, #3
 80016ee:	2210      	movs	r2, #16
 80016f0:	0018      	movs	r0, r3
 80016f2:	f000 fa5b 	bl	8001bac <LTEResponseParserBuffer>
		if (lteParameters.uartResHeader == HEAD_OK) {
 80016f6:	4a0d      	ldr	r2, [pc, #52]	; (800172c <LTEPrepToSendData+0x84>)
 80016f8:	230c      	movs	r3, #12
 80016fa:	33ff      	adds	r3, #255	; 0xff
 80016fc:	5cd3      	ldrb	r3, [r2, r3]
 80016fe:	2b02      	cmp	r3, #2
 8001700:	d006      	beq.n	8001710 <LTEPrepToSendData+0x68>
	for (int i = 0; i < 5; ++i) {
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	3301      	adds	r3, #1
 8001706:	607b      	str	r3, [r7, #4]
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	2b04      	cmp	r3, #4
 800170c:	ddec      	ble.n	80016e8 <LTEPrepToSendData+0x40>
 800170e:	e000      	b.n	8001712 <LTEPrepToSendData+0x6a>
			break;
 8001710:	46c0      	nop			; (mov r8, r8)
		}
	}
	LTEPassiveBuffer();
 8001712:	f000 fa0f 	bl	8001b34 <LTEPassiveBuffer>
}
 8001716:	46c0      	nop			; (mov r8, r8)
 8001718:	46bd      	mov	sp, r7
 800171a:	b003      	add	sp, #12
 800171c:	bd90      	pop	{r4, r7, pc}
 800171e:	46c0      	nop			; (mov r8, r8)
 8001720:	08007d44 	.word	0x08007d44
 8001724:	200004c8 	.word	0x200004c8
 8001728:	20000183 	.word	0x20000183
 800172c:	2000024c 	.word	0x2000024c

08001730 <LTEAt>:

void LTEAt() {
 8001730:	b590      	push	{r4, r7, lr}
 8001732:	b0a3      	sub	sp, #140	; 0x8c
 8001734:	af20      	add	r7, sp, #128	; 0x80
	DebugSendData("LTE At", 6);
 8001736:	4b1c      	ldr	r3, [pc, #112]	; (80017a8 <LTEAt+0x78>)
 8001738:	2106      	movs	r1, #6
 800173a:	0018      	movs	r0, r3
 800173c:	f001 fd92 	bl	8003264 <DebugSendData>
	LTEActiveBuffer();
 8001740:	f000 f9da 	bl	8001af8 <LTEActiveBuffer>
	LTESendData(huart1, lteMessages.AT, sizeof(lteMessages.AT));
 8001744:	4c19      	ldr	r4, [pc, #100]	; (80017ac <LTEAt+0x7c>)
 8001746:	2304      	movs	r3, #4
 8001748:	931e      	str	r3, [sp, #120]	; 0x78
 800174a:	4b19      	ldr	r3, [pc, #100]	; (80017b0 <LTEAt+0x80>)
 800174c:	931d      	str	r3, [sp, #116]	; 0x74
 800174e:	466b      	mov	r3, sp
 8001750:	0018      	movs	r0, r3
 8001752:	0023      	movs	r3, r4
 8001754:	3310      	adds	r3, #16
 8001756:	2274      	movs	r2, #116	; 0x74
 8001758:	0019      	movs	r1, r3
 800175a:	f005 fda3 	bl	80072a4 <memcpy>
 800175e:	6820      	ldr	r0, [r4, #0]
 8001760:	6861      	ldr	r1, [r4, #4]
 8001762:	68a2      	ldr	r2, [r4, #8]
 8001764:	68e3      	ldr	r3, [r4, #12]
 8001766:	f000 fa03 	bl	8001b70 <LTESendData>
	for (int i = 0; i < 5; ++i) {
 800176a:	2300      	movs	r3, #0
 800176c:	607b      	str	r3, [r7, #4]
 800176e:	e00f      	b.n	8001790 <LTEAt+0x60>
		LTEResponseParserBuffer(2000, lteMessages.AT, sizeof(lteMessages.AT));
 8001770:	490f      	ldr	r1, [pc, #60]	; (80017b0 <LTEAt+0x80>)
 8001772:	23fa      	movs	r3, #250	; 0xfa
 8001774:	00db      	lsls	r3, r3, #3
 8001776:	2204      	movs	r2, #4
 8001778:	0018      	movs	r0, r3
 800177a:	f000 fa17 	bl	8001bac <LTEResponseParserBuffer>
		if (lteParameters.uartResHeader == HEAD_OK) {
 800177e:	4a0d      	ldr	r2, [pc, #52]	; (80017b4 <LTEAt+0x84>)
 8001780:	230c      	movs	r3, #12
 8001782:	33ff      	adds	r3, #255	; 0xff
 8001784:	5cd3      	ldrb	r3, [r2, r3]
 8001786:	2b02      	cmp	r3, #2
 8001788:	d006      	beq.n	8001798 <LTEAt+0x68>
	for (int i = 0; i < 5; ++i) {
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	3301      	adds	r3, #1
 800178e:	607b      	str	r3, [r7, #4]
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	2b04      	cmp	r3, #4
 8001794:	ddec      	ble.n	8001770 <LTEAt+0x40>
 8001796:	e000      	b.n	800179a <LTEAt+0x6a>
			break;
 8001798:	46c0      	nop			; (mov r8, r8)
		}
	}
	LTEPassiveBuffer();
 800179a:	f000 f9cb 	bl	8001b34 <LTEPassiveBuffer>
}
 800179e:	46c0      	nop			; (mov r8, r8)
 80017a0:	46bd      	mov	sp, r7
 80017a2:	b003      	add	sp, #12
 80017a4:	bd90      	pop	{r4, r7, pc}
 80017a6:	46c0      	nop			; (mov r8, r8)
 80017a8:	08007d5c 	.word	0x08007d5c
 80017ac:	200004c8 	.word	0x200004c8
 80017b0:	20000104 	.word	0x20000104
 80017b4:	2000024c 	.word	0x2000024c

080017b8 <LTECloseConnection>:

void LTECloseConnection() {
 80017b8:	b590      	push	{r4, r7, lr}
 80017ba:	b0a3      	sub	sp, #140	; 0x8c
 80017bc:	af20      	add	r7, sp, #128	; 0x80
	DebugSendData("LTE Close Connection", 20);
 80017be:	4b1c      	ldr	r3, [pc, #112]	; (8001830 <LTECloseConnection+0x78>)
 80017c0:	2114      	movs	r1, #20
 80017c2:	0018      	movs	r0, r3
 80017c4:	f001 fd4e 	bl	8003264 <DebugSendData>
	LTEActiveBuffer();
 80017c8:	f000 f996 	bl	8001af8 <LTEActiveBuffer>
	LTESendData(huart1, lteMessages.AT_QICLOSE, sizeof(lteMessages.AT_QICLOSE));
 80017cc:	4c19      	ldr	r4, [pc, #100]	; (8001834 <LTECloseConnection+0x7c>)
 80017ce:	230e      	movs	r3, #14
 80017d0:	931e      	str	r3, [sp, #120]	; 0x78
 80017d2:	4b19      	ldr	r3, [pc, #100]	; (8001838 <LTECloseConnection+0x80>)
 80017d4:	931d      	str	r3, [sp, #116]	; 0x74
 80017d6:	466b      	mov	r3, sp
 80017d8:	0018      	movs	r0, r3
 80017da:	0023      	movs	r3, r4
 80017dc:	3310      	adds	r3, #16
 80017de:	2274      	movs	r2, #116	; 0x74
 80017e0:	0019      	movs	r1, r3
 80017e2:	f005 fd5f 	bl	80072a4 <memcpy>
 80017e6:	6820      	ldr	r0, [r4, #0]
 80017e8:	6861      	ldr	r1, [r4, #4]
 80017ea:	68a2      	ldr	r2, [r4, #8]
 80017ec:	68e3      	ldr	r3, [r4, #12]
 80017ee:	f000 f9bf 	bl	8001b70 <LTESendData>
	for (int i = 0; i < 5; ++i) {
 80017f2:	2300      	movs	r3, #0
 80017f4:	607b      	str	r3, [r7, #4]
 80017f6:	e00f      	b.n	8001818 <LTECloseConnection+0x60>
		LTEResponseParserBuffer(2000, lteMessages.AT_QICLOSE, sizeof(lteMessages.AT_QICLOSE));
 80017f8:	490f      	ldr	r1, [pc, #60]	; (8001838 <LTECloseConnection+0x80>)
 80017fa:	23fa      	movs	r3, #250	; 0xfa
 80017fc:	00db      	lsls	r3, r3, #3
 80017fe:	220e      	movs	r2, #14
 8001800:	0018      	movs	r0, r3
 8001802:	f000 f9d3 	bl	8001bac <LTEResponseParserBuffer>
		if (lteParameters.uartResHeader == HEAD_OK) {
 8001806:	4a0d      	ldr	r2, [pc, #52]	; (800183c <LTECloseConnection+0x84>)
 8001808:	230c      	movs	r3, #12
 800180a:	33ff      	adds	r3, #255	; 0xff
 800180c:	5cd3      	ldrb	r3, [r2, r3]
 800180e:	2b02      	cmp	r3, #2
 8001810:	d006      	beq.n	8001820 <LTECloseConnection+0x68>
	for (int i = 0; i < 5; ++i) {
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	3301      	adds	r3, #1
 8001816:	607b      	str	r3, [r7, #4]
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	2b04      	cmp	r3, #4
 800181c:	ddec      	ble.n	80017f8 <LTECloseConnection+0x40>
 800181e:	e000      	b.n	8001822 <LTECloseConnection+0x6a>
			break;
 8001820:	46c0      	nop			; (mov r8, r8)
		}
	}
	LTEPassiveBuffer();
 8001822:	f000 f987 	bl	8001b34 <LTEPassiveBuffer>
}
 8001826:	46c0      	nop			; (mov r8, r8)
 8001828:	46bd      	mov	sp, r7
 800182a:	b003      	add	sp, #12
 800182c:	bd90      	pop	{r4, r7, pc}
 800182e:	46c0      	nop			; (mov r8, r8)
 8001830:	08007d64 	.word	0x08007d64
 8001834:	200004c8 	.word	0x200004c8
 8001838:	200001a0 	.word	0x200001a0
 800183c:	2000024c 	.word	0x2000024c

08001840 <LTEPdpOpen>:

void LTEPdpOpen() {
 8001840:	b590      	push	{r4, r7, lr}
 8001842:	b0a3      	sub	sp, #140	; 0x8c
 8001844:	af20      	add	r7, sp, #128	; 0x80
	DebugSendData("LTE Pdp Open", 12);
 8001846:	4b1c      	ldr	r3, [pc, #112]	; (80018b8 <LTEPdpOpen+0x78>)
 8001848:	210c      	movs	r1, #12
 800184a:	0018      	movs	r0, r3
 800184c:	f001 fd0a 	bl	8003264 <DebugSendData>
	LTEActiveBuffer();
 8001850:	f000 f952 	bl	8001af8 <LTEActiveBuffer>
	LTESendData(huart1, lteMessages.AT_QIACT, sizeof(lteMessages.AT_QIACT));
 8001854:	4c19      	ldr	r4, [pc, #100]	; (80018bc <LTEPdpOpen+0x7c>)
 8001856:	230c      	movs	r3, #12
 8001858:	931e      	str	r3, [sp, #120]	; 0x78
 800185a:	4b19      	ldr	r3, [pc, #100]	; (80018c0 <LTEPdpOpen+0x80>)
 800185c:	931d      	str	r3, [sp, #116]	; 0x74
 800185e:	466b      	mov	r3, sp
 8001860:	0018      	movs	r0, r3
 8001862:	0023      	movs	r3, r4
 8001864:	3310      	adds	r3, #16
 8001866:	2274      	movs	r2, #116	; 0x74
 8001868:	0019      	movs	r1, r3
 800186a:	f005 fd1b 	bl	80072a4 <memcpy>
 800186e:	6820      	ldr	r0, [r4, #0]
 8001870:	6861      	ldr	r1, [r4, #4]
 8001872:	68a2      	ldr	r2, [r4, #8]
 8001874:	68e3      	ldr	r3, [r4, #12]
 8001876:	f000 f97b 	bl	8001b70 <LTESendData>
	for (int i = 0; i < 5; ++i) {
 800187a:	2300      	movs	r3, #0
 800187c:	607b      	str	r3, [r7, #4]
 800187e:	e00f      	b.n	80018a0 <LTEPdpOpen+0x60>
		LTEResponseParserBuffer(2000, lteMessages.AT_QIACT, sizeof(lteMessages.AT_QIACT));
 8001880:	490f      	ldr	r1, [pc, #60]	; (80018c0 <LTEPdpOpen+0x80>)
 8001882:	23fa      	movs	r3, #250	; 0xfa
 8001884:	00db      	lsls	r3, r3, #3
 8001886:	220c      	movs	r2, #12
 8001888:	0018      	movs	r0, r3
 800188a:	f000 f98f 	bl	8001bac <LTEResponseParserBuffer>
		if (lteParameters.uartResHeader == HEAD_OK) {
 800188e:	4a0d      	ldr	r2, [pc, #52]	; (80018c4 <LTEPdpOpen+0x84>)
 8001890:	230c      	movs	r3, #12
 8001892:	33ff      	adds	r3, #255	; 0xff
 8001894:	5cd3      	ldrb	r3, [r2, r3]
 8001896:	2b02      	cmp	r3, #2
 8001898:	d006      	beq.n	80018a8 <LTEPdpOpen+0x68>
	for (int i = 0; i < 5; ++i) {
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	3301      	adds	r3, #1
 800189e:	607b      	str	r3, [r7, #4]
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	2b04      	cmp	r3, #4
 80018a4:	ddec      	ble.n	8001880 <LTEPdpOpen+0x40>
 80018a6:	e000      	b.n	80018aa <LTEPdpOpen+0x6a>
			break;
 80018a8:	46c0      	nop			; (mov r8, r8)
		}
	}
	LTEPassiveBuffer();
 80018aa:	f000 f943 	bl	8001b34 <LTEPassiveBuffer>
}
 80018ae:	46c0      	nop			; (mov r8, r8)
 80018b0:	46bd      	mov	sp, r7
 80018b2:	b003      	add	sp, #12
 80018b4:	bd90      	pop	{r4, r7, pc}
 80018b6:	46c0      	nop			; (mov r8, r8)
 80018b8:	08007d7c 	.word	0x08007d7c
 80018bc:	200004c8 	.word	0x200004c8
 80018c0:	200001ae 	.word	0x200001ae
 80018c4:	2000024c 	.word	0x2000024c

080018c8 <LTEPdpClose>:

void LTEPdpClose() {
 80018c8:	b590      	push	{r4, r7, lr}
 80018ca:	b0a3      	sub	sp, #140	; 0x8c
 80018cc:	af20      	add	r7, sp, #128	; 0x80
	DebugSendData("LTE Pdp Close", 13);
 80018ce:	4b1c      	ldr	r3, [pc, #112]	; (8001940 <LTEPdpClose+0x78>)
 80018d0:	210d      	movs	r1, #13
 80018d2:	0018      	movs	r0, r3
 80018d4:	f001 fcc6 	bl	8003264 <DebugSendData>
	LTEActiveBuffer();
 80018d8:	f000 f90e 	bl	8001af8 <LTEActiveBuffer>
	LTESendData(huart1, lteMessages.AT_QIDEACT, sizeof(lteMessages.AT_QIDEACT));
 80018dc:	4c19      	ldr	r4, [pc, #100]	; (8001944 <LTEPdpClose+0x7c>)
 80018de:	230e      	movs	r3, #14
 80018e0:	931e      	str	r3, [sp, #120]	; 0x78
 80018e2:	4b19      	ldr	r3, [pc, #100]	; (8001948 <LTEPdpClose+0x80>)
 80018e4:	931d      	str	r3, [sp, #116]	; 0x74
 80018e6:	466b      	mov	r3, sp
 80018e8:	0018      	movs	r0, r3
 80018ea:	0023      	movs	r3, r4
 80018ec:	3310      	adds	r3, #16
 80018ee:	2274      	movs	r2, #116	; 0x74
 80018f0:	0019      	movs	r1, r3
 80018f2:	f005 fcd7 	bl	80072a4 <memcpy>
 80018f6:	6820      	ldr	r0, [r4, #0]
 80018f8:	6861      	ldr	r1, [r4, #4]
 80018fa:	68a2      	ldr	r2, [r4, #8]
 80018fc:	68e3      	ldr	r3, [r4, #12]
 80018fe:	f000 f937 	bl	8001b70 <LTESendData>
	for (int i = 0; i < 5; ++i) {
 8001902:	2300      	movs	r3, #0
 8001904:	607b      	str	r3, [r7, #4]
 8001906:	e00f      	b.n	8001928 <LTEPdpClose+0x60>
		LTEResponseParserBuffer(2000, lteMessages.AT_QIDEACT, sizeof(lteMessages.AT_QIDEACT));
 8001908:	490f      	ldr	r1, [pc, #60]	; (8001948 <LTEPdpClose+0x80>)
 800190a:	23fa      	movs	r3, #250	; 0xfa
 800190c:	00db      	lsls	r3, r3, #3
 800190e:	220e      	movs	r2, #14
 8001910:	0018      	movs	r0, r3
 8001912:	f000 f94b 	bl	8001bac <LTEResponseParserBuffer>
		if (lteParameters.uartResHeader == HEAD_OK) {
 8001916:	4a0d      	ldr	r2, [pc, #52]	; (800194c <LTEPdpClose+0x84>)
 8001918:	230c      	movs	r3, #12
 800191a:	33ff      	adds	r3, #255	; 0xff
 800191c:	5cd3      	ldrb	r3, [r2, r3]
 800191e:	2b02      	cmp	r3, #2
 8001920:	d006      	beq.n	8001930 <LTEPdpClose+0x68>
	for (int i = 0; i < 5; ++i) {
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	3301      	adds	r3, #1
 8001926:	607b      	str	r3, [r7, #4]
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	2b04      	cmp	r3, #4
 800192c:	ddec      	ble.n	8001908 <LTEPdpClose+0x40>
 800192e:	e000      	b.n	8001932 <LTEPdpClose+0x6a>
			break;
 8001930:	46c0      	nop			; (mov r8, r8)
		}
	}
	LTEPassiveBuffer();
 8001932:	f000 f8ff 	bl	8001b34 <LTEPassiveBuffer>
}
 8001936:	46c0      	nop			; (mov r8, r8)
 8001938:	46bd      	mov	sp, r7
 800193a:	b003      	add	sp, #12
 800193c:	bd90      	pop	{r4, r7, pc}
 800193e:	46c0      	nop			; (mov r8, r8)
 8001940:	08007d8c 	.word	0x08007d8c
 8001944:	200004c8 	.word	0x200004c8
 8001948:	200001ba 	.word	0x200001ba
 800194c:	2000024c 	.word	0x2000024c

08001950 <LTEPdpConfigure>:

void LTEPdpConfigure() {
 8001950:	b590      	push	{r4, r7, lr}
 8001952:	b0a3      	sub	sp, #140	; 0x8c
 8001954:	af20      	add	r7, sp, #128	; 0x80
	DebugSendData("LTE Pdp Configure", 17);
 8001956:	4b1c      	ldr	r3, [pc, #112]	; (80019c8 <LTEPdpConfigure+0x78>)
 8001958:	2111      	movs	r1, #17
 800195a:	0018      	movs	r0, r3
 800195c:	f001 fc82 	bl	8003264 <DebugSendData>
	LTEActiveBuffer();
 8001960:	f000 f8ca 	bl	8001af8 <LTEActiveBuffer>
	LTESendData(huart1, lteMessages.AT_QICSGP, sizeof(lteMessages.AT_QICSGP));
 8001964:	4c19      	ldr	r4, [pc, #100]	; (80019cc <LTEPdpConfigure+0x7c>)
 8001966:	231d      	movs	r3, #29
 8001968:	931e      	str	r3, [sp, #120]	; 0x78
 800196a:	4b19      	ldr	r3, [pc, #100]	; (80019d0 <LTEPdpConfigure+0x80>)
 800196c:	931d      	str	r3, [sp, #116]	; 0x74
 800196e:	466b      	mov	r3, sp
 8001970:	0018      	movs	r0, r3
 8001972:	0023      	movs	r3, r4
 8001974:	3310      	adds	r3, #16
 8001976:	2274      	movs	r2, #116	; 0x74
 8001978:	0019      	movs	r1, r3
 800197a:	f005 fc93 	bl	80072a4 <memcpy>
 800197e:	6820      	ldr	r0, [r4, #0]
 8001980:	6861      	ldr	r1, [r4, #4]
 8001982:	68a2      	ldr	r2, [r4, #8]
 8001984:	68e3      	ldr	r3, [r4, #12]
 8001986:	f000 f8f3 	bl	8001b70 <LTESendData>
	for (int i = 0; i < 5; ++i) {
 800198a:	2300      	movs	r3, #0
 800198c:	607b      	str	r3, [r7, #4]
 800198e:	e00f      	b.n	80019b0 <LTEPdpConfigure+0x60>
		LTEResponseParserBuffer(2000, lteMessages.AT_QICSGP, sizeof(lteMessages.AT_QICSGP));
 8001990:	490f      	ldr	r1, [pc, #60]	; (80019d0 <LTEPdpConfigure+0x80>)
 8001992:	23fa      	movs	r3, #250	; 0xfa
 8001994:	00db      	lsls	r3, r3, #3
 8001996:	221d      	movs	r2, #29
 8001998:	0018      	movs	r0, r3
 800199a:	f000 f907 	bl	8001bac <LTEResponseParserBuffer>
		if (lteParameters.uartResHeader == HEAD_OK) {
 800199e:	4a0d      	ldr	r2, [pc, #52]	; (80019d4 <LTEPdpConfigure+0x84>)
 80019a0:	230c      	movs	r3, #12
 80019a2:	33ff      	adds	r3, #255	; 0xff
 80019a4:	5cd3      	ldrb	r3, [r2, r3]
 80019a6:	2b02      	cmp	r3, #2
 80019a8:	d006      	beq.n	80019b8 <LTEPdpConfigure+0x68>
	for (int i = 0; i < 5; ++i) {
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	3301      	adds	r3, #1
 80019ae:	607b      	str	r3, [r7, #4]
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	2b04      	cmp	r3, #4
 80019b4:	ddec      	ble.n	8001990 <LTEPdpConfigure+0x40>
 80019b6:	e000      	b.n	80019ba <LTEPdpConfigure+0x6a>
			break;
 80019b8:	46c0      	nop			; (mov r8, r8)
		}
	}
	LTEPassiveBuffer();
 80019ba:	f000 f8bb 	bl	8001b34 <LTEPassiveBuffer>
}
 80019be:	46c0      	nop			; (mov r8, r8)
 80019c0:	46bd      	mov	sp, r7
 80019c2:	b003      	add	sp, #12
 80019c4:	bd90      	pop	{r4, r7, pc}
 80019c6:	46c0      	nop			; (mov r8, r8)
 80019c8:	08007d9c 	.word	0x08007d9c
 80019cc:	200004c8 	.word	0x200004c8
 80019d0:	200001c8 	.word	0x200001c8
 80019d4:	2000024c 	.word	0x2000024c

080019d8 <LTESendMsg>:

void LTESendMsg() {
 80019d8:	b590      	push	{r4, r7, lr}
 80019da:	b0a3      	sub	sp, #140	; 0x8c
 80019dc:	af20      	add	r7, sp, #128	; 0x80
	DebugSendData("LTE Send Msg", 12);
 80019de:	4b1e      	ldr	r3, [pc, #120]	; (8001a58 <LTESendMsg+0x80>)
 80019e0:	210c      	movs	r1, #12
 80019e2:	0018      	movs	r0, r3
 80019e4:	f001 fc3e 	bl	8003264 <DebugSendData>
	wasteParameters.gpsAlarm=0;
 80019e8:	4b1c      	ldr	r3, [pc, #112]	; (8001a5c <LTESendMsg+0x84>)
 80019ea:	2200      	movs	r2, #0
 80019ec:	729a      	strb	r2, [r3, #10]
	LTEActiveBuffer();
 80019ee:	f000 f883 	bl	8001af8 <LTEActiveBuffer>
	LTESendData(huart1, lteParameters.msgToSend, 215);
 80019f2:	4c1b      	ldr	r4, [pc, #108]	; (8001a60 <LTESendMsg+0x88>)
 80019f4:	23d7      	movs	r3, #215	; 0xd7
 80019f6:	931e      	str	r3, [sp, #120]	; 0x78
 80019f8:	4b1a      	ldr	r3, [pc, #104]	; (8001a64 <LTESendMsg+0x8c>)
 80019fa:	931d      	str	r3, [sp, #116]	; 0x74
 80019fc:	466b      	mov	r3, sp
 80019fe:	0018      	movs	r0, r3
 8001a00:	0023      	movs	r3, r4
 8001a02:	3310      	adds	r3, #16
 8001a04:	2274      	movs	r2, #116	; 0x74
 8001a06:	0019      	movs	r1, r3
 8001a08:	f005 fc4c 	bl	80072a4 <memcpy>
 8001a0c:	6820      	ldr	r0, [r4, #0]
 8001a0e:	6861      	ldr	r1, [r4, #4]
 8001a10:	68a2      	ldr	r2, [r4, #8]
 8001a12:	68e3      	ldr	r3, [r4, #12]
 8001a14:	f000 f8ac 	bl	8001b70 <LTESendData>
	for (int i = 0; i < 10; ++i) {
 8001a18:	2300      	movs	r3, #0
 8001a1a:	607b      	str	r3, [r7, #4]
 8001a1c:	e013      	b.n	8001a46 <LTESendMsg+0x6e>
		LTEResponseParserBuffer(2000, lteMessages.SENDDATA, sizeof(lteMessages.SENDDATA));
 8001a1e:	4912      	ldr	r1, [pc, #72]	; (8001a68 <LTESendMsg+0x90>)
 8001a20:	23fa      	movs	r3, #250	; 0xfa
 8001a22:	00db      	lsls	r3, r3, #3
 8001a24:	2208      	movs	r2, #8
 8001a26:	0018      	movs	r0, r3
 8001a28:	f000 f8c0 	bl	8001bac <LTEResponseParserBuffer>
		if (lteParameters.uartResHeader == HEAD_OK) {
 8001a2c:	4a0f      	ldr	r2, [pc, #60]	; (8001a6c <LTESendMsg+0x94>)
 8001a2e:	230c      	movs	r3, #12
 8001a30:	33ff      	adds	r3, #255	; 0xff
 8001a32:	5cd3      	ldrb	r3, [r2, r3]
 8001a34:	2b02      	cmp	r3, #2
 8001a36:	d103      	bne.n	8001a40 <LTESendMsg+0x68>
			wasteParameters.preDataSendError=0;
 8001a38:	4b08      	ldr	r3, [pc, #32]	; (8001a5c <LTESendMsg+0x84>)
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	725a      	strb	r2, [r3, #9]
			break;
 8001a3e:	e005      	b.n	8001a4c <LTESendMsg+0x74>
	for (int i = 0; i < 10; ++i) {
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	3301      	adds	r3, #1
 8001a44:	607b      	str	r3, [r7, #4]
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	2b09      	cmp	r3, #9
 8001a4a:	dde8      	ble.n	8001a1e <LTESendMsg+0x46>
		}
	}
	LTEPassiveBuffer();
 8001a4c:	f000 f872 	bl	8001b34 <LTEPassiveBuffer>
}
 8001a50:	46c0      	nop			; (mov r8, r8)
 8001a52:	46bd      	mov	sp, r7
 8001a54:	b003      	add	sp, #12
 8001a56:	bd90      	pop	{r4, r7, pc}
 8001a58:	08007db0 	.word	0x08007db0
 8001a5c:	20000824 	.word	0x20000824
 8001a60:	200004c8 	.word	0x200004c8
 8001a64:	20000280 	.word	0x20000280
 8001a68:	20000232 	.word	0x20000232
 8001a6c:	2000024c 	.word	0x2000024c

08001a70 <LTEReceiveMsg>:

void LTEReceiveMsg() {
 8001a70:	b590      	push	{r4, r7, lr}
 8001a72:	b0a3      	sub	sp, #140	; 0x8c
 8001a74:	af20      	add	r7, sp, #128	; 0x80
	DebugSendData("LTE Receive Msg", 15);
 8001a76:	4b1c      	ldr	r3, [pc, #112]	; (8001ae8 <LTEReceiveMsg+0x78>)
 8001a78:	210f      	movs	r1, #15
 8001a7a:	0018      	movs	r0, r3
 8001a7c:	f001 fbf2 	bl	8003264 <DebugSendData>
	LTEActiveBuffer();
 8001a80:	f000 f83a 	bl	8001af8 <LTEActiveBuffer>
	LTESendData(huart1, lteMessages.AT_QIRD, sizeof(lteMessages.AT_QIRD));
 8001a84:	4c19      	ldr	r4, [pc, #100]	; (8001aec <LTEReceiveMsg+0x7c>)
 8001a86:	230d      	movs	r3, #13
 8001a88:	931e      	str	r3, [sp, #120]	; 0x78
 8001a8a:	4b19      	ldr	r3, [pc, #100]	; (8001af0 <LTEReceiveMsg+0x80>)
 8001a8c:	931d      	str	r3, [sp, #116]	; 0x74
 8001a8e:	466b      	mov	r3, sp
 8001a90:	0018      	movs	r0, r3
 8001a92:	0023      	movs	r3, r4
 8001a94:	3310      	adds	r3, #16
 8001a96:	2274      	movs	r2, #116	; 0x74
 8001a98:	0019      	movs	r1, r3
 8001a9a:	f005 fc03 	bl	80072a4 <memcpy>
 8001a9e:	6820      	ldr	r0, [r4, #0]
 8001aa0:	6861      	ldr	r1, [r4, #4]
 8001aa2:	68a2      	ldr	r2, [r4, #8]
 8001aa4:	68e3      	ldr	r3, [r4, #12]
 8001aa6:	f000 f863 	bl	8001b70 <LTESendData>
	for (int i = 0; i < 5; ++i) {
 8001aaa:	2300      	movs	r3, #0
 8001aac:	607b      	str	r3, [r7, #4]
 8001aae:	e00f      	b.n	8001ad0 <LTEReceiveMsg+0x60>
		LTEResponseParserBuffer(2000, lteMessages.AT_QIRD, sizeof(lteMessages.AT_QIRD));
 8001ab0:	490f      	ldr	r1, [pc, #60]	; (8001af0 <LTEReceiveMsg+0x80>)
 8001ab2:	23fa      	movs	r3, #250	; 0xfa
 8001ab4:	00db      	lsls	r3, r3, #3
 8001ab6:	220d      	movs	r2, #13
 8001ab8:	0018      	movs	r0, r3
 8001aba:	f000 f877 	bl	8001bac <LTEResponseParserBuffer>
		if (lteParameters.uartResHeader == HEAD_OK) {
 8001abe:	4a0d      	ldr	r2, [pc, #52]	; (8001af4 <LTEReceiveMsg+0x84>)
 8001ac0:	230c      	movs	r3, #12
 8001ac2:	33ff      	adds	r3, #255	; 0xff
 8001ac4:	5cd3      	ldrb	r3, [r2, r3]
 8001ac6:	2b02      	cmp	r3, #2
 8001ac8:	d006      	beq.n	8001ad8 <LTEReceiveMsg+0x68>
	for (int i = 0; i < 5; ++i) {
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	3301      	adds	r3, #1
 8001ace:	607b      	str	r3, [r7, #4]
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	2b04      	cmp	r3, #4
 8001ad4:	ddec      	ble.n	8001ab0 <LTEReceiveMsg+0x40>
 8001ad6:	e000      	b.n	8001ada <LTEReceiveMsg+0x6a>
			break;
 8001ad8:	46c0      	nop			; (mov r8, r8)
		}
	}
	LTEPassiveBuffer();
 8001ada:	f000 f82b 	bl	8001b34 <LTEPassiveBuffer>
}
 8001ade:	46c0      	nop			; (mov r8, r8)
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	b003      	add	sp, #12
 8001ae4:	bd90      	pop	{r4, r7, pc}
 8001ae6:	46c0      	nop			; (mov r8, r8)
 8001ae8:	08007dc0 	.word	0x08007dc0
 8001aec:	200004c8 	.word	0x200004c8
 8001af0:	20000193 	.word	0x20000193
 8001af4:	2000024c 	.word	0x2000024c

08001af8 <LTEActiveBuffer>:

void LTEActiveBuffer() {
 8001af8:	b580      	push	{r7, lr}
 8001afa:	af00      	add	r7, sp, #0
	uartLTEParameters.active = 0;
 8001afc:	4a0c      	ldr	r2, [pc, #48]	; (8001b30 <LTEActiveBuffer+0x38>)
 8001afe:	2381      	movs	r3, #129	; 0x81
 8001b00:	005b      	lsls	r3, r3, #1
 8001b02:	2100      	movs	r1, #0
 8001b04:	54d1      	strb	r1, [r2, r3]
	uartLTEParameters.rxDataCounter = 0;
 8001b06:	4a0a      	ldr	r2, [pc, #40]	; (8001b30 <LTEActiveBuffer+0x38>)
 8001b08:	2302      	movs	r3, #2
 8001b0a:	33ff      	adds	r3, #255	; 0xff
 8001b0c:	2100      	movs	r1, #0
 8001b0e:	54d1      	strb	r1, [r2, r3]
	memset(uartLTEParameters.rxBuffer, '*', 256);
 8001b10:	2380      	movs	r3, #128	; 0x80
 8001b12:	005a      	lsls	r2, r3, #1
 8001b14:	4b06      	ldr	r3, [pc, #24]	; (8001b30 <LTEActiveBuffer+0x38>)
 8001b16:	212a      	movs	r1, #42	; 0x2a
 8001b18:	0018      	movs	r0, r3
 8001b1a:	f005 fbcc 	bl	80072b6 <memset>
	uartLTEParameters.active = 1;
 8001b1e:	4a04      	ldr	r2, [pc, #16]	; (8001b30 <LTEActiveBuffer+0x38>)
 8001b20:	2381      	movs	r3, #129	; 0x81
 8001b22:	005b      	lsls	r3, r3, #1
 8001b24:	2101      	movs	r1, #1
 8001b26:	54d1      	strb	r1, [r2, r3]
}
 8001b28:	46c0      	nop			; (mov r8, r8)
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bd80      	pop	{r7, pc}
 8001b2e:	46c0      	nop			; (mov r8, r8)
 8001b30:	2000054c 	.word	0x2000054c

08001b34 <LTEPassiveBuffer>:
void LTEPassiveBuffer() {
 8001b34:	b580      	push	{r7, lr}
 8001b36:	af00      	add	r7, sp, #0
	uartLTEParameters.active = 0;
 8001b38:	4a0c      	ldr	r2, [pc, #48]	; (8001b6c <LTEPassiveBuffer+0x38>)
 8001b3a:	2381      	movs	r3, #129	; 0x81
 8001b3c:	005b      	lsls	r3, r3, #1
 8001b3e:	2100      	movs	r1, #0
 8001b40:	54d1      	strb	r1, [r2, r3]
	memset(uartLTEParameters.rxBuffer, '*', 256);
 8001b42:	2380      	movs	r3, #128	; 0x80
 8001b44:	005a      	lsls	r2, r3, #1
 8001b46:	4b09      	ldr	r3, [pc, #36]	; (8001b6c <LTEPassiveBuffer+0x38>)
 8001b48:	212a      	movs	r1, #42	; 0x2a
 8001b4a:	0018      	movs	r0, r3
 8001b4c:	f005 fbb3 	bl	80072b6 <memset>
	uartLTEParameters.rxDataCounter = 0;
 8001b50:	4a06      	ldr	r2, [pc, #24]	; (8001b6c <LTEPassiveBuffer+0x38>)
 8001b52:	2302      	movs	r3, #2
 8001b54:	33ff      	adds	r3, #255	; 0xff
 8001b56:	2100      	movs	r1, #0
 8001b58:	54d1      	strb	r1, [r2, r3]
	uartLTEParameters.active = 0;
 8001b5a:	4a04      	ldr	r2, [pc, #16]	; (8001b6c <LTEPassiveBuffer+0x38>)
 8001b5c:	2381      	movs	r3, #129	; 0x81
 8001b5e:	005b      	lsls	r3, r3, #1
 8001b60:	2100      	movs	r1, #0
 8001b62:	54d1      	strb	r1, [r2, r3]
}
 8001b64:	46c0      	nop			; (mov r8, r8)
 8001b66:	46bd      	mov	sp, r7
 8001b68:	bd80      	pop	{r7, pc}
 8001b6a:	46c0      	nop			; (mov r8, r8)
 8001b6c:	2000054c 	.word	0x2000054c

08001b70 <LTESendData>:
void LTESendData(UART_HandleTypeDef uartObj, char msg[], uint8_t msgSize) {
 8001b70:	b084      	sub	sp, #16
 8001b72:	b5b0      	push	{r4, r5, r7, lr}
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	2510      	movs	r5, #16
 8001b78:	197c      	adds	r4, r7, r5
 8001b7a:	6020      	str	r0, [r4, #0]
 8001b7c:	6061      	str	r1, [r4, #4]
 8001b7e:	60a2      	str	r2, [r4, #8]
 8001b80:	60e3      	str	r3, [r4, #12]
	HAL_UART_Transmit(&uartObj, (uint8_t*) msg, msgSize, HAL_MAX_DELAY); // Send message to the module
 8001b82:	2388      	movs	r3, #136	; 0x88
 8001b84:	2210      	movs	r2, #16
 8001b86:	4694      	mov	ip, r2
 8001b88:	44bc      	add	ip, r7
 8001b8a:	4463      	add	r3, ip
 8001b8c:	781b      	ldrb	r3, [r3, #0]
 8001b8e:	b29a      	uxth	r2, r3
 8001b90:	2301      	movs	r3, #1
 8001b92:	425b      	negs	r3, r3
 8001b94:	2194      	movs	r1, #148	; 0x94
 8001b96:	1879      	adds	r1, r7, r1
 8001b98:	6809      	ldr	r1, [r1, #0]
 8001b9a:	1978      	adds	r0, r7, r5
 8001b9c:	f004 f810 	bl	8005bc0 <HAL_UART_Transmit>
}
 8001ba0:	46c0      	nop			; (mov r8, r8)
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	bcb0      	pop	{r4, r5, r7}
 8001ba6:	bc08      	pop	{r3}
 8001ba8:	b004      	add	sp, #16
 8001baa:	4718      	bx	r3

08001bac <LTEResponseParserBuffer>:
void LTEResponseParserBuffer(uint32_t delay, char msg[], uint8_t msgSize) {
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b086      	sub	sp, #24
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	60f8      	str	r0, [r7, #12]
 8001bb4:	60b9      	str	r1, [r7, #8]
 8001bb6:	1dfb      	adds	r3, r7, #7
 8001bb8:	701a      	strb	r2, [r3, #0]
	lteParameters.uartResHeader = HEAD_NONE;
 8001bba:	4a6a      	ldr	r2, [pc, #424]	; (8001d64 <LTEResponseParserBuffer+0x1b8>)
 8001bbc:	230c      	movs	r3, #12
 8001bbe:	33ff      	adds	r3, #255	; 0xff
 8001bc0:	2101      	movs	r1, #1
 8001bc2:	54d1      	strb	r1, [r2, r3]
	lteParameters.uartResMessage = MESG_NONE;
 8001bc4:	4a67      	ldr	r2, [pc, #412]	; (8001d64 <LTEResponseParserBuffer+0x1b8>)
 8001bc6:	2386      	movs	r3, #134	; 0x86
 8001bc8:	005b      	lsls	r3, r3, #1
 8001bca:	2101      	movs	r1, #1
 8001bcc:	54d1      	strb	r1, [r2, r3]
	HAL_Delay(delay);
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	0018      	movs	r0, r3
 8001bd2:	f001 fc2b 	bl	800342c <HAL_Delay>
	DebugSendData(uartLTEParameters.rxBuffer, 196);
 8001bd6:	4b64      	ldr	r3, [pc, #400]	; (8001d68 <LTEResponseParserBuffer+0x1bc>)
 8001bd8:	21c4      	movs	r1, #196	; 0xc4
 8001bda:	0018      	movs	r0, r3
 8001bdc:	f001 fb42 	bl	8003264 <DebugSendData>
	SearchStatu();
 8001be0:	f000 f924 	bl	8001e2c <SearchStatu>
	if (lteParameters.uartResHeader == HEAD_NONE) {
 8001be4:	4a5f      	ldr	r2, [pc, #380]	; (8001d64 <LTEResponseParserBuffer+0x1b8>)
 8001be6:	230c      	movs	r3, #12
 8001be8:	33ff      	adds	r3, #255	; 0xff
 8001bea:	5cd3      	ldrb	r3, [r2, r3]
 8001bec:	2b01      	cmp	r3, #1
 8001bee:	d105      	bne.n	8001bfc <LTEResponseParserBuffer+0x50>
		DebugSendData("Header : None", 13);
 8001bf0:	4b5e      	ldr	r3, [pc, #376]	; (8001d6c <LTEResponseParserBuffer+0x1c0>)
 8001bf2:	210d      	movs	r1, #13
 8001bf4:	0018      	movs	r0, r3
 8001bf6:	f001 fb35 	bl	8003264 <DebugSendData>
 8001bfa:	e037      	b.n	8001c6c <LTEResponseParserBuffer+0xc0>
	} else if (lteParameters.uartResHeader == HEAD_OK) {
 8001bfc:	4a59      	ldr	r2, [pc, #356]	; (8001d64 <LTEResponseParserBuffer+0x1b8>)
 8001bfe:	230c      	movs	r3, #12
 8001c00:	33ff      	adds	r3, #255	; 0xff
 8001c02:	5cd3      	ldrb	r3, [r2, r3]
 8001c04:	2b02      	cmp	r3, #2
 8001c06:	d10a      	bne.n	8001c1e <LTEResponseParserBuffer+0x72>
		lteParameters.powerState=PWR_ACTIVE;
 8001c08:	4a56      	ldr	r2, [pc, #344]	; (8001d64 <LTEResponseParserBuffer+0x1b8>)
 8001c0a:	230e      	movs	r3, #14
 8001c0c:	33ff      	adds	r3, #255	; 0xff
 8001c0e:	2102      	movs	r1, #2
 8001c10:	54d1      	strb	r1, [r2, r3]
		DebugSendData("Header : OK", 12);
 8001c12:	4b57      	ldr	r3, [pc, #348]	; (8001d70 <LTEResponseParserBuffer+0x1c4>)
 8001c14:	210c      	movs	r1, #12
 8001c16:	0018      	movs	r0, r3
 8001c18:	f001 fb24 	bl	8003264 <DebugSendData>
 8001c1c:	e026      	b.n	8001c6c <LTEResponseParserBuffer+0xc0>
	} else if (lteParameters.uartResHeader == HEAD_ERROR) {
 8001c1e:	4a51      	ldr	r2, [pc, #324]	; (8001d64 <LTEResponseParserBuffer+0x1b8>)
 8001c20:	230c      	movs	r3, #12
 8001c22:	33ff      	adds	r3, #255	; 0xff
 8001c24:	5cd3      	ldrb	r3, [r2, r3]
 8001c26:	2b03      	cmp	r3, #3
 8001c28:	d10a      	bne.n	8001c40 <LTEResponseParserBuffer+0x94>
		lteParameters.powerState=PWR_ACTIVE;
 8001c2a:	4a4e      	ldr	r2, [pc, #312]	; (8001d64 <LTEResponseParserBuffer+0x1b8>)
 8001c2c:	230e      	movs	r3, #14
 8001c2e:	33ff      	adds	r3, #255	; 0xff
 8001c30:	2102      	movs	r1, #2
 8001c32:	54d1      	strb	r1, [r2, r3]
		DebugSendData("Header : Error", 14);
 8001c34:	4b4f      	ldr	r3, [pc, #316]	; (8001d74 <LTEResponseParserBuffer+0x1c8>)
 8001c36:	210e      	movs	r1, #14
 8001c38:	0018      	movs	r0, r3
 8001c3a:	f001 fb13 	bl	8003264 <DebugSendData>
 8001c3e:	e015      	b.n	8001c6c <LTEResponseParserBuffer+0xc0>
	} else if (lteParameters.uartResHeader == HEAD_READY) {
 8001c40:	4a48      	ldr	r2, [pc, #288]	; (8001d64 <LTEResponseParserBuffer+0x1b8>)
 8001c42:	230c      	movs	r3, #12
 8001c44:	33ff      	adds	r3, #255	; 0xff
 8001c46:	5cd3      	ldrb	r3, [r2, r3]
 8001c48:	2b04      	cmp	r3, #4
 8001c4a:	d10a      	bne.n	8001c62 <LTEResponseParserBuffer+0xb6>
		lteParameters.powerState=PWR_ACTIVE;
 8001c4c:	4a45      	ldr	r2, [pc, #276]	; (8001d64 <LTEResponseParserBuffer+0x1b8>)
 8001c4e:	230e      	movs	r3, #14
 8001c50:	33ff      	adds	r3, #255	; 0xff
 8001c52:	2102      	movs	r1, #2
 8001c54:	54d1      	strb	r1, [r2, r3]
		DebugSendData("Header : Ready", 14);
 8001c56:	4b48      	ldr	r3, [pc, #288]	; (8001d78 <LTEResponseParserBuffer+0x1cc>)
 8001c58:	210e      	movs	r1, #14
 8001c5a:	0018      	movs	r0, r3
 8001c5c:	f001 fb02 	bl	8003264 <DebugSendData>
 8001c60:	e004      	b.n	8001c6c <LTEResponseParserBuffer+0xc0>
	} else {
		DebugSendData("Header : Not Found", 18);
 8001c62:	4b46      	ldr	r3, [pc, #280]	; (8001d7c <LTEResponseParserBuffer+0x1d0>)
 8001c64:	2112      	movs	r1, #18
 8001c66:	0018      	movs	r0, r3
 8001c68:	f001 fafc 	bl	8003264 <DebugSendData>
	}

	if (msg == lteMessages.AT_CGSN) {
 8001c6c:	68ba      	ldr	r2, [r7, #8]
 8001c6e:	4b44      	ldr	r3, [pc, #272]	; (8001d80 <LTEResponseParserBuffer+0x1d4>)
 8001c70:	429a      	cmp	r2, r3
 8001c72:	d117      	bne.n	8001ca4 <LTEResponseParserBuffer+0xf8>
		if (lteParameters.uartResHeader == HEAD_OK) {
 8001c74:	4a3b      	ldr	r2, [pc, #236]	; (8001d64 <LTEResponseParserBuffer+0x1b8>)
 8001c76:	230c      	movs	r3, #12
 8001c78:	33ff      	adds	r3, #255	; 0xff
 8001c7a:	5cd3      	ldrb	r3, [r2, r3]
 8001c7c:	2b02      	cmp	r3, #2
 8001c7e:	d111      	bne.n	8001ca4 <LTEResponseParserBuffer+0xf8>
			for (int i = 0; i < 15; ++i) {
 8001c80:	2300      	movs	r3, #0
 8001c82:	617b      	str	r3, [r7, #20]
 8001c84:	e00b      	b.n	8001c9e <LTEResponseParserBuffer+0xf2>
				lteParameters.imeiNum[i] = uartLTEParameters.rxBuffer[sizeof(lteMessages.AT_CGSN) + 1 + i];
 8001c86:	697b      	ldr	r3, [r7, #20]
 8001c88:	330a      	adds	r3, #10
 8001c8a:	4a37      	ldr	r2, [pc, #220]	; (8001d68 <LTEResponseParserBuffer+0x1bc>)
 8001c8c:	5cd1      	ldrb	r1, [r2, r3]
 8001c8e:	4a35      	ldr	r2, [pc, #212]	; (8001d64 <LTEResponseParserBuffer+0x1b8>)
 8001c90:	697b      	ldr	r3, [r7, #20]
 8001c92:	18d3      	adds	r3, r2, r3
 8001c94:	1c0a      	adds	r2, r1, #0
 8001c96:	701a      	strb	r2, [r3, #0]
			for (int i = 0; i < 15; ++i) {
 8001c98:	697b      	ldr	r3, [r7, #20]
 8001c9a:	3301      	adds	r3, #1
 8001c9c:	617b      	str	r3, [r7, #20]
 8001c9e:	697b      	ldr	r3, [r7, #20]
 8001ca0:	2b0e      	cmp	r3, #14
 8001ca2:	ddf0      	ble.n	8001c86 <LTEResponseParserBuffer+0xda>
			}
		} else {
		}
	}

	if (msg == lteMessages.AT_CIMI) {
 8001ca4:	68ba      	ldr	r2, [r7, #8]
 8001ca6:	4b37      	ldr	r3, [pc, #220]	; (8001d84 <LTEResponseParserBuffer+0x1d8>)
 8001ca8:	429a      	cmp	r2, r3
 8001caa:	d118      	bne.n	8001cde <LTEResponseParserBuffer+0x132>
		if (lteParameters.uartResHeader == HEAD_OK) {
 8001cac:	4a2d      	ldr	r2, [pc, #180]	; (8001d64 <LTEResponseParserBuffer+0x1b8>)
 8001cae:	230c      	movs	r3, #12
 8001cb0:	33ff      	adds	r3, #255	; 0xff
 8001cb2:	5cd3      	ldrb	r3, [r2, r3]
 8001cb4:	2b02      	cmp	r3, #2
 8001cb6:	d112      	bne.n	8001cde <LTEResponseParserBuffer+0x132>
			for (int i = 0; i < 15; ++i) {
 8001cb8:	2300      	movs	r3, #0
 8001cba:	613b      	str	r3, [r7, #16]
 8001cbc:	e00c      	b.n	8001cd8 <LTEResponseParserBuffer+0x12c>
				lteParameters.imsiNum[i] = uartLTEParameters.rxBuffer[sizeof(lteMessages.AT_CIMI) + 1 + i];
 8001cbe:	693b      	ldr	r3, [r7, #16]
 8001cc0:	330a      	adds	r3, #10
 8001cc2:	4a29      	ldr	r2, [pc, #164]	; (8001d68 <LTEResponseParserBuffer+0x1bc>)
 8001cc4:	5cd1      	ldrb	r1, [r2, r3]
 8001cc6:	4a27      	ldr	r2, [pc, #156]	; (8001d64 <LTEResponseParserBuffer+0x1b8>)
 8001cc8:	693b      	ldr	r3, [r7, #16]
 8001cca:	18d3      	adds	r3, r2, r3
 8001ccc:	330f      	adds	r3, #15
 8001cce:	1c0a      	adds	r2, r1, #0
 8001cd0:	701a      	strb	r2, [r3, #0]
			for (int i = 0; i < 15; ++i) {
 8001cd2:	693b      	ldr	r3, [r7, #16]
 8001cd4:	3301      	adds	r3, #1
 8001cd6:	613b      	str	r3, [r7, #16]
 8001cd8:	693b      	ldr	r3, [r7, #16]
 8001cda:	2b0e      	cmp	r3, #14
 8001cdc:	ddef      	ble.n	8001cbe <LTEResponseParserBuffer+0x112>
			}
		} else {
		}
	}

	if (msg == lteMessages.AT_QIRD) {
 8001cde:	68ba      	ldr	r2, [r7, #8]
 8001ce0:	4b29      	ldr	r3, [pc, #164]	; (8001d88 <LTEResponseParserBuffer+0x1dc>)
 8001ce2:	429a      	cmp	r2, r3
 8001ce4:	d117      	bne.n	8001d16 <LTEResponseParserBuffer+0x16a>
		if (SearchMessage(0, "AGPS", 4)) {
 8001ce6:	4b29      	ldr	r3, [pc, #164]	; (8001d8c <LTEResponseParserBuffer+0x1e0>)
 8001ce8:	2204      	movs	r2, #4
 8001cea:	0019      	movs	r1, r3
 8001cec:	2000      	movs	r0, #0
 8001cee:	f000 f85d 	bl	8001dac <SearchMessage>
 8001cf2:	1e03      	subs	r3, r0, #0
 8001cf4:	d00f      	beq.n	8001d16 <LTEResponseParserBuffer+0x16a>
			lteParameters.uartResMessage = MESG_AGPS;
 8001cf6:	4a1b      	ldr	r2, [pc, #108]	; (8001d64 <LTEResponseParserBuffer+0x1b8>)
 8001cf8:	2386      	movs	r3, #134	; 0x86
 8001cfa:	005b      	lsls	r3, r3, #1
 8001cfc:	2103      	movs	r1, #3
 8001cfe:	54d1      	strb	r1, [r2, r3]
			wasteParameters.gpsAlarm=1;
 8001d00:	4b23      	ldr	r3, [pc, #140]	; (8001d90 <LTEResponseParserBuffer+0x1e4>)
 8001d02:	2201      	movs	r2, #1
 8001d04:	729a      	strb	r2, [r3, #10]
			wasteParameters.gpsAlarmCount = 0;
 8001d06:	4b22      	ldr	r3, [pc, #136]	; (8001d90 <LTEResponseParserBuffer+0x1e4>)
 8001d08:	2200      	movs	r2, #0
 8001d0a:	72da      	strb	r2, [r3, #11]
			DebugSendData("Message : Gps Alarm", 20);
 8001d0c:	4b21      	ldr	r3, [pc, #132]	; (8001d94 <LTEResponseParserBuffer+0x1e8>)
 8001d0e:	2114      	movs	r1, #20
 8001d10:	0018      	movs	r0, r3
 8001d12:	f001 faa7 	bl	8003264 <DebugSendData>
		}
	}

	if (msg == lteMessages.AT_QPOWD || msg == lteMessages.POWER_ON || msg == lteMessages.POWER_OFF) {
 8001d16:	68ba      	ldr	r2, [r7, #8]
 8001d18:	4b1f      	ldr	r3, [pc, #124]	; (8001d98 <LTEResponseParserBuffer+0x1ec>)
 8001d1a:	429a      	cmp	r2, r3
 8001d1c:	d007      	beq.n	8001d2e <LTEResponseParserBuffer+0x182>
 8001d1e:	68ba      	ldr	r2, [r7, #8]
 8001d20:	4b1e      	ldr	r3, [pc, #120]	; (8001d9c <LTEResponseParserBuffer+0x1f0>)
 8001d22:	429a      	cmp	r2, r3
 8001d24:	d003      	beq.n	8001d2e <LTEResponseParserBuffer+0x182>
 8001d26:	68ba      	ldr	r2, [r7, #8]
 8001d28:	4b1d      	ldr	r3, [pc, #116]	; (8001da0 <LTEResponseParserBuffer+0x1f4>)
 8001d2a:	429a      	cmp	r2, r3
 8001d2c:	d116      	bne.n	8001d5c <LTEResponseParserBuffer+0x1b0>
		if (SearchMessage(0, "DOWN", 4)) {
 8001d2e:	4b1d      	ldr	r3, [pc, #116]	; (8001da4 <LTEResponseParserBuffer+0x1f8>)
 8001d30:	2204      	movs	r2, #4
 8001d32:	0019      	movs	r1, r3
 8001d34:	2000      	movs	r0, #0
 8001d36:	f000 f839 	bl	8001dac <SearchMessage>
 8001d3a:	1e03      	subs	r3, r0, #0
 8001d3c:	d00e      	beq.n	8001d5c <LTEResponseParserBuffer+0x1b0>
			lteParameters.uartResMessage = MESG_POWERDOWN;
 8001d3e:	4a09      	ldr	r2, [pc, #36]	; (8001d64 <LTEResponseParserBuffer+0x1b8>)
 8001d40:	2386      	movs	r3, #134	; 0x86
 8001d42:	005b      	lsls	r3, r3, #1
 8001d44:	2102      	movs	r1, #2
 8001d46:	54d1      	strb	r1, [r2, r3]
			lteParameters.powerState=PWR_PASSIVE;
 8001d48:	4a06      	ldr	r2, [pc, #24]	; (8001d64 <LTEResponseParserBuffer+0x1b8>)
 8001d4a:	230e      	movs	r3, #14
 8001d4c:	33ff      	adds	r3, #255	; 0xff
 8001d4e:	2101      	movs	r1, #1
 8001d50:	54d1      	strb	r1, [r2, r3]
			DebugSendData("Message : Power Down", 20);
 8001d52:	4b15      	ldr	r3, [pc, #84]	; (8001da8 <LTEResponseParserBuffer+0x1fc>)
 8001d54:	2114      	movs	r1, #20
 8001d56:	0018      	movs	r0, r3
 8001d58:	f001 fa84 	bl	8003264 <DebugSendData>
		}
	}
}
 8001d5c:	46c0      	nop			; (mov r8, r8)
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	b006      	add	sp, #24
 8001d62:	bd80      	pop	{r7, pc}
 8001d64:	2000024c 	.word	0x2000024c
 8001d68:	2000054c 	.word	0x2000054c
 8001d6c:	08007dd0 	.word	0x08007dd0
 8001d70:	08007de0 	.word	0x08007de0
 8001d74:	08007dec 	.word	0x08007dec
 8001d78:	08007dfc 	.word	0x08007dfc
 8001d7c:	08007e0c 	.word	0x08007e0c
 8001d80:	20000119 	.word	0x20000119
 8001d84:	20000229 	.word	0x20000229
 8001d88:	20000193 	.word	0x20000193
 8001d8c:	08007e20 	.word	0x08007e20
 8001d90:	20000824 	.word	0x20000824
 8001d94:	08007e28 	.word	0x08007e28
 8001d98:	2000010d 	.word	0x2000010d
 8001d9c:	2000023a 	.word	0x2000023a
 8001da0:	20000242 	.word	0x20000242
 8001da4:	08007e3c 	.word	0x08007e3c
 8001da8:	08007e44 	.word	0x08007e44

08001dac <SearchMessage>:

uint8_t SearchMessage(uint8_t startInd, char msg[], uint8_t msgSize) {
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b084      	sub	sp, #16
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6039      	str	r1, [r7, #0]
 8001db4:	0011      	movs	r1, r2
 8001db6:	1dfb      	adds	r3, r7, #7
 8001db8:	1c02      	adds	r2, r0, #0
 8001dba:	701a      	strb	r2, [r3, #0]
 8001dbc:	1dbb      	adds	r3, r7, #6
 8001dbe:	1c0a      	adds	r2, r1, #0
 8001dc0:	701a      	strb	r2, [r3, #0]
	uint8_t msgInd = 0;
 8001dc2:	230f      	movs	r3, #15
 8001dc4:	18fb      	adds	r3, r7, r3
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	701a      	strb	r2, [r3, #0]
	for (int i = startInd; i < sizeof(uartLTEParameters.rxBuffer); ++i) {
 8001dca:	1dfb      	adds	r3, r7, #7
 8001dcc:	781b      	ldrb	r3, [r3, #0]
 8001dce:	60bb      	str	r3, [r7, #8]
 8001dd0:	e021      	b.n	8001e16 <SearchMessage+0x6a>
		if (uartLTEParameters.rxBuffer[i] == msg[msgInd]) {
 8001dd2:	4a15      	ldr	r2, [pc, #84]	; (8001e28 <SearchMessage+0x7c>)
 8001dd4:	68bb      	ldr	r3, [r7, #8]
 8001dd6:	18d3      	adds	r3, r2, r3
 8001dd8:	781a      	ldrb	r2, [r3, #0]
 8001dda:	200f      	movs	r0, #15
 8001ddc:	183b      	adds	r3, r7, r0
 8001dde:	781b      	ldrb	r3, [r3, #0]
 8001de0:	6839      	ldr	r1, [r7, #0]
 8001de2:	18cb      	adds	r3, r1, r3
 8001de4:	781b      	ldrb	r3, [r3, #0]
 8001de6:	429a      	cmp	r2, r3
 8001de8:	d105      	bne.n	8001df6 <SearchMessage+0x4a>
			msgInd++;
 8001dea:	183b      	adds	r3, r7, r0
 8001dec:	781a      	ldrb	r2, [r3, #0]
 8001dee:	183b      	adds	r3, r7, r0
 8001df0:	3201      	adds	r2, #1
 8001df2:	701a      	strb	r2, [r3, #0]
 8001df4:	e003      	b.n	8001dfe <SearchMessage+0x52>
		} else {
			msgInd = 0;
 8001df6:	230f      	movs	r3, #15
 8001df8:	18fb      	adds	r3, r7, r3
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	701a      	strb	r2, [r3, #0]
		}

		if (msgInd == msgSize) {
 8001dfe:	230f      	movs	r3, #15
 8001e00:	18fa      	adds	r2, r7, r3
 8001e02:	1dbb      	adds	r3, r7, #6
 8001e04:	7812      	ldrb	r2, [r2, #0]
 8001e06:	781b      	ldrb	r3, [r3, #0]
 8001e08:	429a      	cmp	r2, r3
 8001e0a:	d101      	bne.n	8001e10 <SearchMessage+0x64>
			return 1;
 8001e0c:	2301      	movs	r3, #1
 8001e0e:	e006      	b.n	8001e1e <SearchMessage+0x72>
	for (int i = startInd; i < sizeof(uartLTEParameters.rxBuffer); ++i) {
 8001e10:	68bb      	ldr	r3, [r7, #8]
 8001e12:	3301      	adds	r3, #1
 8001e14:	60bb      	str	r3, [r7, #8]
 8001e16:	68bb      	ldr	r3, [r7, #8]
 8001e18:	2bff      	cmp	r3, #255	; 0xff
 8001e1a:	d9da      	bls.n	8001dd2 <SearchMessage+0x26>
		}
	}

	return 0;
 8001e1c:	2300      	movs	r3, #0
}
 8001e1e:	0018      	movs	r0, r3
 8001e20:	46bd      	mov	sp, r7
 8001e22:	b004      	add	sp, #16
 8001e24:	bd80      	pop	{r7, pc}
 8001e26:	46c0      	nop			; (mov r8, r8)
 8001e28:	2000054c 	.word	0x2000054c

08001e2c <SearchStatu>:

void SearchStatu() {
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b084      	sub	sp, #16
 8001e30:	af00      	add	r7, sp, #0
	lteParameters.uartResHeader = HEAD_NONE;
 8001e32:	4a20      	ldr	r2, [pc, #128]	; (8001eb4 <SearchStatu+0x88>)
 8001e34:	230c      	movs	r3, #12
 8001e36:	33ff      	adds	r3, #255	; 0xff
 8001e38:	2101      	movs	r1, #1
 8001e3a:	54d1      	strb	r1, [r2, r3]

	char msgOk[] = "OK";
 8001e3c:	200c      	movs	r0, #12
 8001e3e:	183b      	adds	r3, r7, r0
 8001e40:	4a1d      	ldr	r2, [pc, #116]	; (8001eb8 <SearchStatu+0x8c>)
 8001e42:	8811      	ldrh	r1, [r2, #0]
 8001e44:	8019      	strh	r1, [r3, #0]
 8001e46:	7892      	ldrb	r2, [r2, #2]
 8001e48:	709a      	strb	r2, [r3, #2]
	char msgErr[] = "ERROR";
 8001e4a:	1d3b      	adds	r3, r7, #4
 8001e4c:	4a1b      	ldr	r2, [pc, #108]	; (8001ebc <SearchStatu+0x90>)
 8001e4e:	6811      	ldr	r1, [r2, #0]
 8001e50:	6019      	str	r1, [r3, #0]
 8001e52:	8892      	ldrh	r2, [r2, #4]
 8001e54:	809a      	strh	r2, [r3, #4]
	char msgRdy[] = "RDY";
 8001e56:	003b      	movs	r3, r7
 8001e58:	4a19      	ldr	r2, [pc, #100]	; (8001ec0 <SearchStatu+0x94>)
 8001e5a:	601a      	str	r2, [r3, #0]

	if (SearchMessage(0, msgOk, 2))
 8001e5c:	183b      	adds	r3, r7, r0
 8001e5e:	2202      	movs	r2, #2
 8001e60:	0019      	movs	r1, r3
 8001e62:	2000      	movs	r0, #0
 8001e64:	f7ff ffa2 	bl	8001dac <SearchMessage>
 8001e68:	1e03      	subs	r3, r0, #0
 8001e6a:	d004      	beq.n	8001e76 <SearchStatu+0x4a>
		lteParameters.uartResHeader = HEAD_OK;
 8001e6c:	4a11      	ldr	r2, [pc, #68]	; (8001eb4 <SearchStatu+0x88>)
 8001e6e:	230c      	movs	r3, #12
 8001e70:	33ff      	adds	r3, #255	; 0xff
 8001e72:	2102      	movs	r1, #2
 8001e74:	54d1      	strb	r1, [r2, r3]
	if (SearchMessage(0, msgErr, 5))
 8001e76:	1d3b      	adds	r3, r7, #4
 8001e78:	2205      	movs	r2, #5
 8001e7a:	0019      	movs	r1, r3
 8001e7c:	2000      	movs	r0, #0
 8001e7e:	f7ff ff95 	bl	8001dac <SearchMessage>
 8001e82:	1e03      	subs	r3, r0, #0
 8001e84:	d004      	beq.n	8001e90 <SearchStatu+0x64>
		lteParameters.uartResHeader = HEAD_ERROR;
 8001e86:	4a0b      	ldr	r2, [pc, #44]	; (8001eb4 <SearchStatu+0x88>)
 8001e88:	230c      	movs	r3, #12
 8001e8a:	33ff      	adds	r3, #255	; 0xff
 8001e8c:	2103      	movs	r1, #3
 8001e8e:	54d1      	strb	r1, [r2, r3]
	if (SearchMessage(0, msgRdy, 3))
 8001e90:	003b      	movs	r3, r7
 8001e92:	2203      	movs	r2, #3
 8001e94:	0019      	movs	r1, r3
 8001e96:	2000      	movs	r0, #0
 8001e98:	f7ff ff88 	bl	8001dac <SearchMessage>
 8001e9c:	1e03      	subs	r3, r0, #0
 8001e9e:	d004      	beq.n	8001eaa <SearchStatu+0x7e>
		lteParameters.uartResHeader = HEAD_READY;
 8001ea0:	4a04      	ldr	r2, [pc, #16]	; (8001eb4 <SearchStatu+0x88>)
 8001ea2:	230c      	movs	r3, #12
 8001ea4:	33ff      	adds	r3, #255	; 0xff
 8001ea6:	2104      	movs	r1, #4
 8001ea8:	54d1      	strb	r1, [r2, r3]
}
 8001eaa:	46c0      	nop			; (mov r8, r8)
 8001eac:	46bd      	mov	sp, r7
 8001eae:	b004      	add	sp, #16
 8001eb0:	bd80      	pop	{r7, pc}
 8001eb2:	46c0      	nop			; (mov r8, r8)
 8001eb4:	2000024c 	.word	0x2000024c
 8001eb8:	08007e5c 	.word	0x08007e5c
 8001ebc:	08007e60 	.word	0x08007e60
 8001ec0:	00594452 	.word	0x00594452

08001ec4 <ConvertIdToChar>:

char ConvertIdToChar(uint8_t id) {
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b084      	sub	sp, #16
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	0002      	movs	r2, r0
 8001ecc:	1dfb      	adds	r3, r7, #7
 8001ece:	701a      	strb	r2, [r3, #0]
	char retVal = '1';
 8001ed0:	230f      	movs	r3, #15
 8001ed2:	18fb      	adds	r3, r7, r3
 8001ed4:	2231      	movs	r2, #49	; 0x31
 8001ed6:	701a      	strb	r2, [r3, #0]
	switch (id) {
 8001ed8:	1dfb      	adds	r3, r7, #7
 8001eda:	781b      	ldrb	r3, [r3, #0]
 8001edc:	2b09      	cmp	r3, #9
 8001ede:	d836      	bhi.n	8001f4e <ConvertIdToChar+0x8a>
 8001ee0:	009a      	lsls	r2, r3, #2
 8001ee2:	4b1f      	ldr	r3, [pc, #124]	; (8001f60 <ConvertIdToChar+0x9c>)
 8001ee4:	18d3      	adds	r3, r2, r3
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	469f      	mov	pc, r3
	case 0:
		retVal = '0';
 8001eea:	230f      	movs	r3, #15
 8001eec:	18fb      	adds	r3, r7, r3
 8001eee:	2230      	movs	r2, #48	; 0x30
 8001ef0:	701a      	strb	r2, [r3, #0]
		break;
 8001ef2:	e02d      	b.n	8001f50 <ConvertIdToChar+0x8c>
	case 1:
		retVal = '1';
 8001ef4:	230f      	movs	r3, #15
 8001ef6:	18fb      	adds	r3, r7, r3
 8001ef8:	2231      	movs	r2, #49	; 0x31
 8001efa:	701a      	strb	r2, [r3, #0]
		break;
 8001efc:	e028      	b.n	8001f50 <ConvertIdToChar+0x8c>
	case 2:
		retVal = '2';
 8001efe:	230f      	movs	r3, #15
 8001f00:	18fb      	adds	r3, r7, r3
 8001f02:	2232      	movs	r2, #50	; 0x32
 8001f04:	701a      	strb	r2, [r3, #0]
		break;
 8001f06:	e023      	b.n	8001f50 <ConvertIdToChar+0x8c>
	case 3:
		retVal = '3';
 8001f08:	230f      	movs	r3, #15
 8001f0a:	18fb      	adds	r3, r7, r3
 8001f0c:	2233      	movs	r2, #51	; 0x33
 8001f0e:	701a      	strb	r2, [r3, #0]
		break;
 8001f10:	e01e      	b.n	8001f50 <ConvertIdToChar+0x8c>
	case 4:
		retVal = '4';
 8001f12:	230f      	movs	r3, #15
 8001f14:	18fb      	adds	r3, r7, r3
 8001f16:	2234      	movs	r2, #52	; 0x34
 8001f18:	701a      	strb	r2, [r3, #0]
		break;
 8001f1a:	e019      	b.n	8001f50 <ConvertIdToChar+0x8c>
	case 5:
		retVal = '5';
 8001f1c:	230f      	movs	r3, #15
 8001f1e:	18fb      	adds	r3, r7, r3
 8001f20:	2235      	movs	r2, #53	; 0x35
 8001f22:	701a      	strb	r2, [r3, #0]
		break;
 8001f24:	e014      	b.n	8001f50 <ConvertIdToChar+0x8c>
	case 6:
		retVal = '6';
 8001f26:	230f      	movs	r3, #15
 8001f28:	18fb      	adds	r3, r7, r3
 8001f2a:	2236      	movs	r2, #54	; 0x36
 8001f2c:	701a      	strb	r2, [r3, #0]
		break;
 8001f2e:	e00f      	b.n	8001f50 <ConvertIdToChar+0x8c>
	case 7:
		retVal = '7';
 8001f30:	230f      	movs	r3, #15
 8001f32:	18fb      	adds	r3, r7, r3
 8001f34:	2237      	movs	r2, #55	; 0x37
 8001f36:	701a      	strb	r2, [r3, #0]
		break;
 8001f38:	e00a      	b.n	8001f50 <ConvertIdToChar+0x8c>
	case 8:
		retVal = '8';
 8001f3a:	230f      	movs	r3, #15
 8001f3c:	18fb      	adds	r3, r7, r3
 8001f3e:	2238      	movs	r2, #56	; 0x38
 8001f40:	701a      	strb	r2, [r3, #0]
		break;
 8001f42:	e005      	b.n	8001f50 <ConvertIdToChar+0x8c>
	case 9:
		retVal = '9';
 8001f44:	230f      	movs	r3, #15
 8001f46:	18fb      	adds	r3, r7, r3
 8001f48:	2239      	movs	r2, #57	; 0x39
 8001f4a:	701a      	strb	r2, [r3, #0]
		break;
 8001f4c:	e000      	b.n	8001f50 <ConvertIdToChar+0x8c>
	default:
		break;
 8001f4e:	46c0      	nop			; (mov r8, r8)
	}
	return retVal;
 8001f50:	230f      	movs	r3, #15
 8001f52:	18fb      	adds	r3, r7, r3
 8001f54:	781b      	ldrb	r3, [r3, #0]
}
 8001f56:	0018      	movs	r0, r3
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	b004      	add	sp, #16
 8001f5c:	bd80      	pop	{r7, pc}
 8001f5e:	46c0      	nop			; (mov r8, r8)
 8001f60:	08007f94 	.word	0x08007f94

08001f64 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8001f64:	b580      	push	{r7, lr}
 8001f66:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001f68:	f001 f9f0 	bl	800334c <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001f6c:	f000 f842 	bl	8001ff4 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001f70:	f7fe ffda 	bl	8000f28 <MX_GPIO_Init>
	MX_RTC_Init();
 8001f74:	f000 fd6a 	bl	8002a4c <MX_RTC_Init>
	MX_TIM2_Init();
 8001f78:	f000 fe74 	bl	8002c64 <MX_TIM2_Init>
	MX_USART1_UART_Init();
 8001f7c:	f000 fef6 	bl	8002d6c <MX_USART1_UART_Init>
	MX_USART2_UART_Init();
 8001f80:	f000 ff24 	bl	8002dcc <MX_USART2_UART_Init>
	MX_ADC_Init();
 8001f84:	f7fe febc 	bl	8000d00 <MX_ADC_Init>
	/* USER CODE BEGIN 2 */
	UartSettings();
 8001f88:	f000 ffd6 	bl	8002f38 <UartSettings>
	WasteInit();
 8001f8c:	f001 f906 	bl	800319c <WasteInit>

	HAL_Delay(5000);
 8001f90:	4b13      	ldr	r3, [pc, #76]	; (8001fe0 <main+0x7c>)
 8001f92:	0018      	movs	r0, r3
 8001f94:	f001 fa4a 	bl	800342c <HAL_Delay>
	DebugSendData("Start App", 9);
 8001f98:	4b12      	ldr	r3, [pc, #72]	; (8001fe4 <main+0x80>)
 8001f9a:	2109      	movs	r1, #9
 8001f9c:	0018      	movs	r0, r3
 8001f9e:	f001 f961 	bl	8003264 <DebugSendData>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		DebugSendData("While Start", 11);
 8001fa2:	4b11      	ldr	r3, [pc, #68]	; (8001fe8 <main+0x84>)
 8001fa4:	210b      	movs	r1, #11
 8001fa6:	0018      	movs	r0, r3
 8001fa8:	f001 f95c 	bl	8003264 <DebugSendData>
		HAL_Delay(1000);
 8001fac:	23fa      	movs	r3, #250	; 0xfa
 8001fae:	009b      	lsls	r3, r3, #2
 8001fb0:	0018      	movs	r0, r3
 8001fb2:	f001 fa3b 	bl	800342c <HAL_Delay>
		if (rtcParameters.wakeUpFlag) {
 8001fb6:	4b0d      	ldr	r3, [pc, #52]	; (8001fec <main+0x88>)
 8001fb8:	781b      	ldrb	r3, [r3, #0]
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d001      	beq.n	8001fc2 <main+0x5e>
			MainProc();
 8001fbe:	f000 f895 	bl	80020ec <MainProc>
		}
		rtcParameters.wakeUpFlag = 0;
 8001fc2:	4b0a      	ldr	r3, [pc, #40]	; (8001fec <main+0x88>)
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	701a      	strb	r2, [r3, #0]
		DebugSendData("Sleep Mode", 10);
 8001fc8:	4b09      	ldr	r3, [pc, #36]	; (8001ff0 <main+0x8c>)
 8001fca:	210a      	movs	r1, #10
 8001fcc:	0018      	movs	r0, r3
 8001fce:	f001 f949 	bl	8003264 <DebugSendData>
		HAL_SuspendTick();
 8001fd2:	f001 fa4f 	bl	8003474 <HAL_SuspendTick>
		HAL_PWR_EnterSTOPMode( PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 8001fd6:	2101      	movs	r1, #1
 8001fd8:	2001      	movs	r0, #1
 8001fda:	f002 f95f 	bl	800429c <HAL_PWR_EnterSTOPMode>
		DebugSendData("While Start", 11);
 8001fde:	e7e0      	b.n	8001fa2 <main+0x3e>
 8001fe0:	00001388 	.word	0x00001388
 8001fe4:	08007e68 	.word	0x08007e68
 8001fe8:	08007e74 	.word	0x08007e74
 8001fec:	2000035c 	.word	0x2000035c
 8001ff0:	08007e80 	.word	0x08007e80

08001ff4 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8001ff4:	b590      	push	{r4, r7, lr}
 8001ff6:	b09d      	sub	sp, #116	; 0x74
 8001ff8:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8001ffa:	2438      	movs	r4, #56	; 0x38
 8001ffc:	193b      	adds	r3, r7, r4
 8001ffe:	0018      	movs	r0, r3
 8002000:	2338      	movs	r3, #56	; 0x38
 8002002:	001a      	movs	r2, r3
 8002004:	2100      	movs	r1, #0
 8002006:	f005 f956 	bl	80072b6 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 800200a:	2324      	movs	r3, #36	; 0x24
 800200c:	18fb      	adds	r3, r7, r3
 800200e:	0018      	movs	r0, r3
 8002010:	2314      	movs	r3, #20
 8002012:	001a      	movs	r2, r3
 8002014:	2100      	movs	r1, #0
 8002016:	f005 f94e 	bl	80072b6 <memset>
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 800201a:	003b      	movs	r3, r7
 800201c:	0018      	movs	r0, r3
 800201e:	2324      	movs	r3, #36	; 0x24
 8002020:	001a      	movs	r2, r3
 8002022:	2100      	movs	r1, #0
 8002024:	f005 f947 	bl	80072b6 <memset>

	/** Configure the main internal regulator output voltage
	 */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002028:	4b2d      	ldr	r3, [pc, #180]	; (80020e0 <SystemClock_Config+0xec>)
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	4a2d      	ldr	r2, [pc, #180]	; (80020e4 <SystemClock_Config+0xf0>)
 800202e:	401a      	ands	r2, r3
 8002030:	4b2b      	ldr	r3, [pc, #172]	; (80020e0 <SystemClock_Config+0xec>)
 8002032:	2180      	movs	r1, #128	; 0x80
 8002034:	0109      	lsls	r1, r1, #4
 8002036:	430a      	orrs	r2, r1
 8002038:	601a      	str	r2, [r3, #0]
	/** Configure LSE Drive Capability
	 */
	HAL_PWR_EnableBkUpAccess();
 800203a:	f002 f921 	bl	8004280 <HAL_PWR_EnableBkUpAccess>
	__HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800203e:	4b2a      	ldr	r3, [pc, #168]	; (80020e8 <SystemClock_Config+0xf4>)
 8002040:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002042:	4b29      	ldr	r3, [pc, #164]	; (80020e8 <SystemClock_Config+0xf4>)
 8002044:	4927      	ldr	r1, [pc, #156]	; (80020e4 <SystemClock_Config+0xf0>)
 8002046:	400a      	ands	r2, r1
 8002048:	651a      	str	r2, [r3, #80]	; 0x50
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI | RCC_OSCILLATORTYPE_LSE;
 800204a:	193b      	adds	r3, r7, r4
 800204c:	2206      	movs	r2, #6
 800204e:	601a      	str	r2, [r3, #0]
	RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8002050:	193b      	adds	r3, r7, r4
 8002052:	2280      	movs	r2, #128	; 0x80
 8002054:	0052      	lsls	r2, r2, #1
 8002056:	609a      	str	r2, [r3, #8]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002058:	193b      	adds	r3, r7, r4
 800205a:	2201      	movs	r2, #1
 800205c:	60da      	str	r2, [r3, #12]
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800205e:	193b      	adds	r3, r7, r4
 8002060:	2210      	movs	r2, #16
 8002062:	611a      	str	r2, [r3, #16]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002064:	193b      	adds	r3, r7, r4
 8002066:	2200      	movs	r2, #0
 8002068:	629a      	str	r2, [r3, #40]	; 0x28
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800206a:	193b      	adds	r3, r7, r4
 800206c:	0018      	movs	r0, r3
 800206e:	f002 f971 	bl	8004354 <HAL_RCC_OscConfig>
 8002072:	1e03      	subs	r3, r0, #0
 8002074:	d001      	beq.n	800207a <SystemClock_Config+0x86>
		Error_Handler();
 8002076:	f000 fce3 	bl	8002a40 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800207a:	2124      	movs	r1, #36	; 0x24
 800207c:	187b      	adds	r3, r7, r1
 800207e:	220f      	movs	r2, #15
 8002080:	601a      	str	r2, [r3, #0]
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8002082:	187b      	adds	r3, r7, r1
 8002084:	2201      	movs	r2, #1
 8002086:	605a      	str	r2, [r3, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002088:	187b      	adds	r3, r7, r1
 800208a:	2200      	movs	r2, #0
 800208c:	609a      	str	r2, [r3, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800208e:	187b      	adds	r3, r7, r1
 8002090:	2200      	movs	r2, #0
 8002092:	60da      	str	r2, [r3, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002094:	187b      	adds	r3, r7, r1
 8002096:	2200      	movs	r2, #0
 8002098:	611a      	str	r2, [r3, #16]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 800209a:	187b      	adds	r3, r7, r1
 800209c:	2100      	movs	r1, #0
 800209e:	0018      	movs	r0, r3
 80020a0:	f002 fd2c 	bl	8004afc <HAL_RCC_ClockConfig>
 80020a4:	1e03      	subs	r3, r0, #0
 80020a6:	d001      	beq.n	80020ac <SystemClock_Config+0xb8>
		Error_Handler();
 80020a8:	f000 fcca 	bl	8002a40 <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1 | RCC_PERIPHCLK_USART2 | RCC_PERIPHCLK_RTC;
 80020ac:	003b      	movs	r3, r7
 80020ae:	2223      	movs	r2, #35	; 0x23
 80020b0:	601a      	str	r2, [r3, #0]
	PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80020b2:	003b      	movs	r3, r7
 80020b4:	2200      	movs	r2, #0
 80020b6:	609a      	str	r2, [r3, #8]
	PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80020b8:	003b      	movs	r3, r7
 80020ba:	2200      	movs	r2, #0
 80020bc:	60da      	str	r2, [r3, #12]
	PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80020be:	003b      	movs	r3, r7
 80020c0:	2280      	movs	r2, #128	; 0x80
 80020c2:	0252      	lsls	r2, r2, #9
 80020c4:	605a      	str	r2, [r3, #4]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 80020c6:	003b      	movs	r3, r7
 80020c8:	0018      	movs	r0, r3
 80020ca:	f002 ff3b 	bl	8004f44 <HAL_RCCEx_PeriphCLKConfig>
 80020ce:	1e03      	subs	r3, r0, #0
 80020d0:	d001      	beq.n	80020d6 <SystemClock_Config+0xe2>
		Error_Handler();
 80020d2:	f000 fcb5 	bl	8002a40 <Error_Handler>
	}
}
 80020d6:	46c0      	nop			; (mov r8, r8)
 80020d8:	46bd      	mov	sp, r7
 80020da:	b01d      	add	sp, #116	; 0x74
 80020dc:	bd90      	pop	{r4, r7, pc}
 80020de:	46c0      	nop			; (mov r8, r8)
 80020e0:	40007000 	.word	0x40007000
 80020e4:	ffffe7ff 	.word	0xffffe7ff
 80020e8:	40021000 	.word	0x40021000

080020ec <MainProc>:

/* USER CODE BEGIN 4 */
void MainProc() {
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b082      	sub	sp, #8
 80020f0:	af00      	add	r7, sp, #0
	DebugSendData("Wake Up", 7);
 80020f2:	4b4b      	ldr	r3, [pc, #300]	; (8002220 <MainProc+0x134>)
 80020f4:	2107      	movs	r1, #7
 80020f6:	0018      	movs	r0, r3
 80020f8:	f001 f8b4 	bl	8003264 <DebugSendData>
	adcParameters.adcReadEnableFlag = 1;
 80020fc:	4b49      	ldr	r3, [pc, #292]	; (8002224 <MainProc+0x138>)
 80020fe:	2201      	movs	r2, #1
 8002100:	735a      	strb	r2, [r3, #13]
	DebugSendData("Enable Adc", 10);
 8002102:	4b49      	ldr	r3, [pc, #292]	; (8002228 <MainProc+0x13c>)
 8002104:	210a      	movs	r1, #10
 8002106:	0018      	movs	r0, r3
 8002108:	f001 f8ac 	bl	8003264 <DebugSendData>
	HAL_ADC_Start_IT(&hadc);
 800210c:	4b47      	ldr	r3, [pc, #284]	; (800222c <MainProc+0x140>)
 800210e:	0018      	movs	r0, r3
 8002110:	f001 fb40 	bl	8003794 <HAL_ADC_Start_IT>
	HAL_Delay(3000);
 8002114:	4b46      	ldr	r3, [pc, #280]	; (8002230 <MainProc+0x144>)
 8002116:	0018      	movs	r0, r3
 8002118:	f001 f988 	bl	800342c <HAL_Delay>
	wasteParameters.voltVal = adcParameters.supplyVoltage;
 800211c:	4b41      	ldr	r3, [pc, #260]	; (8002224 <MainProc+0x138>)
 800211e:	689b      	ldr	r3, [r3, #8]
 8002120:	1c18      	adds	r0, r3, #0
 8002122:	f7fe f9b9 	bl	8000498 <__aeabi_f2uiz>
 8002126:	0003      	movs	r3, r0
 8002128:	b29a      	uxth	r2, r3
 800212a:	4b42      	ldr	r3, [pc, #264]	; (8002234 <MainProc+0x148>)
 800212c:	809a      	strh	r2, [r3, #4]
	wasteParameters.tempVal = adcParameters.tempCelcius;
 800212e:	4b3d      	ldr	r3, [pc, #244]	; (8002224 <MainProc+0x138>)
 8002130:	685b      	ldr	r3, [r3, #4]
 8002132:	b2da      	uxtb	r2, r3
 8002134:	4b3f      	ldr	r3, [pc, #252]	; (8002234 <MainProc+0x148>)
 8002136:	719a      	strb	r2, [r3, #6]
	if (wasteParameters.tempVal > 100) {
 8002138:	4b3e      	ldr	r3, [pc, #248]	; (8002234 <MainProc+0x148>)
 800213a:	799b      	ldrb	r3, [r3, #6]
 800213c:	2b64      	cmp	r3, #100	; 0x64
 800213e:	d909      	bls.n	8002154 <MainProc+0x68>
		wasteParameters.tempVal = wasteParameters.tempVal % 100;
 8002140:	4b3c      	ldr	r3, [pc, #240]	; (8002234 <MainProc+0x148>)
 8002142:	799b      	ldrb	r3, [r3, #6]
 8002144:	2164      	movs	r1, #100	; 0x64
 8002146:	0018      	movs	r0, r3
 8002148:	f7fe f86e 	bl	8000228 <__aeabi_uidivmod>
 800214c:	000b      	movs	r3, r1
 800214e:	b2da      	uxtb	r2, r3
 8002150:	4b38      	ldr	r3, [pc, #224]	; (8002234 <MainProc+0x148>)
 8002152:	719a      	strb	r2, [r3, #6]
	}
	DebugSendData("Disable Adc", 11);
 8002154:	4b38      	ldr	r3, [pc, #224]	; (8002238 <MainProc+0x14c>)
 8002156:	210b      	movs	r1, #11
 8002158:	0018      	movs	r0, r3
 800215a:	f001 f883 	bl	8003264 <DebugSendData>
	adcParameters.adcReadEnableFlag = 0;
 800215e:	4b31      	ldr	r3, [pc, #196]	; (8002224 <MainProc+0x138>)
 8002160:	2200      	movs	r2, #0
 8002162:	735a      	strb	r2, [r3, #13]
	if (wasteParameters.setupMode) {
 8002164:	4b33      	ldr	r3, [pc, #204]	; (8002234 <MainProc+0x148>)
 8002166:	7a1b      	ldrb	r3, [r3, #8]
 8002168:	2b00      	cmp	r3, #0
 800216a:	d00c      	beq.n	8002186 <MainProc+0x9a>

		wasteParameters.setupCount++;
 800216c:	4b31      	ldr	r3, [pc, #196]	; (8002234 <MainProc+0x148>)
 800216e:	79db      	ldrb	r3, [r3, #7]
 8002170:	3301      	adds	r3, #1
 8002172:	b2da      	uxtb	r2, r3
 8002174:	4b2f      	ldr	r3, [pc, #188]	; (8002234 <MainProc+0x148>)
 8002176:	71da      	strb	r2, [r3, #7]

		if (wasteParameters.setupCount >= SETUP_WORK_PERIOD) {
 8002178:	4b2e      	ldr	r3, [pc, #184]	; (8002234 <MainProc+0x148>)
 800217a:	79db      	ldrb	r3, [r3, #7]
 800217c:	2b02      	cmp	r3, #2
 800217e:	d902      	bls.n	8002186 <MainProc+0x9a>
			wasteParameters.setupMode = 0;
 8002180:	4b2c      	ldr	r3, [pc, #176]	; (8002234 <MainProc+0x148>)
 8002182:	2200      	movs	r2, #0
 8002184:	721a      	strb	r2, [r3, #8]
		}
	}
	wasteParameters.gpsAlarmCount++;
 8002186:	4b2b      	ldr	r3, [pc, #172]	; (8002234 <MainProc+0x148>)
 8002188:	7adb      	ldrb	r3, [r3, #11]
 800218a:	3301      	adds	r3, #1
 800218c:	b2da      	uxtb	r2, r3
 800218e:	4b29      	ldr	r3, [pc, #164]	; (8002234 <MainProc+0x148>)
 8002190:	72da      	strb	r2, [r3, #11]
	if (wasteParameters.gpsAlarmCount >= ALARM_WORK_PERIOD) {
 8002192:	4b28      	ldr	r3, [pc, #160]	; (8002234 <MainProc+0x148>)
 8002194:	7adb      	ldrb	r3, [r3, #11]
 8002196:	2b05      	cmp	r3, #5
 8002198:	d902      	bls.n	80021a0 <MainProc+0xb4>
		wasteParameters.gpsAlarmCount = 0;
 800219a:	4b26      	ldr	r3, [pc, #152]	; (8002234 <MainProc+0x148>)
 800219c:	2200      	movs	r2, #0
 800219e:	72da      	strb	r2, [r3, #11]
	}
	if (wasteParameters.setupMode) {
 80021a0:	4b24      	ldr	r3, [pc, #144]	; (8002234 <MainProc+0x148>)
 80021a2:	7a1b      	ldrb	r3, [r3, #8]
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d005      	beq.n	80021b4 <MainProc+0xc8>
		DebugSendData("Setup Mode Enable", 17);
 80021a8:	4b24      	ldr	r3, [pc, #144]	; (800223c <MainProc+0x150>)
 80021aa:	2111      	movs	r1, #17
 80021ac:	0018      	movs	r0, r3
 80021ae:	f001 f859 	bl	8003264 <DebugSendData>
 80021b2:	e004      	b.n	80021be <MainProc+0xd2>
	} else {
		DebugSendData("Setup Mode Disable", 18);
 80021b4:	4b22      	ldr	r3, [pc, #136]	; (8002240 <MainProc+0x154>)
 80021b6:	2112      	movs	r1, #18
 80021b8:	0018      	movs	r0, r3
 80021ba:	f001 f853 	bl	8003264 <DebugSendData>
	}
	if (wasteParameters.preDataSendError) {
 80021be:	4b1d      	ldr	r3, [pc, #116]	; (8002234 <MainProc+0x148>)
 80021c0:	7a5b      	ldrb	r3, [r3, #9]
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d005      	beq.n	80021d2 <MainProc+0xe6>
		DebugSendData("Prev Data Send Error", 20);
 80021c6:	4b1f      	ldr	r3, [pc, #124]	; (8002244 <MainProc+0x158>)
 80021c8:	2114      	movs	r1, #20
 80021ca:	0018      	movs	r0, r3
 80021cc:	f001 f84a 	bl	8003264 <DebugSendData>
 80021d0:	e004      	b.n	80021dc <MainProc+0xf0>
	} else {
		DebugSendData("Prev Data Send Success", 22);
 80021d2:	4b1d      	ldr	r3, [pc, #116]	; (8002248 <MainProc+0x15c>)
 80021d4:	2116      	movs	r1, #22
 80021d6:	0018      	movs	r0, r3
 80021d8:	f001 f844 	bl	8003264 <DebugSendData>
	}
	if (wasteParameters.gpsAlarm) {
 80021dc:	4b15      	ldr	r3, [pc, #84]	; (8002234 <MainProc+0x148>)
 80021de:	7a9b      	ldrb	r3, [r3, #10]
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d005      	beq.n	80021f0 <MainProc+0x104>
		DebugSendData("Gps Alarm Enable", 16);
 80021e4:	4b19      	ldr	r3, [pc, #100]	; (800224c <MainProc+0x160>)
 80021e6:	2110      	movs	r1, #16
 80021e8:	0018      	movs	r0, r3
 80021ea:	f001 f83b 	bl	8003264 <DebugSendData>
 80021ee:	e004      	b.n	80021fa <MainProc+0x10e>
	} else {
		DebugSendData("Gps Alarm Disable", 17);
 80021f0:	4b17      	ldr	r3, [pc, #92]	; (8002250 <MainProc+0x164>)
 80021f2:	2111      	movs	r1, #17
 80021f4:	0018      	movs	r0, r3
 80021f6:	f001 f835 	bl	8003264 <DebugSendData>
	}
	if (wasteParameters.ultSensCount == 0) {
 80021fa:	4b0e      	ldr	r3, [pc, #56]	; (8002234 <MainProc+0x148>)
 80021fc:	785b      	ldrb	r3, [r3, #1]
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d154      	bne.n	80022ac <MainProc+0x1c0>
		if (wasteParameters.ultSensIndex >= USR_MEASURE_TOTAL_COUNT) {
 8002202:	4b0c      	ldr	r3, [pc, #48]	; (8002234 <MainProc+0x148>)
 8002204:	789b      	ldrb	r3, [r3, #2]
 8002206:	2b17      	cmp	r3, #23
 8002208:	d902      	bls.n	8002210 <MainProc+0x124>
			wasteParameters.ultSensIndex = 0;
 800220a:	4b0a      	ldr	r3, [pc, #40]	; (8002234 <MainProc+0x148>)
 800220c:	2200      	movs	r2, #0
 800220e:	709a      	strb	r2, [r3, #2]
		}
		if (wasteParameters.ultSensIndex == 0) {
 8002210:	4b08      	ldr	r3, [pc, #32]	; (8002234 <MainProc+0x148>)
 8002212:	789b      	ldrb	r3, [r3, #2]
 8002214:	2b00      	cmp	r3, #0
 8002216:	d12e      	bne.n	8002276 <MainProc+0x18a>
			for (int i = 0; i < usrParameters.measureRepTotalCount; ++i) {
 8002218:	2300      	movs	r3, #0
 800221a:	607b      	str	r3, [r7, #4]
 800221c:	e025      	b.n	800226a <MainProc+0x17e>
 800221e:	46c0      	nop			; (mov r8, r8)
 8002220:	08007e8c 	.word	0x08007e8c
 8002224:	20000098 	.word	0x20000098
 8002228:	08007e94 	.word	0x08007e94
 800222c:	200000a8 	.word	0x200000a8
 8002230:	00000bb8 	.word	0x00000bb8
 8002234:	20000824 	.word	0x20000824
 8002238:	08007ea0 	.word	0x08007ea0
 800223c:	08007eac 	.word	0x08007eac
 8002240:	08007ec0 	.word	0x08007ec0
 8002244:	08007ed4 	.word	0x08007ed4
 8002248:	08007eec 	.word	0x08007eec
 800224c:	08007f04 	.word	0x08007f04
 8002250:	08007f18 	.word	0x08007f18
				usrParameters.usrMeasTotalArray[i] = 0;
 8002254:	4a95      	ldr	r2, [pc, #596]	; (80024ac <MainProc+0x3c0>)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	330c      	adds	r3, #12
 800225a:	005b      	lsls	r3, r3, #1
 800225c:	18d3      	adds	r3, r2, r3
 800225e:	3304      	adds	r3, #4
 8002260:	2200      	movs	r2, #0
 8002262:	801a      	strh	r2, [r3, #0]
			for (int i = 0; i < usrParameters.measureRepTotalCount; ++i) {
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	3301      	adds	r3, #1
 8002268:	607b      	str	r3, [r7, #4]
 800226a:	4b90      	ldr	r3, [pc, #576]	; (80024ac <MainProc+0x3c0>)
 800226c:	889b      	ldrh	r3, [r3, #4]
 800226e:	001a      	movs	r2, r3
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	4293      	cmp	r3, r2
 8002274:	dbee      	blt.n	8002254 <MainProc+0x168>
			}
		}

		UsrEnable();
 8002276:	f000 fec5 	bl	8003004 <UsrEnable>
		HAL_Delay(1000);
 800227a:	23fa      	movs	r3, #250	; 0xfa
 800227c:	009b      	lsls	r3, r3, #2
 800227e:	0018      	movs	r0, r3
 8002280:	f001 f8d4 	bl	800342c <HAL_Delay>
		UsrMeasure();
 8002284:	f000 ff08 	bl	8003098 <UsrMeasure>
		HAL_Delay(1000);
 8002288:	23fa      	movs	r3, #250	; 0xfa
 800228a:	009b      	lsls	r3, r3, #2
 800228c:	0018      	movs	r0, r3
 800228e:	f001 f8cd 	bl	800342c <HAL_Delay>
		UsrDisable();
 8002292:	f000 fecf 	bl	8003034 <UsrDisable>
		HAL_Delay(1000);
 8002296:	23fa      	movs	r3, #250	; 0xfa
 8002298:	009b      	lsls	r3, r3, #2
 800229a:	0018      	movs	r0, r3
 800229c:	f001 f8c6 	bl	800342c <HAL_Delay>
		wasteParameters.ultSensIndex++;
 80022a0:	4b83      	ldr	r3, [pc, #524]	; (80024b0 <MainProc+0x3c4>)
 80022a2:	789b      	ldrb	r3, [r3, #2]
 80022a4:	3301      	adds	r3, #1
 80022a6:	b2da      	uxtb	r2, r3
 80022a8:	4b81      	ldr	r3, [pc, #516]	; (80024b0 <MainProc+0x3c4>)
 80022aa:	709a      	strb	r2, [r3, #2]
	}
	wasteParameters.ultSensCount++;
 80022ac:	4b80      	ldr	r3, [pc, #512]	; (80024b0 <MainProc+0x3c4>)
 80022ae:	785b      	ldrb	r3, [r3, #1]
 80022b0:	3301      	adds	r3, #1
 80022b2:	b2da      	uxtb	r2, r3
 80022b4:	4b7e      	ldr	r3, [pc, #504]	; (80024b0 <MainProc+0x3c4>)
 80022b6:	705a      	strb	r2, [r3, #1]
	if (wasteParameters.ultSensCount >= ULTL_WORK_PERIOD) {
 80022b8:	4b7d      	ldr	r3, [pc, #500]	; (80024b0 <MainProc+0x3c4>)
 80022ba:	785b      	ldrb	r3, [r3, #1]
 80022bc:	2b05      	cmp	r3, #5
 80022be:	d902      	bls.n	80022c6 <MainProc+0x1da>
		wasteParameters.ultSensCount = 0;
 80022c0:	4b7b      	ldr	r3, [pc, #492]	; (80024b0 <MainProc+0x3c4>)
 80022c2:	2200      	movs	r2, #0
 80022c4:	705a      	strb	r2, [r3, #1]
	}
	if (wasteParameters.wakeUpCount == 0 || wasteParameters.tempVal >= CRITICAL_TEMPERATURE || (wasteParameters.setupMode) || (wasteParameters.preDataSendError == 1 && wasteParameters.wakeUpCount == ALARM_WORK_PERIOD) || wasteParameters.gpsAlarm == 1) {
 80022c6:	4b7a      	ldr	r3, [pc, #488]	; (80024b0 <MainProc+0x3c4>)
 80022c8:	781b      	ldrb	r3, [r3, #0]
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d014      	beq.n	80022f8 <MainProc+0x20c>
 80022ce:	4b78      	ldr	r3, [pc, #480]	; (80024b0 <MainProc+0x3c4>)
 80022d0:	799b      	ldrb	r3, [r3, #6]
 80022d2:	2b4f      	cmp	r3, #79	; 0x4f
 80022d4:	d810      	bhi.n	80022f8 <MainProc+0x20c>
 80022d6:	4b76      	ldr	r3, [pc, #472]	; (80024b0 <MainProc+0x3c4>)
 80022d8:	7a1b      	ldrb	r3, [r3, #8]
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d10c      	bne.n	80022f8 <MainProc+0x20c>
 80022de:	4b74      	ldr	r3, [pc, #464]	; (80024b0 <MainProc+0x3c4>)
 80022e0:	7a5b      	ldrb	r3, [r3, #9]
 80022e2:	2b01      	cmp	r3, #1
 80022e4:	d103      	bne.n	80022ee <MainProc+0x202>
 80022e6:	4b72      	ldr	r3, [pc, #456]	; (80024b0 <MainProc+0x3c4>)
 80022e8:	781b      	ldrb	r3, [r3, #0]
 80022ea:	2b06      	cmp	r3, #6
 80022ec:	d004      	beq.n	80022f8 <MainProc+0x20c>
 80022ee:	4b70      	ldr	r3, [pc, #448]	; (80024b0 <MainProc+0x3c4>)
 80022f0:	7a9b      	ldrb	r3, [r3, #10]
 80022f2:	2b01      	cmp	r3, #1
 80022f4:	d000      	beq.n	80022f8 <MainProc+0x20c>
 80022f6:	e0c7      	b.n	8002488 <MainProc+0x39c>

		wasteParameters.wakeUpCount = 0;
 80022f8:	4b6d      	ldr	r3, [pc, #436]	; (80024b0 <MainProc+0x3c4>)
 80022fa:	2200      	movs	r2, #0
 80022fc:	701a      	strb	r2, [r3, #0]
		LTEInitParams();
 80022fe:	f7fe febb 	bl	8001078 <LTEInitParams>
		DebugSendData("LTE Op Start", 12);
 8002302:	4b6c      	ldr	r3, [pc, #432]	; (80024b4 <MainProc+0x3c8>)
 8002304:	210c      	movs	r1, #12
 8002306:	0018      	movs	r0, r3
 8002308:	f000 ffac 	bl	8003264 <DebugSendData>
		if (wasteParameters.gpsAlarm == 0) {
 800230c:	4b68      	ldr	r3, [pc, #416]	; (80024b0 <MainProc+0x3c4>)
 800230e:	7a9b      	ldrb	r3, [r3, #10]
 8002310:	2b00      	cmp	r3, #0
 8002312:	d11f      	bne.n	8002354 <MainProc+0x268>
			LTEEnable();
 8002314:	f7ff f88a 	bl	800142c <LTEEnable>
			HAL_Delay(1000);
 8002318:	23fa      	movs	r3, #250	; 0xfa
 800231a:	009b      	lsls	r3, r3, #2
 800231c:	0018      	movs	r0, r3
 800231e:	f001 f885 	bl	800342c <HAL_Delay>
			LTEPowerOn();
 8002322:	f7ff f80d 	bl	8001340 <LTEPowerOn>
			HAL_Delay(1000);
 8002326:	23fa      	movs	r3, #250	; 0xfa
 8002328:	009b      	lsls	r3, r3, #2
 800232a:	0018      	movs	r0, r3
 800232c:	f001 f87e 	bl	800342c <HAL_Delay>
			if (lteParameters.uartResMessage == MESG_POWERDOWN) {
 8002330:	4a61      	ldr	r2, [pc, #388]	; (80024b8 <MainProc+0x3cc>)
 8002332:	2386      	movs	r3, #134	; 0x86
 8002334:	005b      	lsls	r3, r3, #1
 8002336:	5cd3      	ldrb	r3, [r2, r3]
 8002338:	2b02      	cmp	r3, #2
 800233a:	d10b      	bne.n	8002354 <MainProc+0x268>
				DebugSendData("Power On Again", 14);
 800233c:	4b5f      	ldr	r3, [pc, #380]	; (80024bc <MainProc+0x3d0>)
 800233e:	210e      	movs	r1, #14
 8002340:	0018      	movs	r0, r3
 8002342:	f000 ff8f 	bl	8003264 <DebugSendData>
				LTEPowerOn();
 8002346:	f7fe fffb 	bl	8001340 <LTEPowerOn>
				HAL_Delay(1000);
 800234a:	23fa      	movs	r3, #250	; 0xfa
 800234c:	009b      	lsls	r3, r3, #2
 800234e:	0018      	movs	r0, r3
 8002350:	f001 f86c 	bl	800342c <HAL_Delay>
			}
		}
		wasteParameters.preDataSendError = 1;
 8002354:	4b56      	ldr	r3, [pc, #344]	; (80024b0 <MainProc+0x3c4>)
 8002356:	2201      	movs	r2, #1
 8002358:	725a      	strb	r2, [r3, #9]
		LTEAt();
 800235a:	f7ff f9e9 	bl	8001730 <LTEAt>
		HAL_Delay(1000);
 800235e:	23fa      	movs	r3, #250	; 0xfa
 8002360:	009b      	lsls	r3, r3, #2
 8002362:	0018      	movs	r0, r3
 8002364:	f001 f862 	bl	800342c <HAL_Delay>
		LTEGetIMEI();
 8002368:	f7ff f8d2 	bl	8001510 <LTEGetIMEI>
		HAL_Delay(1000);
 800236c:	23fa      	movs	r3, #250	; 0xfa
 800236e:	009b      	lsls	r3, r3, #2
 8002370:	0018      	movs	r0, r3
 8002372:	f001 f85b 	bl	800342c <HAL_Delay>
		LTEGetImsi();
 8002376:	f7ff f90f 	bl	8001598 <LTEGetImsi>
		HAL_Delay(1000);
 800237a:	23fa      	movs	r3, #250	; 0xfa
 800237c:	009b      	lsls	r3, r3, #2
 800237e:	0018      	movs	r0, r3
 8002380:	f001 f854 	bl	800342c <HAL_Delay>
		SetSendData();
 8002384:	f000 f89e 	bl	80024c4 <SetSendData>
		HAL_Delay(1000);
 8002388:	23fa      	movs	r3, #250	; 0xfa
 800238a:	009b      	lsls	r3, r3, #2
 800238c:	0018      	movs	r0, r3
 800238e:	f001 f84d 	bl	800342c <HAL_Delay>
		LTEPdpConfigure();
 8002392:	f7ff fadd 	bl	8001950 <LTEPdpConfigure>
		HAL_Delay(1000);
 8002396:	23fa      	movs	r3, #250	; 0xfa
 8002398:	009b      	lsls	r3, r3, #2
 800239a:	0018      	movs	r0, r3
 800239c:	f001 f846 	bl	800342c <HAL_Delay>
		LTEPdpOpen();
 80023a0:	f7ff fa4e 	bl	8001840 <LTEPdpOpen>
		HAL_Delay(1000);
 80023a4:	23fa      	movs	r3, #250	; 0xfa
 80023a6:	009b      	lsls	r3, r3, #2
 80023a8:	0018      	movs	r0, r3
 80023aa:	f001 f83f 	bl	800342c <HAL_Delay>
		LTEOpenConnection();
 80023ae:	f7ff f937 	bl	8001620 <LTEOpenConnection>
		HAL_Delay(1000);
 80023b2:	23fa      	movs	r3, #250	; 0xfa
 80023b4:	009b      	lsls	r3, r3, #2
 80023b6:	0018      	movs	r0, r3
 80023b8:	f001 f838 	bl	800342c <HAL_Delay>
		LTEPrepToSendData();
 80023bc:	f7ff f974 	bl	80016a8 <LTEPrepToSendData>
		HAL_Delay(1000);
 80023c0:	23fa      	movs	r3, #250	; 0xfa
 80023c2:	009b      	lsls	r3, r3, #2
 80023c4:	0018      	movs	r0, r3
 80023c6:	f001 f831 	bl	800342c <HAL_Delay>
		LTESendMsg();
 80023ca:	f7ff fb05 	bl	80019d8 <LTESendMsg>
		HAL_Delay(1000);
 80023ce:	23fa      	movs	r3, #250	; 0xfa
 80023d0:	009b      	lsls	r3, r3, #2
 80023d2:	0018      	movs	r0, r3
 80023d4:	f001 f82a 	bl	800342c <HAL_Delay>
		LTEReceiveMsg();
 80023d8:	f7ff fb4a 	bl	8001a70 <LTEReceiveMsg>
		HAL_Delay(1000);
 80023dc:	23fa      	movs	r3, #250	; 0xfa
 80023de:	009b      	lsls	r3, r3, #2
 80023e0:	0018      	movs	r0, r3
 80023e2:	f001 f823 	bl	800342c <HAL_Delay>
		LTECloseConnection();
 80023e6:	f7ff f9e7 	bl	80017b8 <LTECloseConnection>
		HAL_Delay(1000);
 80023ea:	23fa      	movs	r3, #250	; 0xfa
 80023ec:	009b      	lsls	r3, r3, #2
 80023ee:	0018      	movs	r0, r3
 80023f0:	f001 f81c 	bl	800342c <HAL_Delay>
		LTEPdpClose();
 80023f4:	f7ff fa68 	bl	80018c8 <LTEPdpClose>
		HAL_Delay(1000);
 80023f8:	23fa      	movs	r3, #250	; 0xfa
 80023fa:	009b      	lsls	r3, r3, #2
 80023fc:	0018      	movs	r0, r3
 80023fe:	f001 f815 	bl	800342c <HAL_Delay>
		if (wasteParameters.gpsAlarm == 0) {
 8002402:	4b2b      	ldr	r3, [pc, #172]	; (80024b0 <MainProc+0x3c4>)
 8002404:	7a9b      	ldrb	r3, [r3, #10]
 8002406:	2b00      	cmp	r3, #0
 8002408:	d10f      	bne.n	800242a <MainProc+0x33e>
			LTEPowerOff();
 800240a:	f7fe ffc7 	bl	800139c <LTEPowerOff>
			HAL_Delay(1000);
 800240e:	23fa      	movs	r3, #250	; 0xfa
 8002410:	009b      	lsls	r3, r3, #2
 8002412:	0018      	movs	r0, r3
 8002414:	f001 f80a 	bl	800342c <HAL_Delay>
			LTEPowerOffWithUart();
 8002418:	f7ff f840 	bl	800149c <LTEPowerOffWithUart>
			HAL_Delay(1000);
 800241c:	23fa      	movs	r3, #250	; 0xfa
 800241e:	009b      	lsls	r3, r3, #2
 8002420:	0018      	movs	r0, r3
 8002422:	f001 f803 	bl	800342c <HAL_Delay>
			LTEDisable();
 8002426:	f7ff f819 	bl	800145c <LTEDisable>
		}
		DebugSendData("LTE Op Stop", 11);
 800242a:	4b25      	ldr	r3, [pc, #148]	; (80024c0 <MainProc+0x3d4>)
 800242c:	210b      	movs	r1, #11
 800242e:	0018      	movs	r0, r3
 8002430:	f000 ff18 	bl	8003264 <DebugSendData>
		lteParameters.contexId++;
 8002434:	4a20      	ldr	r2, [pc, #128]	; (80024b8 <MainProc+0x3cc>)
 8002436:	2387      	movs	r3, #135	; 0x87
 8002438:	005b      	lsls	r3, r3, #1
 800243a:	5cd3      	ldrb	r3, [r2, r3]
 800243c:	3301      	adds	r3, #1
 800243e:	b2d9      	uxtb	r1, r3
 8002440:	4a1d      	ldr	r2, [pc, #116]	; (80024b8 <MainProc+0x3cc>)
 8002442:	2387      	movs	r3, #135	; 0x87
 8002444:	005b      	lsls	r3, r3, #1
 8002446:	54d1      	strb	r1, [r2, r3]
		lteParameters.sessionId++;
 8002448:	4a1b      	ldr	r2, [pc, #108]	; (80024b8 <MainProc+0x3cc>)
 800244a:	2310      	movs	r3, #16
 800244c:	33ff      	adds	r3, #255	; 0xff
 800244e:	5cd3      	ldrb	r3, [r2, r3]
 8002450:	3301      	adds	r3, #1
 8002452:	b2d9      	uxtb	r1, r3
 8002454:	4a18      	ldr	r2, [pc, #96]	; (80024b8 <MainProc+0x3cc>)
 8002456:	2310      	movs	r3, #16
 8002458:	33ff      	adds	r3, #255	; 0xff
 800245a:	54d1      	strb	r1, [r2, r3]
		if (lteParameters.contexId >= 9)
 800245c:	4a16      	ldr	r2, [pc, #88]	; (80024b8 <MainProc+0x3cc>)
 800245e:	2387      	movs	r3, #135	; 0x87
 8002460:	005b      	lsls	r3, r3, #1
 8002462:	5cd3      	ldrb	r3, [r2, r3]
 8002464:	2b08      	cmp	r3, #8
 8002466:	d904      	bls.n	8002472 <MainProc+0x386>
			lteParameters.contexId = 1;
 8002468:	4a13      	ldr	r2, [pc, #76]	; (80024b8 <MainProc+0x3cc>)
 800246a:	2387      	movs	r3, #135	; 0x87
 800246c:	005b      	lsls	r3, r3, #1
 800246e:	2101      	movs	r1, #1
 8002470:	54d1      	strb	r1, [r2, r3]
		if (lteParameters.contexId >= 9)
 8002472:	4a11      	ldr	r2, [pc, #68]	; (80024b8 <MainProc+0x3cc>)
 8002474:	2387      	movs	r3, #135	; 0x87
 8002476:	005b      	lsls	r3, r3, #1
 8002478:	5cd3      	ldrb	r3, [r2, r3]
 800247a:	2b08      	cmp	r3, #8
 800247c:	d904      	bls.n	8002488 <MainProc+0x39c>
			lteParameters.sessionId = 0;
 800247e:	4a0e      	ldr	r2, [pc, #56]	; (80024b8 <MainProc+0x3cc>)
 8002480:	2310      	movs	r3, #16
 8002482:	33ff      	adds	r3, #255	; 0xff
 8002484:	2100      	movs	r1, #0
 8002486:	54d1      	strb	r1, [r2, r3]

	}

	wasteParameters.wakeUpCount++;
 8002488:	4b09      	ldr	r3, [pc, #36]	; (80024b0 <MainProc+0x3c4>)
 800248a:	781b      	ldrb	r3, [r3, #0]
 800248c:	3301      	adds	r3, #1
 800248e:	b2da      	uxtb	r2, r3
 8002490:	4b07      	ldr	r3, [pc, #28]	; (80024b0 <MainProc+0x3c4>)
 8002492:	701a      	strb	r2, [r3, #0]
	if (wasteParameters.wakeUpCount >= NORMAL_WORK_PERIOD) {
 8002494:	4b06      	ldr	r3, [pc, #24]	; (80024b0 <MainProc+0x3c4>)
 8002496:	781b      	ldrb	r3, [r3, #0]
 8002498:	2b17      	cmp	r3, #23
 800249a:	d902      	bls.n	80024a2 <MainProc+0x3b6>
		wasteParameters.wakeUpCount = 0;
 800249c:	4b04      	ldr	r3, [pc, #16]	; (80024b0 <MainProc+0x3c4>)
 800249e:	2200      	movs	r2, #0
 80024a0:	701a      	strb	r2, [r3, #0]
	}
}
 80024a2:	46c0      	nop			; (mov r8, r8)
 80024a4:	46bd      	mov	sp, r7
 80024a6:	b002      	add	sp, #8
 80024a8:	bd80      	pop	{r7, pc}
 80024aa:	46c0      	nop			; (mov r8, r8)
 80024ac:	200006d4 	.word	0x200006d4
 80024b0:	20000824 	.word	0x20000824
 80024b4:	08007f2c 	.word	0x08007f2c
 80024b8:	2000024c 	.word	0x2000024c
 80024bc:	08007f3c 	.word	0x08007f3c
 80024c0:	08007f4c 	.word	0x08007f4c

080024c4 <SetSendData>:
void SetSendData() {
 80024c4:	b5b0      	push	{r4, r5, r7, lr}
 80024c6:	b086      	sub	sp, #24
 80024c8:	af00      	add	r7, sp, #0
	memset(lteParameters.msgToSend, '*', 215);
 80024ca:	4bbb      	ldr	r3, [pc, #748]	; (80027b8 <SetSendData+0x2f4>)
 80024cc:	22d7      	movs	r2, #215	; 0xd7
 80024ce:	212a      	movs	r1, #42	; 0x2a
 80024d0:	0018      	movs	r0, r3
 80024d2:	f004 fef0 	bl	80072b6 <memset>
	DebugSendData("Set Send Data", 13);
 80024d6:	4bb9      	ldr	r3, [pc, #740]	; (80027bc <SetSendData+0x2f8>)
 80024d8:	210d      	movs	r1, #13
 80024da:	0018      	movs	r0, r3
 80024dc:	f000 fec2 	bl	8003264 <DebugSendData>
	lteParameters.msgToSend[0] = 'U';
 80024e0:	4bb7      	ldr	r3, [pc, #732]	; (80027c0 <SetSendData+0x2fc>)
 80024e2:	2234      	movs	r2, #52	; 0x34
 80024e4:	2155      	movs	r1, #85	; 0x55
 80024e6:	5499      	strb	r1, [r3, r2]
	lteParameters.msgToSend[1] = 'L';
 80024e8:	4bb5      	ldr	r3, [pc, #724]	; (80027c0 <SetSendData+0x2fc>)
 80024ea:	2235      	movs	r2, #53	; 0x35
 80024ec:	214c      	movs	r1, #76	; 0x4c
 80024ee:	5499      	strb	r1, [r3, r2]
	lteParameters.msgToSend[2] = 'T';
 80024f0:	4bb3      	ldr	r3, [pc, #716]	; (80027c0 <SetSendData+0x2fc>)
 80024f2:	2236      	movs	r2, #54	; 0x36
 80024f4:	2154      	movs	r1, #84	; 0x54
 80024f6:	5499      	strb	r1, [r3, r2]
	lteParameters.msgToSend[3] = '#';
 80024f8:	4bb1      	ldr	r3, [pc, #708]	; (80027c0 <SetSendData+0x2fc>)
 80024fa:	2237      	movs	r2, #55	; 0x37
 80024fc:	2123      	movs	r1, #35	; 0x23
 80024fe:	5499      	strb	r1, [r3, r2]

	for (int i = 4; i < 19; i++)
 8002500:	2304      	movs	r3, #4
 8002502:	617b      	str	r3, [r7, #20]
 8002504:	e011      	b.n	800252a <SetSendData+0x66>
		sprintf(&lteParameters.msgToSend[i], "%c", lteParameters.imeiNum[i - 4]);
 8002506:	697b      	ldr	r3, [r7, #20]
 8002508:	3330      	adds	r3, #48	; 0x30
 800250a:	001a      	movs	r2, r3
 800250c:	4bac      	ldr	r3, [pc, #688]	; (80027c0 <SetSendData+0x2fc>)
 800250e:	18d3      	adds	r3, r2, r3
 8002510:	1d18      	adds	r0, r3, #4
 8002512:	697b      	ldr	r3, [r7, #20]
 8002514:	3b04      	subs	r3, #4
 8002516:	4aaa      	ldr	r2, [pc, #680]	; (80027c0 <SetSendData+0x2fc>)
 8002518:	5cd3      	ldrb	r3, [r2, r3]
 800251a:	001a      	movs	r2, r3
 800251c:	4ba9      	ldr	r3, [pc, #676]	; (80027c4 <SetSendData+0x300>)
 800251e:	0019      	movs	r1, r3
 8002520:	f004 fed2 	bl	80072c8 <siprintf>
	for (int i = 4; i < 19; i++)
 8002524:	697b      	ldr	r3, [r7, #20]
 8002526:	3301      	adds	r3, #1
 8002528:	617b      	str	r3, [r7, #20]
 800252a:	697b      	ldr	r3, [r7, #20]
 800252c:	2b12      	cmp	r3, #18
 800252e:	ddea      	ble.n	8002506 <SetSendData+0x42>

	lteParameters.msgToSend[19] = '#';
 8002530:	4ba3      	ldr	r3, [pc, #652]	; (80027c0 <SetSendData+0x2fc>)
 8002532:	2247      	movs	r2, #71	; 0x47
 8002534:	2123      	movs	r1, #35	; 0x23
 8002536:	5499      	strb	r1, [r3, r2]
	sprintf(&lteParameters.msgToSend[20], "%d", ((uint8_t) (wasteParameters.tempVal % 1000) - (uint8_t) (wasteParameters.tempVal % 100)) / 100);
 8002538:	4ba3      	ldr	r3, [pc, #652]	; (80027c8 <SetSendData+0x304>)
 800253a:	799b      	ldrb	r3, [r3, #6]
 800253c:	001a      	movs	r2, r3
 800253e:	23fa      	movs	r3, #250	; 0xfa
 8002540:	0099      	lsls	r1, r3, #2
 8002542:	0010      	movs	r0, r2
 8002544:	f7fd ff5a 	bl	80003fc <__aeabi_idivmod>
 8002548:	000b      	movs	r3, r1
 800254a:	b2db      	uxtb	r3, r3
 800254c:	001c      	movs	r4, r3
 800254e:	4b9e      	ldr	r3, [pc, #632]	; (80027c8 <SetSendData+0x304>)
 8002550:	799b      	ldrb	r3, [r3, #6]
 8002552:	2164      	movs	r1, #100	; 0x64
 8002554:	0018      	movs	r0, r3
 8002556:	f7fd fe67 	bl	8000228 <__aeabi_uidivmod>
 800255a:	000b      	movs	r3, r1
 800255c:	b2db      	uxtb	r3, r3
 800255e:	1ae3      	subs	r3, r4, r3
 8002560:	2164      	movs	r1, #100	; 0x64
 8002562:	0018      	movs	r0, r3
 8002564:	f7fd fe64 	bl	8000230 <__divsi3>
 8002568:	0003      	movs	r3, r0
 800256a:	001a      	movs	r2, r3
 800256c:	4997      	ldr	r1, [pc, #604]	; (80027cc <SetSendData+0x308>)
 800256e:	4b98      	ldr	r3, [pc, #608]	; (80027d0 <SetSendData+0x30c>)
 8002570:	0018      	movs	r0, r3
 8002572:	f004 fea9 	bl	80072c8 <siprintf>
	sprintf(&lteParameters.msgToSend[21], "%d", ((uint8_t) (wasteParameters.tempVal % 100) - (uint8_t) (wasteParameters.tempVal % 10)) / 10);
 8002576:	4b94      	ldr	r3, [pc, #592]	; (80027c8 <SetSendData+0x304>)
 8002578:	799b      	ldrb	r3, [r3, #6]
 800257a:	2164      	movs	r1, #100	; 0x64
 800257c:	0018      	movs	r0, r3
 800257e:	f7fd fe53 	bl	8000228 <__aeabi_uidivmod>
 8002582:	000b      	movs	r3, r1
 8002584:	b2db      	uxtb	r3, r3
 8002586:	001c      	movs	r4, r3
 8002588:	4b8f      	ldr	r3, [pc, #572]	; (80027c8 <SetSendData+0x304>)
 800258a:	799b      	ldrb	r3, [r3, #6]
 800258c:	210a      	movs	r1, #10
 800258e:	0018      	movs	r0, r3
 8002590:	f7fd fe4a 	bl	8000228 <__aeabi_uidivmod>
 8002594:	000b      	movs	r3, r1
 8002596:	b2db      	uxtb	r3, r3
 8002598:	1ae3      	subs	r3, r4, r3
 800259a:	210a      	movs	r1, #10
 800259c:	0018      	movs	r0, r3
 800259e:	f7fd fe47 	bl	8000230 <__divsi3>
 80025a2:	0003      	movs	r3, r0
 80025a4:	001a      	movs	r2, r3
 80025a6:	4989      	ldr	r1, [pc, #548]	; (80027cc <SetSendData+0x308>)
 80025a8:	4b8a      	ldr	r3, [pc, #552]	; (80027d4 <SetSendData+0x310>)
 80025aa:	0018      	movs	r0, r3
 80025ac:	f004 fe8c 	bl	80072c8 <siprintf>
	sprintf(&lteParameters.msgToSend[22], "%d", (uint8_t) (wasteParameters.tempVal % 10));
 80025b0:	4b85      	ldr	r3, [pc, #532]	; (80027c8 <SetSendData+0x304>)
 80025b2:	799b      	ldrb	r3, [r3, #6]
 80025b4:	210a      	movs	r1, #10
 80025b6:	0018      	movs	r0, r3
 80025b8:	f7fd fe36 	bl	8000228 <__aeabi_uidivmod>
 80025bc:	000b      	movs	r3, r1
 80025be:	b2db      	uxtb	r3, r3
 80025c0:	001a      	movs	r2, r3
 80025c2:	4982      	ldr	r1, [pc, #520]	; (80027cc <SetSendData+0x308>)
 80025c4:	4b84      	ldr	r3, [pc, #528]	; (80027d8 <SetSendData+0x314>)
 80025c6:	0018      	movs	r0, r3
 80025c8:	f004 fe7e 	bl	80072c8 <siprintf>

	lteParameters.msgToSend[23] = '#';
 80025cc:	4b7c      	ldr	r3, [pc, #496]	; (80027c0 <SetSendData+0x2fc>)
 80025ce:	224b      	movs	r2, #75	; 0x4b
 80025d0:	2123      	movs	r1, #35	; 0x23
 80025d2:	5499      	strb	r1, [r3, r2]
	sprintf(&lteParameters.msgToSend[24], "%d", ((uint16_t) (wasteParameters.voltVal) - (uint16_t) (wasteParameters.voltVal % 1000)) / 1000);
 80025d4:	4b7c      	ldr	r3, [pc, #496]	; (80027c8 <SetSendData+0x304>)
 80025d6:	889b      	ldrh	r3, [r3, #4]
 80025d8:	001c      	movs	r4, r3
 80025da:	4b7b      	ldr	r3, [pc, #492]	; (80027c8 <SetSendData+0x304>)
 80025dc:	889b      	ldrh	r3, [r3, #4]
 80025de:	22fa      	movs	r2, #250	; 0xfa
 80025e0:	0091      	lsls	r1, r2, #2
 80025e2:	0018      	movs	r0, r3
 80025e4:	f7fd fe20 	bl	8000228 <__aeabi_uidivmod>
 80025e8:	000b      	movs	r3, r1
 80025ea:	b29b      	uxth	r3, r3
 80025ec:	1ae3      	subs	r3, r4, r3
 80025ee:	22fa      	movs	r2, #250	; 0xfa
 80025f0:	0091      	lsls	r1, r2, #2
 80025f2:	0018      	movs	r0, r3
 80025f4:	f7fd fe1c 	bl	8000230 <__divsi3>
 80025f8:	0003      	movs	r3, r0
 80025fa:	001a      	movs	r2, r3
 80025fc:	4973      	ldr	r1, [pc, #460]	; (80027cc <SetSendData+0x308>)
 80025fe:	4b77      	ldr	r3, [pc, #476]	; (80027dc <SetSendData+0x318>)
 8002600:	0018      	movs	r0, r3
 8002602:	f004 fe61 	bl	80072c8 <siprintf>
	sprintf(&lteParameters.msgToSend[25], "%d", ((uint16_t) (wasteParameters.voltVal % 1000) - (uint16_t) (wasteParameters.voltVal % 100)) / 100);
 8002606:	4b70      	ldr	r3, [pc, #448]	; (80027c8 <SetSendData+0x304>)
 8002608:	889b      	ldrh	r3, [r3, #4]
 800260a:	22fa      	movs	r2, #250	; 0xfa
 800260c:	0091      	lsls	r1, r2, #2
 800260e:	0018      	movs	r0, r3
 8002610:	f7fd fe0a 	bl	8000228 <__aeabi_uidivmod>
 8002614:	000b      	movs	r3, r1
 8002616:	b29b      	uxth	r3, r3
 8002618:	001c      	movs	r4, r3
 800261a:	4b6b      	ldr	r3, [pc, #428]	; (80027c8 <SetSendData+0x304>)
 800261c:	889b      	ldrh	r3, [r3, #4]
 800261e:	2164      	movs	r1, #100	; 0x64
 8002620:	0018      	movs	r0, r3
 8002622:	f7fd fe01 	bl	8000228 <__aeabi_uidivmod>
 8002626:	000b      	movs	r3, r1
 8002628:	b29b      	uxth	r3, r3
 800262a:	1ae3      	subs	r3, r4, r3
 800262c:	2164      	movs	r1, #100	; 0x64
 800262e:	0018      	movs	r0, r3
 8002630:	f7fd fdfe 	bl	8000230 <__divsi3>
 8002634:	0003      	movs	r3, r0
 8002636:	001a      	movs	r2, r3
 8002638:	4964      	ldr	r1, [pc, #400]	; (80027cc <SetSendData+0x308>)
 800263a:	4b69      	ldr	r3, [pc, #420]	; (80027e0 <SetSendData+0x31c>)
 800263c:	0018      	movs	r0, r3
 800263e:	f004 fe43 	bl	80072c8 <siprintf>
	sprintf(&lteParameters.msgToSend[26], "%d", ((uint16_t) (wasteParameters.voltVal % 100) - (uint16_t) (wasteParameters.voltVal % 10)) / 10);
 8002642:	4b61      	ldr	r3, [pc, #388]	; (80027c8 <SetSendData+0x304>)
 8002644:	889b      	ldrh	r3, [r3, #4]
 8002646:	2164      	movs	r1, #100	; 0x64
 8002648:	0018      	movs	r0, r3
 800264a:	f7fd fded 	bl	8000228 <__aeabi_uidivmod>
 800264e:	000b      	movs	r3, r1
 8002650:	b29b      	uxth	r3, r3
 8002652:	001c      	movs	r4, r3
 8002654:	4b5c      	ldr	r3, [pc, #368]	; (80027c8 <SetSendData+0x304>)
 8002656:	889b      	ldrh	r3, [r3, #4]
 8002658:	210a      	movs	r1, #10
 800265a:	0018      	movs	r0, r3
 800265c:	f7fd fde4 	bl	8000228 <__aeabi_uidivmod>
 8002660:	000b      	movs	r3, r1
 8002662:	b29b      	uxth	r3, r3
 8002664:	1ae3      	subs	r3, r4, r3
 8002666:	210a      	movs	r1, #10
 8002668:	0018      	movs	r0, r3
 800266a:	f7fd fde1 	bl	8000230 <__divsi3>
 800266e:	0003      	movs	r3, r0
 8002670:	001a      	movs	r2, r3
 8002672:	4956      	ldr	r1, [pc, #344]	; (80027cc <SetSendData+0x308>)
 8002674:	4b5b      	ldr	r3, [pc, #364]	; (80027e4 <SetSendData+0x320>)
 8002676:	0018      	movs	r0, r3
 8002678:	f004 fe26 	bl	80072c8 <siprintf>
	sprintf(&lteParameters.msgToSend[27], "%d", (uint16_t) (wasteParameters.voltVal % 10));
 800267c:	4b52      	ldr	r3, [pc, #328]	; (80027c8 <SetSendData+0x304>)
 800267e:	889b      	ldrh	r3, [r3, #4]
 8002680:	210a      	movs	r1, #10
 8002682:	0018      	movs	r0, r3
 8002684:	f7fd fdd0 	bl	8000228 <__aeabi_uidivmod>
 8002688:	000b      	movs	r3, r1
 800268a:	b29b      	uxth	r3, r3
 800268c:	001a      	movs	r2, r3
 800268e:	494f      	ldr	r1, [pc, #316]	; (80027cc <SetSendData+0x308>)
 8002690:	4b55      	ldr	r3, [pc, #340]	; (80027e8 <SetSendData+0x324>)
 8002692:	0018      	movs	r0, r3
 8002694:	f004 fe18 	bl	80072c8 <siprintf>

	lteParameters.msgToSend[28] = '#';
 8002698:	4b49      	ldr	r3, [pc, #292]	; (80027c0 <SetSendData+0x2fc>)
 800269a:	2250      	movs	r2, #80	; 0x50
 800269c:	2123      	movs	r1, #35	; 0x23
 800269e:	5499      	strb	r1, [r3, r2]

	for (int i = 0; i < 11; i++)
 80026a0:	2300      	movs	r3, #0
 80026a2:	613b      	str	r3, [r7, #16]
 80026a4:	e013      	b.n	80026ce <SetSendData+0x20a>
		sprintf(&lteParameters.msgToSend[29 + i], "%c", lteParameters.latitudeData[i]);
 80026a6:	693b      	ldr	r3, [r7, #16]
 80026a8:	331d      	adds	r3, #29
 80026aa:	3330      	adds	r3, #48	; 0x30
 80026ac:	001a      	movs	r2, r3
 80026ae:	4b44      	ldr	r3, [pc, #272]	; (80027c0 <SetSendData+0x2fc>)
 80026b0:	18d3      	adds	r3, r2, r3
 80026b2:	1d18      	adds	r0, r3, #4
 80026b4:	4a42      	ldr	r2, [pc, #264]	; (80027c0 <SetSendData+0x2fc>)
 80026b6:	693b      	ldr	r3, [r7, #16]
 80026b8:	18d3      	adds	r3, r2, r3
 80026ba:	331e      	adds	r3, #30
 80026bc:	781b      	ldrb	r3, [r3, #0]
 80026be:	001a      	movs	r2, r3
 80026c0:	4b40      	ldr	r3, [pc, #256]	; (80027c4 <SetSendData+0x300>)
 80026c2:	0019      	movs	r1, r3
 80026c4:	f004 fe00 	bl	80072c8 <siprintf>
	for (int i = 0; i < 11; i++)
 80026c8:	693b      	ldr	r3, [r7, #16]
 80026ca:	3301      	adds	r3, #1
 80026cc:	613b      	str	r3, [r7, #16]
 80026ce:	693b      	ldr	r3, [r7, #16]
 80026d0:	2b0a      	cmp	r3, #10
 80026d2:	dde8      	ble.n	80026a6 <SetSendData+0x1e2>

	lteParameters.msgToSend[40] = '#';
 80026d4:	4b3a      	ldr	r3, [pc, #232]	; (80027c0 <SetSendData+0x2fc>)
 80026d6:	225c      	movs	r2, #92	; 0x5c
 80026d8:	2123      	movs	r1, #35	; 0x23
 80026da:	5499      	strb	r1, [r3, r2]

	for (int i = 0; i < 11; i++)
 80026dc:	2300      	movs	r3, #0
 80026de:	60fb      	str	r3, [r7, #12]
 80026e0:	e014      	b.n	800270c <SetSendData+0x248>
		sprintf(&lteParameters.msgToSend[41 + i], "%c", lteParameters.longitudeData[i]);
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	3329      	adds	r3, #41	; 0x29
 80026e6:	3330      	adds	r3, #48	; 0x30
 80026e8:	001a      	movs	r2, r3
 80026ea:	4b35      	ldr	r3, [pc, #212]	; (80027c0 <SetSendData+0x2fc>)
 80026ec:	18d3      	adds	r3, r2, r3
 80026ee:	1d18      	adds	r0, r3, #4
 80026f0:	4a33      	ldr	r2, [pc, #204]	; (80027c0 <SetSendData+0x2fc>)
 80026f2:	2129      	movs	r1, #41	; 0x29
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	18d3      	adds	r3, r2, r3
 80026f8:	185b      	adds	r3, r3, r1
 80026fa:	781b      	ldrb	r3, [r3, #0]
 80026fc:	001a      	movs	r2, r3
 80026fe:	4b31      	ldr	r3, [pc, #196]	; (80027c4 <SetSendData+0x300>)
 8002700:	0019      	movs	r1, r3
 8002702:	f004 fde1 	bl	80072c8 <siprintf>
	for (int i = 0; i < 11; i++)
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	3301      	adds	r3, #1
 800270a:	60fb      	str	r3, [r7, #12]
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	2b0a      	cmp	r3, #10
 8002710:	dde7      	ble.n	80026e2 <SetSendData+0x21e>

	lteParameters.msgToSend[52] = '#';
 8002712:	4b2b      	ldr	r3, [pc, #172]	; (80027c0 <SetSendData+0x2fc>)
 8002714:	2268      	movs	r2, #104	; 0x68
 8002716:	2123      	movs	r1, #35	; 0x23
 8002718:	5499      	strb	r1, [r3, r2]
	for (int i = 53; i < 68; i++)
 800271a:	2335      	movs	r3, #53	; 0x35
 800271c:	60bb      	str	r3, [r7, #8]
 800271e:	e012      	b.n	8002746 <SetSendData+0x282>
		sprintf(&lteParameters.msgToSend[i], "%c", lteParameters.imsiNum[i - 53]);
 8002720:	68bb      	ldr	r3, [r7, #8]
 8002722:	3330      	adds	r3, #48	; 0x30
 8002724:	001a      	movs	r2, r3
 8002726:	4b26      	ldr	r3, [pc, #152]	; (80027c0 <SetSendData+0x2fc>)
 8002728:	18d3      	adds	r3, r2, r3
 800272a:	1d18      	adds	r0, r3, #4
 800272c:	68bb      	ldr	r3, [r7, #8]
 800272e:	3b35      	subs	r3, #53	; 0x35
 8002730:	4a23      	ldr	r2, [pc, #140]	; (80027c0 <SetSendData+0x2fc>)
 8002732:	18d3      	adds	r3, r2, r3
 8002734:	7bdb      	ldrb	r3, [r3, #15]
 8002736:	001a      	movs	r2, r3
 8002738:	4b22      	ldr	r3, [pc, #136]	; (80027c4 <SetSendData+0x300>)
 800273a:	0019      	movs	r1, r3
 800273c:	f004 fdc4 	bl	80072c8 <siprintf>
	for (int i = 53; i < 68; i++)
 8002740:	68bb      	ldr	r3, [r7, #8]
 8002742:	3301      	adds	r3, #1
 8002744:	60bb      	str	r3, [r7, #8]
 8002746:	68bb      	ldr	r3, [r7, #8]
 8002748:	2b43      	cmp	r3, #67	; 0x43
 800274a:	dde9      	ble.n	8002720 <SetSendData+0x25c>

	lteParameters.msgToSend[68] = '#';
 800274c:	4b1c      	ldr	r3, [pc, #112]	; (80027c0 <SetSendData+0x2fc>)
 800274e:	2278      	movs	r2, #120	; 0x78
 8002750:	2123      	movs	r1, #35	; 0x23
 8002752:	5499      	strb	r1, [r3, r2]
	sprintf(&lteParameters.msgToSend[69], "%d", ((uint16_t) (wasteParameters.ultSensIndex % 100) - (uint16_t) (wasteParameters.ultSensIndex % 10)) / 10);
 8002754:	4b1c      	ldr	r3, [pc, #112]	; (80027c8 <SetSendData+0x304>)
 8002756:	789b      	ldrb	r3, [r3, #2]
 8002758:	2164      	movs	r1, #100	; 0x64
 800275a:	0018      	movs	r0, r3
 800275c:	f7fd fd64 	bl	8000228 <__aeabi_uidivmod>
 8002760:	000b      	movs	r3, r1
 8002762:	b2db      	uxtb	r3, r3
 8002764:	001c      	movs	r4, r3
 8002766:	4b18      	ldr	r3, [pc, #96]	; (80027c8 <SetSendData+0x304>)
 8002768:	789b      	ldrb	r3, [r3, #2]
 800276a:	210a      	movs	r1, #10
 800276c:	0018      	movs	r0, r3
 800276e:	f7fd fd5b 	bl	8000228 <__aeabi_uidivmod>
 8002772:	000b      	movs	r3, r1
 8002774:	b2db      	uxtb	r3, r3
 8002776:	1ae3      	subs	r3, r4, r3
 8002778:	210a      	movs	r1, #10
 800277a:	0018      	movs	r0, r3
 800277c:	f7fd fd58 	bl	8000230 <__divsi3>
 8002780:	0003      	movs	r3, r0
 8002782:	001a      	movs	r2, r3
 8002784:	4911      	ldr	r1, [pc, #68]	; (80027cc <SetSendData+0x308>)
 8002786:	4b19      	ldr	r3, [pc, #100]	; (80027ec <SetSendData+0x328>)
 8002788:	0018      	movs	r0, r3
 800278a:	f004 fd9d 	bl	80072c8 <siprintf>
	sprintf(&lteParameters.msgToSend[70], "%d", (uint16_t) (wasteParameters.ultSensIndex % 10));
 800278e:	4b0e      	ldr	r3, [pc, #56]	; (80027c8 <SetSendData+0x304>)
 8002790:	789b      	ldrb	r3, [r3, #2]
 8002792:	210a      	movs	r1, #10
 8002794:	0018      	movs	r0, r3
 8002796:	f7fd fd47 	bl	8000228 <__aeabi_uidivmod>
 800279a:	000b      	movs	r3, r1
 800279c:	b2db      	uxtb	r3, r3
 800279e:	001a      	movs	r2, r3
 80027a0:	490a      	ldr	r1, [pc, #40]	; (80027cc <SetSendData+0x308>)
 80027a2:	4b13      	ldr	r3, [pc, #76]	; (80027f0 <SetSendData+0x32c>)
 80027a4:	0018      	movs	r0, r3
 80027a6:	f004 fd8f 	bl	80072c8 <siprintf>
	uint8_t ind = 71;
 80027aa:	1dfb      	adds	r3, r7, #7
 80027ac:	2247      	movs	r2, #71	; 0x47
 80027ae:	701a      	strb	r2, [r3, #0]
	for (uint16_t cnt = 0; cnt < usrParameters.measureRepTotalCount; cnt++) {
 80027b0:	1d3b      	adds	r3, r7, #4
 80027b2:	2200      	movs	r2, #0
 80027b4:	801a      	strh	r2, [r3, #0]
 80027b6:	e126      	b.n	8002a06 <SetSendData+0x542>
 80027b8:	20000280 	.word	0x20000280
 80027bc:	08007f58 	.word	0x08007f58
 80027c0:	2000024c 	.word	0x2000024c
 80027c4:	08007f68 	.word	0x08007f68
 80027c8:	20000824 	.word	0x20000824
 80027cc:	08007f6c 	.word	0x08007f6c
 80027d0:	20000294 	.word	0x20000294
 80027d4:	20000295 	.word	0x20000295
 80027d8:	20000296 	.word	0x20000296
 80027dc:	20000298 	.word	0x20000298
 80027e0:	20000299 	.word	0x20000299
 80027e4:	2000029a 	.word	0x2000029a
 80027e8:	2000029b 	.word	0x2000029b
 80027ec:	200002c5 	.word	0x200002c5
 80027f0:	200002c6 	.word	0x200002c6
		lteParameters.msgToSend[ind] = '#';
 80027f4:	1dfb      	adds	r3, r7, #7
 80027f6:	781b      	ldrb	r3, [r3, #0]
 80027f8:	4a8b      	ldr	r2, [pc, #556]	; (8002a28 <SetSendData+0x564>)
 80027fa:	2134      	movs	r1, #52	; 0x34
 80027fc:	18d3      	adds	r3, r2, r3
 80027fe:	185b      	adds	r3, r3, r1
 8002800:	2223      	movs	r2, #35	; 0x23
 8002802:	701a      	strb	r2, [r3, #0]
		ind++;
 8002804:	1dfb      	adds	r3, r7, #7
 8002806:	781a      	ldrb	r2, [r3, #0]
 8002808:	1dfb      	adds	r3, r7, #7
 800280a:	3201      	adds	r2, #1
 800280c:	701a      	strb	r2, [r3, #0]
		sprintf(&lteParameters.msgToSend[ind], "%d", ((uint16_t) (usrParameters.usrMeasTotalArray[cnt] % 100000) - (uint16_t) (usrParameters.usrMeasTotalArray[cnt] % 10000)) / 10000);
 800280e:	1dfb      	adds	r3, r7, #7
 8002810:	781b      	ldrb	r3, [r3, #0]
 8002812:	3330      	adds	r3, #48	; 0x30
 8002814:	001a      	movs	r2, r3
 8002816:	4b84      	ldr	r3, [pc, #528]	; (8002a28 <SetSendData+0x564>)
 8002818:	18d3      	adds	r3, r2, r3
 800281a:	1d1c      	adds	r4, r3, #4
 800281c:	1d3b      	adds	r3, r7, #4
 800281e:	881b      	ldrh	r3, [r3, #0]
 8002820:	4a82      	ldr	r2, [pc, #520]	; (8002a2c <SetSendData+0x568>)
 8002822:	330c      	adds	r3, #12
 8002824:	005b      	lsls	r3, r3, #1
 8002826:	18d3      	adds	r3, r2, r3
 8002828:	3304      	adds	r3, #4
 800282a:	881b      	ldrh	r3, [r3, #0]
 800282c:	4980      	ldr	r1, [pc, #512]	; (8002a30 <SetSendData+0x56c>)
 800282e:	0018      	movs	r0, r3
 8002830:	f7fd fde4 	bl	80003fc <__aeabi_idivmod>
 8002834:	000b      	movs	r3, r1
 8002836:	b29b      	uxth	r3, r3
 8002838:	001d      	movs	r5, r3
 800283a:	1d3b      	adds	r3, r7, #4
 800283c:	881b      	ldrh	r3, [r3, #0]
 800283e:	4a7b      	ldr	r2, [pc, #492]	; (8002a2c <SetSendData+0x568>)
 8002840:	330c      	adds	r3, #12
 8002842:	005b      	lsls	r3, r3, #1
 8002844:	18d3      	adds	r3, r2, r3
 8002846:	3304      	adds	r3, #4
 8002848:	881b      	ldrh	r3, [r3, #0]
 800284a:	497a      	ldr	r1, [pc, #488]	; (8002a34 <SetSendData+0x570>)
 800284c:	0018      	movs	r0, r3
 800284e:	f7fd fceb 	bl	8000228 <__aeabi_uidivmod>
 8002852:	000b      	movs	r3, r1
 8002854:	b29b      	uxth	r3, r3
 8002856:	1aeb      	subs	r3, r5, r3
 8002858:	4976      	ldr	r1, [pc, #472]	; (8002a34 <SetSendData+0x570>)
 800285a:	0018      	movs	r0, r3
 800285c:	f7fd fce8 	bl	8000230 <__divsi3>
 8002860:	0003      	movs	r3, r0
 8002862:	001a      	movs	r2, r3
 8002864:	4b74      	ldr	r3, [pc, #464]	; (8002a38 <SetSendData+0x574>)
 8002866:	0019      	movs	r1, r3
 8002868:	0020      	movs	r0, r4
 800286a:	f004 fd2d 	bl	80072c8 <siprintf>
		ind++;
 800286e:	1dfb      	adds	r3, r7, #7
 8002870:	781a      	ldrb	r2, [r3, #0]
 8002872:	1dfb      	adds	r3, r7, #7
 8002874:	3201      	adds	r2, #1
 8002876:	701a      	strb	r2, [r3, #0]
		sprintf(&lteParameters.msgToSend[ind], "%d", ((uint16_t) (usrParameters.usrMeasTotalArray[cnt] % 10000) - (uint16_t) (usrParameters.usrMeasTotalArray[cnt] % 1000)) / 1000);
 8002878:	1dfb      	adds	r3, r7, #7
 800287a:	781b      	ldrb	r3, [r3, #0]
 800287c:	3330      	adds	r3, #48	; 0x30
 800287e:	001a      	movs	r2, r3
 8002880:	4b69      	ldr	r3, [pc, #420]	; (8002a28 <SetSendData+0x564>)
 8002882:	18d3      	adds	r3, r2, r3
 8002884:	1d1c      	adds	r4, r3, #4
 8002886:	1d3b      	adds	r3, r7, #4
 8002888:	881b      	ldrh	r3, [r3, #0]
 800288a:	4a68      	ldr	r2, [pc, #416]	; (8002a2c <SetSendData+0x568>)
 800288c:	330c      	adds	r3, #12
 800288e:	005b      	lsls	r3, r3, #1
 8002890:	18d3      	adds	r3, r2, r3
 8002892:	3304      	adds	r3, #4
 8002894:	881b      	ldrh	r3, [r3, #0]
 8002896:	4967      	ldr	r1, [pc, #412]	; (8002a34 <SetSendData+0x570>)
 8002898:	0018      	movs	r0, r3
 800289a:	f7fd fcc5 	bl	8000228 <__aeabi_uidivmod>
 800289e:	000b      	movs	r3, r1
 80028a0:	b29b      	uxth	r3, r3
 80028a2:	001d      	movs	r5, r3
 80028a4:	1d3b      	adds	r3, r7, #4
 80028a6:	881b      	ldrh	r3, [r3, #0]
 80028a8:	4a60      	ldr	r2, [pc, #384]	; (8002a2c <SetSendData+0x568>)
 80028aa:	330c      	adds	r3, #12
 80028ac:	005b      	lsls	r3, r3, #1
 80028ae:	18d3      	adds	r3, r2, r3
 80028b0:	3304      	adds	r3, #4
 80028b2:	881b      	ldrh	r3, [r3, #0]
 80028b4:	22fa      	movs	r2, #250	; 0xfa
 80028b6:	0091      	lsls	r1, r2, #2
 80028b8:	0018      	movs	r0, r3
 80028ba:	f7fd fcb5 	bl	8000228 <__aeabi_uidivmod>
 80028be:	000b      	movs	r3, r1
 80028c0:	b29b      	uxth	r3, r3
 80028c2:	1aeb      	subs	r3, r5, r3
 80028c4:	22fa      	movs	r2, #250	; 0xfa
 80028c6:	0091      	lsls	r1, r2, #2
 80028c8:	0018      	movs	r0, r3
 80028ca:	f7fd fcb1 	bl	8000230 <__divsi3>
 80028ce:	0003      	movs	r3, r0
 80028d0:	001a      	movs	r2, r3
 80028d2:	4b59      	ldr	r3, [pc, #356]	; (8002a38 <SetSendData+0x574>)
 80028d4:	0019      	movs	r1, r3
 80028d6:	0020      	movs	r0, r4
 80028d8:	f004 fcf6 	bl	80072c8 <siprintf>
		ind++;
 80028dc:	1dfb      	adds	r3, r7, #7
 80028de:	781a      	ldrb	r2, [r3, #0]
 80028e0:	1dfb      	adds	r3, r7, #7
 80028e2:	3201      	adds	r2, #1
 80028e4:	701a      	strb	r2, [r3, #0]
		sprintf(&lteParameters.msgToSend[ind], "%d", ((uint16_t) (usrParameters.usrMeasTotalArray[cnt] % 1000) - (uint16_t) (usrParameters.usrMeasTotalArray[cnt] % 100)) / 100);
 80028e6:	1dfb      	adds	r3, r7, #7
 80028e8:	781b      	ldrb	r3, [r3, #0]
 80028ea:	3330      	adds	r3, #48	; 0x30
 80028ec:	001a      	movs	r2, r3
 80028ee:	4b4e      	ldr	r3, [pc, #312]	; (8002a28 <SetSendData+0x564>)
 80028f0:	18d3      	adds	r3, r2, r3
 80028f2:	1d1c      	adds	r4, r3, #4
 80028f4:	1d3b      	adds	r3, r7, #4
 80028f6:	881b      	ldrh	r3, [r3, #0]
 80028f8:	4a4c      	ldr	r2, [pc, #304]	; (8002a2c <SetSendData+0x568>)
 80028fa:	330c      	adds	r3, #12
 80028fc:	005b      	lsls	r3, r3, #1
 80028fe:	18d3      	adds	r3, r2, r3
 8002900:	3304      	adds	r3, #4
 8002902:	881b      	ldrh	r3, [r3, #0]
 8002904:	22fa      	movs	r2, #250	; 0xfa
 8002906:	0091      	lsls	r1, r2, #2
 8002908:	0018      	movs	r0, r3
 800290a:	f7fd fc8d 	bl	8000228 <__aeabi_uidivmod>
 800290e:	000b      	movs	r3, r1
 8002910:	b29b      	uxth	r3, r3
 8002912:	001d      	movs	r5, r3
 8002914:	1d3b      	adds	r3, r7, #4
 8002916:	881b      	ldrh	r3, [r3, #0]
 8002918:	4a44      	ldr	r2, [pc, #272]	; (8002a2c <SetSendData+0x568>)
 800291a:	330c      	adds	r3, #12
 800291c:	005b      	lsls	r3, r3, #1
 800291e:	18d3      	adds	r3, r2, r3
 8002920:	3304      	adds	r3, #4
 8002922:	881b      	ldrh	r3, [r3, #0]
 8002924:	2164      	movs	r1, #100	; 0x64
 8002926:	0018      	movs	r0, r3
 8002928:	f7fd fc7e 	bl	8000228 <__aeabi_uidivmod>
 800292c:	000b      	movs	r3, r1
 800292e:	b29b      	uxth	r3, r3
 8002930:	1aeb      	subs	r3, r5, r3
 8002932:	2164      	movs	r1, #100	; 0x64
 8002934:	0018      	movs	r0, r3
 8002936:	f7fd fc7b 	bl	8000230 <__divsi3>
 800293a:	0003      	movs	r3, r0
 800293c:	001a      	movs	r2, r3
 800293e:	4b3e      	ldr	r3, [pc, #248]	; (8002a38 <SetSendData+0x574>)
 8002940:	0019      	movs	r1, r3
 8002942:	0020      	movs	r0, r4
 8002944:	f004 fcc0 	bl	80072c8 <siprintf>
		ind++;
 8002948:	1dfb      	adds	r3, r7, #7
 800294a:	781a      	ldrb	r2, [r3, #0]
 800294c:	1dfb      	adds	r3, r7, #7
 800294e:	3201      	adds	r2, #1
 8002950:	701a      	strb	r2, [r3, #0]
		sprintf(&lteParameters.msgToSend[ind], "%d", ((uint16_t) (usrParameters.usrMeasTotalArray[cnt] % 100) - (uint16_t) (usrParameters.usrMeasTotalArray[cnt] % 10)) / 10);
 8002952:	1dfb      	adds	r3, r7, #7
 8002954:	781b      	ldrb	r3, [r3, #0]
 8002956:	3330      	adds	r3, #48	; 0x30
 8002958:	001a      	movs	r2, r3
 800295a:	4b33      	ldr	r3, [pc, #204]	; (8002a28 <SetSendData+0x564>)
 800295c:	18d3      	adds	r3, r2, r3
 800295e:	1d1c      	adds	r4, r3, #4
 8002960:	1d3b      	adds	r3, r7, #4
 8002962:	881b      	ldrh	r3, [r3, #0]
 8002964:	4a31      	ldr	r2, [pc, #196]	; (8002a2c <SetSendData+0x568>)
 8002966:	330c      	adds	r3, #12
 8002968:	005b      	lsls	r3, r3, #1
 800296a:	18d3      	adds	r3, r2, r3
 800296c:	3304      	adds	r3, #4
 800296e:	881b      	ldrh	r3, [r3, #0]
 8002970:	2164      	movs	r1, #100	; 0x64
 8002972:	0018      	movs	r0, r3
 8002974:	f7fd fc58 	bl	8000228 <__aeabi_uidivmod>
 8002978:	000b      	movs	r3, r1
 800297a:	b29b      	uxth	r3, r3
 800297c:	001d      	movs	r5, r3
 800297e:	1d3b      	adds	r3, r7, #4
 8002980:	881b      	ldrh	r3, [r3, #0]
 8002982:	4a2a      	ldr	r2, [pc, #168]	; (8002a2c <SetSendData+0x568>)
 8002984:	330c      	adds	r3, #12
 8002986:	005b      	lsls	r3, r3, #1
 8002988:	18d3      	adds	r3, r2, r3
 800298a:	3304      	adds	r3, #4
 800298c:	881b      	ldrh	r3, [r3, #0]
 800298e:	210a      	movs	r1, #10
 8002990:	0018      	movs	r0, r3
 8002992:	f7fd fc49 	bl	8000228 <__aeabi_uidivmod>
 8002996:	000b      	movs	r3, r1
 8002998:	b29b      	uxth	r3, r3
 800299a:	1aeb      	subs	r3, r5, r3
 800299c:	210a      	movs	r1, #10
 800299e:	0018      	movs	r0, r3
 80029a0:	f7fd fc46 	bl	8000230 <__divsi3>
 80029a4:	0003      	movs	r3, r0
 80029a6:	001a      	movs	r2, r3
 80029a8:	4b23      	ldr	r3, [pc, #140]	; (8002a38 <SetSendData+0x574>)
 80029aa:	0019      	movs	r1, r3
 80029ac:	0020      	movs	r0, r4
 80029ae:	f004 fc8b 	bl	80072c8 <siprintf>
		ind++;
 80029b2:	1dfb      	adds	r3, r7, #7
 80029b4:	781a      	ldrb	r2, [r3, #0]
 80029b6:	1dfb      	adds	r3, r7, #7
 80029b8:	3201      	adds	r2, #1
 80029ba:	701a      	strb	r2, [r3, #0]
		sprintf(&lteParameters.msgToSend[ind], "%d", (uint16_t) (usrParameters.usrMeasTotalArray[cnt] % 10));
 80029bc:	1dfb      	adds	r3, r7, #7
 80029be:	781b      	ldrb	r3, [r3, #0]
 80029c0:	3330      	adds	r3, #48	; 0x30
 80029c2:	001a      	movs	r2, r3
 80029c4:	4b18      	ldr	r3, [pc, #96]	; (8002a28 <SetSendData+0x564>)
 80029c6:	18d3      	adds	r3, r2, r3
 80029c8:	1d1c      	adds	r4, r3, #4
 80029ca:	1d3b      	adds	r3, r7, #4
 80029cc:	881b      	ldrh	r3, [r3, #0]
 80029ce:	4a17      	ldr	r2, [pc, #92]	; (8002a2c <SetSendData+0x568>)
 80029d0:	330c      	adds	r3, #12
 80029d2:	005b      	lsls	r3, r3, #1
 80029d4:	18d3      	adds	r3, r2, r3
 80029d6:	3304      	adds	r3, #4
 80029d8:	881b      	ldrh	r3, [r3, #0]
 80029da:	210a      	movs	r1, #10
 80029dc:	0018      	movs	r0, r3
 80029de:	f7fd fc23 	bl	8000228 <__aeabi_uidivmod>
 80029e2:	000b      	movs	r3, r1
 80029e4:	b29b      	uxth	r3, r3
 80029e6:	001a      	movs	r2, r3
 80029e8:	4b13      	ldr	r3, [pc, #76]	; (8002a38 <SetSendData+0x574>)
 80029ea:	0019      	movs	r1, r3
 80029ec:	0020      	movs	r0, r4
 80029ee:	f004 fc6b 	bl	80072c8 <siprintf>
		ind++;
 80029f2:	1dfb      	adds	r3, r7, #7
 80029f4:	781a      	ldrb	r2, [r3, #0]
 80029f6:	1dfb      	adds	r3, r7, #7
 80029f8:	3201      	adds	r2, #1
 80029fa:	701a      	strb	r2, [r3, #0]
	for (uint16_t cnt = 0; cnt < usrParameters.measureRepTotalCount; cnt++) {
 80029fc:	1d3b      	adds	r3, r7, #4
 80029fe:	881a      	ldrh	r2, [r3, #0]
 8002a00:	1d3b      	adds	r3, r7, #4
 8002a02:	3201      	adds	r2, #1
 8002a04:	801a      	strh	r2, [r3, #0]
 8002a06:	4b09      	ldr	r3, [pc, #36]	; (8002a2c <SetSendData+0x568>)
 8002a08:	889b      	ldrh	r3, [r3, #4]
 8002a0a:	1d3a      	adds	r2, r7, #4
 8002a0c:	8812      	ldrh	r2, [r2, #0]
 8002a0e:	429a      	cmp	r2, r3
 8002a10:	d200      	bcs.n	8002a14 <SetSendData+0x550>
 8002a12:	e6ef      	b.n	80027f4 <SetSendData+0x330>
	}

	DebugSendData(lteParameters.msgToSend, 215);
 8002a14:	4b09      	ldr	r3, [pc, #36]	; (8002a3c <SetSendData+0x578>)
 8002a16:	21d7      	movs	r1, #215	; 0xd7
 8002a18:	0018      	movs	r0, r3
 8002a1a:	f000 fc23 	bl	8003264 <DebugSendData>
}
 8002a1e:	46c0      	nop			; (mov r8, r8)
 8002a20:	46bd      	mov	sp, r7
 8002a22:	b006      	add	sp, #24
 8002a24:	bdb0      	pop	{r4, r5, r7, pc}
 8002a26:	46c0      	nop			; (mov r8, r8)
 8002a28:	2000024c 	.word	0x2000024c
 8002a2c:	200006d4 	.word	0x200006d4
 8002a30:	000186a0 	.word	0x000186a0
 8002a34:	00002710 	.word	0x00002710
 8002a38:	08007f6c 	.word	0x08007f6c
 8002a3c:	20000280 	.word	0x20000280

08002a40 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8002a40:	b580      	push	{r7, lr}
 8002a42:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002a44:	b672      	cpsid	i
}
 8002a46:	46c0      	nop			; (mov r8, r8)
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8002a48:	e7fe      	b.n	8002a48 <Error_Handler+0x8>
	...

08002a4c <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8002a50:	4b16      	ldr	r3, [pc, #88]	; (8002aac <MX_RTC_Init+0x60>)
 8002a52:	4a17      	ldr	r2, [pc, #92]	; (8002ab0 <MX_RTC_Init+0x64>)
 8002a54:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8002a56:	4b15      	ldr	r3, [pc, #84]	; (8002aac <MX_RTC_Init+0x60>)
 8002a58:	2200      	movs	r2, #0
 8002a5a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8002a5c:	4b13      	ldr	r3, [pc, #76]	; (8002aac <MX_RTC_Init+0x60>)
 8002a5e:	227f      	movs	r2, #127	; 0x7f
 8002a60:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8002a62:	4b12      	ldr	r3, [pc, #72]	; (8002aac <MX_RTC_Init+0x60>)
 8002a64:	22ff      	movs	r2, #255	; 0xff
 8002a66:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8002a68:	4b10      	ldr	r3, [pc, #64]	; (8002aac <MX_RTC_Init+0x60>)
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8002a6e:	4b0f      	ldr	r3, [pc, #60]	; (8002aac <MX_RTC_Init+0x60>)
 8002a70:	2200      	movs	r2, #0
 8002a72:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8002a74:	4b0d      	ldr	r3, [pc, #52]	; (8002aac <MX_RTC_Init+0x60>)
 8002a76:	2200      	movs	r2, #0
 8002a78:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8002a7a:	4b0c      	ldr	r3, [pc, #48]	; (8002aac <MX_RTC_Init+0x60>)
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8002a80:	4b0a      	ldr	r3, [pc, #40]	; (8002aac <MX_RTC_Init+0x60>)
 8002a82:	0018      	movs	r0, r3
 8002a84:	f002 fbb4 	bl	80051f0 <HAL_RTC_Init>
 8002a88:	1e03      	subs	r3, r0, #0
 8002a8a:	d001      	beq.n	8002a90 <MX_RTC_Init+0x44>
  {
    Error_Handler();
 8002a8c:	f7ff ffd8 	bl	8002a40 <Error_Handler>
  }
  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 600, RTC_WAKEUPCLOCK_CK_SPRE_16BITS) != HAL_OK)
 8002a90:	2396      	movs	r3, #150	; 0x96
 8002a92:	0099      	lsls	r1, r3, #2
 8002a94:	4b05      	ldr	r3, [pc, #20]	; (8002aac <MX_RTC_Init+0x60>)
 8002a96:	2204      	movs	r2, #4
 8002a98:	0018      	movs	r0, r3
 8002a9a:	f002 fc99 	bl	80053d0 <HAL_RTCEx_SetWakeUpTimer_IT>
 8002a9e:	1e03      	subs	r3, r0, #0
 8002aa0:	d001      	beq.n	8002aa6 <MX_RTC_Init+0x5a>
  {
    Error_Handler();
 8002aa2:	f7ff ffcd 	bl	8002a40 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8002aa6:	46c0      	nop			; (mov r8, r8)
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	bd80      	pop	{r7, pc}
 8002aac:	20000360 	.word	0x20000360
 8002ab0:	40002800 	.word	0x40002800

08002ab4 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	b082      	sub	sp, #8
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	4a0a      	ldr	r2, [pc, #40]	; (8002aec <HAL_RTC_MspInit+0x38>)
 8002ac2:	4293      	cmp	r3, r2
 8002ac4:	d10e      	bne.n	8002ae4 <HAL_RTC_MspInit+0x30>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002ac6:	4b0a      	ldr	r3, [pc, #40]	; (8002af0 <HAL_RTC_MspInit+0x3c>)
 8002ac8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002aca:	4b09      	ldr	r3, [pc, #36]	; (8002af0 <HAL_RTC_MspInit+0x3c>)
 8002acc:	2180      	movs	r1, #128	; 0x80
 8002ace:	02c9      	lsls	r1, r1, #11
 8002ad0:	430a      	orrs	r2, r1
 8002ad2:	651a      	str	r2, [r3, #80]	; 0x50

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_IRQn, 0, 0);
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	2100      	movs	r1, #0
 8002ad8:	2002      	movs	r0, #2
 8002ada:	f001 f95f 	bl	8003d9c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_IRQn);
 8002ade:	2002      	movs	r0, #2
 8002ae0:	f001 f971 	bl	8003dc6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8002ae4:	46c0      	nop			; (mov r8, r8)
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	b002      	add	sp, #8
 8002aea:	bd80      	pop	{r7, pc}
 8002aec:	40002800 	.word	0x40002800
 8002af0:	40021000 	.word	0x40021000

08002af4 <HAL_RTCEx_WakeUpTimerEventCallback>:
  }
}

/* USER CODE BEGIN 1 */
void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	b082      	sub	sp, #8
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]
	rtcParameters.wakeUpFlag = 1;
 8002afc:	4b07      	ldr	r3, [pc, #28]	; (8002b1c <HAL_RTCEx_WakeUpTimerEventCallback+0x28>)
 8002afe:	2201      	movs	r2, #1
 8002b00:	701a      	strb	r2, [r3, #0]
	usrParameters.usrMeasured = 0;
 8002b02:	4b07      	ldr	r3, [pc, #28]	; (8002b20 <HAL_RTCEx_WakeUpTimerEventCallback+0x2c>)
 8002b04:	224c      	movs	r2, #76	; 0x4c
 8002b06:	2100      	movs	r1, #0
 8002b08:	5499      	strb	r1, [r3, r2]

	SystemClock_Config();
 8002b0a:	f7ff fa73 	bl	8001ff4 <SystemClock_Config>
	HAL_ResumeTick();
 8002b0e:	f000 fcbf 	bl	8003490 <HAL_ResumeTick>
}
 8002b12:	46c0      	nop			; (mov r8, r8)
 8002b14:	46bd      	mov	sp, r7
 8002b16:	b002      	add	sp, #8
 8002b18:	bd80      	pop	{r7, pc}
 8002b1a:	46c0      	nop			; (mov r8, r8)
 8002b1c:	2000035c 	.word	0x2000035c
 8002b20:	200006d4 	.word	0x200006d4

08002b24 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002b24:	b580      	push	{r7, lr}
 8002b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b28:	4b07      	ldr	r3, [pc, #28]	; (8002b48 <HAL_MspInit+0x24>)
 8002b2a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002b2c:	4b06      	ldr	r3, [pc, #24]	; (8002b48 <HAL_MspInit+0x24>)
 8002b2e:	2101      	movs	r1, #1
 8002b30:	430a      	orrs	r2, r1
 8002b32:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8002b34:	4b04      	ldr	r3, [pc, #16]	; (8002b48 <HAL_MspInit+0x24>)
 8002b36:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002b38:	4b03      	ldr	r3, [pc, #12]	; (8002b48 <HAL_MspInit+0x24>)
 8002b3a:	2180      	movs	r1, #128	; 0x80
 8002b3c:	0549      	lsls	r1, r1, #21
 8002b3e:	430a      	orrs	r2, r1
 8002b40:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002b42:	46c0      	nop			; (mov r8, r8)
 8002b44:	46bd      	mov	sp, r7
 8002b46:	bd80      	pop	{r7, pc}
 8002b48:	40021000 	.word	0x40021000

08002b4c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002b50:	e7fe      	b.n	8002b50 <NMI_Handler+0x4>

08002b52 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002b52:	b580      	push	{r7, lr}
 8002b54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002b56:	e7fe      	b.n	8002b56 <HardFault_Handler+0x4>

08002b58 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8002b5c:	46c0      	nop			; (mov r8, r8)
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	bd80      	pop	{r7, pc}

08002b62 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002b62:	b580      	push	{r7, lr}
 8002b64:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002b66:	46c0      	nop			; (mov r8, r8)
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	bd80      	pop	{r7, pc}

08002b6c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002b70:	f000 fc40 	bl	80033f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002b74:	46c0      	nop			; (mov r8, r8)
 8002b76:	46bd      	mov	sp, r7
 8002b78:	bd80      	pop	{r7, pc}
	...

08002b7c <RTC_IRQHandler>:

/**
  * @brief This function handles RTC global interrupt through EXTI lines 17, 19 and 20 and LSE CSS interrupt through EXTI line 19.
  */
void RTC_IRQHandler(void)
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_IRQn 0 */

  /* USER CODE END RTC_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8002b80:	4b03      	ldr	r3, [pc, #12]	; (8002b90 <RTC_IRQHandler+0x14>)
 8002b82:	0018      	movs	r0, r3
 8002b84:	f002 fcea 	bl	800555c <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE BEGIN RTC_IRQn 1 */

  /* USER CODE END RTC_IRQn 1 */
}
 8002b88:	46c0      	nop			; (mov r8, r8)
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	bd80      	pop	{r7, pc}
 8002b8e:	46c0      	nop			; (mov r8, r8)
 8002b90:	20000360 	.word	0x20000360

08002b94 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8002b98:	2020      	movs	r0, #32
 8002b9a:	f001 fb55 	bl	8004248 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8002b9e:	46c0      	nop			; (mov r8, r8)
 8002ba0:	46bd      	mov	sp, r7
 8002ba2:	bd80      	pop	{r7, pc}

08002ba4 <ADC1_COMP_IRQHandler>:

/**
  * @brief This function handles ADC, COMP1 and COMP2 interrupts (COMP interrupts through EXTI lines 21 and 22).
  */
void ADC1_COMP_IRQHandler(void)
{
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_COMP_IRQn 0 */

  /* USER CODE END ADC1_COMP_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc);
 8002ba8:	4b03      	ldr	r3, [pc, #12]	; (8002bb8 <ADC1_COMP_IRQHandler+0x14>)
 8002baa:	0018      	movs	r0, r3
 8002bac:	f000 fe70 	bl	8003890 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_COMP_IRQn 1 */

  /* USER CODE END ADC1_COMP_IRQn 1 */
}
 8002bb0:	46c0      	nop			; (mov r8, r8)
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	bd80      	pop	{r7, pc}
 8002bb6:	46c0      	nop			; (mov r8, r8)
 8002bb8:	200000a8 	.word	0x200000a8

08002bbc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002bc0:	4b03      	ldr	r3, [pc, #12]	; (8002bd0 <USART1_IRQHandler+0x14>)
 8002bc2:	0018      	movs	r0, r3
 8002bc4:	f003 f90c 	bl	8005de0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002bc8:	46c0      	nop			; (mov r8, r8)
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	bd80      	pop	{r7, pc}
 8002bce:	46c0      	nop			; (mov r8, r8)
 8002bd0:	200004c8 	.word	0x200004c8

08002bd4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002bd8:	4b03      	ldr	r3, [pc, #12]	; (8002be8 <USART2_IRQHandler+0x14>)
 8002bda:	0018      	movs	r0, r3
 8002bdc:	f003 f900 	bl	8005de0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002be0:	46c0      	nop			; (mov r8, r8)
 8002be2:	46bd      	mov	sp, r7
 8002be4:	bd80      	pop	{r7, pc}
 8002be6:	46c0      	nop			; (mov r8, r8)
 8002be8:	20000650 	.word	0x20000650

08002bec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	b086      	sub	sp, #24
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002bf4:	4a14      	ldr	r2, [pc, #80]	; (8002c48 <_sbrk+0x5c>)
 8002bf6:	4b15      	ldr	r3, [pc, #84]	; (8002c4c <_sbrk+0x60>)
 8002bf8:	1ad3      	subs	r3, r2, r3
 8002bfa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002bfc:	697b      	ldr	r3, [r7, #20]
 8002bfe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002c00:	4b13      	ldr	r3, [pc, #76]	; (8002c50 <_sbrk+0x64>)
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d102      	bne.n	8002c0e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002c08:	4b11      	ldr	r3, [pc, #68]	; (8002c50 <_sbrk+0x64>)
 8002c0a:	4a12      	ldr	r2, [pc, #72]	; (8002c54 <_sbrk+0x68>)
 8002c0c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002c0e:	4b10      	ldr	r3, [pc, #64]	; (8002c50 <_sbrk+0x64>)
 8002c10:	681a      	ldr	r2, [r3, #0]
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	18d3      	adds	r3, r2, r3
 8002c16:	693a      	ldr	r2, [r7, #16]
 8002c18:	429a      	cmp	r2, r3
 8002c1a:	d207      	bcs.n	8002c2c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002c1c:	f004 fb18 	bl	8007250 <__errno>
 8002c20:	0003      	movs	r3, r0
 8002c22:	220c      	movs	r2, #12
 8002c24:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002c26:	2301      	movs	r3, #1
 8002c28:	425b      	negs	r3, r3
 8002c2a:	e009      	b.n	8002c40 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002c2c:	4b08      	ldr	r3, [pc, #32]	; (8002c50 <_sbrk+0x64>)
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002c32:	4b07      	ldr	r3, [pc, #28]	; (8002c50 <_sbrk+0x64>)
 8002c34:	681a      	ldr	r2, [r3, #0]
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	18d2      	adds	r2, r2, r3
 8002c3a:	4b05      	ldr	r3, [pc, #20]	; (8002c50 <_sbrk+0x64>)
 8002c3c:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8002c3e:	68fb      	ldr	r3, [r7, #12]
}
 8002c40:	0018      	movs	r0, r3
 8002c42:	46bd      	mov	sp, r7
 8002c44:	b006      	add	sp, #24
 8002c46:	bd80      	pop	{r7, pc}
 8002c48:	20005000 	.word	0x20005000
 8002c4c:	00000400 	.word	0x00000400
 8002c50:	2000008c 	.word	0x2000008c
 8002c54:	20000848 	.word	0x20000848

08002c58 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002c5c:	46c0      	nop			; (mov r8, r8)
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	bd80      	pop	{r7, pc}
	...

08002c64 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	b086      	sub	sp, #24
 8002c68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002c6a:	2308      	movs	r3, #8
 8002c6c:	18fb      	adds	r3, r7, r3
 8002c6e:	0018      	movs	r0, r3
 8002c70:	2310      	movs	r3, #16
 8002c72:	001a      	movs	r2, r3
 8002c74:	2100      	movs	r1, #0
 8002c76:	f004 fb1e 	bl	80072b6 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002c7a:	003b      	movs	r3, r7
 8002c7c:	0018      	movs	r0, r3
 8002c7e:	2308      	movs	r3, #8
 8002c80:	001a      	movs	r2, r3
 8002c82:	2100      	movs	r1, #0
 8002c84:	f004 fb17 	bl	80072b6 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002c88:	4b1e      	ldr	r3, [pc, #120]	; (8002d04 <MX_TIM2_Init+0xa0>)
 8002c8a:	2280      	movs	r2, #128	; 0x80
 8002c8c:	05d2      	lsls	r2, r2, #23
 8002c8e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 15;
 8002c90:	4b1c      	ldr	r3, [pc, #112]	; (8002d04 <MX_TIM2_Init+0xa0>)
 8002c92:	220f      	movs	r2, #15
 8002c94:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c96:	4b1b      	ldr	r3, [pc, #108]	; (8002d04 <MX_TIM2_Init+0xa0>)
 8002c98:	2200      	movs	r2, #0
 8002c9a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65534;
 8002c9c:	4b19      	ldr	r3, [pc, #100]	; (8002d04 <MX_TIM2_Init+0xa0>)
 8002c9e:	4a1a      	ldr	r2, [pc, #104]	; (8002d08 <MX_TIM2_Init+0xa4>)
 8002ca0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002ca2:	4b18      	ldr	r3, [pc, #96]	; (8002d04 <MX_TIM2_Init+0xa0>)
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002ca8:	4b16      	ldr	r3, [pc, #88]	; (8002d04 <MX_TIM2_Init+0xa0>)
 8002caa:	2200      	movs	r2, #0
 8002cac:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002cae:	4b15      	ldr	r3, [pc, #84]	; (8002d04 <MX_TIM2_Init+0xa0>)
 8002cb0:	0018      	movs	r0, r3
 8002cb2:	f002 fc7d 	bl	80055b0 <HAL_TIM_Base_Init>
 8002cb6:	1e03      	subs	r3, r0, #0
 8002cb8:	d001      	beq.n	8002cbe <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8002cba:	f7ff fec1 	bl	8002a40 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002cbe:	2108      	movs	r1, #8
 8002cc0:	187b      	adds	r3, r7, r1
 8002cc2:	2280      	movs	r2, #128	; 0x80
 8002cc4:	0152      	lsls	r2, r2, #5
 8002cc6:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002cc8:	187a      	adds	r2, r7, r1
 8002cca:	4b0e      	ldr	r3, [pc, #56]	; (8002d04 <MX_TIM2_Init+0xa0>)
 8002ccc:	0011      	movs	r1, r2
 8002cce:	0018      	movs	r0, r3
 8002cd0:	f002 fcf8 	bl	80056c4 <HAL_TIM_ConfigClockSource>
 8002cd4:	1e03      	subs	r3, r0, #0
 8002cd6:	d001      	beq.n	8002cdc <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8002cd8:	f7ff feb2 	bl	8002a40 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002cdc:	003b      	movs	r3, r7
 8002cde:	2200      	movs	r2, #0
 8002ce0:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002ce2:	003b      	movs	r3, r7
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002ce8:	003a      	movs	r2, r7
 8002cea:	4b06      	ldr	r3, [pc, #24]	; (8002d04 <MX_TIM2_Init+0xa0>)
 8002cec:	0011      	movs	r1, r2
 8002cee:	0018      	movs	r0, r3
 8002cf0:	f002 feb4 	bl	8005a5c <HAL_TIMEx_MasterConfigSynchronization>
 8002cf4:	1e03      	subs	r3, r0, #0
 8002cf6:	d001      	beq.n	8002cfc <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8002cf8:	f7ff fea2 	bl	8002a40 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002cfc:	46c0      	nop			; (mov r8, r8)
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	b006      	add	sp, #24
 8002d02:	bd80      	pop	{r7, pc}
 8002d04:	20000384 	.word	0x20000384
 8002d08:	0000fffe 	.word	0x0000fffe

08002d0c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	b082      	sub	sp, #8
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681a      	ldr	r2, [r3, #0]
 8002d18:	2380      	movs	r3, #128	; 0x80
 8002d1a:	05db      	lsls	r3, r3, #23
 8002d1c:	429a      	cmp	r2, r3
 8002d1e:	d105      	bne.n	8002d2c <HAL_TIM_Base_MspInit+0x20>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002d20:	4b04      	ldr	r3, [pc, #16]	; (8002d34 <HAL_TIM_Base_MspInit+0x28>)
 8002d22:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002d24:	4b03      	ldr	r3, [pc, #12]	; (8002d34 <HAL_TIM_Base_MspInit+0x28>)
 8002d26:	2101      	movs	r1, #1
 8002d28:	430a      	orrs	r2, r1
 8002d2a:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8002d2c:	46c0      	nop			; (mov r8, r8)
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	b002      	add	sp, #8
 8002d32:	bd80      	pop	{r7, pc}
 8002d34:	40021000 	.word	0x40021000

08002d38 <DelayUs>:
  }
}

/* USER CODE BEGIN 1 */
void DelayUs(uint16_t uus) // microsecond delay routine
{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	b082      	sub	sp, #8
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	0002      	movs	r2, r0
 8002d40:	1dbb      	adds	r3, r7, #6
 8002d42:	801a      	strh	r2, [r3, #0]
	__HAL_TIM_SET_COUNTER(&htim2,0);  // set the counter value to zero
 8002d44:	4b08      	ldr	r3, [pc, #32]	; (8002d68 <DelayUs+0x30>)
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	2200      	movs	r2, #0
 8002d4a:	625a      	str	r2, [r3, #36]	; 0x24

	while (__HAL_TIM_GET_COUNTER(&htim2) < uus); // wait for a while about desired microsecond value
 8002d4c:	46c0      	nop			; (mov r8, r8)
 8002d4e:	4b06      	ldr	r3, [pc, #24]	; (8002d68 <DelayUs+0x30>)
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002d54:	1dbb      	adds	r3, r7, #6
 8002d56:	881b      	ldrh	r3, [r3, #0]
 8002d58:	429a      	cmp	r2, r3
 8002d5a:	d3f8      	bcc.n	8002d4e <DelayUs+0x16>
}
 8002d5c:	46c0      	nop			; (mov r8, r8)
 8002d5e:	46c0      	nop			; (mov r8, r8)
 8002d60:	46bd      	mov	sp, r7
 8002d62:	b002      	add	sp, #8
 8002d64:	bd80      	pop	{r7, pc}
 8002d66:	46c0      	nop			; (mov r8, r8)
 8002d68:	20000384 	.word	0x20000384

08002d6c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002d70:	4b14      	ldr	r3, [pc, #80]	; (8002dc4 <MX_USART1_UART_Init+0x58>)
 8002d72:	4a15      	ldr	r2, [pc, #84]	; (8002dc8 <MX_USART1_UART_Init+0x5c>)
 8002d74:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002d76:	4b13      	ldr	r3, [pc, #76]	; (8002dc4 <MX_USART1_UART_Init+0x58>)
 8002d78:	22e1      	movs	r2, #225	; 0xe1
 8002d7a:	0252      	lsls	r2, r2, #9
 8002d7c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002d7e:	4b11      	ldr	r3, [pc, #68]	; (8002dc4 <MX_USART1_UART_Init+0x58>)
 8002d80:	2200      	movs	r2, #0
 8002d82:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002d84:	4b0f      	ldr	r3, [pc, #60]	; (8002dc4 <MX_USART1_UART_Init+0x58>)
 8002d86:	2200      	movs	r2, #0
 8002d88:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002d8a:	4b0e      	ldr	r3, [pc, #56]	; (8002dc4 <MX_USART1_UART_Init+0x58>)
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002d90:	4b0c      	ldr	r3, [pc, #48]	; (8002dc4 <MX_USART1_UART_Init+0x58>)
 8002d92:	220c      	movs	r2, #12
 8002d94:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002d96:	4b0b      	ldr	r3, [pc, #44]	; (8002dc4 <MX_USART1_UART_Init+0x58>)
 8002d98:	2200      	movs	r2, #0
 8002d9a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002d9c:	4b09      	ldr	r3, [pc, #36]	; (8002dc4 <MX_USART1_UART_Init+0x58>)
 8002d9e:	2200      	movs	r2, #0
 8002da0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002da2:	4b08      	ldr	r3, [pc, #32]	; (8002dc4 <MX_USART1_UART_Init+0x58>)
 8002da4:	2200      	movs	r2, #0
 8002da6:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002da8:	4b06      	ldr	r3, [pc, #24]	; (8002dc4 <MX_USART1_UART_Init+0x58>)
 8002daa:	2200      	movs	r2, #0
 8002dac:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002dae:	4b05      	ldr	r3, [pc, #20]	; (8002dc4 <MX_USART1_UART_Init+0x58>)
 8002db0:	0018      	movs	r0, r3
 8002db2:	f002 feb1 	bl	8005b18 <HAL_UART_Init>
 8002db6:	1e03      	subs	r3, r0, #0
 8002db8:	d001      	beq.n	8002dbe <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8002dba:	f7ff fe41 	bl	8002a40 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002dbe:	46c0      	nop			; (mov r8, r8)
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	bd80      	pop	{r7, pc}
 8002dc4:	200004c8 	.word	0x200004c8
 8002dc8:	40013800 	.word	0x40013800

08002dcc <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002dd0:	4b14      	ldr	r3, [pc, #80]	; (8002e24 <MX_USART2_UART_Init+0x58>)
 8002dd2:	4a15      	ldr	r2, [pc, #84]	; (8002e28 <MX_USART2_UART_Init+0x5c>)
 8002dd4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002dd6:	4b13      	ldr	r3, [pc, #76]	; (8002e24 <MX_USART2_UART_Init+0x58>)
 8002dd8:	22e1      	movs	r2, #225	; 0xe1
 8002dda:	0252      	lsls	r2, r2, #9
 8002ddc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002dde:	4b11      	ldr	r3, [pc, #68]	; (8002e24 <MX_USART2_UART_Init+0x58>)
 8002de0:	2200      	movs	r2, #0
 8002de2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002de4:	4b0f      	ldr	r3, [pc, #60]	; (8002e24 <MX_USART2_UART_Init+0x58>)
 8002de6:	2200      	movs	r2, #0
 8002de8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002dea:	4b0e      	ldr	r3, [pc, #56]	; (8002e24 <MX_USART2_UART_Init+0x58>)
 8002dec:	2200      	movs	r2, #0
 8002dee:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002df0:	4b0c      	ldr	r3, [pc, #48]	; (8002e24 <MX_USART2_UART_Init+0x58>)
 8002df2:	220c      	movs	r2, #12
 8002df4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002df6:	4b0b      	ldr	r3, [pc, #44]	; (8002e24 <MX_USART2_UART_Init+0x58>)
 8002df8:	2200      	movs	r2, #0
 8002dfa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002dfc:	4b09      	ldr	r3, [pc, #36]	; (8002e24 <MX_USART2_UART_Init+0x58>)
 8002dfe:	2200      	movs	r2, #0
 8002e00:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002e02:	4b08      	ldr	r3, [pc, #32]	; (8002e24 <MX_USART2_UART_Init+0x58>)
 8002e04:	2200      	movs	r2, #0
 8002e06:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002e08:	4b06      	ldr	r3, [pc, #24]	; (8002e24 <MX_USART2_UART_Init+0x58>)
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002e0e:	4b05      	ldr	r3, [pc, #20]	; (8002e24 <MX_USART2_UART_Init+0x58>)
 8002e10:	0018      	movs	r0, r3
 8002e12:	f002 fe81 	bl	8005b18 <HAL_UART_Init>
 8002e16:	1e03      	subs	r3, r0, #0
 8002e18:	d001      	beq.n	8002e1e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8002e1a:	f7ff fe11 	bl	8002a40 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002e1e:	46c0      	nop			; (mov r8, r8)
 8002e20:	46bd      	mov	sp, r7
 8002e22:	bd80      	pop	{r7, pc}
 8002e24:	20000650 	.word	0x20000650
 8002e28:	40004400 	.word	0x40004400

08002e2c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002e2c:	b590      	push	{r4, r7, lr}
 8002e2e:	b08b      	sub	sp, #44	; 0x2c
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e34:	2414      	movs	r4, #20
 8002e36:	193b      	adds	r3, r7, r4
 8002e38:	0018      	movs	r0, r3
 8002e3a:	2314      	movs	r3, #20
 8002e3c:	001a      	movs	r2, r3
 8002e3e:	2100      	movs	r1, #0
 8002e40:	f004 fa39 	bl	80072b6 <memset>
  if(uartHandle->Instance==USART1)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	4a38      	ldr	r2, [pc, #224]	; (8002f2c <HAL_UART_MspInit+0x100>)
 8002e4a:	4293      	cmp	r3, r2
 8002e4c:	d133      	bne.n	8002eb6 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002e4e:	4b38      	ldr	r3, [pc, #224]	; (8002f30 <HAL_UART_MspInit+0x104>)
 8002e50:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002e52:	4b37      	ldr	r3, [pc, #220]	; (8002f30 <HAL_UART_MspInit+0x104>)
 8002e54:	2180      	movs	r1, #128	; 0x80
 8002e56:	01c9      	lsls	r1, r1, #7
 8002e58:	430a      	orrs	r2, r1
 8002e5a:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e5c:	4b34      	ldr	r3, [pc, #208]	; (8002f30 <HAL_UART_MspInit+0x104>)
 8002e5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e60:	4b33      	ldr	r3, [pc, #204]	; (8002f30 <HAL_UART_MspInit+0x104>)
 8002e62:	2101      	movs	r1, #1
 8002e64:	430a      	orrs	r2, r1
 8002e66:	62da      	str	r2, [r3, #44]	; 0x2c
 8002e68:	4b31      	ldr	r3, [pc, #196]	; (8002f30 <HAL_UART_MspInit+0x104>)
 8002e6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e6c:	2201      	movs	r2, #1
 8002e6e:	4013      	ands	r3, r2
 8002e70:	613b      	str	r3, [r7, #16]
 8002e72:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = UART_RX_LTE_Pin|UART_TX_LTE_Pin;
 8002e74:	193b      	adds	r3, r7, r4
 8002e76:	22c0      	movs	r2, #192	; 0xc0
 8002e78:	00d2      	lsls	r2, r2, #3
 8002e7a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e7c:	0021      	movs	r1, r4
 8002e7e:	187b      	adds	r3, r7, r1
 8002e80:	2202      	movs	r2, #2
 8002e82:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e84:	187b      	adds	r3, r7, r1
 8002e86:	2200      	movs	r2, #0
 8002e88:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e8a:	187b      	adds	r3, r7, r1
 8002e8c:	2203      	movs	r2, #3
 8002e8e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8002e90:	187b      	adds	r3, r7, r1
 8002e92:	2204      	movs	r2, #4
 8002e94:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e96:	187a      	adds	r2, r7, r1
 8002e98:	23a0      	movs	r3, #160	; 0xa0
 8002e9a:	05db      	lsls	r3, r3, #23
 8002e9c:	0011      	movs	r1, r2
 8002e9e:	0018      	movs	r0, r3
 8002ea0:	f001 f836 	bl	8003f10 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	2100      	movs	r1, #0
 8002ea8:	201b      	movs	r0, #27
 8002eaa:	f000 ff77 	bl	8003d9c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002eae:	201b      	movs	r0, #27
 8002eb0:	f000 ff89 	bl	8003dc6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002eb4:	e036      	b.n	8002f24 <HAL_UART_MspInit+0xf8>
  else if(uartHandle->Instance==USART2)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	4a1e      	ldr	r2, [pc, #120]	; (8002f34 <HAL_UART_MspInit+0x108>)
 8002ebc:	4293      	cmp	r3, r2
 8002ebe:	d131      	bne.n	8002f24 <HAL_UART_MspInit+0xf8>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002ec0:	4b1b      	ldr	r3, [pc, #108]	; (8002f30 <HAL_UART_MspInit+0x104>)
 8002ec2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002ec4:	4b1a      	ldr	r3, [pc, #104]	; (8002f30 <HAL_UART_MspInit+0x104>)
 8002ec6:	2180      	movs	r1, #128	; 0x80
 8002ec8:	0289      	lsls	r1, r1, #10
 8002eca:	430a      	orrs	r2, r1
 8002ecc:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ece:	4b18      	ldr	r3, [pc, #96]	; (8002f30 <HAL_UART_MspInit+0x104>)
 8002ed0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ed2:	4b17      	ldr	r3, [pc, #92]	; (8002f30 <HAL_UART_MspInit+0x104>)
 8002ed4:	2101      	movs	r1, #1
 8002ed6:	430a      	orrs	r2, r1
 8002ed8:	62da      	str	r2, [r3, #44]	; 0x2c
 8002eda:	4b15      	ldr	r3, [pc, #84]	; (8002f30 <HAL_UART_MspInit+0x104>)
 8002edc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ede:	2201      	movs	r2, #1
 8002ee0:	4013      	ands	r3, r2
 8002ee2:	60fb      	str	r3, [r7, #12]
 8002ee4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = UART_TX_DBG_Pin|UART_RX_DBG_Pin;
 8002ee6:	2114      	movs	r1, #20
 8002ee8:	187b      	adds	r3, r7, r1
 8002eea:	220c      	movs	r2, #12
 8002eec:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002eee:	187b      	adds	r3, r7, r1
 8002ef0:	2202      	movs	r2, #2
 8002ef2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ef4:	187b      	adds	r3, r7, r1
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002efa:	187b      	adds	r3, r7, r1
 8002efc:	2203      	movs	r2, #3
 8002efe:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 8002f00:	187b      	adds	r3, r7, r1
 8002f02:	2204      	movs	r2, #4
 8002f04:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f06:	187a      	adds	r2, r7, r1
 8002f08:	23a0      	movs	r3, #160	; 0xa0
 8002f0a:	05db      	lsls	r3, r3, #23
 8002f0c:	0011      	movs	r1, r2
 8002f0e:	0018      	movs	r0, r3
 8002f10:	f000 fffe 	bl	8003f10 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002f14:	2200      	movs	r2, #0
 8002f16:	2100      	movs	r1, #0
 8002f18:	201c      	movs	r0, #28
 8002f1a:	f000 ff3f 	bl	8003d9c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002f1e:	201c      	movs	r0, #28
 8002f20:	f000 ff51 	bl	8003dc6 <HAL_NVIC_EnableIRQ>
}
 8002f24:	46c0      	nop			; (mov r8, r8)
 8002f26:	46bd      	mov	sp, r7
 8002f28:	b00b      	add	sp, #44	; 0x2c
 8002f2a:	bd90      	pop	{r4, r7, pc}
 8002f2c:	40013800 	.word	0x40013800
 8002f30:	40021000 	.word	0x40021000
 8002f34:	40004400 	.word	0x40004400

08002f38 <UartSettings>:
  }
}

/* USER CODE BEGIN 1 */
void UartSettings() // Uart Startup Interrupt Routine Construction
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(&huart1, &uartLTEParameters.rxData, 1);
 8002f3c:	4907      	ldr	r1, [pc, #28]	; (8002f5c <UartSettings+0x24>)
 8002f3e:	4b08      	ldr	r3, [pc, #32]	; (8002f60 <UartSettings+0x28>)
 8002f40:	2201      	movs	r2, #1
 8002f42:	0018      	movs	r0, r3
 8002f44:	f002 fee4 	bl	8005d10 <HAL_UART_Receive_IT>
	HAL_UART_Receive_IT(&huart2, &uartDebugParameters.rxData, 1);
 8002f48:	4906      	ldr	r1, [pc, #24]	; (8002f64 <UartSettings+0x2c>)
 8002f4a:	4b07      	ldr	r3, [pc, #28]	; (8002f68 <UartSettings+0x30>)
 8002f4c:	2201      	movs	r2, #1
 8002f4e:	0018      	movs	r0, r3
 8002f50:	f002 fede 	bl	8005d10 <HAL_UART_Receive_IT>
}
 8002f54:	46c0      	nop			; (mov r8, r8)
 8002f56:	46bd      	mov	sp, r7
 8002f58:	bd80      	pop	{r7, pc}
 8002f5a:	46c0      	nop			; (mov r8, r8)
 8002f5c:	2000064c 	.word	0x2000064c
 8002f60:	200004c8 	.word	0x200004c8
 8002f64:	200004c4 	.word	0x200004c4
 8002f68:	20000650 	.word	0x20000650

08002f6c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	b082      	sub	sp, #8
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART1) // Messages from LTE Module
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	4a1c      	ldr	r2, [pc, #112]	; (8002fec <HAL_UART_RxCpltCallback+0x80>)
 8002f7a:	4293      	cmp	r3, r2
 8002f7c:	d125      	bne.n	8002fca <HAL_UART_RxCpltCallback+0x5e>
	{
		if (uartLTEParameters.active){
 8002f7e:	4a1c      	ldr	r2, [pc, #112]	; (8002ff0 <HAL_UART_RxCpltCallback+0x84>)
 8002f80:	2381      	movs	r3, #129	; 0x81
 8002f82:	005b      	lsls	r3, r3, #1
 8002f84:	5cd3      	ldrb	r3, [r2, r3]
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d01f      	beq.n	8002fca <HAL_UART_RxCpltCallback+0x5e>
			uartLTEParameters.rxBuffer[uartLTEParameters.rxDataCounter] = uartLTEParameters.rxData;
 8002f8a:	4a19      	ldr	r2, [pc, #100]	; (8002ff0 <HAL_UART_RxCpltCallback+0x84>)
 8002f8c:	2302      	movs	r3, #2
 8002f8e:	33ff      	adds	r3, #255	; 0xff
 8002f90:	5cd3      	ldrb	r3, [r2, r3]
 8002f92:	0019      	movs	r1, r3
 8002f94:	4a16      	ldr	r2, [pc, #88]	; (8002ff0 <HAL_UART_RxCpltCallback+0x84>)
 8002f96:	2380      	movs	r3, #128	; 0x80
 8002f98:	005b      	lsls	r3, r3, #1
 8002f9a:	5cd2      	ldrb	r2, [r2, r3]
 8002f9c:	4b14      	ldr	r3, [pc, #80]	; (8002ff0 <HAL_UART_RxCpltCallback+0x84>)
 8002f9e:	545a      	strb	r2, [r3, r1]
			uartLTEParameters.rxDataCounter++;
 8002fa0:	4a13      	ldr	r2, [pc, #76]	; (8002ff0 <HAL_UART_RxCpltCallback+0x84>)
 8002fa2:	2302      	movs	r3, #2
 8002fa4:	33ff      	adds	r3, #255	; 0xff
 8002fa6:	5cd3      	ldrb	r3, [r2, r3]
 8002fa8:	3301      	adds	r3, #1
 8002faa:	b2d9      	uxtb	r1, r3
 8002fac:	4a10      	ldr	r2, [pc, #64]	; (8002ff0 <HAL_UART_RxCpltCallback+0x84>)
 8002fae:	2302      	movs	r3, #2
 8002fb0:	33ff      	adds	r3, #255	; 0xff
 8002fb2:	54d1      	strb	r1, [r2, r3]
			if (uartLTEParameters.rxDataCounter >=255)uartLTEParameters.rxDataCounter=0;
 8002fb4:	4a0e      	ldr	r2, [pc, #56]	; (8002ff0 <HAL_UART_RxCpltCallback+0x84>)
 8002fb6:	2302      	movs	r3, #2
 8002fb8:	33ff      	adds	r3, #255	; 0xff
 8002fba:	5cd3      	ldrb	r3, [r2, r3]
 8002fbc:	2bff      	cmp	r3, #255	; 0xff
 8002fbe:	d104      	bne.n	8002fca <HAL_UART_RxCpltCallback+0x5e>
 8002fc0:	4a0b      	ldr	r2, [pc, #44]	; (8002ff0 <HAL_UART_RxCpltCallback+0x84>)
 8002fc2:	2302      	movs	r3, #2
 8002fc4:	33ff      	adds	r3, #255	; 0xff
 8002fc6:	2100      	movs	r1, #0
 8002fc8:	54d1      	strb	r1, [r2, r3]
		}
	}


	HAL_UART_Receive_IT(&huart1, &uartLTEParameters.rxData, 1);
 8002fca:	490a      	ldr	r1, [pc, #40]	; (8002ff4 <HAL_UART_RxCpltCallback+0x88>)
 8002fcc:	4b0a      	ldr	r3, [pc, #40]	; (8002ff8 <HAL_UART_RxCpltCallback+0x8c>)
 8002fce:	2201      	movs	r2, #1
 8002fd0:	0018      	movs	r0, r3
 8002fd2:	f002 fe9d 	bl	8005d10 <HAL_UART_Receive_IT>
	HAL_UART_Receive_IT(&huart2, &uartDebugParameters.rxData, 1);
 8002fd6:	4909      	ldr	r1, [pc, #36]	; (8002ffc <HAL_UART_RxCpltCallback+0x90>)
 8002fd8:	4b09      	ldr	r3, [pc, #36]	; (8003000 <HAL_UART_RxCpltCallback+0x94>)
 8002fda:	2201      	movs	r2, #1
 8002fdc:	0018      	movs	r0, r3
 8002fde:	f002 fe97 	bl	8005d10 <HAL_UART_Receive_IT>
}
 8002fe2:	46c0      	nop			; (mov r8, r8)
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	b002      	add	sp, #8
 8002fe8:	bd80      	pop	{r7, pc}
 8002fea:	46c0      	nop			; (mov r8, r8)
 8002fec:	40013800 	.word	0x40013800
 8002ff0:	2000054c 	.word	0x2000054c
 8002ff4:	2000064c 	.word	0x2000064c
 8002ff8:	200004c8 	.word	0x200004c8
 8002ffc:	200004c4 	.word	0x200004c4
 8003000:	20000650 	.word	0x20000650

08003004 <UsrEnable>:
#include "waste.h"

usrParams_typedef usrParameters;

/* ------- ULT SENSOR ENABLE -------------------- */
void UsrEnable() {
 8003004:	b580      	push	{r7, lr}
 8003006:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(ULT_ENABLE_GPIO_Port, ULT_ENABLE_Pin, GPIO_PIN_SET); // Ultrasonic Sensor Power On
 8003008:	2380      	movs	r3, #128	; 0x80
 800300a:	011b      	lsls	r3, r3, #4
 800300c:	4807      	ldr	r0, [pc, #28]	; (800302c <UsrEnable+0x28>)
 800300e:	2201      	movs	r2, #1
 8003010:	0019      	movs	r1, r3
 8003012:	f001 f8fb 	bl	800420c <HAL_GPIO_WritePin>
	HAL_Delay(USR_PWRON_STAB_TIMEOUT); // Wait 100 ms for power stabilization
 8003016:	2064      	movs	r0, #100	; 0x64
 8003018:	f000 fa08 	bl	800342c <HAL_Delay>
	DebugSendData("Usr Enable", 10);
 800301c:	4b04      	ldr	r3, [pc, #16]	; (8003030 <UsrEnable+0x2c>)
 800301e:	210a      	movs	r1, #10
 8003020:	0018      	movs	r0, r3
 8003022:	f000 f91f 	bl	8003264 <DebugSendData>

}
 8003026:	46c0      	nop			; (mov r8, r8)
 8003028:	46bd      	mov	sp, r7
 800302a:	bd80      	pop	{r7, pc}
 800302c:	50000400 	.word	0x50000400
 8003030:	08007f70 	.word	0x08007f70

08003034 <UsrDisable>:
/* --------------- End of the ULT SENSOR ENABLE ---------------- */

/* ------- ULT SENSOR DISABLE -------------------- */
void UsrDisable() {
 8003034:	b580      	push	{r7, lr}
 8003036:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(ULT_ENABLE_GPIO_Port, ULT_ENABLE_Pin, GPIO_PIN_RESET); // Ultrasonic Sensor Power Off
 8003038:	2380      	movs	r3, #128	; 0x80
 800303a:	011b      	lsls	r3, r3, #4
 800303c:	4807      	ldr	r0, [pc, #28]	; (800305c <UsrDisable+0x28>)
 800303e:	2200      	movs	r2, #0
 8003040:	0019      	movs	r1, r3
 8003042:	f001 f8e3 	bl	800420c <HAL_GPIO_WritePin>
	HAL_Delay(USR_PWROFF_TIMEOUT); // Wait 100 ms for discharge
 8003046:	2064      	movs	r0, #100	; 0x64
 8003048:	f000 f9f0 	bl	800342c <HAL_Delay>
	DebugSendData("Usr Disable", 11);
 800304c:	4b04      	ldr	r3, [pc, #16]	; (8003060 <UsrDisable+0x2c>)
 800304e:	210b      	movs	r1, #11
 8003050:	0018      	movs	r0, r3
 8003052:	f000 f907 	bl	8003264 <DebugSendData>

}
 8003056:	46c0      	nop			; (mov r8, r8)
 8003058:	46bd      	mov	sp, r7
 800305a:	bd80      	pop	{r7, pc}
 800305c:	50000400 	.word	0x50000400
 8003060:	08007f7c 	.word	0x08007f7c

08003064 <UsrEmit>:
/* --------------- End of the ULT SENSOR DISABLE ---------------- */

/* ------- ULT SENSOR EMIT -------------------- */
void UsrEmit() {
 8003064:	b580      	push	{r7, lr}
 8003066:	af00      	add	r7, sp, #0
	// Emit Process
	HAL_GPIO_WritePin(ULT_EMIT_GPIO_Port, ULT_EMIT_Pin, GPIO_PIN_SET); // Set emit pin to high
 8003068:	2380      	movs	r3, #128	; 0x80
 800306a:	00db      	lsls	r3, r3, #3
 800306c:	4809      	ldr	r0, [pc, #36]	; (8003094 <UsrEmit+0x30>)
 800306e:	2201      	movs	r2, #1
 8003070:	0019      	movs	r1, r3
 8003072:	f001 f8cb 	bl	800420c <HAL_GPIO_WritePin>
	DelayUs(500); // 0.5 ms high is necessary for emit
 8003076:	23fa      	movs	r3, #250	; 0xfa
 8003078:	005b      	lsls	r3, r3, #1
 800307a:	0018      	movs	r0, r3
 800307c:	f7ff fe5c 	bl	8002d38 <DelayUs>
	HAL_GPIO_WritePin(ULT_EMIT_GPIO_Port, ULT_EMIT_Pin, GPIO_PIN_RESET); // Set emit pin to low
 8003080:	2380      	movs	r3, #128	; 0x80
 8003082:	00db      	lsls	r3, r3, #3
 8003084:	4803      	ldr	r0, [pc, #12]	; (8003094 <UsrEmit+0x30>)
 8003086:	2200      	movs	r2, #0
 8003088:	0019      	movs	r1, r3
 800308a:	f001 f8bf 	bl	800420c <HAL_GPIO_WritePin>

}
 800308e:	46c0      	nop			; (mov r8, r8)
 8003090:	46bd      	mov	sp, r7
 8003092:	bd80      	pop	{r7, pc}
 8003094:	50000400 	.word	0x50000400

08003098 <UsrMeasure>:
/* --------------- End of the ULT SENSOR EMIT ---------------- */

/* ------- ULT SENSOR MEASURE -------------------- */
void UsrMeasure() {
 8003098:	b580      	push	{r7, lr}
 800309a:	b084      	sub	sp, #16
 800309c:	af00      	add	r7, sp, #0
	DebugSendData("Usr Measure", 11);
 800309e:	4b3b      	ldr	r3, [pc, #236]	; (800318c <UsrMeasure+0xf4>)
 80030a0:	210b      	movs	r1, #11
 80030a2:	0018      	movs	r0, r3
 80030a4:	f000 f8de 	bl	8003264 <DebugSendData>
	uint8_t arrayCnt = 0;
 80030a8:	230f      	movs	r3, #15
 80030aa:	18fb      	adds	r3, r7, r3
 80030ac:	2200      	movs	r2, #0
 80030ae:	701a      	strb	r2, [r3, #0]
	for (uint16_t cnt = 0; cnt < usrParameters.measureRepCount; cnt++) {
 80030b0:	230c      	movs	r3, #12
 80030b2:	18fb      	adds	r3, r7, r3
 80030b4:	2200      	movs	r2, #0
 80030b6:	801a      	strh	r2, [r3, #0]
 80030b8:	e02f      	b.n	800311a <UsrMeasure+0x82>
		usrParameters.measurementValue = 0; //Set the measurement value to 0
 80030ba:	4b35      	ldr	r3, [pc, #212]	; (8003190 <UsrMeasure+0xf8>)
 80030bc:	2200      	movs	r2, #0
 80030be:	80da      	strh	r2, [r3, #6]
		usrParameters.usrReadyRead = 0; //Set the read mode to disable
 80030c0:	4b33      	ldr	r3, [pc, #204]	; (8003190 <UsrMeasure+0xf8>)
 80030c2:	2200      	movs	r2, #0
 80030c4:	701a      	strb	r2, [r3, #0]

		UsrEmit(); //Emit the Ultrasonic Sensor
 80030c6:	f7ff ffcd 	bl	8003064 <UsrEmit>

		DelayUs(USR_NEAR_MEAS_TIMEOUT); //Wait 2 ms for the near distance measurement (35 cm)
 80030ca:	23fa      	movs	r3, #250	; 0xfa
 80030cc:	00db      	lsls	r3, r3, #3
 80030ce:	0018      	movs	r0, r3
 80030d0:	f7ff fe32 	bl	8002d38 <DelayUs>

		usrParameters.usrReadyRead = 1; //Set the read mode to enable
 80030d4:	4b2e      	ldr	r3, [pc, #184]	; (8003190 <UsrMeasure+0xf8>)
 80030d6:	2201      	movs	r2, #1
 80030d8:	701a      	strb	r2, [r3, #0]

		DelayUs(USR_FAR_MEAS_TIMEOUT); //Wait 28 ms for the far distance measurement
 80030da:	4b2e      	ldr	r3, [pc, #184]	; (8003194 <UsrMeasure+0xfc>)
 80030dc:	0018      	movs	r0, r3
 80030de:	f7ff fe2b 	bl	8002d38 <DelayUs>

		usrParameters.usrReadyRead = 0; //Set the read mode to disable
 80030e2:	4b2b      	ldr	r3, [pc, #172]	; (8003190 <UsrMeasure+0xf8>)
 80030e4:	2200      	movs	r2, #0
 80030e6:	701a      	strb	r2, [r3, #0]

		usrParameters.usrMeasArray[arrayCnt] = usrParameters.measurementValue + USR_NEAR_MEAS_TIMEOUT;
 80030e8:	4b29      	ldr	r3, [pc, #164]	; (8003190 <UsrMeasure+0xf8>)
 80030ea:	88db      	ldrh	r3, [r3, #6]
 80030ec:	200f      	movs	r0, #15
 80030ee:	183a      	adds	r2, r7, r0
 80030f0:	7812      	ldrb	r2, [r2, #0]
 80030f2:	21fa      	movs	r1, #250	; 0xfa
 80030f4:	00c9      	lsls	r1, r1, #3
 80030f6:	468c      	mov	ip, r1
 80030f8:	4463      	add	r3, ip
 80030fa:	b299      	uxth	r1, r3
 80030fc:	4b24      	ldr	r3, [pc, #144]	; (8003190 <UsrMeasure+0xf8>)
 80030fe:	3204      	adds	r2, #4
 8003100:	0052      	lsls	r2, r2, #1
 8003102:	52d1      	strh	r1, [r2, r3]
		arrayCnt++;
 8003104:	183b      	adds	r3, r7, r0
 8003106:	781a      	ldrb	r2, [r3, #0]
 8003108:	183b      	adds	r3, r7, r0
 800310a:	3201      	adds	r2, #1
 800310c:	701a      	strb	r2, [r3, #0]
	for (uint16_t cnt = 0; cnt < usrParameters.measureRepCount; cnt++) {
 800310e:	210c      	movs	r1, #12
 8003110:	187b      	adds	r3, r7, r1
 8003112:	881a      	ldrh	r2, [r3, #0]
 8003114:	187b      	adds	r3, r7, r1
 8003116:	3201      	adds	r2, #1
 8003118:	801a      	strh	r2, [r3, #0]
 800311a:	4b1d      	ldr	r3, [pc, #116]	; (8003190 <UsrMeasure+0xf8>)
 800311c:	885b      	ldrh	r3, [r3, #2]
 800311e:	220c      	movs	r2, #12
 8003120:	18ba      	adds	r2, r7, r2
 8003122:	8812      	ldrh	r2, [r2, #0]
 8003124:	429a      	cmp	r2, r3
 8003126:	d3c8      	bcc.n	80030ba <UsrMeasure+0x22>
	}

	uint32_t totalMeasure = 0;
 8003128:	2300      	movs	r3, #0
 800312a:	60bb      	str	r3, [r7, #8]
	for (uint16_t cnt = 0; cnt < usrParameters.measureRepCount; cnt++) {
 800312c:	1dbb      	adds	r3, r7, #6
 800312e:	2200      	movs	r2, #0
 8003130:	801a      	strh	r2, [r3, #0]
 8003132:	e00e      	b.n	8003152 <UsrMeasure+0xba>
		totalMeasure += usrParameters.usrMeasArray[cnt];
 8003134:	1dbb      	adds	r3, r7, #6
 8003136:	881a      	ldrh	r2, [r3, #0]
 8003138:	4b15      	ldr	r3, [pc, #84]	; (8003190 <UsrMeasure+0xf8>)
 800313a:	3204      	adds	r2, #4
 800313c:	0052      	lsls	r2, r2, #1
 800313e:	5ad3      	ldrh	r3, [r2, r3]
 8003140:	001a      	movs	r2, r3
 8003142:	68bb      	ldr	r3, [r7, #8]
 8003144:	189b      	adds	r3, r3, r2
 8003146:	60bb      	str	r3, [r7, #8]
	for (uint16_t cnt = 0; cnt < usrParameters.measureRepCount; cnt++) {
 8003148:	1dbb      	adds	r3, r7, #6
 800314a:	881a      	ldrh	r2, [r3, #0]
 800314c:	1dbb      	adds	r3, r7, #6
 800314e:	3201      	adds	r2, #1
 8003150:	801a      	strh	r2, [r3, #0]
 8003152:	4b0f      	ldr	r3, [pc, #60]	; (8003190 <UsrMeasure+0xf8>)
 8003154:	885b      	ldrh	r3, [r3, #2]
 8003156:	1dba      	adds	r2, r7, #6
 8003158:	8812      	ldrh	r2, [r2, #0]
 800315a:	429a      	cmp	r2, r3
 800315c:	d3ea      	bcc.n	8003134 <UsrMeasure+0x9c>
	}
	uint16_t optMeasure = totalMeasure / 10;
 800315e:	68bb      	ldr	r3, [r7, #8]
 8003160:	210a      	movs	r1, #10
 8003162:	0018      	movs	r0, r3
 8003164:	f7fc ffda 	bl	800011c <__udivsi3>
 8003168:	0003      	movs	r3, r0
 800316a:	001a      	movs	r2, r3
 800316c:	1d3b      	adds	r3, r7, #4
 800316e:	801a      	strh	r2, [r3, #0]
	usrParameters.usrMeasTotalArray[wasteParameters.ultSensIndex] = optMeasure;
 8003170:	4b09      	ldr	r3, [pc, #36]	; (8003198 <UsrMeasure+0x100>)
 8003172:	789b      	ldrb	r3, [r3, #2]
 8003174:	4a06      	ldr	r2, [pc, #24]	; (8003190 <UsrMeasure+0xf8>)
 8003176:	330c      	adds	r3, #12
 8003178:	005b      	lsls	r3, r3, #1
 800317a:	18d3      	adds	r3, r2, r3
 800317c:	3304      	adds	r3, #4
 800317e:	1d3a      	adds	r2, r7, #4
 8003180:	8812      	ldrh	r2, [r2, #0]
 8003182:	801a      	strh	r2, [r3, #0]

}
 8003184:	46c0      	nop			; (mov r8, r8)
 8003186:	46bd      	mov	sp, r7
 8003188:	b004      	add	sp, #16
 800318a:	bd80      	pop	{r7, pc}
 800318c:	08007f88 	.word	0x08007f88
 8003190:	200006d4 	.word	0x200006d4
 8003194:	00006d60 	.word	0x00006d60
 8003198:	20000824 	.word	0x20000824

0800319c <WasteInit>:
#include "adc.h"
#include <stdio.h>

waste_typedef wasteParameters;
debugMessages_typedef debugMessages;
void WasteInit() {
 800319c:	b580      	push	{r7, lr}
 800319e:	b082      	sub	sp, #8
 80031a0:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start(&htim2);
 80031a2:	4b2a      	ldr	r3, [pc, #168]	; (800324c <WasteInit+0xb0>)
 80031a4:	0018      	movs	r0, r3
 80031a6:	f002 fa43 	bl	8005630 <HAL_TIM_Base_Start>
	usrParameters.measureRepCount = USR_MEASURE_COUNT;
 80031aa:	4b29      	ldr	r3, [pc, #164]	; (8003250 <WasteInit+0xb4>)
 80031ac:	220a      	movs	r2, #10
 80031ae:	805a      	strh	r2, [r3, #2]
	usrParameters.measureRepTotalCount = USR_MEASURE_TOTAL_COUNT;
 80031b0:	4b27      	ldr	r3, [pc, #156]	; (8003250 <WasteInit+0xb4>)
 80031b2:	2218      	movs	r2, #24
 80031b4:	809a      	strh	r2, [r3, #4]
	usrParameters.measurementValue = 0;
 80031b6:	4b26      	ldr	r3, [pc, #152]	; (8003250 <WasteInit+0xb4>)
 80031b8:	2200      	movs	r2, #0
 80031ba:	80da      	strh	r2, [r3, #6]
	lteParameters.contexId = 1;
 80031bc:	4a25      	ldr	r2, [pc, #148]	; (8003254 <WasteInit+0xb8>)
 80031be:	2387      	movs	r3, #135	; 0x87
 80031c0:	005b      	lsls	r3, r3, #1
 80031c2:	2101      	movs	r1, #1
 80031c4:	54d1      	strb	r1, [r2, r3]
	lteParameters.sessionId = 0;
 80031c6:	4a23      	ldr	r2, [pc, #140]	; (8003254 <WasteInit+0xb8>)
 80031c8:	2310      	movs	r3, #16
 80031ca:	33ff      	adds	r3, #255	; 0xff
 80031cc:	2100      	movs	r1, #0
 80031ce:	54d1      	strb	r1, [r2, r3]
	LTEInitParams();
 80031d0:	f7fd ff52 	bl	8001078 <LTEInitParams>
	for (int i = 0; i < 15; ++i) {
 80031d4:	2300      	movs	r3, #0
 80031d6:	607b      	str	r3, [r7, #4]
 80031d8:	e00d      	b.n	80031f6 <WasteInit+0x5a>
		lteParameters.imeiNum[i] = '*';
 80031da:	4a1e      	ldr	r2, [pc, #120]	; (8003254 <WasteInit+0xb8>)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	18d3      	adds	r3, r2, r3
 80031e0:	222a      	movs	r2, #42	; 0x2a
 80031e2:	701a      	strb	r2, [r3, #0]
		lteParameters.imsiNum[i] = '*';
 80031e4:	4a1b      	ldr	r2, [pc, #108]	; (8003254 <WasteInit+0xb8>)
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	18d3      	adds	r3, r2, r3
 80031ea:	330f      	adds	r3, #15
 80031ec:	222a      	movs	r2, #42	; 0x2a
 80031ee:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 15; ++i) {
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	3301      	adds	r3, #1
 80031f4:	607b      	str	r3, [r7, #4]
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	2b0e      	cmp	r3, #14
 80031fa:	ddee      	ble.n	80031da <WasteInit+0x3e>
	}

	rtcParameters.wakeUpFlag = 1;
 80031fc:	4b16      	ldr	r3, [pc, #88]	; (8003258 <WasteInit+0xbc>)
 80031fe:	2201      	movs	r2, #1
 8003200:	701a      	strb	r2, [r3, #0]
	wasteParameters.preDataSendError=0;
 8003202:	4b16      	ldr	r3, [pc, #88]	; (800325c <WasteInit+0xc0>)
 8003204:	2200      	movs	r2, #0
 8003206:	725a      	strb	r2, [r3, #9]
	wasteParameters.wakeUpCount = 0;
 8003208:	4b14      	ldr	r3, [pc, #80]	; (800325c <WasteInit+0xc0>)
 800320a:	2200      	movs	r2, #0
 800320c:	701a      	strb	r2, [r3, #0]
	wasteParameters.ultSensIndex= 0;
 800320e:	4b13      	ldr	r3, [pc, #76]	; (800325c <WasteInit+0xc0>)
 8003210:	2200      	movs	r2, #0
 8003212:	709a      	strb	r2, [r3, #2]
	wasteParameters.ultSensCount = 0;
 8003214:	4b11      	ldr	r3, [pc, #68]	; (800325c <WasteInit+0xc0>)
 8003216:	2200      	movs	r2, #0
 8003218:	705a      	strb	r2, [r3, #1]
	wasteParameters.setupCount=0;
 800321a:	4b10      	ldr	r3, [pc, #64]	; (800325c <WasteInit+0xc0>)
 800321c:	2200      	movs	r2, #0
 800321e:	71da      	strb	r2, [r3, #7]
	wasteParameters.gpsAlarm=0;
 8003220:	4b0e      	ldr	r3, [pc, #56]	; (800325c <WasteInit+0xc0>)
 8003222:	2200      	movs	r2, #0
 8003224:	729a      	strb	r2, [r3, #10]
	wasteParameters.gpsAlarmCount=0;
 8003226:	4b0d      	ldr	r3, [pc, #52]	; (800325c <WasteInit+0xc0>)
 8003228:	2200      	movs	r2, #0
 800322a:	72da      	strb	r2, [r3, #11]
wasteParameters.setupMode=1;
 800322c:	4b0b      	ldr	r3, [pc, #44]	; (800325c <WasteInit+0xc0>)
 800322e:	2201      	movs	r2, #1
 8003230:	721a      	strb	r2, [r3, #8]
	adcParameters.adcReadEnableFlag = 1;
 8003232:	4b0b      	ldr	r3, [pc, #44]	; (8003260 <WasteInit+0xc4>)
 8003234:	2201      	movs	r2, #1
 8003236:	735a      	strb	r2, [r3, #13]
	lteParameters.powerState = PWR_PASSIVE;
 8003238:	4a06      	ldr	r2, [pc, #24]	; (8003254 <WasteInit+0xb8>)
 800323a:	230e      	movs	r3, #14
 800323c:	33ff      	adds	r3, #255	; 0xff
 800323e:	2101      	movs	r1, #1
 8003240:	54d1      	strb	r1, [r2, r3]

}
 8003242:	46c0      	nop			; (mov r8, r8)
 8003244:	46bd      	mov	sp, r7
 8003246:	b002      	add	sp, #8
 8003248:	bd80      	pop	{r7, pc}
 800324a:	46c0      	nop			; (mov r8, r8)
 800324c:	20000384 	.word	0x20000384
 8003250:	200006d4 	.word	0x200006d4
 8003254:	2000024c 	.word	0x2000024c
 8003258:	2000035c 	.word	0x2000035c
 800325c:	20000824 	.word	0x20000824
 8003260:	20000098 	.word	0x20000098

08003264 <DebugSendData>:

void DebugSendData(const char *msg, uint8_t msgSize) {
 8003264:	b580      	push	{r7, lr}
 8003266:	b084      	sub	sp, #16
 8003268:	af00      	add	r7, sp, #0
 800326a:	6078      	str	r0, [r7, #4]
 800326c:	000a      	movs	r2, r1
 800326e:	1cfb      	adds	r3, r7, #3
 8003270:	701a      	strb	r2, [r3, #0]
#ifdef DEBUG
	if (msgSize > 250)msgSize=250;
 8003272:	1cfb      	adds	r3, r7, #3
 8003274:	781b      	ldrb	r3, [r3, #0]
 8003276:	2bfa      	cmp	r3, #250	; 0xfa
 8003278:	d902      	bls.n	8003280 <DebugSendData+0x1c>
 800327a:	1cfb      	adds	r3, r7, #3
 800327c:	22fa      	movs	r2, #250	; 0xfa
 800327e:	701a      	strb	r2, [r3, #0]
	memset(debugMessages.MEESAGE, '-', msgSize+2);
 8003280:	1cfb      	adds	r3, r7, #3
 8003282:	781b      	ldrb	r3, [r3, #0]
 8003284:	3302      	adds	r3, #2
 8003286:	001a      	movs	r2, r3
 8003288:	4b19      	ldr	r3, [pc, #100]	; (80032f0 <DebugSendData+0x8c>)
 800328a:	212d      	movs	r1, #45	; 0x2d
 800328c:	0018      	movs	r0, r3
 800328e:	f004 f812 	bl	80072b6 <memset>
	for (int i = 0; i < msgSize; ++i) {
 8003292:	2300      	movs	r3, #0
 8003294:	60fb      	str	r3, [r7, #12]
 8003296:	e00b      	b.n	80032b0 <DebugSendData+0x4c>
			debugMessages.MEESAGE[i] =(char) msg[i];
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	687a      	ldr	r2, [r7, #4]
 800329c:	18d3      	adds	r3, r2, r3
 800329e:	7819      	ldrb	r1, [r3, #0]
 80032a0:	4a13      	ldr	r2, [pc, #76]	; (80032f0 <DebugSendData+0x8c>)
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	18d3      	adds	r3, r2, r3
 80032a6:	1c0a      	adds	r2, r1, #0
 80032a8:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < msgSize; ++i) {
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	3301      	adds	r3, #1
 80032ae:	60fb      	str	r3, [r7, #12]
 80032b0:	1cfb      	adds	r3, r7, #3
 80032b2:	781b      	ldrb	r3, [r3, #0]
 80032b4:	68fa      	ldr	r2, [r7, #12]
 80032b6:	429a      	cmp	r2, r3
 80032b8:	dbee      	blt.n	8003298 <DebugSendData+0x34>
	}
	debugMessages.MEESAGE[msgSize] = '\r';
 80032ba:	1cfb      	adds	r3, r7, #3
 80032bc:	781b      	ldrb	r3, [r3, #0]
 80032be:	4a0c      	ldr	r2, [pc, #48]	; (80032f0 <DebugSendData+0x8c>)
 80032c0:	210d      	movs	r1, #13
 80032c2:	54d1      	strb	r1, [r2, r3]
	debugMessages.MEESAGE[msgSize+1] = '\n';
 80032c4:	1cfb      	adds	r3, r7, #3
 80032c6:	781b      	ldrb	r3, [r3, #0]
 80032c8:	3301      	adds	r3, #1
 80032ca:	4a09      	ldr	r2, [pc, #36]	; (80032f0 <DebugSendData+0x8c>)
 80032cc:	210a      	movs	r1, #10
 80032ce:	54d1      	strb	r1, [r2, r3]
	HAL_UART_Transmit(&huart2, (uint8_t*) debugMessages.MEESAGE,msgSize+2, HAL_MAX_DELAY); // Send message to the debug
 80032d0:	1cfb      	adds	r3, r7, #3
 80032d2:	781b      	ldrb	r3, [r3, #0]
 80032d4:	b29b      	uxth	r3, r3
 80032d6:	3302      	adds	r3, #2
 80032d8:	b29a      	uxth	r2, r3
 80032da:	2301      	movs	r3, #1
 80032dc:	425b      	negs	r3, r3
 80032de:	4904      	ldr	r1, [pc, #16]	; (80032f0 <DebugSendData+0x8c>)
 80032e0:	4804      	ldr	r0, [pc, #16]	; (80032f4 <DebugSendData+0x90>)
 80032e2:	f002 fc6d 	bl	8005bc0 <HAL_UART_Transmit>
#endif

}
 80032e6:	46c0      	nop			; (mov r8, r8)
 80032e8:	46bd      	mov	sp, r7
 80032ea:	b004      	add	sp, #16
 80032ec:	bd80      	pop	{r7, pc}
 80032ee:	46c0      	nop			; (mov r8, r8)
 80032f0:	20000724 	.word	0x20000724
 80032f4:	20000650 	.word	0x20000650

080032f8 <Reset_Handler>:
.word  _ebss

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:     ldr   r0, =_estack
 80032f8:	480d      	ldr	r0, [pc, #52]	; (8003330 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 80032fa:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80032fc:	480d      	ldr	r0, [pc, #52]	; (8003334 <LoopForever+0x6>)
  ldr r1, =_edata
 80032fe:	490e      	ldr	r1, [pc, #56]	; (8003338 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003300:	4a0e      	ldr	r2, [pc, #56]	; (800333c <LoopForever+0xe>)
  movs r3, #0
 8003302:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003304:	e002      	b.n	800330c <LoopCopyDataInit>

08003306 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003306:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003308:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800330a:	3304      	adds	r3, #4

0800330c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800330c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800330e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003310:	d3f9      	bcc.n	8003306 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003312:	4a0b      	ldr	r2, [pc, #44]	; (8003340 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003314:	4c0b      	ldr	r4, [pc, #44]	; (8003344 <LoopForever+0x16>)
  movs r3, #0
 8003316:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003318:	e001      	b.n	800331e <LoopFillZerobss>

0800331a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800331a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800331c:	3204      	adds	r2, #4

0800331e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800331e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003320:	d3fb      	bcc.n	800331a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8003322:	f7ff fc99 	bl	8002c58 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003326:	f003 ff99 	bl	800725c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800332a:	f7fe fe1b 	bl	8001f64 <main>

0800332e <LoopForever>:

LoopForever:
    b LoopForever
 800332e:	e7fe      	b.n	800332e <LoopForever>
Reset_Handler:     ldr   r0, =_estack
 8003330:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8003334:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003338:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 800333c:	0800806c 	.word	0x0800806c
  ldr r2, =_sbss
 8003340:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8003344:	20000844 	.word	0x20000844

08003348 <DMA1_Channel1_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003348:	e7fe      	b.n	8003348 <DMA1_Channel1_IRQHandler>
	...

0800334c <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800334c:	b580      	push	{r7, lr}
 800334e:	b082      	sub	sp, #8
 8003350:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003352:	1dfb      	adds	r3, r7, #7
 8003354:	2200      	movs	r2, #0
 8003356:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8003358:	4b0b      	ldr	r3, [pc, #44]	; (8003388 <HAL_Init+0x3c>)
 800335a:	681a      	ldr	r2, [r3, #0]
 800335c:	4b0a      	ldr	r3, [pc, #40]	; (8003388 <HAL_Init+0x3c>)
 800335e:	2140      	movs	r1, #64	; 0x40
 8003360:	430a      	orrs	r2, r1
 8003362:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003364:	2003      	movs	r0, #3
 8003366:	f000 f811 	bl	800338c <HAL_InitTick>
 800336a:	1e03      	subs	r3, r0, #0
 800336c:	d003      	beq.n	8003376 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 800336e:	1dfb      	adds	r3, r7, #7
 8003370:	2201      	movs	r2, #1
 8003372:	701a      	strb	r2, [r3, #0]
 8003374:	e001      	b.n	800337a <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003376:	f7ff fbd5 	bl	8002b24 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800337a:	1dfb      	adds	r3, r7, #7
 800337c:	781b      	ldrb	r3, [r3, #0]
}
 800337e:	0018      	movs	r0, r3
 8003380:	46bd      	mov	sp, r7
 8003382:	b002      	add	sp, #8
 8003384:	bd80      	pop	{r7, pc}
 8003386:	46c0      	nop			; (mov r8, r8)
 8003388:	40022000 	.word	0x40022000

0800338c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800338c:	b590      	push	{r4, r7, lr}
 800338e:	b083      	sub	sp, #12
 8003390:	af00      	add	r7, sp, #0
 8003392:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003394:	4b14      	ldr	r3, [pc, #80]	; (80033e8 <HAL_InitTick+0x5c>)
 8003396:	681c      	ldr	r4, [r3, #0]
 8003398:	4b14      	ldr	r3, [pc, #80]	; (80033ec <HAL_InitTick+0x60>)
 800339a:	781b      	ldrb	r3, [r3, #0]
 800339c:	0019      	movs	r1, r3
 800339e:	23fa      	movs	r3, #250	; 0xfa
 80033a0:	0098      	lsls	r0, r3, #2
 80033a2:	f7fc febb 	bl	800011c <__udivsi3>
 80033a6:	0003      	movs	r3, r0
 80033a8:	0019      	movs	r1, r3
 80033aa:	0020      	movs	r0, r4
 80033ac:	f7fc feb6 	bl	800011c <__udivsi3>
 80033b0:	0003      	movs	r3, r0
 80033b2:	0018      	movs	r0, r3
 80033b4:	f000 fd17 	bl	8003de6 <HAL_SYSTICK_Config>
 80033b8:	1e03      	subs	r3, r0, #0
 80033ba:	d001      	beq.n	80033c0 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80033bc:	2301      	movs	r3, #1
 80033be:	e00f      	b.n	80033e0 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	2b03      	cmp	r3, #3
 80033c4:	d80b      	bhi.n	80033de <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80033c6:	6879      	ldr	r1, [r7, #4]
 80033c8:	2301      	movs	r3, #1
 80033ca:	425b      	negs	r3, r3
 80033cc:	2200      	movs	r2, #0
 80033ce:	0018      	movs	r0, r3
 80033d0:	f000 fce4 	bl	8003d9c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80033d4:	4b06      	ldr	r3, [pc, #24]	; (80033f0 <HAL_InitTick+0x64>)
 80033d6:	687a      	ldr	r2, [r7, #4]
 80033d8:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80033da:	2300      	movs	r3, #0
 80033dc:	e000      	b.n	80033e0 <HAL_InitTick+0x54>
    return HAL_ERROR;
 80033de:	2301      	movs	r3, #1
}
 80033e0:	0018      	movs	r0, r3
 80033e2:	46bd      	mov	sp, r7
 80033e4:	b003      	add	sp, #12
 80033e6:	bd90      	pop	{r4, r7, pc}
 80033e8:	20000000 	.word	0x20000000
 80033ec:	20000008 	.word	0x20000008
 80033f0:	20000004 	.word	0x20000004

080033f4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80033f4:	b580      	push	{r7, lr}
 80033f6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80033f8:	4b05      	ldr	r3, [pc, #20]	; (8003410 <HAL_IncTick+0x1c>)
 80033fa:	781b      	ldrb	r3, [r3, #0]
 80033fc:	001a      	movs	r2, r3
 80033fe:	4b05      	ldr	r3, [pc, #20]	; (8003414 <HAL_IncTick+0x20>)
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	18d2      	adds	r2, r2, r3
 8003404:	4b03      	ldr	r3, [pc, #12]	; (8003414 <HAL_IncTick+0x20>)
 8003406:	601a      	str	r2, [r3, #0]
}
 8003408:	46c0      	nop			; (mov r8, r8)
 800340a:	46bd      	mov	sp, r7
 800340c:	bd80      	pop	{r7, pc}
 800340e:	46c0      	nop			; (mov r8, r8)
 8003410:	20000008 	.word	0x20000008
 8003414:	20000830 	.word	0x20000830

08003418 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003418:	b580      	push	{r7, lr}
 800341a:	af00      	add	r7, sp, #0
  return uwTick;
 800341c:	4b02      	ldr	r3, [pc, #8]	; (8003428 <HAL_GetTick+0x10>)
 800341e:	681b      	ldr	r3, [r3, #0]
}
 8003420:	0018      	movs	r0, r3
 8003422:	46bd      	mov	sp, r7
 8003424:	bd80      	pop	{r7, pc}
 8003426:	46c0      	nop			; (mov r8, r8)
 8003428:	20000830 	.word	0x20000830

0800342c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800342c:	b580      	push	{r7, lr}
 800342e:	b084      	sub	sp, #16
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003434:	f7ff fff0 	bl	8003418 <HAL_GetTick>
 8003438:	0003      	movs	r3, r0
 800343a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	3301      	adds	r3, #1
 8003444:	d005      	beq.n	8003452 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003446:	4b0a      	ldr	r3, [pc, #40]	; (8003470 <HAL_Delay+0x44>)
 8003448:	781b      	ldrb	r3, [r3, #0]
 800344a:	001a      	movs	r2, r3
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	189b      	adds	r3, r3, r2
 8003450:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003452:	46c0      	nop			; (mov r8, r8)
 8003454:	f7ff ffe0 	bl	8003418 <HAL_GetTick>
 8003458:	0002      	movs	r2, r0
 800345a:	68bb      	ldr	r3, [r7, #8]
 800345c:	1ad3      	subs	r3, r2, r3
 800345e:	68fa      	ldr	r2, [r7, #12]
 8003460:	429a      	cmp	r2, r3
 8003462:	d8f7      	bhi.n	8003454 <HAL_Delay+0x28>
  {
  }
}
 8003464:	46c0      	nop			; (mov r8, r8)
 8003466:	46c0      	nop			; (mov r8, r8)
 8003468:	46bd      	mov	sp, r7
 800346a:	b004      	add	sp, #16
 800346c:	bd80      	pop	{r7, pc}
 800346e:	46c0      	nop			; (mov r8, r8)
 8003470:	20000008 	.word	0x20000008

08003474 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8003474:	b580      	push	{r7, lr}
 8003476:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 8003478:	4b04      	ldr	r3, [pc, #16]	; (800348c <HAL_SuspendTick+0x18>)
 800347a:	681a      	ldr	r2, [r3, #0]
 800347c:	4b03      	ldr	r3, [pc, #12]	; (800348c <HAL_SuspendTick+0x18>)
 800347e:	2102      	movs	r1, #2
 8003480:	438a      	bics	r2, r1
 8003482:	601a      	str	r2, [r3, #0]
}
 8003484:	46c0      	nop			; (mov r8, r8)
 8003486:	46bd      	mov	sp, r7
 8003488:	bd80      	pop	{r7, pc}
 800348a:	46c0      	nop			; (mov r8, r8)
 800348c:	e000e010 	.word	0xe000e010

08003490 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 8003490:	b580      	push	{r7, lr}
 8003492:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SysTick->CTRL  |= SysTick_CTRL_TICKINT_Msk;
 8003494:	4b04      	ldr	r3, [pc, #16]	; (80034a8 <HAL_ResumeTick+0x18>)
 8003496:	681a      	ldr	r2, [r3, #0]
 8003498:	4b03      	ldr	r3, [pc, #12]	; (80034a8 <HAL_ResumeTick+0x18>)
 800349a:	2102      	movs	r1, #2
 800349c:	430a      	orrs	r2, r1
 800349e:	601a      	str	r2, [r3, #0]
}
 80034a0:	46c0      	nop			; (mov r8, r8)
 80034a2:	46bd      	mov	sp, r7
 80034a4:	bd80      	pop	{r7, pc}
 80034a6:	46c0      	nop			; (mov r8, r8)
 80034a8:	e000e010 	.word	0xe000e010

080034ac <HAL_ADC_Init>:
  *         function "HAL_ADCEx_EnableVREFINTTempSensor()" must be called similarilly.  
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80034ac:	b580      	push	{r7, lr}
 80034ae:	b082      	sub	sp, #8
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	6078      	str	r0, [r7, #4]
 
  /* Check ADC handle */
  if(hadc == NULL)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d101      	bne.n	80034be <HAL_ADC_Init+0x12>
  {
    return HAL_ERROR;
 80034ba:	2301      	movs	r3, #1
 80034bc:	e159      	b.n	8003772 <HAL_ADC_Init+0x2c6>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if(hadc->State == HAL_ADC_STATE_RESET)
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d10a      	bne.n	80034dc <HAL_ADC_Init+0x30>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	2200      	movs	r2, #0
 80034ca:	659a      	str	r2, [r3, #88]	; 0x58
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	2250      	movs	r2, #80	; 0x50
 80034d0:	2100      	movs	r1, #0
 80034d2:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	0018      	movs	r0, r3
 80034d8:	f7fd fc86 	bl	8000de8 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034e0:	2210      	movs	r2, #16
 80034e2:	4013      	ands	r3, r2
 80034e4:	2b10      	cmp	r3, #16
 80034e6:	d005      	beq.n	80034f4 <HAL_ADC_Init+0x48>
     (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)  )
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	689b      	ldr	r3, [r3, #8]
 80034ee:	2204      	movs	r2, #4
 80034f0:	4013      	ands	r3, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 80034f2:	d00b      	beq.n	800350c <HAL_ADC_Init+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034f8:	2210      	movs	r2, #16
 80034fa:	431a      	orrs	r2, r3
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	655a      	str	r2, [r3, #84]	; 0x54
        
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2250      	movs	r2, #80	; 0x50
 8003504:	2100      	movs	r1, #0
 8003506:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8003508:	2301      	movs	r3, #1
 800350a:	e132      	b.n	8003772 <HAL_ADC_Init+0x2c6>
  }

  /* Set ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003510:	4a9a      	ldr	r2, [pc, #616]	; (800377c <HAL_ADC_Init+0x2d0>)
 8003512:	4013      	ands	r3, r2
 8003514:	2202      	movs	r2, #2
 8003516:	431a      	orrs	r2, r3
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	655a      	str	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                            */
  /* Parameters that can be updated only when ADC is disabled:              */
  /*  - ADC clock mode                                                      */
  /*  - ADC clock prescaler                                                 */
  /*  - ADC Resolution                                                      */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	689b      	ldr	r3, [r3, #8]
 8003522:	2203      	movs	r2, #3
 8003524:	4013      	ands	r3, r2
 8003526:	2b01      	cmp	r3, #1
 8003528:	d108      	bne.n	800353c <HAL_ADC_Init+0x90>
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	2201      	movs	r2, #1
 8003532:	4013      	ands	r3, r2
 8003534:	2b01      	cmp	r3, #1
 8003536:	d101      	bne.n	800353c <HAL_ADC_Init+0x90>
 8003538:	2301      	movs	r3, #1
 800353a:	e000      	b.n	800353e <HAL_ADC_Init+0x92>
 800353c:	2300      	movs	r3, #0
 800353e:	2b00      	cmp	r3, #0
 8003540:	d149      	bne.n	80035d6 <HAL_ADC_Init+0x12a>
    /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
    /*     (set into HAL_ADC_ConfigChannel() )                              */
   
    /* Configuration of ADC clock: clock source PCLK or asynchronous with 
    selectable prescaler */
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	685a      	ldr	r2, [r3, #4]
 8003546:	23c0      	movs	r3, #192	; 0xc0
 8003548:	061b      	lsls	r3, r3, #24
 800354a:	429a      	cmp	r2, r3
 800354c:	d00b      	beq.n	8003566 <HAL_ADC_Init+0xba>
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	685a      	ldr	r2, [r3, #4]
 8003552:	2380      	movs	r3, #128	; 0x80
 8003554:	05db      	lsls	r3, r3, #23
 8003556:	429a      	cmp	r2, r3
 8003558:	d005      	beq.n	8003566 <HAL_ADC_Init+0xba>
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	685a      	ldr	r2, [r3, #4]
 800355e:	2380      	movs	r3, #128	; 0x80
 8003560:	061b      	lsls	r3, r3, #24
 8003562:	429a      	cmp	r2, r3
 8003564:	d111      	bne.n	800358a <HAL_ADC_Init+0xde>
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	691a      	ldr	r2, [r3, #16]
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	0092      	lsls	r2, r2, #2
 8003572:	0892      	lsrs	r2, r2, #2
 8003574:	611a      	str	r2, [r3, #16]
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	6919      	ldr	r1, [r3, #16]
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	685a      	ldr	r2, [r3, #4]
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	430a      	orrs	r2, r1
 8003586:	611a      	str	r2, [r3, #16]
 8003588:	e014      	b.n	80035b4 <HAL_ADC_Init+0x108>
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	691a      	ldr	r2, [r3, #16]
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	0092      	lsls	r2, r2, #2
 8003596:	0892      	lsrs	r2, r2, #2
 8003598:	611a      	str	r2, [r3, #16]
 800359a:	4b79      	ldr	r3, [pc, #484]	; (8003780 <HAL_ADC_Init+0x2d4>)
 800359c:	681a      	ldr	r2, [r3, #0]
 800359e:	4b78      	ldr	r3, [pc, #480]	; (8003780 <HAL_ADC_Init+0x2d4>)
 80035a0:	4978      	ldr	r1, [pc, #480]	; (8003784 <HAL_ADC_Init+0x2d8>)
 80035a2:	400a      	ands	r2, r1
 80035a4:	601a      	str	r2, [r3, #0]
 80035a6:	4b76      	ldr	r3, [pc, #472]	; (8003780 <HAL_ADC_Init+0x2d4>)
 80035a8:	6819      	ldr	r1, [r3, #0]
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	685a      	ldr	r2, [r3, #4]
 80035ae:	4b74      	ldr	r3, [pc, #464]	; (8003780 <HAL_ADC_Init+0x2d4>)
 80035b0:	430a      	orrs	r2, r1
 80035b2:	601a      	str	r2, [r3, #0]
    
    /* Configuration of ADC:                                                */
    /*  - Resolution                                                        */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_RES);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	68da      	ldr	r2, [r3, #12]
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	2118      	movs	r1, #24
 80035c0:	438a      	bics	r2, r1
 80035c2:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;    
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	68d9      	ldr	r1, [r3, #12]
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	689a      	ldr	r2, [r3, #8]
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	430a      	orrs	r2, r1
 80035d4:	60da      	str	r2, [r3, #12]
  }
  
  /* Set the Low Frequency mode */
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 80035d6:	4b6a      	ldr	r3, [pc, #424]	; (8003780 <HAL_ADC_Init+0x2d4>)
 80035d8:	681a      	ldr	r2, [r3, #0]
 80035da:	4b69      	ldr	r3, [pc, #420]	; (8003780 <HAL_ADC_Init+0x2d4>)
 80035dc:	496a      	ldr	r1, [pc, #424]	; (8003788 <HAL_ADC_Init+0x2dc>)
 80035de:	400a      	ands	r2, r1
 80035e0:	601a      	str	r2, [r3, #0]
  ADC->CCR |=__HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);  
 80035e2:	4b67      	ldr	r3, [pc, #412]	; (8003780 <HAL_ADC_Init+0x2d4>)
 80035e4:	6819      	ldr	r1, [r3, #0]
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035ea:	065a      	lsls	r2, r3, #25
 80035ec:	4b64      	ldr	r3, [pc, #400]	; (8003780 <HAL_ADC_Init+0x2d4>)
 80035ee:	430a      	orrs	r2, r1
 80035f0:	601a      	str	r2, [r3, #0]
   
  /* Enable voltage regulator (if disabled at this step) */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	689a      	ldr	r2, [r3, #8]
 80035f8:	2380      	movs	r3, #128	; 0x80
 80035fa:	055b      	lsls	r3, r3, #21
 80035fc:	4013      	ands	r3, r2
 80035fe:	d108      	bne.n	8003612 <HAL_ADC_Init+0x166>
  {
    /* Set ADVREGEN bit */
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	689a      	ldr	r2, [r3, #8]
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	2180      	movs	r1, #128	; 0x80
 800360c:	0549      	lsls	r1, r1, #21
 800360e:	430a      	orrs	r2, r1
 8003610:	609a      	str	r2, [r3, #8]
  /*  - Continuous conversion mode                                            */
  /*  - DMA continuous request                                                */
  /*  - Overrun                                                               */
  /*  - AutoDelay feature                                                     */
  /*  - Discontinuous mode                                                    */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	68da      	ldr	r2, [r3, #12]
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	495b      	ldr	r1, [pc, #364]	; (800378c <HAL_ADC_Init+0x2e0>)
 800361e:	400a      	ands	r2, r1
 8003620:	60da      	str	r2, [r3, #12]
                             ADC_CFGR1_OVRMOD  |
                             ADC_CFGR1_AUTDLY  |
                             ADC_CFGR1_AUTOFF  |
                             ADC_CFGR1_DISCEN   );
  
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	68d9      	ldr	r1, [r3, #12]
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	68da      	ldr	r2, [r3, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	691b      	ldr	r3, [r3, #16]
 8003630:	2b02      	cmp	r3, #2
 8003632:	d101      	bne.n	8003638 <HAL_ADC_Init+0x18c>
 8003634:	2304      	movs	r3, #4
 8003636:	e000      	b.n	800363a <HAL_ADC_Init+0x18e>
 8003638:	2300      	movs	r3, #0
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 800363a:	431a      	orrs	r2, r3
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	2020      	movs	r0, #32
 8003640:	5c1b      	ldrb	r3, [r3, r0]
 8003642:	035b      	lsls	r3, r3, #13
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8003644:	431a      	orrs	r2, r3
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	202c      	movs	r0, #44	; 0x2c
 800364a:	5c1b      	ldrb	r3, [r3, r0]
 800364c:	005b      	lsls	r3, r3, #1
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 800364e:	431a      	orrs	r2, r3
                            hadc->Init.Overrun                               |
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8003654:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	699b      	ldr	r3, [r3, #24]
 800365a:	039b      	lsls	r3, r3, #14
                            hadc->Init.Overrun                               |
 800365c:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	69db      	ldr	r3, [r3, #28]
 8003662:	03db      	lsls	r3, r3, #15
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8003664:	431a      	orrs	r2, r3
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	430a      	orrs	r2, r1
 800366c:	60da      	str	r2, [r3, #12]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003672:	23c2      	movs	r3, #194	; 0xc2
 8003674:	33ff      	adds	r3, #255	; 0xff
 8003676:	429a      	cmp	r2, r3
 8003678:	d00b      	beq.n	8003692 <HAL_ADC_Init+0x1e6>
  {
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	68d9      	ldr	r1, [r3, #12]
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                             hadc->Init.ExternalTrigConvEdge;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8003688:	431a      	orrs	r2, r3
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	430a      	orrs	r2, r1
 8003690:	60da      	str	r2, [r3, #12]
  }
  
  /* Enable discontinuous mode only if continuous mode is disabled */
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	2221      	movs	r2, #33	; 0x21
 8003696:	5c9b      	ldrb	r3, [r3, r2]
 8003698:	2b01      	cmp	r3, #1
 800369a:	d11a      	bne.n	80036d2 <HAL_ADC_Init+0x226>
  {
    if (hadc->Init.ContinuousConvMode == DISABLE)
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	2220      	movs	r2, #32
 80036a0:	5c9b      	ldrb	r3, [r3, r2]
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d109      	bne.n	80036ba <HAL_ADC_Init+0x20e>
    {
      /* Enable the selected ADC group regular discontinuous mode */
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	68da      	ldr	r2, [r3, #12]
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	2180      	movs	r1, #128	; 0x80
 80036b2:	0249      	lsls	r1, r1, #9
 80036b4:	430a      	orrs	r2, r1
 80036b6:	60da      	str	r2, [r3, #12]
 80036b8:	e00b      	b.n	80036d2 <HAL_ADC_Init+0x226>
      /* ADC regular group discontinuous was intended to be enabled,        */
      /* but ADC regular group modes continuous and sequencer discontinuous */
      /* cannot be enabled simultaneously.                                  */
      
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036be:	2220      	movs	r2, #32
 80036c0:	431a      	orrs	r2, r3
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036ca:	2201      	movs	r2, #1
 80036cc:	431a      	orrs	r2, r3
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }
  
  if (hadc->Init.OversamplingMode == ENABLE)
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036d6:	2b01      	cmp	r3, #1
 80036d8:	d11f      	bne.n	800371a <HAL_ADC_Init+0x26e>
    /* Configuration of Oversampler:                                          */
    /*  - Oversampling Ratio                                                  */
    /*  - Right bit shift                                                     */
    /*  - Triggered mode                                                      */
    
    hadc->Instance->CFGR2 &= ~( ADC_CFGR2_OVSR |
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	691a      	ldr	r2, [r3, #16]
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	492a      	ldr	r1, [pc, #168]	; (8003790 <HAL_ADC_Init+0x2e4>)
 80036e6:	400a      	ands	r2, r1
 80036e8:	611a      	str	r2, [r3, #16]
                                ADC_CFGR2_OVSS |
                                ADC_CFGR2_TOVS );
    
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	6919      	ldr	r1, [r3, #16]
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                               hadc->Init.Oversample.RightBitShift             |
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 80036f8:	431a      	orrs	r2, r3
                               hadc->Init.Oversample.TriggeredMode );
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                               hadc->Init.Oversample.RightBitShift             |
 80036fe:	431a      	orrs	r2, r3
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	430a      	orrs	r2, r1
 8003706:	611a      	str	r2, [r3, #16]
    
    /* Enable OverSampling mode */
     hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	691a      	ldr	r2, [r3, #16]
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	2101      	movs	r1, #1
 8003714:	430a      	orrs	r2, r1
 8003716:	611a      	str	r2, [r3, #16]
 8003718:	e00e      	b.n	8003738 <HAL_ADC_Init+0x28c>
  }
  else
  {
    if(HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	691b      	ldr	r3, [r3, #16]
 8003720:	2201      	movs	r2, #1
 8003722:	4013      	ands	r3, r2
 8003724:	2b01      	cmp	r3, #1
 8003726:	d107      	bne.n	8003738 <HAL_ADC_Init+0x28c>
    {
      /* Disable OverSampling mode if needed */
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	691a      	ldr	r2, [r3, #16]
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	2101      	movs	r1, #1
 8003734:	438a      	bics	r2, r1
 8003736:	611a      	str	r2, [r3, #16]
    }
  }    
  
  /* Clear the old sampling time */
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	695a      	ldr	r2, [r3, #20]
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	2107      	movs	r1, #7
 8003744:	438a      	bics	r2, r1
 8003746:	615a      	str	r2, [r3, #20]
  
  /* Set the new sample time */
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	6959      	ldr	r1, [r3, #20]
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	430a      	orrs	r2, r1
 8003758:	615a      	str	r2, [r3, #20]
  
  /* Clear ADC error code */
  ADC_CLEAR_ERRORCODE(hadc);
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	2200      	movs	r2, #0
 800375e:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set the ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003764:	2203      	movs	r2, #3
 8003766:	4393      	bics	r3, r2
 8003768:	2201      	movs	r2, #1
 800376a:	431a      	orrs	r2, r3
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	655a      	str	r2, [r3, #84]	; 0x54
                    HAL_ADC_STATE_BUSY_INTERNAL,
                    HAL_ADC_STATE_READY);


  /* Return function status */
  return HAL_OK;
 8003770:	2300      	movs	r3, #0
}
 8003772:	0018      	movs	r0, r3
 8003774:	46bd      	mov	sp, r7
 8003776:	b002      	add	sp, #8
 8003778:	bd80      	pop	{r7, pc}
 800377a:	46c0      	nop			; (mov r8, r8)
 800377c:	fffffefd 	.word	0xfffffefd
 8003780:	40012708 	.word	0x40012708
 8003784:	ffc3ffff 	.word	0xffc3ffff
 8003788:	fdffffff 	.word	0xfdffffff
 800378c:	fffe0219 	.word	0xfffe0219
 8003790:	fffffc03 	.word	0xfffffc03

08003794 <HAL_ADC_Start_IT>:
  *          before calling HAL_ADC_Start_IT().
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8003794:	b590      	push	{r4, r7, lr}
 8003796:	b085      	sub	sp, #20
 8003798:	af00      	add	r7, sp, #0
 800379a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800379c:	230f      	movs	r3, #15
 800379e:	18fb      	adds	r3, r7, r3
 80037a0:	2200      	movs	r2, #0
 80037a2:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	689b      	ldr	r3, [r3, #8]
 80037aa:	2204      	movs	r2, #4
 80037ac:	4013      	ands	r3, r2
 80037ae:	d156      	bne.n	800385e <HAL_ADC_Start_IT+0xca>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2250      	movs	r2, #80	; 0x50
 80037b4:	5c9b      	ldrb	r3, [r3, r2]
 80037b6:	2b01      	cmp	r3, #1
 80037b8:	d101      	bne.n	80037be <HAL_ADC_Start_IT+0x2a>
 80037ba:	2302      	movs	r3, #2
 80037bc:	e056      	b.n	800386c <HAL_ADC_Start_IT+0xd8>
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	2250      	movs	r2, #80	; 0x50
 80037c2:	2101      	movs	r1, #1
 80037c4:	5499      	strb	r1, [r3, r2]
    
    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	69db      	ldr	r3, [r3, #28]
 80037ca:	2b01      	cmp	r3, #1
 80037cc:	d007      	beq.n	80037de <HAL_ADC_Start_IT+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 80037ce:	230f      	movs	r3, #15
 80037d0:	18fc      	adds	r4, r7, r3
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	0018      	movs	r0, r3
 80037d6:	f000 f9ad 	bl	8003b34 <ADC_Enable>
 80037da:	0003      	movs	r3, r0
 80037dc:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80037de:	230f      	movs	r3, #15
 80037e0:	18fb      	adds	r3, r7, r3
 80037e2:	781b      	ldrb	r3, [r3, #0]
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d13e      	bne.n	8003866 <HAL_ADC_Start_IT+0xd2>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037ec:	4a21      	ldr	r2, [pc, #132]	; (8003874 <HAL_ADC_Start_IT+0xe0>)
 80037ee:	4013      	ands	r3, r2
 80037f0:	2280      	movs	r2, #128	; 0x80
 80037f2:	0052      	lsls	r2, r2, #1
 80037f4:	431a      	orrs	r2, r3
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	2200      	movs	r2, #0
 80037fe:	659a      	str	r2, [r3, #88]	; 0x58
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	2250      	movs	r2, #80	; 0x50
 8003804:	2100      	movs	r1, #0
 8003806:	5499      	strb	r1, [r3, r2]
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	221c      	movs	r2, #28
 800380e:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC end of conversion interrupt */
      /* Enable ADC overrun interrupt */  
      switch(hadc->Init.EOCSelection)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	695b      	ldr	r3, [r3, #20]
 8003814:	2b08      	cmp	r3, #8
 8003816:	d110      	bne.n	800383a <HAL_ADC_Start_IT+0xa6>
      {
        case ADC_EOC_SEQ_CONV: 
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	685a      	ldr	r2, [r3, #4]
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	2104      	movs	r1, #4
 8003824:	438a      	bics	r2, r1
 8003826:	605a      	str	r2, [r3, #4]
          __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOS | ADC_IT_OVR));
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	685a      	ldr	r2, [r3, #4]
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	2118      	movs	r1, #24
 8003834:	430a      	orrs	r2, r1
 8003836:	605a      	str	r2, [r3, #4]
          break;
 8003838:	e008      	b.n	800384c <HAL_ADC_Start_IT+0xb8>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	685a      	ldr	r2, [r3, #4]
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	211c      	movs	r1, #28
 8003846:	430a      	orrs	r2, r1
 8003848:	605a      	str	r2, [r3, #4]
          break;
 800384a:	46c0      	nop			; (mov r8, r8)
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	689a      	ldr	r2, [r3, #8]
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	2104      	movs	r1, #4
 8003858:	430a      	orrs	r2, r1
 800385a:	609a      	str	r2, [r3, #8]
 800385c:	e003      	b.n	8003866 <HAL_ADC_Start_IT+0xd2>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800385e:	230f      	movs	r3, #15
 8003860:	18fb      	adds	r3, r7, r3
 8003862:	2202      	movs	r2, #2
 8003864:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8003866:	230f      	movs	r3, #15
 8003868:	18fb      	adds	r3, r7, r3
 800386a:	781b      	ldrb	r3, [r3, #0]
}
 800386c:	0018      	movs	r0, r3
 800386e:	46bd      	mov	sp, r7
 8003870:	b005      	add	sp, #20
 8003872:	bd90      	pop	{r4, r7, pc}
 8003874:	fffff0fe 	.word	0xfffff0fe

08003878 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8003878:	b580      	push	{r7, lr}
 800387a:	b082      	sub	sp, #8
 800387c:	af00      	add	r7, sp, #0
 800387e:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8003886:	0018      	movs	r0, r3
 8003888:	46bd      	mov	sp, r7
 800388a:	b002      	add	sp, #8
 800388c:	bd80      	pop	{r7, pc}
	...

08003890 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param  hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8003890:	b580      	push	{r7, lr}
 8003892:	b082      	sub	sp, #8
 8003894:	af00      	add	r7, sp, #0
 8003896:	6078      	str	r0, [r7, #4]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	2204      	movs	r2, #4
 80038a0:	4013      	ands	r3, r2
 80038a2:	2b04      	cmp	r3, #4
 80038a4:	d106      	bne.n	80038b4 <HAL_ADC_IRQHandler+0x24>
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	685b      	ldr	r3, [r3, #4]
 80038ac:	2204      	movs	r2, #4
 80038ae:	4013      	ands	r3, r2
 80038b0:	2b04      	cmp	r3, #4
 80038b2:	d00d      	beq.n	80038d0 <HAL_ADC_IRQHandler+0x40>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	2208      	movs	r2, #8
 80038bc:	4013      	ands	r3, r2
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 80038be:	2b08      	cmp	r3, #8
 80038c0:	d154      	bne.n	800396c <HAL_ADC_IRQHandler+0xdc>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	685b      	ldr	r3, [r3, #4]
 80038c8:	2208      	movs	r2, #8
 80038ca:	4013      	ands	r3, r2
 80038cc:	2b08      	cmp	r3, #8
 80038ce:	d14d      	bne.n	800396c <HAL_ADC_IRQHandler+0xdc>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038d4:	2210      	movs	r2, #16
 80038d6:	4013      	ands	r3, r2
 80038d8:	d106      	bne.n	80038e8 <HAL_ADC_IRQHandler+0x58>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038de:	2280      	movs	r2, #128	; 0x80
 80038e0:	0092      	lsls	r2, r2, #2
 80038e2:	431a      	orrs	r2, r3
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	655a      	str	r2, [r3, #84]	; 0x54
    }
    
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	68da      	ldr	r2, [r3, #12]
 80038ee:	23c0      	movs	r3, #192	; 0xc0
 80038f0:	011b      	lsls	r3, r3, #4
 80038f2:	4013      	ands	r3, r2
 80038f4:	d12e      	bne.n	8003954 <HAL_ADC_IRQHandler+0xc4>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	2220      	movs	r2, #32
 80038fa:	5c9b      	ldrb	r3, [r3, r2]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d129      	bne.n	8003954 <HAL_ADC_IRQHandler+0xc4>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	2208      	movs	r2, #8
 8003908:	4013      	ands	r3, r2
 800390a:	2b08      	cmp	r3, #8
 800390c:	d122      	bne.n	8003954 <HAL_ADC_IRQHandler+0xc4>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	689b      	ldr	r3, [r3, #8]
 8003914:	2204      	movs	r2, #4
 8003916:	4013      	ands	r3, r2
 8003918:	d110      	bne.n	800393c <HAL_ADC_IRQHandler+0xac>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	685a      	ldr	r2, [r3, #4]
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	210c      	movs	r1, #12
 8003926:	438a      	bics	r2, r1
 8003928:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800392e:	4a35      	ldr	r2, [pc, #212]	; (8003a04 <HAL_ADC_IRQHandler+0x174>)
 8003930:	4013      	ands	r3, r2
 8003932:	2201      	movs	r2, #1
 8003934:	431a      	orrs	r2, r3
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	655a      	str	r2, [r3, #84]	; 0x54
 800393a:	e00b      	b.n	8003954 <HAL_ADC_IRQHandler+0xc4>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003940:	2220      	movs	r2, #32
 8003942:	431a      	orrs	r2, r3
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	655a      	str	r2, [r3, #84]	; 0x54
          
          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800394c:	2201      	movs	r2, #1
 800394e:	431a      	orrs	r2, r3
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	659a      	str	r2, [r3, #88]	; 0x58
    /*       from EOC or EOS, possibility to use:                             */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	0018      	movs	r0, r3
 8003958:	f7fd fa66 	bl	8000e28 <HAL_ADC_ConvCpltCallback>
    /* Note: Management of low power auto-wait enabled: flags must be cleared */
    /*       by user when fetching ADC conversion data.                       */
    /*       This case is managed in IRQ handler, but this low-power mode     */
    /*       should not be used with programming model IT or DMA.             */
    /*       Refer to comment of parameter "LowPowerAutoWait".                */
    if (hadc->Init.LowPowerAutoWait != ENABLE)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	699b      	ldr	r3, [r3, #24]
 8003960:	2b01      	cmp	r3, #1
 8003962:	d003      	beq.n	800396c <HAL_ADC_IRQHandler+0xdc>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	220c      	movs	r2, #12
 800396a:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check analog watchdog 1 flag ========== */
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	2280      	movs	r2, #128	; 0x80
 8003974:	4013      	ands	r3, r2
 8003976:	2b80      	cmp	r3, #128	; 0x80
 8003978:	d115      	bne.n	80039a6 <HAL_ADC_IRQHandler+0x116>
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	685b      	ldr	r3, [r3, #4]
 8003980:	2280      	movs	r2, #128	; 0x80
 8003982:	4013      	ands	r3, r2
 8003984:	2b80      	cmp	r3, #128	; 0x80
 8003986:	d10e      	bne.n	80039a6 <HAL_ADC_IRQHandler+0x116>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800398c:	2280      	movs	r2, #128	; 0x80
 800398e:	0252      	lsls	r2, r2, #9
 8003990:	431a      	orrs	r2, r3
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	655a      	str	r2, [r3, #84]	; 0x54
    
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	0018      	movs	r0, r3
 800399a:	f000 f835 	bl	8003a08 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear ADC Analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	2280      	movs	r2, #128	; 0x80
 80039a4:	601a      	str	r2, [r3, #0]
   
  }
  
  
  /* ========== Check Overrun flag ========== */
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR))
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	2210      	movs	r2, #16
 80039ae:	4013      	ands	r3, r2
 80039b0:	2b10      	cmp	r3, #16
 80039b2:	d123      	bne.n	80039fc <HAL_ADC_IRQHandler+0x16c>
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	685b      	ldr	r3, [r3, #4]
 80039ba:	2210      	movs	r2, #16
 80039bc:	4013      	ands	r3, r2
 80039be:	2b10      	cmp	r3, #16
 80039c0:	d11c      	bne.n	80039fc <HAL_ADC_IRQHandler+0x16c>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if ((hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)            ||
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d006      	beq.n	80039d8 <HAL_ADC_IRQHandler+0x148>
        HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN)  )
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	68db      	ldr	r3, [r3, #12]
 80039d0:	2201      	movs	r2, #1
 80039d2:	4013      	ands	r3, r2
    if ((hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)            ||
 80039d4:	2b01      	cmp	r3, #1
 80039d6:	d10d      	bne.n	80039f4 <HAL_ADC_IRQHandler+0x164>
    {
      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039dc:	2202      	movs	r2, #2
 80039de:	431a      	orrs	r2, r3
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	659a      	str	r2, [r3, #88]	; 0x58
      
      /* Clear ADC overrun flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	2210      	movs	r2, #16
 80039ea:	601a      	str	r2, [r3, #0]
      
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	0018      	movs	r0, r3
 80039f0:	f000 f812 	bl	8003a18 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	2210      	movs	r2, #16
 80039fa:	601a      	str	r2, [r3, #0]
  }
  
}
 80039fc:	46c0      	nop			; (mov r8, r8)
 80039fe:	46bd      	mov	sp, r7
 8003a00:	b002      	add	sp, #8
 8003a02:	bd80      	pop	{r7, pc}
 8003a04:	fffffefe 	.word	0xfffffefe

08003a08 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	b082      	sub	sp, #8
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8003a10:	46c0      	nop			; (mov r8, r8)
 8003a12:	46bd      	mov	sp, r7
 8003a14:	b002      	add	sp, #8
 8003a16:	bd80      	pop	{r7, pc}

08003a18 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	b082      	sub	sp, #8
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003a20:	46c0      	nop			; (mov r8, r8)
 8003a22:	46bd      	mov	sp, r7
 8003a24:	b002      	add	sp, #8
 8003a26:	bd80      	pop	{r7, pc}

08003a28 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003a28:	b580      	push	{r7, lr}
 8003a2a:	b082      	sub	sp, #8
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	6078      	str	r0, [r7, #4]
 8003a30:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	2250      	movs	r2, #80	; 0x50
 8003a36:	5c9b      	ldrb	r3, [r3, r2]
 8003a38:	2b01      	cmp	r3, #1
 8003a3a:	d101      	bne.n	8003a40 <HAL_ADC_ConfigChannel+0x18>
 8003a3c:	2302      	movs	r3, #2
 8003a3e:	e06c      	b.n	8003b1a <HAL_ADC_ConfigChannel+0xf2>
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	2250      	movs	r2, #80	; 0x50
 8003a44:	2101      	movs	r1, #1
 8003a46:	5499      	strb	r1, [r3, r2]
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Management of internal measurement channels: Vbat/VrefInt/TempSensor  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	689b      	ldr	r3, [r3, #8]
 8003a4e:	2204      	movs	r2, #4
 8003a50:	4013      	ands	r3, r2
 8003a52:	d00b      	beq.n	8003a6c <HAL_ADC_ConfigChannel+0x44>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a58:	2220      	movs	r2, #32
 8003a5a:	431a      	orrs	r2, r3
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	655a      	str	r2, [r3, #84]	; 0x54
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	2250      	movs	r2, #80	; 0x50
 8003a64:	2100      	movs	r1, #0
 8003a66:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8003a68:	2301      	movs	r3, #1
 8003a6a:	e056      	b.n	8003b1a <HAL_ADC_ConfigChannel+0xf2>
  }
  
  if (sConfig->Rank != ADC_RANK_NONE)
 8003a6c:	683b      	ldr	r3, [r7, #0]
 8003a6e:	685b      	ldr	r3, [r3, #4]
 8003a70:	4a2c      	ldr	r2, [pc, #176]	; (8003b24 <HAL_ADC_ConfigChannel+0xfc>)
 8003a72:	4293      	cmp	r3, r2
 8003a74:	d028      	beq.n	8003ac8 <HAL_ADC_ConfigChannel+0xa0>
  {
    /* Enable selected channels */
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8003a7c:	683b      	ldr	r3, [r7, #0]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	035b      	lsls	r3, r3, #13
 8003a82:	0b5a      	lsrs	r2, r3, #13
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	430a      	orrs	r2, r1
 8003a8a:	629a      	str	r2, [r3, #40]	; 0x28
    /* dedicated internal buffers and path.                                     */
    
    #if defined(ADC_CCR_TSEN)
    /* If Temperature sensor channel is selected, then enable the internal      */
    /* buffers and path  */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8003a8c:	683b      	ldr	r3, [r7, #0]
 8003a8e:	681a      	ldr	r2, [r3, #0]
 8003a90:	2380      	movs	r3, #128	; 0x80
 8003a92:	02db      	lsls	r3, r3, #11
 8003a94:	4013      	ands	r3, r2
 8003a96:	d009      	beq.n	8003aac <HAL_ADC_ConfigChannel+0x84>
    {
      ADC->CCR |= ADC_CCR_TSEN;   
 8003a98:	4b23      	ldr	r3, [pc, #140]	; (8003b28 <HAL_ADC_ConfigChannel+0x100>)
 8003a9a:	681a      	ldr	r2, [r3, #0]
 8003a9c:	4b22      	ldr	r3, [pc, #136]	; (8003b28 <HAL_ADC_ConfigChannel+0x100>)
 8003a9e:	2180      	movs	r1, #128	; 0x80
 8003aa0:	0409      	lsls	r1, r1, #16
 8003aa2:	430a      	orrs	r2, r1
 8003aa4:	601a      	str	r2, [r3, #0]
      
      /* Delay for temperature sensor stabilization time */
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 8003aa6:	200a      	movs	r0, #10
 8003aa8:	f000 f8ac 	bl	8003c04 <ADC_DelayMicroSecond>
    }
    #endif
    
    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8003aac:	683b      	ldr	r3, [r7, #0]
 8003aae:	681a      	ldr	r2, [r3, #0]
 8003ab0:	2380      	movs	r3, #128	; 0x80
 8003ab2:	029b      	lsls	r3, r3, #10
 8003ab4:	4013      	ands	r3, r2
 8003ab6:	d02b      	beq.n	8003b10 <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR |= ADC_CCR_VREFEN;   
 8003ab8:	4b1b      	ldr	r3, [pc, #108]	; (8003b28 <HAL_ADC_ConfigChannel+0x100>)
 8003aba:	681a      	ldr	r2, [r3, #0]
 8003abc:	4b1a      	ldr	r3, [pc, #104]	; (8003b28 <HAL_ADC_ConfigChannel+0x100>)
 8003abe:	2180      	movs	r1, #128	; 0x80
 8003ac0:	03c9      	lsls	r1, r1, #15
 8003ac2:	430a      	orrs	r2, r1
 8003ac4:	601a      	str	r2, [r3, #0]
 8003ac6:	e023      	b.n	8003b10 <HAL_ADC_ConfigChannel+0xe8>
  }
  else
  {
    /* Regular sequence configuration */
    /* Reset the channel selection register from the selected channel */
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003ace:	683b      	ldr	r3, [r7, #0]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	035b      	lsls	r3, r3, #13
 8003ad4:	0b5b      	lsrs	r3, r3, #13
 8003ad6:	43d9      	mvns	r1, r3
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	400a      	ands	r2, r1
 8003ade:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
    /* internal measurement paths disable: If internal channel selected,    */
    /* disable dedicated internal buffers and path.                         */
    #if defined(ADC_CCR_TSEN)
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8003ae0:	683b      	ldr	r3, [r7, #0]
 8003ae2:	681a      	ldr	r2, [r3, #0]
 8003ae4:	2380      	movs	r3, #128	; 0x80
 8003ae6:	02db      	lsls	r3, r3, #11
 8003ae8:	4013      	ands	r3, r2
 8003aea:	d005      	beq.n	8003af8 <HAL_ADC_ConfigChannel+0xd0>
    {
      ADC->CCR &= ~ADC_CCR_TSEN;   
 8003aec:	4b0e      	ldr	r3, [pc, #56]	; (8003b28 <HAL_ADC_ConfigChannel+0x100>)
 8003aee:	681a      	ldr	r2, [r3, #0]
 8003af0:	4b0d      	ldr	r3, [pc, #52]	; (8003b28 <HAL_ADC_ConfigChannel+0x100>)
 8003af2:	490e      	ldr	r1, [pc, #56]	; (8003b2c <HAL_ADC_ConfigChannel+0x104>)
 8003af4:	400a      	ands	r2, r1
 8003af6:	601a      	str	r2, [r3, #0]
    }
    #endif
    
    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8003af8:	683b      	ldr	r3, [r7, #0]
 8003afa:	681a      	ldr	r2, [r3, #0]
 8003afc:	2380      	movs	r3, #128	; 0x80
 8003afe:	029b      	lsls	r3, r3, #10
 8003b00:	4013      	ands	r3, r2
 8003b02:	d005      	beq.n	8003b10 <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR &= ~ADC_CCR_VREFEN;   
 8003b04:	4b08      	ldr	r3, [pc, #32]	; (8003b28 <HAL_ADC_ConfigChannel+0x100>)
 8003b06:	681a      	ldr	r2, [r3, #0]
 8003b08:	4b07      	ldr	r3, [pc, #28]	; (8003b28 <HAL_ADC_ConfigChannel+0x100>)
 8003b0a:	4909      	ldr	r1, [pc, #36]	; (8003b30 <HAL_ADC_ConfigChannel+0x108>)
 8003b0c:	400a      	ands	r2, r1
 8003b0e:	601a      	str	r2, [r3, #0]
    }
#endif
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	2250      	movs	r2, #80	; 0x50
 8003b14:	2100      	movs	r1, #0
 8003b16:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return HAL_OK;
 8003b18:	2300      	movs	r3, #0
}
 8003b1a:	0018      	movs	r0, r3
 8003b1c:	46bd      	mov	sp, r7
 8003b1e:	b002      	add	sp, #8
 8003b20:	bd80      	pop	{r7, pc}
 8003b22:	46c0      	nop			; (mov r8, r8)
 8003b24:	00001001 	.word	0x00001001
 8003b28:	40012708 	.word	0x40012708
 8003b2c:	ff7fffff 	.word	0xff7fffff
 8003b30:	ffbfffff 	.word	0xffbfffff

08003b34 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8003b34:	b580      	push	{r7, lr}
 8003b36:	b084      	sub	sp, #16
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003b3c:	2300      	movs	r3, #0
 8003b3e:	60fb      	str	r3, [r7, #12]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	689b      	ldr	r3, [r3, #8]
 8003b46:	2203      	movs	r2, #3
 8003b48:	4013      	ands	r3, r2
 8003b4a:	2b01      	cmp	r3, #1
 8003b4c:	d108      	bne.n	8003b60 <ADC_Enable+0x2c>
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	2201      	movs	r2, #1
 8003b56:	4013      	ands	r3, r2
 8003b58:	2b01      	cmp	r3, #1
 8003b5a:	d101      	bne.n	8003b60 <ADC_Enable+0x2c>
 8003b5c:	2301      	movs	r3, #1
 8003b5e:	e000      	b.n	8003b62 <ADC_Enable+0x2e>
 8003b60:	2300      	movs	r3, #0
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d146      	bne.n	8003bf4 <ADC_Enable+0xc0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	689b      	ldr	r3, [r3, #8]
 8003b6c:	4a24      	ldr	r2, [pc, #144]	; (8003c00 <ADC_Enable+0xcc>)
 8003b6e:	4013      	ands	r3, r2
 8003b70:	d00d      	beq.n	8003b8e <ADC_Enable+0x5a>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b76:	2210      	movs	r2, #16
 8003b78:	431a      	orrs	r2, r3
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b82:	2201      	movs	r2, #1
 8003b84:	431a      	orrs	r2, r3
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	659a      	str	r2, [r3, #88]	; 0x58
      
      return HAL_ERROR;
 8003b8a:	2301      	movs	r3, #1
 8003b8c:	e033      	b.n	8003bf6 <ADC_Enable+0xc2>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	689a      	ldr	r2, [r3, #8]
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	2101      	movs	r1, #1
 8003b9a:	430a      	orrs	r2, r1
 8003b9c:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time. */
    ADC_DelayMicroSecond(ADC_STAB_DELAY_US);
 8003b9e:	2001      	movs	r0, #1
 8003ba0:	f000 f830 	bl	8003c04 <ADC_DelayMicroSecond>

    /* Get tick count */
    tickstart = HAL_GetTick();
 8003ba4:	f7ff fc38 	bl	8003418 <HAL_GetTick>
 8003ba8:	0003      	movs	r3, r0
 8003baa:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8003bac:	e01b      	b.n	8003be6 <ADC_Enable+0xb2>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003bae:	f7ff fc33 	bl	8003418 <HAL_GetTick>
 8003bb2:	0002      	movs	r2, r0
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	1ad3      	subs	r3, r2, r3
 8003bb8:	2b0a      	cmp	r3, #10
 8003bba:	d914      	bls.n	8003be6 <ADC_Enable+0xb2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	2201      	movs	r2, #1
 8003bc4:	4013      	ands	r3, r2
 8003bc6:	2b01      	cmp	r3, #1
 8003bc8:	d00d      	beq.n	8003be6 <ADC_Enable+0xb2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bce:	2210      	movs	r2, #16
 8003bd0:	431a      	orrs	r2, r3
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bda:	2201      	movs	r2, #1
 8003bdc:	431a      	orrs	r2, r3
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8003be2:	2301      	movs	r3, #1
 8003be4:	e007      	b.n	8003bf6 <ADC_Enable+0xc2>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	2201      	movs	r2, #1
 8003bee:	4013      	ands	r3, r2
 8003bf0:	2b01      	cmp	r3, #1
 8003bf2:	d1dc      	bne.n	8003bae <ADC_Enable+0x7a>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8003bf4:	2300      	movs	r3, #0
}
 8003bf6:	0018      	movs	r0, r3
 8003bf8:	46bd      	mov	sp, r7
 8003bfa:	b004      	add	sp, #16
 8003bfc:	bd80      	pop	{r7, pc}
 8003bfe:	46c0      	nop			; (mov r8, r8)
 8003c00:	80000017 	.word	0x80000017

08003c04 <ADC_DelayMicroSecond>:
  * @brief  Delay micro seconds 
  * @param  microSecond  delay
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
 8003c04:	b580      	push	{r7, lr}
 8003c06:	b084      	sub	sp, #16
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	6078      	str	r0, [r7, #4]
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 8003c0c:	4b0b      	ldr	r3, [pc, #44]	; (8003c3c <ADC_DelayMicroSecond+0x38>)
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	490b      	ldr	r1, [pc, #44]	; (8003c40 <ADC_DelayMicroSecond+0x3c>)
 8003c12:	0018      	movs	r0, r3
 8003c14:	f7fc fa82 	bl	800011c <__udivsi3>
 8003c18:	0003      	movs	r3, r0
 8003c1a:	001a      	movs	r2, r3
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	4353      	muls	r3, r2
 8003c20:	60fb      	str	r3, [r7, #12]

  while(waitLoopIndex != 0U)
 8003c22:	e002      	b.n	8003c2a <ADC_DelayMicroSecond+0x26>
  {
    waitLoopIndex--;
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	3b01      	subs	r3, #1
 8003c28:	60fb      	str	r3, [r7, #12]
  while(waitLoopIndex != 0U)
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d1f9      	bne.n	8003c24 <ADC_DelayMicroSecond+0x20>
  } 
}
 8003c30:	46c0      	nop			; (mov r8, r8)
 8003c32:	46c0      	nop			; (mov r8, r8)
 8003c34:	46bd      	mov	sp, r7
 8003c36:	b004      	add	sp, #16
 8003c38:	bd80      	pop	{r7, pc}
 8003c3a:	46c0      	nop			; (mov r8, r8)
 8003c3c:	20000000 	.word	0x20000000
 8003c40:	000f4240 	.word	0x000f4240

08003c44 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003c44:	b580      	push	{r7, lr}
 8003c46:	b082      	sub	sp, #8
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	0002      	movs	r2, r0
 8003c4c:	1dfb      	adds	r3, r7, #7
 8003c4e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003c50:	1dfb      	adds	r3, r7, #7
 8003c52:	781b      	ldrb	r3, [r3, #0]
 8003c54:	2b7f      	cmp	r3, #127	; 0x7f
 8003c56:	d809      	bhi.n	8003c6c <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003c58:	1dfb      	adds	r3, r7, #7
 8003c5a:	781b      	ldrb	r3, [r3, #0]
 8003c5c:	001a      	movs	r2, r3
 8003c5e:	231f      	movs	r3, #31
 8003c60:	401a      	ands	r2, r3
 8003c62:	4b04      	ldr	r3, [pc, #16]	; (8003c74 <__NVIC_EnableIRQ+0x30>)
 8003c64:	2101      	movs	r1, #1
 8003c66:	4091      	lsls	r1, r2
 8003c68:	000a      	movs	r2, r1
 8003c6a:	601a      	str	r2, [r3, #0]
  }
}
 8003c6c:	46c0      	nop			; (mov r8, r8)
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	b002      	add	sp, #8
 8003c72:	bd80      	pop	{r7, pc}
 8003c74:	e000e100 	.word	0xe000e100

08003c78 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003c78:	b590      	push	{r4, r7, lr}
 8003c7a:	b083      	sub	sp, #12
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	0002      	movs	r2, r0
 8003c80:	6039      	str	r1, [r7, #0]
 8003c82:	1dfb      	adds	r3, r7, #7
 8003c84:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003c86:	1dfb      	adds	r3, r7, #7
 8003c88:	781b      	ldrb	r3, [r3, #0]
 8003c8a:	2b7f      	cmp	r3, #127	; 0x7f
 8003c8c:	d828      	bhi.n	8003ce0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003c8e:	4a2f      	ldr	r2, [pc, #188]	; (8003d4c <__NVIC_SetPriority+0xd4>)
 8003c90:	1dfb      	adds	r3, r7, #7
 8003c92:	781b      	ldrb	r3, [r3, #0]
 8003c94:	b25b      	sxtb	r3, r3
 8003c96:	089b      	lsrs	r3, r3, #2
 8003c98:	33c0      	adds	r3, #192	; 0xc0
 8003c9a:	009b      	lsls	r3, r3, #2
 8003c9c:	589b      	ldr	r3, [r3, r2]
 8003c9e:	1dfa      	adds	r2, r7, #7
 8003ca0:	7812      	ldrb	r2, [r2, #0]
 8003ca2:	0011      	movs	r1, r2
 8003ca4:	2203      	movs	r2, #3
 8003ca6:	400a      	ands	r2, r1
 8003ca8:	00d2      	lsls	r2, r2, #3
 8003caa:	21ff      	movs	r1, #255	; 0xff
 8003cac:	4091      	lsls	r1, r2
 8003cae:	000a      	movs	r2, r1
 8003cb0:	43d2      	mvns	r2, r2
 8003cb2:	401a      	ands	r2, r3
 8003cb4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003cb6:	683b      	ldr	r3, [r7, #0]
 8003cb8:	019b      	lsls	r3, r3, #6
 8003cba:	22ff      	movs	r2, #255	; 0xff
 8003cbc:	401a      	ands	r2, r3
 8003cbe:	1dfb      	adds	r3, r7, #7
 8003cc0:	781b      	ldrb	r3, [r3, #0]
 8003cc2:	0018      	movs	r0, r3
 8003cc4:	2303      	movs	r3, #3
 8003cc6:	4003      	ands	r3, r0
 8003cc8:	00db      	lsls	r3, r3, #3
 8003cca:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003ccc:	481f      	ldr	r0, [pc, #124]	; (8003d4c <__NVIC_SetPriority+0xd4>)
 8003cce:	1dfb      	adds	r3, r7, #7
 8003cd0:	781b      	ldrb	r3, [r3, #0]
 8003cd2:	b25b      	sxtb	r3, r3
 8003cd4:	089b      	lsrs	r3, r3, #2
 8003cd6:	430a      	orrs	r2, r1
 8003cd8:	33c0      	adds	r3, #192	; 0xc0
 8003cda:	009b      	lsls	r3, r3, #2
 8003cdc:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8003cde:	e031      	b.n	8003d44 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003ce0:	4a1b      	ldr	r2, [pc, #108]	; (8003d50 <__NVIC_SetPriority+0xd8>)
 8003ce2:	1dfb      	adds	r3, r7, #7
 8003ce4:	781b      	ldrb	r3, [r3, #0]
 8003ce6:	0019      	movs	r1, r3
 8003ce8:	230f      	movs	r3, #15
 8003cea:	400b      	ands	r3, r1
 8003cec:	3b08      	subs	r3, #8
 8003cee:	089b      	lsrs	r3, r3, #2
 8003cf0:	3306      	adds	r3, #6
 8003cf2:	009b      	lsls	r3, r3, #2
 8003cf4:	18d3      	adds	r3, r2, r3
 8003cf6:	3304      	adds	r3, #4
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	1dfa      	adds	r2, r7, #7
 8003cfc:	7812      	ldrb	r2, [r2, #0]
 8003cfe:	0011      	movs	r1, r2
 8003d00:	2203      	movs	r2, #3
 8003d02:	400a      	ands	r2, r1
 8003d04:	00d2      	lsls	r2, r2, #3
 8003d06:	21ff      	movs	r1, #255	; 0xff
 8003d08:	4091      	lsls	r1, r2
 8003d0a:	000a      	movs	r2, r1
 8003d0c:	43d2      	mvns	r2, r2
 8003d0e:	401a      	ands	r2, r3
 8003d10:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003d12:	683b      	ldr	r3, [r7, #0]
 8003d14:	019b      	lsls	r3, r3, #6
 8003d16:	22ff      	movs	r2, #255	; 0xff
 8003d18:	401a      	ands	r2, r3
 8003d1a:	1dfb      	adds	r3, r7, #7
 8003d1c:	781b      	ldrb	r3, [r3, #0]
 8003d1e:	0018      	movs	r0, r3
 8003d20:	2303      	movs	r3, #3
 8003d22:	4003      	ands	r3, r0
 8003d24:	00db      	lsls	r3, r3, #3
 8003d26:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003d28:	4809      	ldr	r0, [pc, #36]	; (8003d50 <__NVIC_SetPriority+0xd8>)
 8003d2a:	1dfb      	adds	r3, r7, #7
 8003d2c:	781b      	ldrb	r3, [r3, #0]
 8003d2e:	001c      	movs	r4, r3
 8003d30:	230f      	movs	r3, #15
 8003d32:	4023      	ands	r3, r4
 8003d34:	3b08      	subs	r3, #8
 8003d36:	089b      	lsrs	r3, r3, #2
 8003d38:	430a      	orrs	r2, r1
 8003d3a:	3306      	adds	r3, #6
 8003d3c:	009b      	lsls	r3, r3, #2
 8003d3e:	18c3      	adds	r3, r0, r3
 8003d40:	3304      	adds	r3, #4
 8003d42:	601a      	str	r2, [r3, #0]
}
 8003d44:	46c0      	nop			; (mov r8, r8)
 8003d46:	46bd      	mov	sp, r7
 8003d48:	b003      	add	sp, #12
 8003d4a:	bd90      	pop	{r4, r7, pc}
 8003d4c:	e000e100 	.word	0xe000e100
 8003d50:	e000ed00 	.word	0xe000ed00

08003d54 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003d54:	b580      	push	{r7, lr}
 8003d56:	b082      	sub	sp, #8
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	1e5a      	subs	r2, r3, #1
 8003d60:	2380      	movs	r3, #128	; 0x80
 8003d62:	045b      	lsls	r3, r3, #17
 8003d64:	429a      	cmp	r2, r3
 8003d66:	d301      	bcc.n	8003d6c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003d68:	2301      	movs	r3, #1
 8003d6a:	e010      	b.n	8003d8e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003d6c:	4b0a      	ldr	r3, [pc, #40]	; (8003d98 <SysTick_Config+0x44>)
 8003d6e:	687a      	ldr	r2, [r7, #4]
 8003d70:	3a01      	subs	r2, #1
 8003d72:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003d74:	2301      	movs	r3, #1
 8003d76:	425b      	negs	r3, r3
 8003d78:	2103      	movs	r1, #3
 8003d7a:	0018      	movs	r0, r3
 8003d7c:	f7ff ff7c 	bl	8003c78 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003d80:	4b05      	ldr	r3, [pc, #20]	; (8003d98 <SysTick_Config+0x44>)
 8003d82:	2200      	movs	r2, #0
 8003d84:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003d86:	4b04      	ldr	r3, [pc, #16]	; (8003d98 <SysTick_Config+0x44>)
 8003d88:	2207      	movs	r2, #7
 8003d8a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003d8c:	2300      	movs	r3, #0
}
 8003d8e:	0018      	movs	r0, r3
 8003d90:	46bd      	mov	sp, r7
 8003d92:	b002      	add	sp, #8
 8003d94:	bd80      	pop	{r7, pc}
 8003d96:	46c0      	nop			; (mov r8, r8)
 8003d98:	e000e010 	.word	0xe000e010

08003d9c <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003d9c:	b580      	push	{r7, lr}
 8003d9e:	b084      	sub	sp, #16
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	60b9      	str	r1, [r7, #8]
 8003da4:	607a      	str	r2, [r7, #4]
 8003da6:	210f      	movs	r1, #15
 8003da8:	187b      	adds	r3, r7, r1
 8003daa:	1c02      	adds	r2, r0, #0
 8003dac:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8003dae:	68ba      	ldr	r2, [r7, #8]
 8003db0:	187b      	adds	r3, r7, r1
 8003db2:	781b      	ldrb	r3, [r3, #0]
 8003db4:	b25b      	sxtb	r3, r3
 8003db6:	0011      	movs	r1, r2
 8003db8:	0018      	movs	r0, r3
 8003dba:	f7ff ff5d 	bl	8003c78 <__NVIC_SetPriority>
}
 8003dbe:	46c0      	nop			; (mov r8, r8)
 8003dc0:	46bd      	mov	sp, r7
 8003dc2:	b004      	add	sp, #16
 8003dc4:	bd80      	pop	{r7, pc}

08003dc6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003dc6:	b580      	push	{r7, lr}
 8003dc8:	b082      	sub	sp, #8
 8003dca:	af00      	add	r7, sp, #0
 8003dcc:	0002      	movs	r2, r0
 8003dce:	1dfb      	adds	r3, r7, #7
 8003dd0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003dd2:	1dfb      	adds	r3, r7, #7
 8003dd4:	781b      	ldrb	r3, [r3, #0]
 8003dd6:	b25b      	sxtb	r3, r3
 8003dd8:	0018      	movs	r0, r3
 8003dda:	f7ff ff33 	bl	8003c44 <__NVIC_EnableIRQ>
}
 8003dde:	46c0      	nop			; (mov r8, r8)
 8003de0:	46bd      	mov	sp, r7
 8003de2:	b002      	add	sp, #8
 8003de4:	bd80      	pop	{r7, pc}

08003de6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003de6:	b580      	push	{r7, lr}
 8003de8:	b082      	sub	sp, #8
 8003dea:	af00      	add	r7, sp, #0
 8003dec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	0018      	movs	r0, r3
 8003df2:	f7ff ffaf 	bl	8003d54 <SysTick_Config>
 8003df6:	0003      	movs	r3, r0
}
 8003df8:	0018      	movs	r0, r3
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	b002      	add	sp, #8
 8003dfe:	bd80      	pop	{r7, pc}

08003e00 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003e00:	b580      	push	{r7, lr}
 8003e02:	b084      	sub	sp, #16
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003e08:	230f      	movs	r3, #15
 8003e0a:	18fb      	adds	r3, r7, r3
 8003e0c:	2200      	movs	r2, #0
 8003e0e:	701a      	strb	r2, [r3, #0]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	2225      	movs	r2, #37	; 0x25
 8003e14:	5c9b      	ldrb	r3, [r3, r2]
 8003e16:	b2db      	uxtb	r3, r3
 8003e18:	2b02      	cmp	r3, #2
 8003e1a:	d008      	beq.n	8003e2e <HAL_DMA_Abort+0x2e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	2204      	movs	r2, #4
 8003e20:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	2224      	movs	r2, #36	; 0x24
 8003e26:	2100      	movs	r1, #0
 8003e28:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8003e2a:	2301      	movs	r3, #1
 8003e2c:	e024      	b.n	8003e78 <HAL_DMA_Abort+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	681a      	ldr	r2, [r3, #0]
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	210e      	movs	r1, #14
 8003e3a:	438a      	bics	r2, r1
 8003e3c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	681a      	ldr	r2, [r3, #0]
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	2101      	movs	r1, #1
 8003e4a:	438a      	bics	r2, r1
 8003e4c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e52:	221c      	movs	r2, #28
 8003e54:	401a      	ands	r2, r3
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e5a:	2101      	movs	r1, #1
 8003e5c:	4091      	lsls	r1, r2
 8003e5e:	000a      	movs	r2, r1
 8003e60:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	2225      	movs	r2, #37	; 0x25
 8003e66:	2101      	movs	r1, #1
 8003e68:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	2224      	movs	r2, #36	; 0x24
 8003e6e:	2100      	movs	r1, #0
 8003e70:	5499      	strb	r1, [r3, r2]

    return status;
 8003e72:	230f      	movs	r3, #15
 8003e74:	18fb      	adds	r3, r7, r3
 8003e76:	781b      	ldrb	r3, [r3, #0]
  }
}
 8003e78:	0018      	movs	r0, r3
 8003e7a:	46bd      	mov	sp, r7
 8003e7c:	b004      	add	sp, #16
 8003e7e:	bd80      	pop	{r7, pc}

08003e80 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003e80:	b580      	push	{r7, lr}
 8003e82:	b084      	sub	sp, #16
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003e88:	210f      	movs	r1, #15
 8003e8a:	187b      	adds	r3, r7, r1
 8003e8c:	2200      	movs	r2, #0
 8003e8e:	701a      	strb	r2, [r3, #0]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	2225      	movs	r2, #37	; 0x25
 8003e94:	5c9b      	ldrb	r3, [r3, r2]
 8003e96:	b2db      	uxtb	r3, r3
 8003e98:	2b02      	cmp	r3, #2
 8003e9a:	d006      	beq.n	8003eaa <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	2204      	movs	r2, #4
 8003ea0:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8003ea2:	187b      	adds	r3, r7, r1
 8003ea4:	2201      	movs	r2, #1
 8003ea6:	701a      	strb	r2, [r3, #0]
 8003ea8:	e02a      	b.n	8003f00 <HAL_DMA_Abort_IT+0x80>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	681a      	ldr	r2, [r3, #0]
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	210e      	movs	r1, #14
 8003eb6:	438a      	bics	r2, r1
 8003eb8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	681a      	ldr	r2, [r3, #0]
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	2101      	movs	r1, #1
 8003ec6:	438a      	bics	r2, r1
 8003ec8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ece:	221c      	movs	r2, #28
 8003ed0:	401a      	ands	r2, r3
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ed6:	2101      	movs	r1, #1
 8003ed8:	4091      	lsls	r1, r2
 8003eda:	000a      	movs	r2, r1
 8003edc:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	2225      	movs	r2, #37	; 0x25
 8003ee2:	2101      	movs	r1, #1
 8003ee4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	2224      	movs	r2, #36	; 0x24
 8003eea:	2100      	movs	r1, #0
 8003eec:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d004      	beq.n	8003f00 <HAL_DMA_Abort_IT+0x80>
    {
      hdma->XferAbortCallback(hdma);
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003efa:	687a      	ldr	r2, [r7, #4]
 8003efc:	0010      	movs	r0, r2
 8003efe:	4798      	blx	r3
    }
  }
  return status;
 8003f00:	230f      	movs	r3, #15
 8003f02:	18fb      	adds	r3, r7, r3
 8003f04:	781b      	ldrb	r3, [r3, #0]
}
 8003f06:	0018      	movs	r0, r3
 8003f08:	46bd      	mov	sp, r7
 8003f0a:	b004      	add	sp, #16
 8003f0c:	bd80      	pop	{r7, pc}
	...

08003f10 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003f10:	b580      	push	{r7, lr}
 8003f12:	b086      	sub	sp, #24
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	6078      	str	r0, [r7, #4]
 8003f18:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003f1a:	2300      	movs	r3, #0
 8003f1c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003f1e:	2300      	movs	r3, #0
 8003f20:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8003f22:	2300      	movs	r3, #0
 8003f24:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8003f26:	e155      	b.n	80041d4 <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8003f28:	683b      	ldr	r3, [r7, #0]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	2101      	movs	r1, #1
 8003f2e:	697a      	ldr	r2, [r7, #20]
 8003f30:	4091      	lsls	r1, r2
 8003f32:	000a      	movs	r2, r1
 8003f34:	4013      	ands	r3, r2
 8003f36:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d100      	bne.n	8003f40 <HAL_GPIO_Init+0x30>
 8003f3e:	e146      	b.n	80041ce <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003f40:	683b      	ldr	r3, [r7, #0]
 8003f42:	685b      	ldr	r3, [r3, #4]
 8003f44:	2203      	movs	r2, #3
 8003f46:	4013      	ands	r3, r2
 8003f48:	2b01      	cmp	r3, #1
 8003f4a:	d005      	beq.n	8003f58 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003f4c:	683b      	ldr	r3, [r7, #0]
 8003f4e:	685b      	ldr	r3, [r3, #4]
 8003f50:	2203      	movs	r2, #3
 8003f52:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003f54:	2b02      	cmp	r3, #2
 8003f56:	d130      	bne.n	8003fba <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	689b      	ldr	r3, [r3, #8]
 8003f5c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8003f5e:	697b      	ldr	r3, [r7, #20]
 8003f60:	005b      	lsls	r3, r3, #1
 8003f62:	2203      	movs	r2, #3
 8003f64:	409a      	lsls	r2, r3
 8003f66:	0013      	movs	r3, r2
 8003f68:	43da      	mvns	r2, r3
 8003f6a:	693b      	ldr	r3, [r7, #16]
 8003f6c:	4013      	ands	r3, r2
 8003f6e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003f70:	683b      	ldr	r3, [r7, #0]
 8003f72:	68da      	ldr	r2, [r3, #12]
 8003f74:	697b      	ldr	r3, [r7, #20]
 8003f76:	005b      	lsls	r3, r3, #1
 8003f78:	409a      	lsls	r2, r3
 8003f7a:	0013      	movs	r3, r2
 8003f7c:	693a      	ldr	r2, [r7, #16]
 8003f7e:	4313      	orrs	r3, r2
 8003f80:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	693a      	ldr	r2, [r7, #16]
 8003f86:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	685b      	ldr	r3, [r3, #4]
 8003f8c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003f8e:	2201      	movs	r2, #1
 8003f90:	697b      	ldr	r3, [r7, #20]
 8003f92:	409a      	lsls	r2, r3
 8003f94:	0013      	movs	r3, r2
 8003f96:	43da      	mvns	r2, r3
 8003f98:	693b      	ldr	r3, [r7, #16]
 8003f9a:	4013      	ands	r3, r2
 8003f9c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003f9e:	683b      	ldr	r3, [r7, #0]
 8003fa0:	685b      	ldr	r3, [r3, #4]
 8003fa2:	091b      	lsrs	r3, r3, #4
 8003fa4:	2201      	movs	r2, #1
 8003fa6:	401a      	ands	r2, r3
 8003fa8:	697b      	ldr	r3, [r7, #20]
 8003faa:	409a      	lsls	r2, r3
 8003fac:	0013      	movs	r3, r2
 8003fae:	693a      	ldr	r2, [r7, #16]
 8003fb0:	4313      	orrs	r3, r2
 8003fb2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	693a      	ldr	r2, [r7, #16]
 8003fb8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003fba:	683b      	ldr	r3, [r7, #0]
 8003fbc:	685b      	ldr	r3, [r3, #4]
 8003fbe:	2203      	movs	r2, #3
 8003fc0:	4013      	ands	r3, r2
 8003fc2:	2b03      	cmp	r3, #3
 8003fc4:	d017      	beq.n	8003ff6 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	68db      	ldr	r3, [r3, #12]
 8003fca:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003fcc:	697b      	ldr	r3, [r7, #20]
 8003fce:	005b      	lsls	r3, r3, #1
 8003fd0:	2203      	movs	r2, #3
 8003fd2:	409a      	lsls	r2, r3
 8003fd4:	0013      	movs	r3, r2
 8003fd6:	43da      	mvns	r2, r3
 8003fd8:	693b      	ldr	r3, [r7, #16]
 8003fda:	4013      	ands	r3, r2
 8003fdc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003fde:	683b      	ldr	r3, [r7, #0]
 8003fe0:	689a      	ldr	r2, [r3, #8]
 8003fe2:	697b      	ldr	r3, [r7, #20]
 8003fe4:	005b      	lsls	r3, r3, #1
 8003fe6:	409a      	lsls	r2, r3
 8003fe8:	0013      	movs	r3, r2
 8003fea:	693a      	ldr	r2, [r7, #16]
 8003fec:	4313      	orrs	r3, r2
 8003fee:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	693a      	ldr	r2, [r7, #16]
 8003ff4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003ff6:	683b      	ldr	r3, [r7, #0]
 8003ff8:	685b      	ldr	r3, [r3, #4]
 8003ffa:	2203      	movs	r2, #3
 8003ffc:	4013      	ands	r3, r2
 8003ffe:	2b02      	cmp	r3, #2
 8004000:	d123      	bne.n	800404a <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004002:	697b      	ldr	r3, [r7, #20]
 8004004:	08da      	lsrs	r2, r3, #3
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	3208      	adds	r2, #8
 800400a:	0092      	lsls	r2, r2, #2
 800400c:	58d3      	ldr	r3, [r2, r3]
 800400e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8004010:	697b      	ldr	r3, [r7, #20]
 8004012:	2207      	movs	r2, #7
 8004014:	4013      	ands	r3, r2
 8004016:	009b      	lsls	r3, r3, #2
 8004018:	220f      	movs	r2, #15
 800401a:	409a      	lsls	r2, r3
 800401c:	0013      	movs	r3, r2
 800401e:	43da      	mvns	r2, r3
 8004020:	693b      	ldr	r3, [r7, #16]
 8004022:	4013      	ands	r3, r2
 8004024:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8004026:	683b      	ldr	r3, [r7, #0]
 8004028:	691a      	ldr	r2, [r3, #16]
 800402a:	697b      	ldr	r3, [r7, #20]
 800402c:	2107      	movs	r1, #7
 800402e:	400b      	ands	r3, r1
 8004030:	009b      	lsls	r3, r3, #2
 8004032:	409a      	lsls	r2, r3
 8004034:	0013      	movs	r3, r2
 8004036:	693a      	ldr	r2, [r7, #16]
 8004038:	4313      	orrs	r3, r2
 800403a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800403c:	697b      	ldr	r3, [r7, #20]
 800403e:	08da      	lsrs	r2, r3, #3
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	3208      	adds	r2, #8
 8004044:	0092      	lsls	r2, r2, #2
 8004046:	6939      	ldr	r1, [r7, #16]
 8004048:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004050:	697b      	ldr	r3, [r7, #20]
 8004052:	005b      	lsls	r3, r3, #1
 8004054:	2203      	movs	r2, #3
 8004056:	409a      	lsls	r2, r3
 8004058:	0013      	movs	r3, r2
 800405a:	43da      	mvns	r2, r3
 800405c:	693b      	ldr	r3, [r7, #16]
 800405e:	4013      	ands	r3, r2
 8004060:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004062:	683b      	ldr	r3, [r7, #0]
 8004064:	685b      	ldr	r3, [r3, #4]
 8004066:	2203      	movs	r2, #3
 8004068:	401a      	ands	r2, r3
 800406a:	697b      	ldr	r3, [r7, #20]
 800406c:	005b      	lsls	r3, r3, #1
 800406e:	409a      	lsls	r2, r3
 8004070:	0013      	movs	r3, r2
 8004072:	693a      	ldr	r2, [r7, #16]
 8004074:	4313      	orrs	r3, r2
 8004076:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	693a      	ldr	r2, [r7, #16]
 800407c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800407e:	683b      	ldr	r3, [r7, #0]
 8004080:	685a      	ldr	r2, [r3, #4]
 8004082:	23c0      	movs	r3, #192	; 0xc0
 8004084:	029b      	lsls	r3, r3, #10
 8004086:	4013      	ands	r3, r2
 8004088:	d100      	bne.n	800408c <HAL_GPIO_Init+0x17c>
 800408a:	e0a0      	b.n	80041ce <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800408c:	4b57      	ldr	r3, [pc, #348]	; (80041ec <HAL_GPIO_Init+0x2dc>)
 800408e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004090:	4b56      	ldr	r3, [pc, #344]	; (80041ec <HAL_GPIO_Init+0x2dc>)
 8004092:	2101      	movs	r1, #1
 8004094:	430a      	orrs	r2, r1
 8004096:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8004098:	4a55      	ldr	r2, [pc, #340]	; (80041f0 <HAL_GPIO_Init+0x2e0>)
 800409a:	697b      	ldr	r3, [r7, #20]
 800409c:	089b      	lsrs	r3, r3, #2
 800409e:	3302      	adds	r3, #2
 80040a0:	009b      	lsls	r3, r3, #2
 80040a2:	589b      	ldr	r3, [r3, r2]
 80040a4:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 80040a6:	697b      	ldr	r3, [r7, #20]
 80040a8:	2203      	movs	r2, #3
 80040aa:	4013      	ands	r3, r2
 80040ac:	009b      	lsls	r3, r3, #2
 80040ae:	220f      	movs	r2, #15
 80040b0:	409a      	lsls	r2, r3
 80040b2:	0013      	movs	r3, r2
 80040b4:	43da      	mvns	r2, r3
 80040b6:	693b      	ldr	r3, [r7, #16]
 80040b8:	4013      	ands	r3, r2
 80040ba:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 80040bc:	687a      	ldr	r2, [r7, #4]
 80040be:	23a0      	movs	r3, #160	; 0xa0
 80040c0:	05db      	lsls	r3, r3, #23
 80040c2:	429a      	cmp	r2, r3
 80040c4:	d01f      	beq.n	8004106 <HAL_GPIO_Init+0x1f6>
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	4a4a      	ldr	r2, [pc, #296]	; (80041f4 <HAL_GPIO_Init+0x2e4>)
 80040ca:	4293      	cmp	r3, r2
 80040cc:	d019      	beq.n	8004102 <HAL_GPIO_Init+0x1f2>
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	4a49      	ldr	r2, [pc, #292]	; (80041f8 <HAL_GPIO_Init+0x2e8>)
 80040d2:	4293      	cmp	r3, r2
 80040d4:	d013      	beq.n	80040fe <HAL_GPIO_Init+0x1ee>
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	4a48      	ldr	r2, [pc, #288]	; (80041fc <HAL_GPIO_Init+0x2ec>)
 80040da:	4293      	cmp	r3, r2
 80040dc:	d00d      	beq.n	80040fa <HAL_GPIO_Init+0x1ea>
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	4a47      	ldr	r2, [pc, #284]	; (8004200 <HAL_GPIO_Init+0x2f0>)
 80040e2:	4293      	cmp	r3, r2
 80040e4:	d007      	beq.n	80040f6 <HAL_GPIO_Init+0x1e6>
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	4a46      	ldr	r2, [pc, #280]	; (8004204 <HAL_GPIO_Init+0x2f4>)
 80040ea:	4293      	cmp	r3, r2
 80040ec:	d101      	bne.n	80040f2 <HAL_GPIO_Init+0x1e2>
 80040ee:	2305      	movs	r3, #5
 80040f0:	e00a      	b.n	8004108 <HAL_GPIO_Init+0x1f8>
 80040f2:	2306      	movs	r3, #6
 80040f4:	e008      	b.n	8004108 <HAL_GPIO_Init+0x1f8>
 80040f6:	2304      	movs	r3, #4
 80040f8:	e006      	b.n	8004108 <HAL_GPIO_Init+0x1f8>
 80040fa:	2303      	movs	r3, #3
 80040fc:	e004      	b.n	8004108 <HAL_GPIO_Init+0x1f8>
 80040fe:	2302      	movs	r3, #2
 8004100:	e002      	b.n	8004108 <HAL_GPIO_Init+0x1f8>
 8004102:	2301      	movs	r3, #1
 8004104:	e000      	b.n	8004108 <HAL_GPIO_Init+0x1f8>
 8004106:	2300      	movs	r3, #0
 8004108:	697a      	ldr	r2, [r7, #20]
 800410a:	2103      	movs	r1, #3
 800410c:	400a      	ands	r2, r1
 800410e:	0092      	lsls	r2, r2, #2
 8004110:	4093      	lsls	r3, r2
 8004112:	693a      	ldr	r2, [r7, #16]
 8004114:	4313      	orrs	r3, r2
 8004116:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004118:	4935      	ldr	r1, [pc, #212]	; (80041f0 <HAL_GPIO_Init+0x2e0>)
 800411a:	697b      	ldr	r3, [r7, #20]
 800411c:	089b      	lsrs	r3, r3, #2
 800411e:	3302      	adds	r3, #2
 8004120:	009b      	lsls	r3, r3, #2
 8004122:	693a      	ldr	r2, [r7, #16]
 8004124:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004126:	4b38      	ldr	r3, [pc, #224]	; (8004208 <HAL_GPIO_Init+0x2f8>)
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	43da      	mvns	r2, r3
 8004130:	693b      	ldr	r3, [r7, #16]
 8004132:	4013      	ands	r3, r2
 8004134:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004136:	683b      	ldr	r3, [r7, #0]
 8004138:	685a      	ldr	r2, [r3, #4]
 800413a:	2380      	movs	r3, #128	; 0x80
 800413c:	025b      	lsls	r3, r3, #9
 800413e:	4013      	ands	r3, r2
 8004140:	d003      	beq.n	800414a <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 8004142:	693a      	ldr	r2, [r7, #16]
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	4313      	orrs	r3, r2
 8004148:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800414a:	4b2f      	ldr	r3, [pc, #188]	; (8004208 <HAL_GPIO_Init+0x2f8>)
 800414c:	693a      	ldr	r2, [r7, #16]
 800414e:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8004150:	4b2d      	ldr	r3, [pc, #180]	; (8004208 <HAL_GPIO_Init+0x2f8>)
 8004152:	685b      	ldr	r3, [r3, #4]
 8004154:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	43da      	mvns	r2, r3
 800415a:	693b      	ldr	r3, [r7, #16]
 800415c:	4013      	ands	r3, r2
 800415e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004160:	683b      	ldr	r3, [r7, #0]
 8004162:	685a      	ldr	r2, [r3, #4]
 8004164:	2380      	movs	r3, #128	; 0x80
 8004166:	029b      	lsls	r3, r3, #10
 8004168:	4013      	ands	r3, r2
 800416a:	d003      	beq.n	8004174 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 800416c:	693a      	ldr	r2, [r7, #16]
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	4313      	orrs	r3, r2
 8004172:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8004174:	4b24      	ldr	r3, [pc, #144]	; (8004208 <HAL_GPIO_Init+0x2f8>)
 8004176:	693a      	ldr	r2, [r7, #16]
 8004178:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800417a:	4b23      	ldr	r3, [pc, #140]	; (8004208 <HAL_GPIO_Init+0x2f8>)
 800417c:	689b      	ldr	r3, [r3, #8]
 800417e:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	43da      	mvns	r2, r3
 8004184:	693b      	ldr	r3, [r7, #16]
 8004186:	4013      	ands	r3, r2
 8004188:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800418a:	683b      	ldr	r3, [r7, #0]
 800418c:	685a      	ldr	r2, [r3, #4]
 800418e:	2380      	movs	r3, #128	; 0x80
 8004190:	035b      	lsls	r3, r3, #13
 8004192:	4013      	ands	r3, r2
 8004194:	d003      	beq.n	800419e <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 8004196:	693a      	ldr	r2, [r7, #16]
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	4313      	orrs	r3, r2
 800419c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800419e:	4b1a      	ldr	r3, [pc, #104]	; (8004208 <HAL_GPIO_Init+0x2f8>)
 80041a0:	693a      	ldr	r2, [r7, #16]
 80041a2:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80041a4:	4b18      	ldr	r3, [pc, #96]	; (8004208 <HAL_GPIO_Init+0x2f8>)
 80041a6:	68db      	ldr	r3, [r3, #12]
 80041a8:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	43da      	mvns	r2, r3
 80041ae:	693b      	ldr	r3, [r7, #16]
 80041b0:	4013      	ands	r3, r2
 80041b2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80041b4:	683b      	ldr	r3, [r7, #0]
 80041b6:	685a      	ldr	r2, [r3, #4]
 80041b8:	2380      	movs	r3, #128	; 0x80
 80041ba:	039b      	lsls	r3, r3, #14
 80041bc:	4013      	ands	r3, r2
 80041be:	d003      	beq.n	80041c8 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 80041c0:	693a      	ldr	r2, [r7, #16]
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	4313      	orrs	r3, r2
 80041c6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80041c8:	4b0f      	ldr	r3, [pc, #60]	; (8004208 <HAL_GPIO_Init+0x2f8>)
 80041ca:	693a      	ldr	r2, [r7, #16]
 80041cc:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 80041ce:	697b      	ldr	r3, [r7, #20]
 80041d0:	3301      	adds	r3, #1
 80041d2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 80041d4:	683b      	ldr	r3, [r7, #0]
 80041d6:	681a      	ldr	r2, [r3, #0]
 80041d8:	697b      	ldr	r3, [r7, #20]
 80041da:	40da      	lsrs	r2, r3
 80041dc:	1e13      	subs	r3, r2, #0
 80041de:	d000      	beq.n	80041e2 <HAL_GPIO_Init+0x2d2>
 80041e0:	e6a2      	b.n	8003f28 <HAL_GPIO_Init+0x18>
  }
}
 80041e2:	46c0      	nop			; (mov r8, r8)
 80041e4:	46c0      	nop			; (mov r8, r8)
 80041e6:	46bd      	mov	sp, r7
 80041e8:	b006      	add	sp, #24
 80041ea:	bd80      	pop	{r7, pc}
 80041ec:	40021000 	.word	0x40021000
 80041f0:	40010000 	.word	0x40010000
 80041f4:	50000400 	.word	0x50000400
 80041f8:	50000800 	.word	0x50000800
 80041fc:	50000c00 	.word	0x50000c00
 8004200:	50001000 	.word	0x50001000
 8004204:	50001c00 	.word	0x50001c00
 8004208:	40010400 	.word	0x40010400

0800420c <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800420c:	b580      	push	{r7, lr}
 800420e:	b082      	sub	sp, #8
 8004210:	af00      	add	r7, sp, #0
 8004212:	6078      	str	r0, [r7, #4]
 8004214:	0008      	movs	r0, r1
 8004216:	0011      	movs	r1, r2
 8004218:	1cbb      	adds	r3, r7, #2
 800421a:	1c02      	adds	r2, r0, #0
 800421c:	801a      	strh	r2, [r3, #0]
 800421e:	1c7b      	adds	r3, r7, #1
 8004220:	1c0a      	adds	r2, r1, #0
 8004222:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004224:	1c7b      	adds	r3, r7, #1
 8004226:	781b      	ldrb	r3, [r3, #0]
 8004228:	2b00      	cmp	r3, #0
 800422a:	d004      	beq.n	8004236 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 800422c:	1cbb      	adds	r3, r7, #2
 800422e:	881a      	ldrh	r2, [r3, #0]
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8004234:	e003      	b.n	800423e <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8004236:	1cbb      	adds	r3, r7, #2
 8004238:	881a      	ldrh	r2, [r3, #0]
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	629a      	str	r2, [r3, #40]	; 0x28
}
 800423e:	46c0      	nop			; (mov r8, r8)
 8004240:	46bd      	mov	sp, r7
 8004242:	b002      	add	sp, #8
 8004244:	bd80      	pop	{r7, pc}
	...

08004248 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected to the EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004248:	b580      	push	{r7, lr}
 800424a:	b082      	sub	sp, #8
 800424c:	af00      	add	r7, sp, #0
 800424e:	0002      	movs	r2, r0
 8004250:	1dbb      	adds	r3, r7, #6
 8004252:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8004254:	4b09      	ldr	r3, [pc, #36]	; (800427c <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8004256:	695b      	ldr	r3, [r3, #20]
 8004258:	1dba      	adds	r2, r7, #6
 800425a:	8812      	ldrh	r2, [r2, #0]
 800425c:	4013      	ands	r3, r2
 800425e:	d008      	beq.n	8004272 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004260:	4b06      	ldr	r3, [pc, #24]	; (800427c <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8004262:	1dba      	adds	r2, r7, #6
 8004264:	8812      	ldrh	r2, [r2, #0]
 8004266:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004268:	1dbb      	adds	r3, r7, #6
 800426a:	881b      	ldrh	r3, [r3, #0]
 800426c:	0018      	movs	r0, r3
 800426e:	f7fc fee3 	bl	8001038 <HAL_GPIO_EXTI_Callback>
  }
}
 8004272:	46c0      	nop			; (mov r8, r8)
 8004274:	46bd      	mov	sp, r7
 8004276:	b002      	add	sp, #8
 8004278:	bd80      	pop	{r7, pc}
 800427a:	46c0      	nop			; (mov r8, r8)
 800427c:	40010400 	.word	0x40010400

08004280 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 2, 4, 8 or 16 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004280:	b580      	push	{r7, lr}
 8004282:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR, PWR_CR_DBP);
 8004284:	4b04      	ldr	r3, [pc, #16]	; (8004298 <HAL_PWR_EnableBkUpAccess+0x18>)
 8004286:	681a      	ldr	r2, [r3, #0]
 8004288:	4b03      	ldr	r3, [pc, #12]	; (8004298 <HAL_PWR_EnableBkUpAccess+0x18>)
 800428a:	2180      	movs	r1, #128	; 0x80
 800428c:	0049      	lsls	r1, r1, #1
 800428e:	430a      	orrs	r2, r1
 8004290:	601a      	str	r2, [r3, #0]
}
 8004292:	46c0      	nop			; (mov r8, r8)
 8004294:	46bd      	mov	sp, r7
 8004296:	bd80      	pop	{r7, pc}
 8004298:	40007000 	.word	0x40007000

0800429c <HAL_PWR_EnterSTOPMode>:
  *            @arg PWR_STOPENTRY_WFI: Enter Stop mode with WFI instruction
  *            @arg PWR_STOPENTRY_WFE: Enter Stop mode with WFE instruction   
  * @retval None
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
 800429c:	b580      	push	{r7, lr}
 800429e:	b086      	sub	sp, #24
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	6078      	str	r0, [r7, #4]
 80042a4:	000a      	movs	r2, r1
 80042a6:	1cfb      	adds	r3, r7, #3
 80042a8:	701a      	strb	r2, [r3, #0]
  uint32_t tmpreg = 0U;
 80042aa:	2300      	movs	r3, #0
 80042ac:	617b      	str	r3, [r7, #20]
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* It is forbidden to configure both EN_VREFINT=1 and ULP=1 if the device is
     in Stop mode or in Sleep/Low-power sleep mode */
  ulpbit = READ_BIT(PWR->CR, PWR_CR_ULP);
 80042ae:	4b25      	ldr	r3, [pc, #148]	; (8004344 <HAL_PWR_EnterSTOPMode+0xa8>)
 80042b0:	681a      	ldr	r2, [r3, #0]
 80042b2:	2380      	movs	r3, #128	; 0x80
 80042b4:	009b      	lsls	r3, r3, #2
 80042b6:	4013      	ands	r3, r2
 80042b8:	613b      	str	r3, [r7, #16]
  vrefinbit = READ_BIT(SYSCFG->CFGR3, SYSCFG_CFGR3_EN_VREFINT);
 80042ba:	4b23      	ldr	r3, [pc, #140]	; (8004348 <HAL_PWR_EnterSTOPMode+0xac>)
 80042bc:	6a1b      	ldr	r3, [r3, #32]
 80042be:	2201      	movs	r2, #1
 80042c0:	4013      	ands	r3, r2
 80042c2:	60fb      	str	r3, [r7, #12]
  if((ulpbit != 0) && (vrefinbit != 0))
 80042c4:	693b      	ldr	r3, [r7, #16]
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d008      	beq.n	80042dc <HAL_PWR_EnterSTOPMode+0x40>
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d005      	beq.n	80042dc <HAL_PWR_EnterSTOPMode+0x40>
  {
    CLEAR_BIT(PWR->CR, PWR_CR_ULP);
 80042d0:	4b1c      	ldr	r3, [pc, #112]	; (8004344 <HAL_PWR_EnterSTOPMode+0xa8>)
 80042d2:	681a      	ldr	r2, [r3, #0]
 80042d4:	4b1b      	ldr	r3, [pc, #108]	; (8004344 <HAL_PWR_EnterSTOPMode+0xa8>)
 80042d6:	491d      	ldr	r1, [pc, #116]	; (800434c <HAL_PWR_EnterSTOPMode+0xb0>)
 80042d8:	400a      	ands	r2, r1
 80042da:	601a      	str	r2, [r3, #0]
  }

  /* Select the regulator state in Stop mode ---------------------------------*/
  tmpreg = PWR->CR;
 80042dc:	4b19      	ldr	r3, [pc, #100]	; (8004344 <HAL_PWR_EnterSTOPMode+0xa8>)
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	617b      	str	r3, [r7, #20]
  
  /* Clear PDDS and LPDS bits */
  CLEAR_BIT(tmpreg, (PWR_CR_PDDS | PWR_CR_LPSDSR));
 80042e2:	697b      	ldr	r3, [r7, #20]
 80042e4:	2203      	movs	r2, #3
 80042e6:	4393      	bics	r3, r2
 80042e8:	617b      	str	r3, [r7, #20]

 /* Set LPSDSR bit according to PWR_Regulator value */
  SET_BIT(tmpreg, Regulator);
 80042ea:	697a      	ldr	r2, [r7, #20]
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	4313      	orrs	r3, r2
 80042f0:	617b      	str	r3, [r7, #20]

  /* Store the new value */
  PWR->CR = tmpreg;
 80042f2:	4b14      	ldr	r3, [pc, #80]	; (8004344 <HAL_PWR_EnterSTOPMode+0xa8>)
 80042f4:	697a      	ldr	r2, [r7, #20]
 80042f6:	601a      	str	r2, [r3, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 80042f8:	4b15      	ldr	r3, [pc, #84]	; (8004350 <HAL_PWR_EnterSTOPMode+0xb4>)
 80042fa:	691a      	ldr	r2, [r3, #16]
 80042fc:	4b14      	ldr	r3, [pc, #80]	; (8004350 <HAL_PWR_EnterSTOPMode+0xb4>)
 80042fe:	2104      	movs	r1, #4
 8004300:	430a      	orrs	r2, r1
 8004302:	611a      	str	r2, [r3, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 8004304:	1cfb      	adds	r3, r7, #3
 8004306:	781b      	ldrb	r3, [r3, #0]
 8004308:	2b01      	cmp	r3, #1
 800430a:	d101      	bne.n	8004310 <HAL_PWR_EnterSTOPMode+0x74>
  {
    /* Request Wait For Interrupt */
    __WFI();
 800430c:	bf30      	wfi
 800430e:	e002      	b.n	8004316 <HAL_PWR_EnterSTOPMode+0x7a>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8004310:	bf40      	sev
    __WFE();
 8004312:	bf20      	wfe
    __WFE();
 8004314:	bf20      	wfe
  }
 
  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8004316:	4b0e      	ldr	r3, [pc, #56]	; (8004350 <HAL_PWR_EnterSTOPMode+0xb4>)
 8004318:	691a      	ldr	r2, [r3, #16]
 800431a:	4b0d      	ldr	r3, [pc, #52]	; (8004350 <HAL_PWR_EnterSTOPMode+0xb4>)
 800431c:	2104      	movs	r1, #4
 800431e:	438a      	bics	r2, r1
 8004320:	611a      	str	r2, [r3, #16]

  if((ulpbit != 0) && (vrefinbit != 0))
 8004322:	693b      	ldr	r3, [r7, #16]
 8004324:	2b00      	cmp	r3, #0
 8004326:	d009      	beq.n	800433c <HAL_PWR_EnterSTOPMode+0xa0>
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	2b00      	cmp	r3, #0
 800432c:	d006      	beq.n	800433c <HAL_PWR_EnterSTOPMode+0xa0>
  {
    SET_BIT(PWR->CR, PWR_CR_ULP);
 800432e:	4b05      	ldr	r3, [pc, #20]	; (8004344 <HAL_PWR_EnterSTOPMode+0xa8>)
 8004330:	681a      	ldr	r2, [r3, #0]
 8004332:	4b04      	ldr	r3, [pc, #16]	; (8004344 <HAL_PWR_EnterSTOPMode+0xa8>)
 8004334:	2180      	movs	r1, #128	; 0x80
 8004336:	0089      	lsls	r1, r1, #2
 8004338:	430a      	orrs	r2, r1
 800433a:	601a      	str	r2, [r3, #0]
  }
}
 800433c:	46c0      	nop			; (mov r8, r8)
 800433e:	46bd      	mov	sp, r7
 8004340:	b006      	add	sp, #24
 8004342:	bd80      	pop	{r7, pc}
 8004344:	40007000 	.word	0x40007000
 8004348:	40010000 	.word	0x40010000
 800434c:	fffffdff 	.word	0xfffffdff
 8004350:	e000ed00 	.word	0xe000ed00

08004354 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004354:	b5b0      	push	{r4, r5, r7, lr}
 8004356:	b08a      	sub	sp, #40	; 0x28
 8004358:	af00      	add	r7, sp, #0
 800435a:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	2b00      	cmp	r3, #0
 8004360:	d102      	bne.n	8004368 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004362:	2301      	movs	r3, #1
 8004364:	f000 fbbf 	bl	8004ae6 <HAL_RCC_OscConfig+0x792>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004368:	4bc9      	ldr	r3, [pc, #804]	; (8004690 <HAL_RCC_OscConfig+0x33c>)
 800436a:	68db      	ldr	r3, [r3, #12]
 800436c:	220c      	movs	r2, #12
 800436e:	4013      	ands	r3, r2
 8004370:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004372:	4bc7      	ldr	r3, [pc, #796]	; (8004690 <HAL_RCC_OscConfig+0x33c>)
 8004374:	68da      	ldr	r2, [r3, #12]
 8004376:	2380      	movs	r3, #128	; 0x80
 8004378:	025b      	lsls	r3, r3, #9
 800437a:	4013      	ands	r3, r2
 800437c:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	2201      	movs	r2, #1
 8004384:	4013      	ands	r3, r2
 8004386:	d100      	bne.n	800438a <HAL_RCC_OscConfig+0x36>
 8004388:	e07e      	b.n	8004488 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800438a:	69fb      	ldr	r3, [r7, #28]
 800438c:	2b08      	cmp	r3, #8
 800438e:	d007      	beq.n	80043a0 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004390:	69fb      	ldr	r3, [r7, #28]
 8004392:	2b0c      	cmp	r3, #12
 8004394:	d112      	bne.n	80043bc <HAL_RCC_OscConfig+0x68>
 8004396:	69ba      	ldr	r2, [r7, #24]
 8004398:	2380      	movs	r3, #128	; 0x80
 800439a:	025b      	lsls	r3, r3, #9
 800439c:	429a      	cmp	r2, r3
 800439e:	d10d      	bne.n	80043bc <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80043a0:	4bbb      	ldr	r3, [pc, #748]	; (8004690 <HAL_RCC_OscConfig+0x33c>)
 80043a2:	681a      	ldr	r2, [r3, #0]
 80043a4:	2380      	movs	r3, #128	; 0x80
 80043a6:	029b      	lsls	r3, r3, #10
 80043a8:	4013      	ands	r3, r2
 80043aa:	d100      	bne.n	80043ae <HAL_RCC_OscConfig+0x5a>
 80043ac:	e06b      	b.n	8004486 <HAL_RCC_OscConfig+0x132>
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	685b      	ldr	r3, [r3, #4]
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d167      	bne.n	8004486 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 80043b6:	2301      	movs	r3, #1
 80043b8:	f000 fb95 	bl	8004ae6 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	685a      	ldr	r2, [r3, #4]
 80043c0:	2380      	movs	r3, #128	; 0x80
 80043c2:	025b      	lsls	r3, r3, #9
 80043c4:	429a      	cmp	r2, r3
 80043c6:	d107      	bne.n	80043d8 <HAL_RCC_OscConfig+0x84>
 80043c8:	4bb1      	ldr	r3, [pc, #708]	; (8004690 <HAL_RCC_OscConfig+0x33c>)
 80043ca:	681a      	ldr	r2, [r3, #0]
 80043cc:	4bb0      	ldr	r3, [pc, #704]	; (8004690 <HAL_RCC_OscConfig+0x33c>)
 80043ce:	2180      	movs	r1, #128	; 0x80
 80043d0:	0249      	lsls	r1, r1, #9
 80043d2:	430a      	orrs	r2, r1
 80043d4:	601a      	str	r2, [r3, #0]
 80043d6:	e027      	b.n	8004428 <HAL_RCC_OscConfig+0xd4>
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	685a      	ldr	r2, [r3, #4]
 80043dc:	23a0      	movs	r3, #160	; 0xa0
 80043de:	02db      	lsls	r3, r3, #11
 80043e0:	429a      	cmp	r2, r3
 80043e2:	d10e      	bne.n	8004402 <HAL_RCC_OscConfig+0xae>
 80043e4:	4baa      	ldr	r3, [pc, #680]	; (8004690 <HAL_RCC_OscConfig+0x33c>)
 80043e6:	681a      	ldr	r2, [r3, #0]
 80043e8:	4ba9      	ldr	r3, [pc, #676]	; (8004690 <HAL_RCC_OscConfig+0x33c>)
 80043ea:	2180      	movs	r1, #128	; 0x80
 80043ec:	02c9      	lsls	r1, r1, #11
 80043ee:	430a      	orrs	r2, r1
 80043f0:	601a      	str	r2, [r3, #0]
 80043f2:	4ba7      	ldr	r3, [pc, #668]	; (8004690 <HAL_RCC_OscConfig+0x33c>)
 80043f4:	681a      	ldr	r2, [r3, #0]
 80043f6:	4ba6      	ldr	r3, [pc, #664]	; (8004690 <HAL_RCC_OscConfig+0x33c>)
 80043f8:	2180      	movs	r1, #128	; 0x80
 80043fa:	0249      	lsls	r1, r1, #9
 80043fc:	430a      	orrs	r2, r1
 80043fe:	601a      	str	r2, [r3, #0]
 8004400:	e012      	b.n	8004428 <HAL_RCC_OscConfig+0xd4>
 8004402:	4ba3      	ldr	r3, [pc, #652]	; (8004690 <HAL_RCC_OscConfig+0x33c>)
 8004404:	681a      	ldr	r2, [r3, #0]
 8004406:	4ba2      	ldr	r3, [pc, #648]	; (8004690 <HAL_RCC_OscConfig+0x33c>)
 8004408:	49a2      	ldr	r1, [pc, #648]	; (8004694 <HAL_RCC_OscConfig+0x340>)
 800440a:	400a      	ands	r2, r1
 800440c:	601a      	str	r2, [r3, #0]
 800440e:	4ba0      	ldr	r3, [pc, #640]	; (8004690 <HAL_RCC_OscConfig+0x33c>)
 8004410:	681a      	ldr	r2, [r3, #0]
 8004412:	2380      	movs	r3, #128	; 0x80
 8004414:	025b      	lsls	r3, r3, #9
 8004416:	4013      	ands	r3, r2
 8004418:	60fb      	str	r3, [r7, #12]
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	4b9c      	ldr	r3, [pc, #624]	; (8004690 <HAL_RCC_OscConfig+0x33c>)
 800441e:	681a      	ldr	r2, [r3, #0]
 8004420:	4b9b      	ldr	r3, [pc, #620]	; (8004690 <HAL_RCC_OscConfig+0x33c>)
 8004422:	499d      	ldr	r1, [pc, #628]	; (8004698 <HAL_RCC_OscConfig+0x344>)
 8004424:	400a      	ands	r2, r1
 8004426:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	685b      	ldr	r3, [r3, #4]
 800442c:	2b00      	cmp	r3, #0
 800442e:	d015      	beq.n	800445c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004430:	f7fe fff2 	bl	8003418 <HAL_GetTick>
 8004434:	0003      	movs	r3, r0
 8004436:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004438:	e009      	b.n	800444e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800443a:	f7fe ffed 	bl	8003418 <HAL_GetTick>
 800443e:	0002      	movs	r2, r0
 8004440:	697b      	ldr	r3, [r7, #20]
 8004442:	1ad3      	subs	r3, r2, r3
 8004444:	2b64      	cmp	r3, #100	; 0x64
 8004446:	d902      	bls.n	800444e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004448:	2303      	movs	r3, #3
 800444a:	f000 fb4c 	bl	8004ae6 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800444e:	4b90      	ldr	r3, [pc, #576]	; (8004690 <HAL_RCC_OscConfig+0x33c>)
 8004450:	681a      	ldr	r2, [r3, #0]
 8004452:	2380      	movs	r3, #128	; 0x80
 8004454:	029b      	lsls	r3, r3, #10
 8004456:	4013      	ands	r3, r2
 8004458:	d0ef      	beq.n	800443a <HAL_RCC_OscConfig+0xe6>
 800445a:	e015      	b.n	8004488 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800445c:	f7fe ffdc 	bl	8003418 <HAL_GetTick>
 8004460:	0003      	movs	r3, r0
 8004462:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004464:	e008      	b.n	8004478 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004466:	f7fe ffd7 	bl	8003418 <HAL_GetTick>
 800446a:	0002      	movs	r2, r0
 800446c:	697b      	ldr	r3, [r7, #20]
 800446e:	1ad3      	subs	r3, r2, r3
 8004470:	2b64      	cmp	r3, #100	; 0x64
 8004472:	d901      	bls.n	8004478 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8004474:	2303      	movs	r3, #3
 8004476:	e336      	b.n	8004ae6 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004478:	4b85      	ldr	r3, [pc, #532]	; (8004690 <HAL_RCC_OscConfig+0x33c>)
 800447a:	681a      	ldr	r2, [r3, #0]
 800447c:	2380      	movs	r3, #128	; 0x80
 800447e:	029b      	lsls	r3, r3, #10
 8004480:	4013      	ands	r3, r2
 8004482:	d1f0      	bne.n	8004466 <HAL_RCC_OscConfig+0x112>
 8004484:	e000      	b.n	8004488 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004486:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	2202      	movs	r2, #2
 800448e:	4013      	ands	r3, r2
 8004490:	d100      	bne.n	8004494 <HAL_RCC_OscConfig+0x140>
 8004492:	e099      	b.n	80045c8 <HAL_RCC_OscConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	68db      	ldr	r3, [r3, #12]
 8004498:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 800449a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800449c:	2220      	movs	r2, #32
 800449e:	4013      	ands	r3, r2
 80044a0:	d009      	beq.n	80044b6 <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 80044a2:	4b7b      	ldr	r3, [pc, #492]	; (8004690 <HAL_RCC_OscConfig+0x33c>)
 80044a4:	681a      	ldr	r2, [r3, #0]
 80044a6:	4b7a      	ldr	r3, [pc, #488]	; (8004690 <HAL_RCC_OscConfig+0x33c>)
 80044a8:	2120      	movs	r1, #32
 80044aa:	430a      	orrs	r2, r1
 80044ac:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 80044ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044b0:	2220      	movs	r2, #32
 80044b2:	4393      	bics	r3, r2
 80044b4:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80044b6:	69fb      	ldr	r3, [r7, #28]
 80044b8:	2b04      	cmp	r3, #4
 80044ba:	d005      	beq.n	80044c8 <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80044bc:	69fb      	ldr	r3, [r7, #28]
 80044be:	2b0c      	cmp	r3, #12
 80044c0:	d13e      	bne.n	8004540 <HAL_RCC_OscConfig+0x1ec>
 80044c2:	69bb      	ldr	r3, [r7, #24]
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d13b      	bne.n	8004540 <HAL_RCC_OscConfig+0x1ec>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 80044c8:	4b71      	ldr	r3, [pc, #452]	; (8004690 <HAL_RCC_OscConfig+0x33c>)
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	2204      	movs	r2, #4
 80044ce:	4013      	ands	r3, r2
 80044d0:	d004      	beq.n	80044dc <HAL_RCC_OscConfig+0x188>
 80044d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d101      	bne.n	80044dc <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 80044d8:	2301      	movs	r3, #1
 80044da:	e304      	b.n	8004ae6 <HAL_RCC_OscConfig+0x792>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80044dc:	4b6c      	ldr	r3, [pc, #432]	; (8004690 <HAL_RCC_OscConfig+0x33c>)
 80044de:	685b      	ldr	r3, [r3, #4]
 80044e0:	4a6e      	ldr	r2, [pc, #440]	; (800469c <HAL_RCC_OscConfig+0x348>)
 80044e2:	4013      	ands	r3, r2
 80044e4:	0019      	movs	r1, r3
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	691b      	ldr	r3, [r3, #16]
 80044ea:	021a      	lsls	r2, r3, #8
 80044ec:	4b68      	ldr	r3, [pc, #416]	; (8004690 <HAL_RCC_OscConfig+0x33c>)
 80044ee:	430a      	orrs	r2, r1
 80044f0:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80044f2:	4b67      	ldr	r3, [pc, #412]	; (8004690 <HAL_RCC_OscConfig+0x33c>)
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	2209      	movs	r2, #9
 80044f8:	4393      	bics	r3, r2
 80044fa:	0019      	movs	r1, r3
 80044fc:	4b64      	ldr	r3, [pc, #400]	; (8004690 <HAL_RCC_OscConfig+0x33c>)
 80044fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004500:	430a      	orrs	r2, r1
 8004502:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004504:	f000 fc42 	bl	8004d8c <HAL_RCC_GetSysClockFreq>
 8004508:	0001      	movs	r1, r0
 800450a:	4b61      	ldr	r3, [pc, #388]	; (8004690 <HAL_RCC_OscConfig+0x33c>)
 800450c:	68db      	ldr	r3, [r3, #12]
 800450e:	091b      	lsrs	r3, r3, #4
 8004510:	220f      	movs	r2, #15
 8004512:	4013      	ands	r3, r2
 8004514:	4a62      	ldr	r2, [pc, #392]	; (80046a0 <HAL_RCC_OscConfig+0x34c>)
 8004516:	5cd3      	ldrb	r3, [r2, r3]
 8004518:	000a      	movs	r2, r1
 800451a:	40da      	lsrs	r2, r3
 800451c:	4b61      	ldr	r3, [pc, #388]	; (80046a4 <HAL_RCC_OscConfig+0x350>)
 800451e:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8004520:	4b61      	ldr	r3, [pc, #388]	; (80046a8 <HAL_RCC_OscConfig+0x354>)
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	2513      	movs	r5, #19
 8004526:	197c      	adds	r4, r7, r5
 8004528:	0018      	movs	r0, r3
 800452a:	f7fe ff2f 	bl	800338c <HAL_InitTick>
 800452e:	0003      	movs	r3, r0
 8004530:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8004532:	197b      	adds	r3, r7, r5
 8004534:	781b      	ldrb	r3, [r3, #0]
 8004536:	2b00      	cmp	r3, #0
 8004538:	d046      	beq.n	80045c8 <HAL_RCC_OscConfig+0x274>
      {
        return status;
 800453a:	197b      	adds	r3, r7, r5
 800453c:	781b      	ldrb	r3, [r3, #0]
 800453e:	e2d2      	b.n	8004ae6 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8004540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004542:	2b00      	cmp	r3, #0
 8004544:	d027      	beq.n	8004596 <HAL_RCC_OscConfig+0x242>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8004546:	4b52      	ldr	r3, [pc, #328]	; (8004690 <HAL_RCC_OscConfig+0x33c>)
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	2209      	movs	r2, #9
 800454c:	4393      	bics	r3, r2
 800454e:	0019      	movs	r1, r3
 8004550:	4b4f      	ldr	r3, [pc, #316]	; (8004690 <HAL_RCC_OscConfig+0x33c>)
 8004552:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004554:	430a      	orrs	r2, r1
 8004556:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004558:	f7fe ff5e 	bl	8003418 <HAL_GetTick>
 800455c:	0003      	movs	r3, r0
 800455e:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004560:	e008      	b.n	8004574 <HAL_RCC_OscConfig+0x220>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004562:	f7fe ff59 	bl	8003418 <HAL_GetTick>
 8004566:	0002      	movs	r2, r0
 8004568:	697b      	ldr	r3, [r7, #20]
 800456a:	1ad3      	subs	r3, r2, r3
 800456c:	2b02      	cmp	r3, #2
 800456e:	d901      	bls.n	8004574 <HAL_RCC_OscConfig+0x220>
          {
            return HAL_TIMEOUT;
 8004570:	2303      	movs	r3, #3
 8004572:	e2b8      	b.n	8004ae6 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004574:	4b46      	ldr	r3, [pc, #280]	; (8004690 <HAL_RCC_OscConfig+0x33c>)
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	2204      	movs	r2, #4
 800457a:	4013      	ands	r3, r2
 800457c:	d0f1      	beq.n	8004562 <HAL_RCC_OscConfig+0x20e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800457e:	4b44      	ldr	r3, [pc, #272]	; (8004690 <HAL_RCC_OscConfig+0x33c>)
 8004580:	685b      	ldr	r3, [r3, #4]
 8004582:	4a46      	ldr	r2, [pc, #280]	; (800469c <HAL_RCC_OscConfig+0x348>)
 8004584:	4013      	ands	r3, r2
 8004586:	0019      	movs	r1, r3
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	691b      	ldr	r3, [r3, #16]
 800458c:	021a      	lsls	r2, r3, #8
 800458e:	4b40      	ldr	r3, [pc, #256]	; (8004690 <HAL_RCC_OscConfig+0x33c>)
 8004590:	430a      	orrs	r2, r1
 8004592:	605a      	str	r2, [r3, #4]
 8004594:	e018      	b.n	80045c8 <HAL_RCC_OscConfig+0x274>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004596:	4b3e      	ldr	r3, [pc, #248]	; (8004690 <HAL_RCC_OscConfig+0x33c>)
 8004598:	681a      	ldr	r2, [r3, #0]
 800459a:	4b3d      	ldr	r3, [pc, #244]	; (8004690 <HAL_RCC_OscConfig+0x33c>)
 800459c:	2101      	movs	r1, #1
 800459e:	438a      	bics	r2, r1
 80045a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045a2:	f7fe ff39 	bl	8003418 <HAL_GetTick>
 80045a6:	0003      	movs	r3, r0
 80045a8:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80045aa:	e008      	b.n	80045be <HAL_RCC_OscConfig+0x26a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80045ac:	f7fe ff34 	bl	8003418 <HAL_GetTick>
 80045b0:	0002      	movs	r2, r0
 80045b2:	697b      	ldr	r3, [r7, #20]
 80045b4:	1ad3      	subs	r3, r2, r3
 80045b6:	2b02      	cmp	r3, #2
 80045b8:	d901      	bls.n	80045be <HAL_RCC_OscConfig+0x26a>
          {
            return HAL_TIMEOUT;
 80045ba:	2303      	movs	r3, #3
 80045bc:	e293      	b.n	8004ae6 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80045be:	4b34      	ldr	r3, [pc, #208]	; (8004690 <HAL_RCC_OscConfig+0x33c>)
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	2204      	movs	r2, #4
 80045c4:	4013      	ands	r3, r2
 80045c6:	d1f1      	bne.n	80045ac <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	2210      	movs	r2, #16
 80045ce:	4013      	ands	r3, r2
 80045d0:	d100      	bne.n	80045d4 <HAL_RCC_OscConfig+0x280>
 80045d2:	e0a2      	b.n	800471a <HAL_RCC_OscConfig+0x3c6>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80045d4:	69fb      	ldr	r3, [r7, #28]
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d140      	bne.n	800465c <HAL_RCC_OscConfig+0x308>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80045da:	4b2d      	ldr	r3, [pc, #180]	; (8004690 <HAL_RCC_OscConfig+0x33c>)
 80045dc:	681a      	ldr	r2, [r3, #0]
 80045de:	2380      	movs	r3, #128	; 0x80
 80045e0:	009b      	lsls	r3, r3, #2
 80045e2:	4013      	ands	r3, r2
 80045e4:	d005      	beq.n	80045f2 <HAL_RCC_OscConfig+0x29e>
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	69db      	ldr	r3, [r3, #28]
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d101      	bne.n	80045f2 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 80045ee:	2301      	movs	r3, #1
 80045f0:	e279      	b.n	8004ae6 <HAL_RCC_OscConfig+0x792>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80045f2:	4b27      	ldr	r3, [pc, #156]	; (8004690 <HAL_RCC_OscConfig+0x33c>)
 80045f4:	685b      	ldr	r3, [r3, #4]
 80045f6:	4a2d      	ldr	r2, [pc, #180]	; (80046ac <HAL_RCC_OscConfig+0x358>)
 80045f8:	4013      	ands	r3, r2
 80045fa:	0019      	movs	r1, r3
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004600:	4b23      	ldr	r3, [pc, #140]	; (8004690 <HAL_RCC_OscConfig+0x33c>)
 8004602:	430a      	orrs	r2, r1
 8004604:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004606:	4b22      	ldr	r3, [pc, #136]	; (8004690 <HAL_RCC_OscConfig+0x33c>)
 8004608:	685b      	ldr	r3, [r3, #4]
 800460a:	021b      	lsls	r3, r3, #8
 800460c:	0a19      	lsrs	r1, r3, #8
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	6a1b      	ldr	r3, [r3, #32]
 8004612:	061a      	lsls	r2, r3, #24
 8004614:	4b1e      	ldr	r3, [pc, #120]	; (8004690 <HAL_RCC_OscConfig+0x33c>)
 8004616:	430a      	orrs	r2, r1
 8004618:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800461e:	0b5b      	lsrs	r3, r3, #13
 8004620:	3301      	adds	r3, #1
 8004622:	2280      	movs	r2, #128	; 0x80
 8004624:	0212      	lsls	r2, r2, #8
 8004626:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8004628:	4b19      	ldr	r3, [pc, #100]	; (8004690 <HAL_RCC_OscConfig+0x33c>)
 800462a:	68db      	ldr	r3, [r3, #12]
 800462c:	091b      	lsrs	r3, r3, #4
 800462e:	210f      	movs	r1, #15
 8004630:	400b      	ands	r3, r1
 8004632:	491b      	ldr	r1, [pc, #108]	; (80046a0 <HAL_RCC_OscConfig+0x34c>)
 8004634:	5ccb      	ldrb	r3, [r1, r3]
 8004636:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8004638:	4b1a      	ldr	r3, [pc, #104]	; (80046a4 <HAL_RCC_OscConfig+0x350>)
 800463a:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 800463c:	4b1a      	ldr	r3, [pc, #104]	; (80046a8 <HAL_RCC_OscConfig+0x354>)
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	2513      	movs	r5, #19
 8004642:	197c      	adds	r4, r7, r5
 8004644:	0018      	movs	r0, r3
 8004646:	f7fe fea1 	bl	800338c <HAL_InitTick>
 800464a:	0003      	movs	r3, r0
 800464c:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 800464e:	197b      	adds	r3, r7, r5
 8004650:	781b      	ldrb	r3, [r3, #0]
 8004652:	2b00      	cmp	r3, #0
 8004654:	d061      	beq.n	800471a <HAL_RCC_OscConfig+0x3c6>
        {
          return status;
 8004656:	197b      	adds	r3, r7, r5
 8004658:	781b      	ldrb	r3, [r3, #0]
 800465a:	e244      	b.n	8004ae6 <HAL_RCC_OscConfig+0x792>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	69db      	ldr	r3, [r3, #28]
 8004660:	2b00      	cmp	r3, #0
 8004662:	d040      	beq.n	80046e6 <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004664:	4b0a      	ldr	r3, [pc, #40]	; (8004690 <HAL_RCC_OscConfig+0x33c>)
 8004666:	681a      	ldr	r2, [r3, #0]
 8004668:	4b09      	ldr	r3, [pc, #36]	; (8004690 <HAL_RCC_OscConfig+0x33c>)
 800466a:	2180      	movs	r1, #128	; 0x80
 800466c:	0049      	lsls	r1, r1, #1
 800466e:	430a      	orrs	r2, r1
 8004670:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004672:	f7fe fed1 	bl	8003418 <HAL_GetTick>
 8004676:	0003      	movs	r3, r0
 8004678:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800467a:	e019      	b.n	80046b0 <HAL_RCC_OscConfig+0x35c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800467c:	f7fe fecc 	bl	8003418 <HAL_GetTick>
 8004680:	0002      	movs	r2, r0
 8004682:	697b      	ldr	r3, [r7, #20]
 8004684:	1ad3      	subs	r3, r2, r3
 8004686:	2b02      	cmp	r3, #2
 8004688:	d912      	bls.n	80046b0 <HAL_RCC_OscConfig+0x35c>
          {
            return HAL_TIMEOUT;
 800468a:	2303      	movs	r3, #3
 800468c:	e22b      	b.n	8004ae6 <HAL_RCC_OscConfig+0x792>
 800468e:	46c0      	nop			; (mov r8, r8)
 8004690:	40021000 	.word	0x40021000
 8004694:	fffeffff 	.word	0xfffeffff
 8004698:	fffbffff 	.word	0xfffbffff
 800469c:	ffffe0ff 	.word	0xffffe0ff
 80046a0:	08007fbc 	.word	0x08007fbc
 80046a4:	20000000 	.word	0x20000000
 80046a8:	20000004 	.word	0x20000004
 80046ac:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80046b0:	4bca      	ldr	r3, [pc, #808]	; (80049dc <HAL_RCC_OscConfig+0x688>)
 80046b2:	681a      	ldr	r2, [r3, #0]
 80046b4:	2380      	movs	r3, #128	; 0x80
 80046b6:	009b      	lsls	r3, r3, #2
 80046b8:	4013      	ands	r3, r2
 80046ba:	d0df      	beq.n	800467c <HAL_RCC_OscConfig+0x328>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80046bc:	4bc7      	ldr	r3, [pc, #796]	; (80049dc <HAL_RCC_OscConfig+0x688>)
 80046be:	685b      	ldr	r3, [r3, #4]
 80046c0:	4ac7      	ldr	r2, [pc, #796]	; (80049e0 <HAL_RCC_OscConfig+0x68c>)
 80046c2:	4013      	ands	r3, r2
 80046c4:	0019      	movs	r1, r3
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80046ca:	4bc4      	ldr	r3, [pc, #784]	; (80049dc <HAL_RCC_OscConfig+0x688>)
 80046cc:	430a      	orrs	r2, r1
 80046ce:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80046d0:	4bc2      	ldr	r3, [pc, #776]	; (80049dc <HAL_RCC_OscConfig+0x688>)
 80046d2:	685b      	ldr	r3, [r3, #4]
 80046d4:	021b      	lsls	r3, r3, #8
 80046d6:	0a19      	lsrs	r1, r3, #8
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	6a1b      	ldr	r3, [r3, #32]
 80046dc:	061a      	lsls	r2, r3, #24
 80046de:	4bbf      	ldr	r3, [pc, #764]	; (80049dc <HAL_RCC_OscConfig+0x688>)
 80046e0:	430a      	orrs	r2, r1
 80046e2:	605a      	str	r2, [r3, #4]
 80046e4:	e019      	b.n	800471a <HAL_RCC_OscConfig+0x3c6>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80046e6:	4bbd      	ldr	r3, [pc, #756]	; (80049dc <HAL_RCC_OscConfig+0x688>)
 80046e8:	681a      	ldr	r2, [r3, #0]
 80046ea:	4bbc      	ldr	r3, [pc, #752]	; (80049dc <HAL_RCC_OscConfig+0x688>)
 80046ec:	49bd      	ldr	r1, [pc, #756]	; (80049e4 <HAL_RCC_OscConfig+0x690>)
 80046ee:	400a      	ands	r2, r1
 80046f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046f2:	f7fe fe91 	bl	8003418 <HAL_GetTick>
 80046f6:	0003      	movs	r3, r0
 80046f8:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80046fa:	e008      	b.n	800470e <HAL_RCC_OscConfig+0x3ba>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80046fc:	f7fe fe8c 	bl	8003418 <HAL_GetTick>
 8004700:	0002      	movs	r2, r0
 8004702:	697b      	ldr	r3, [r7, #20]
 8004704:	1ad3      	subs	r3, r2, r3
 8004706:	2b02      	cmp	r3, #2
 8004708:	d901      	bls.n	800470e <HAL_RCC_OscConfig+0x3ba>
          {
            return HAL_TIMEOUT;
 800470a:	2303      	movs	r3, #3
 800470c:	e1eb      	b.n	8004ae6 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800470e:	4bb3      	ldr	r3, [pc, #716]	; (80049dc <HAL_RCC_OscConfig+0x688>)
 8004710:	681a      	ldr	r2, [r3, #0]
 8004712:	2380      	movs	r3, #128	; 0x80
 8004714:	009b      	lsls	r3, r3, #2
 8004716:	4013      	ands	r3, r2
 8004718:	d1f0      	bne.n	80046fc <HAL_RCC_OscConfig+0x3a8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	2208      	movs	r2, #8
 8004720:	4013      	ands	r3, r2
 8004722:	d036      	beq.n	8004792 <HAL_RCC_OscConfig+0x43e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	695b      	ldr	r3, [r3, #20]
 8004728:	2b00      	cmp	r3, #0
 800472a:	d019      	beq.n	8004760 <HAL_RCC_OscConfig+0x40c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800472c:	4bab      	ldr	r3, [pc, #684]	; (80049dc <HAL_RCC_OscConfig+0x688>)
 800472e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004730:	4baa      	ldr	r3, [pc, #680]	; (80049dc <HAL_RCC_OscConfig+0x688>)
 8004732:	2101      	movs	r1, #1
 8004734:	430a      	orrs	r2, r1
 8004736:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004738:	f7fe fe6e 	bl	8003418 <HAL_GetTick>
 800473c:	0003      	movs	r3, r0
 800473e:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004740:	e008      	b.n	8004754 <HAL_RCC_OscConfig+0x400>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004742:	f7fe fe69 	bl	8003418 <HAL_GetTick>
 8004746:	0002      	movs	r2, r0
 8004748:	697b      	ldr	r3, [r7, #20]
 800474a:	1ad3      	subs	r3, r2, r3
 800474c:	2b02      	cmp	r3, #2
 800474e:	d901      	bls.n	8004754 <HAL_RCC_OscConfig+0x400>
        {
          return HAL_TIMEOUT;
 8004750:	2303      	movs	r3, #3
 8004752:	e1c8      	b.n	8004ae6 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004754:	4ba1      	ldr	r3, [pc, #644]	; (80049dc <HAL_RCC_OscConfig+0x688>)
 8004756:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004758:	2202      	movs	r2, #2
 800475a:	4013      	ands	r3, r2
 800475c:	d0f1      	beq.n	8004742 <HAL_RCC_OscConfig+0x3ee>
 800475e:	e018      	b.n	8004792 <HAL_RCC_OscConfig+0x43e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004760:	4b9e      	ldr	r3, [pc, #632]	; (80049dc <HAL_RCC_OscConfig+0x688>)
 8004762:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004764:	4b9d      	ldr	r3, [pc, #628]	; (80049dc <HAL_RCC_OscConfig+0x688>)
 8004766:	2101      	movs	r1, #1
 8004768:	438a      	bics	r2, r1
 800476a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800476c:	f7fe fe54 	bl	8003418 <HAL_GetTick>
 8004770:	0003      	movs	r3, r0
 8004772:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004774:	e008      	b.n	8004788 <HAL_RCC_OscConfig+0x434>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004776:	f7fe fe4f 	bl	8003418 <HAL_GetTick>
 800477a:	0002      	movs	r2, r0
 800477c:	697b      	ldr	r3, [r7, #20]
 800477e:	1ad3      	subs	r3, r2, r3
 8004780:	2b02      	cmp	r3, #2
 8004782:	d901      	bls.n	8004788 <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 8004784:	2303      	movs	r3, #3
 8004786:	e1ae      	b.n	8004ae6 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004788:	4b94      	ldr	r3, [pc, #592]	; (80049dc <HAL_RCC_OscConfig+0x688>)
 800478a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800478c:	2202      	movs	r2, #2
 800478e:	4013      	ands	r3, r2
 8004790:	d1f1      	bne.n	8004776 <HAL_RCC_OscConfig+0x422>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	2204      	movs	r2, #4
 8004798:	4013      	ands	r3, r2
 800479a:	d100      	bne.n	800479e <HAL_RCC_OscConfig+0x44a>
 800479c:	e0ae      	b.n	80048fc <HAL_RCC_OscConfig+0x5a8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800479e:	2023      	movs	r0, #35	; 0x23
 80047a0:	183b      	adds	r3, r7, r0
 80047a2:	2200      	movs	r2, #0
 80047a4:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80047a6:	4b8d      	ldr	r3, [pc, #564]	; (80049dc <HAL_RCC_OscConfig+0x688>)
 80047a8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80047aa:	2380      	movs	r3, #128	; 0x80
 80047ac:	055b      	lsls	r3, r3, #21
 80047ae:	4013      	ands	r3, r2
 80047b0:	d109      	bne.n	80047c6 <HAL_RCC_OscConfig+0x472>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80047b2:	4b8a      	ldr	r3, [pc, #552]	; (80049dc <HAL_RCC_OscConfig+0x688>)
 80047b4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80047b6:	4b89      	ldr	r3, [pc, #548]	; (80049dc <HAL_RCC_OscConfig+0x688>)
 80047b8:	2180      	movs	r1, #128	; 0x80
 80047ba:	0549      	lsls	r1, r1, #21
 80047bc:	430a      	orrs	r2, r1
 80047be:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 80047c0:	183b      	adds	r3, r7, r0
 80047c2:	2201      	movs	r2, #1
 80047c4:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80047c6:	4b88      	ldr	r3, [pc, #544]	; (80049e8 <HAL_RCC_OscConfig+0x694>)
 80047c8:	681a      	ldr	r2, [r3, #0]
 80047ca:	2380      	movs	r3, #128	; 0x80
 80047cc:	005b      	lsls	r3, r3, #1
 80047ce:	4013      	ands	r3, r2
 80047d0:	d11a      	bne.n	8004808 <HAL_RCC_OscConfig+0x4b4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80047d2:	4b85      	ldr	r3, [pc, #532]	; (80049e8 <HAL_RCC_OscConfig+0x694>)
 80047d4:	681a      	ldr	r2, [r3, #0]
 80047d6:	4b84      	ldr	r3, [pc, #528]	; (80049e8 <HAL_RCC_OscConfig+0x694>)
 80047d8:	2180      	movs	r1, #128	; 0x80
 80047da:	0049      	lsls	r1, r1, #1
 80047dc:	430a      	orrs	r2, r1
 80047de:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80047e0:	f7fe fe1a 	bl	8003418 <HAL_GetTick>
 80047e4:	0003      	movs	r3, r0
 80047e6:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80047e8:	e008      	b.n	80047fc <HAL_RCC_OscConfig+0x4a8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80047ea:	f7fe fe15 	bl	8003418 <HAL_GetTick>
 80047ee:	0002      	movs	r2, r0
 80047f0:	697b      	ldr	r3, [r7, #20]
 80047f2:	1ad3      	subs	r3, r2, r3
 80047f4:	2b64      	cmp	r3, #100	; 0x64
 80047f6:	d901      	bls.n	80047fc <HAL_RCC_OscConfig+0x4a8>
        {
          return HAL_TIMEOUT;
 80047f8:	2303      	movs	r3, #3
 80047fa:	e174      	b.n	8004ae6 <HAL_RCC_OscConfig+0x792>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80047fc:	4b7a      	ldr	r3, [pc, #488]	; (80049e8 <HAL_RCC_OscConfig+0x694>)
 80047fe:	681a      	ldr	r2, [r3, #0]
 8004800:	2380      	movs	r3, #128	; 0x80
 8004802:	005b      	lsls	r3, r3, #1
 8004804:	4013      	ands	r3, r2
 8004806:	d0f0      	beq.n	80047ea <HAL_RCC_OscConfig+0x496>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	689a      	ldr	r2, [r3, #8]
 800480c:	2380      	movs	r3, #128	; 0x80
 800480e:	005b      	lsls	r3, r3, #1
 8004810:	429a      	cmp	r2, r3
 8004812:	d107      	bne.n	8004824 <HAL_RCC_OscConfig+0x4d0>
 8004814:	4b71      	ldr	r3, [pc, #452]	; (80049dc <HAL_RCC_OscConfig+0x688>)
 8004816:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004818:	4b70      	ldr	r3, [pc, #448]	; (80049dc <HAL_RCC_OscConfig+0x688>)
 800481a:	2180      	movs	r1, #128	; 0x80
 800481c:	0049      	lsls	r1, r1, #1
 800481e:	430a      	orrs	r2, r1
 8004820:	651a      	str	r2, [r3, #80]	; 0x50
 8004822:	e031      	b.n	8004888 <HAL_RCC_OscConfig+0x534>
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	689b      	ldr	r3, [r3, #8]
 8004828:	2b00      	cmp	r3, #0
 800482a:	d10c      	bne.n	8004846 <HAL_RCC_OscConfig+0x4f2>
 800482c:	4b6b      	ldr	r3, [pc, #428]	; (80049dc <HAL_RCC_OscConfig+0x688>)
 800482e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004830:	4b6a      	ldr	r3, [pc, #424]	; (80049dc <HAL_RCC_OscConfig+0x688>)
 8004832:	496c      	ldr	r1, [pc, #432]	; (80049e4 <HAL_RCC_OscConfig+0x690>)
 8004834:	400a      	ands	r2, r1
 8004836:	651a      	str	r2, [r3, #80]	; 0x50
 8004838:	4b68      	ldr	r3, [pc, #416]	; (80049dc <HAL_RCC_OscConfig+0x688>)
 800483a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800483c:	4b67      	ldr	r3, [pc, #412]	; (80049dc <HAL_RCC_OscConfig+0x688>)
 800483e:	496b      	ldr	r1, [pc, #428]	; (80049ec <HAL_RCC_OscConfig+0x698>)
 8004840:	400a      	ands	r2, r1
 8004842:	651a      	str	r2, [r3, #80]	; 0x50
 8004844:	e020      	b.n	8004888 <HAL_RCC_OscConfig+0x534>
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	689a      	ldr	r2, [r3, #8]
 800484a:	23a0      	movs	r3, #160	; 0xa0
 800484c:	00db      	lsls	r3, r3, #3
 800484e:	429a      	cmp	r2, r3
 8004850:	d10e      	bne.n	8004870 <HAL_RCC_OscConfig+0x51c>
 8004852:	4b62      	ldr	r3, [pc, #392]	; (80049dc <HAL_RCC_OscConfig+0x688>)
 8004854:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004856:	4b61      	ldr	r3, [pc, #388]	; (80049dc <HAL_RCC_OscConfig+0x688>)
 8004858:	2180      	movs	r1, #128	; 0x80
 800485a:	00c9      	lsls	r1, r1, #3
 800485c:	430a      	orrs	r2, r1
 800485e:	651a      	str	r2, [r3, #80]	; 0x50
 8004860:	4b5e      	ldr	r3, [pc, #376]	; (80049dc <HAL_RCC_OscConfig+0x688>)
 8004862:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004864:	4b5d      	ldr	r3, [pc, #372]	; (80049dc <HAL_RCC_OscConfig+0x688>)
 8004866:	2180      	movs	r1, #128	; 0x80
 8004868:	0049      	lsls	r1, r1, #1
 800486a:	430a      	orrs	r2, r1
 800486c:	651a      	str	r2, [r3, #80]	; 0x50
 800486e:	e00b      	b.n	8004888 <HAL_RCC_OscConfig+0x534>
 8004870:	4b5a      	ldr	r3, [pc, #360]	; (80049dc <HAL_RCC_OscConfig+0x688>)
 8004872:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004874:	4b59      	ldr	r3, [pc, #356]	; (80049dc <HAL_RCC_OscConfig+0x688>)
 8004876:	495b      	ldr	r1, [pc, #364]	; (80049e4 <HAL_RCC_OscConfig+0x690>)
 8004878:	400a      	ands	r2, r1
 800487a:	651a      	str	r2, [r3, #80]	; 0x50
 800487c:	4b57      	ldr	r3, [pc, #348]	; (80049dc <HAL_RCC_OscConfig+0x688>)
 800487e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004880:	4b56      	ldr	r3, [pc, #344]	; (80049dc <HAL_RCC_OscConfig+0x688>)
 8004882:	495a      	ldr	r1, [pc, #360]	; (80049ec <HAL_RCC_OscConfig+0x698>)
 8004884:	400a      	ands	r2, r1
 8004886:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	689b      	ldr	r3, [r3, #8]
 800488c:	2b00      	cmp	r3, #0
 800488e:	d015      	beq.n	80048bc <HAL_RCC_OscConfig+0x568>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004890:	f7fe fdc2 	bl	8003418 <HAL_GetTick>
 8004894:	0003      	movs	r3, r0
 8004896:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004898:	e009      	b.n	80048ae <HAL_RCC_OscConfig+0x55a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800489a:	f7fe fdbd 	bl	8003418 <HAL_GetTick>
 800489e:	0002      	movs	r2, r0
 80048a0:	697b      	ldr	r3, [r7, #20]
 80048a2:	1ad3      	subs	r3, r2, r3
 80048a4:	4a52      	ldr	r2, [pc, #328]	; (80049f0 <HAL_RCC_OscConfig+0x69c>)
 80048a6:	4293      	cmp	r3, r2
 80048a8:	d901      	bls.n	80048ae <HAL_RCC_OscConfig+0x55a>
        {
          return HAL_TIMEOUT;
 80048aa:	2303      	movs	r3, #3
 80048ac:	e11b      	b.n	8004ae6 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80048ae:	4b4b      	ldr	r3, [pc, #300]	; (80049dc <HAL_RCC_OscConfig+0x688>)
 80048b0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80048b2:	2380      	movs	r3, #128	; 0x80
 80048b4:	009b      	lsls	r3, r3, #2
 80048b6:	4013      	ands	r3, r2
 80048b8:	d0ef      	beq.n	800489a <HAL_RCC_OscConfig+0x546>
 80048ba:	e014      	b.n	80048e6 <HAL_RCC_OscConfig+0x592>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80048bc:	f7fe fdac 	bl	8003418 <HAL_GetTick>
 80048c0:	0003      	movs	r3, r0
 80048c2:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80048c4:	e009      	b.n	80048da <HAL_RCC_OscConfig+0x586>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80048c6:	f7fe fda7 	bl	8003418 <HAL_GetTick>
 80048ca:	0002      	movs	r2, r0
 80048cc:	697b      	ldr	r3, [r7, #20]
 80048ce:	1ad3      	subs	r3, r2, r3
 80048d0:	4a47      	ldr	r2, [pc, #284]	; (80049f0 <HAL_RCC_OscConfig+0x69c>)
 80048d2:	4293      	cmp	r3, r2
 80048d4:	d901      	bls.n	80048da <HAL_RCC_OscConfig+0x586>
        {
          return HAL_TIMEOUT;
 80048d6:	2303      	movs	r3, #3
 80048d8:	e105      	b.n	8004ae6 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80048da:	4b40      	ldr	r3, [pc, #256]	; (80049dc <HAL_RCC_OscConfig+0x688>)
 80048dc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80048de:	2380      	movs	r3, #128	; 0x80
 80048e0:	009b      	lsls	r3, r3, #2
 80048e2:	4013      	ands	r3, r2
 80048e4:	d1ef      	bne.n	80048c6 <HAL_RCC_OscConfig+0x572>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80048e6:	2323      	movs	r3, #35	; 0x23
 80048e8:	18fb      	adds	r3, r7, r3
 80048ea:	781b      	ldrb	r3, [r3, #0]
 80048ec:	2b01      	cmp	r3, #1
 80048ee:	d105      	bne.n	80048fc <HAL_RCC_OscConfig+0x5a8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80048f0:	4b3a      	ldr	r3, [pc, #232]	; (80049dc <HAL_RCC_OscConfig+0x688>)
 80048f2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80048f4:	4b39      	ldr	r3, [pc, #228]	; (80049dc <HAL_RCC_OscConfig+0x688>)
 80048f6:	493f      	ldr	r1, [pc, #252]	; (80049f4 <HAL_RCC_OscConfig+0x6a0>)
 80048f8:	400a      	ands	r2, r1
 80048fa:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	2220      	movs	r2, #32
 8004902:	4013      	ands	r3, r2
 8004904:	d049      	beq.n	800499a <HAL_RCC_OscConfig+0x646>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	699b      	ldr	r3, [r3, #24]
 800490a:	2b00      	cmp	r3, #0
 800490c:	d026      	beq.n	800495c <HAL_RCC_OscConfig+0x608>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 800490e:	4b33      	ldr	r3, [pc, #204]	; (80049dc <HAL_RCC_OscConfig+0x688>)
 8004910:	689a      	ldr	r2, [r3, #8]
 8004912:	4b32      	ldr	r3, [pc, #200]	; (80049dc <HAL_RCC_OscConfig+0x688>)
 8004914:	2101      	movs	r1, #1
 8004916:	430a      	orrs	r2, r1
 8004918:	609a      	str	r2, [r3, #8]
 800491a:	4b30      	ldr	r3, [pc, #192]	; (80049dc <HAL_RCC_OscConfig+0x688>)
 800491c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800491e:	4b2f      	ldr	r3, [pc, #188]	; (80049dc <HAL_RCC_OscConfig+0x688>)
 8004920:	2101      	movs	r1, #1
 8004922:	430a      	orrs	r2, r1
 8004924:	635a      	str	r2, [r3, #52]	; 0x34
 8004926:	4b34      	ldr	r3, [pc, #208]	; (80049f8 <HAL_RCC_OscConfig+0x6a4>)
 8004928:	6a1a      	ldr	r2, [r3, #32]
 800492a:	4b33      	ldr	r3, [pc, #204]	; (80049f8 <HAL_RCC_OscConfig+0x6a4>)
 800492c:	2180      	movs	r1, #128	; 0x80
 800492e:	0189      	lsls	r1, r1, #6
 8004930:	430a      	orrs	r2, r1
 8004932:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004934:	f7fe fd70 	bl	8003418 <HAL_GetTick>
 8004938:	0003      	movs	r3, r0
 800493a:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800493c:	e008      	b.n	8004950 <HAL_RCC_OscConfig+0x5fc>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800493e:	f7fe fd6b 	bl	8003418 <HAL_GetTick>
 8004942:	0002      	movs	r2, r0
 8004944:	697b      	ldr	r3, [r7, #20]
 8004946:	1ad3      	subs	r3, r2, r3
 8004948:	2b02      	cmp	r3, #2
 800494a:	d901      	bls.n	8004950 <HAL_RCC_OscConfig+0x5fc>
          {
            return HAL_TIMEOUT;
 800494c:	2303      	movs	r3, #3
 800494e:	e0ca      	b.n	8004ae6 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004950:	4b22      	ldr	r3, [pc, #136]	; (80049dc <HAL_RCC_OscConfig+0x688>)
 8004952:	689b      	ldr	r3, [r3, #8]
 8004954:	2202      	movs	r2, #2
 8004956:	4013      	ands	r3, r2
 8004958:	d0f1      	beq.n	800493e <HAL_RCC_OscConfig+0x5ea>
 800495a:	e01e      	b.n	800499a <HAL_RCC_OscConfig+0x646>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 800495c:	4b1f      	ldr	r3, [pc, #124]	; (80049dc <HAL_RCC_OscConfig+0x688>)
 800495e:	689a      	ldr	r2, [r3, #8]
 8004960:	4b1e      	ldr	r3, [pc, #120]	; (80049dc <HAL_RCC_OscConfig+0x688>)
 8004962:	2101      	movs	r1, #1
 8004964:	438a      	bics	r2, r1
 8004966:	609a      	str	r2, [r3, #8]
 8004968:	4b23      	ldr	r3, [pc, #140]	; (80049f8 <HAL_RCC_OscConfig+0x6a4>)
 800496a:	6a1a      	ldr	r2, [r3, #32]
 800496c:	4b22      	ldr	r3, [pc, #136]	; (80049f8 <HAL_RCC_OscConfig+0x6a4>)
 800496e:	4923      	ldr	r1, [pc, #140]	; (80049fc <HAL_RCC_OscConfig+0x6a8>)
 8004970:	400a      	ands	r2, r1
 8004972:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004974:	f7fe fd50 	bl	8003418 <HAL_GetTick>
 8004978:	0003      	movs	r3, r0
 800497a:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800497c:	e008      	b.n	8004990 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800497e:	f7fe fd4b 	bl	8003418 <HAL_GetTick>
 8004982:	0002      	movs	r2, r0
 8004984:	697b      	ldr	r3, [r7, #20]
 8004986:	1ad3      	subs	r3, r2, r3
 8004988:	2b02      	cmp	r3, #2
 800498a:	d901      	bls.n	8004990 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 800498c:	2303      	movs	r3, #3
 800498e:	e0aa      	b.n	8004ae6 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004990:	4b12      	ldr	r3, [pc, #72]	; (80049dc <HAL_RCC_OscConfig+0x688>)
 8004992:	689b      	ldr	r3, [r3, #8]
 8004994:	2202      	movs	r2, #2
 8004996:	4013      	ands	r3, r2
 8004998:	d1f1      	bne.n	800497e <HAL_RCC_OscConfig+0x62a>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d100      	bne.n	80049a4 <HAL_RCC_OscConfig+0x650>
 80049a2:	e09f      	b.n	8004ae4 <HAL_RCC_OscConfig+0x790>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80049a4:	69fb      	ldr	r3, [r7, #28]
 80049a6:	2b0c      	cmp	r3, #12
 80049a8:	d100      	bne.n	80049ac <HAL_RCC_OscConfig+0x658>
 80049aa:	e078      	b.n	8004a9e <HAL_RCC_OscConfig+0x74a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049b0:	2b02      	cmp	r3, #2
 80049b2:	d159      	bne.n	8004a68 <HAL_RCC_OscConfig+0x714>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80049b4:	4b09      	ldr	r3, [pc, #36]	; (80049dc <HAL_RCC_OscConfig+0x688>)
 80049b6:	681a      	ldr	r2, [r3, #0]
 80049b8:	4b08      	ldr	r3, [pc, #32]	; (80049dc <HAL_RCC_OscConfig+0x688>)
 80049ba:	4911      	ldr	r1, [pc, #68]	; (8004a00 <HAL_RCC_OscConfig+0x6ac>)
 80049bc:	400a      	ands	r2, r1
 80049be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049c0:	f7fe fd2a 	bl	8003418 <HAL_GetTick>
 80049c4:	0003      	movs	r3, r0
 80049c6:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80049c8:	e01c      	b.n	8004a04 <HAL_RCC_OscConfig+0x6b0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80049ca:	f7fe fd25 	bl	8003418 <HAL_GetTick>
 80049ce:	0002      	movs	r2, r0
 80049d0:	697b      	ldr	r3, [r7, #20]
 80049d2:	1ad3      	subs	r3, r2, r3
 80049d4:	2b02      	cmp	r3, #2
 80049d6:	d915      	bls.n	8004a04 <HAL_RCC_OscConfig+0x6b0>
          {
            return HAL_TIMEOUT;
 80049d8:	2303      	movs	r3, #3
 80049da:	e084      	b.n	8004ae6 <HAL_RCC_OscConfig+0x792>
 80049dc:	40021000 	.word	0x40021000
 80049e0:	ffff1fff 	.word	0xffff1fff
 80049e4:	fffffeff 	.word	0xfffffeff
 80049e8:	40007000 	.word	0x40007000
 80049ec:	fffffbff 	.word	0xfffffbff
 80049f0:	00001388 	.word	0x00001388
 80049f4:	efffffff 	.word	0xefffffff
 80049f8:	40010000 	.word	0x40010000
 80049fc:	ffffdfff 	.word	0xffffdfff
 8004a00:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8004a04:	4b3a      	ldr	r3, [pc, #232]	; (8004af0 <HAL_RCC_OscConfig+0x79c>)
 8004a06:	681a      	ldr	r2, [r3, #0]
 8004a08:	2380      	movs	r3, #128	; 0x80
 8004a0a:	049b      	lsls	r3, r3, #18
 8004a0c:	4013      	ands	r3, r2
 8004a0e:	d1dc      	bne.n	80049ca <HAL_RCC_OscConfig+0x676>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004a10:	4b37      	ldr	r3, [pc, #220]	; (8004af0 <HAL_RCC_OscConfig+0x79c>)
 8004a12:	68db      	ldr	r3, [r3, #12]
 8004a14:	4a37      	ldr	r2, [pc, #220]	; (8004af4 <HAL_RCC_OscConfig+0x7a0>)
 8004a16:	4013      	ands	r3, r2
 8004a18:	0019      	movs	r1, r3
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a22:	431a      	orrs	r2, r3
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a28:	431a      	orrs	r2, r3
 8004a2a:	4b31      	ldr	r3, [pc, #196]	; (8004af0 <HAL_RCC_OscConfig+0x79c>)
 8004a2c:	430a      	orrs	r2, r1
 8004a2e:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004a30:	4b2f      	ldr	r3, [pc, #188]	; (8004af0 <HAL_RCC_OscConfig+0x79c>)
 8004a32:	681a      	ldr	r2, [r3, #0]
 8004a34:	4b2e      	ldr	r3, [pc, #184]	; (8004af0 <HAL_RCC_OscConfig+0x79c>)
 8004a36:	2180      	movs	r1, #128	; 0x80
 8004a38:	0449      	lsls	r1, r1, #17
 8004a3a:	430a      	orrs	r2, r1
 8004a3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a3e:	f7fe fceb 	bl	8003418 <HAL_GetTick>
 8004a42:	0003      	movs	r3, r0
 8004a44:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8004a46:	e008      	b.n	8004a5a <HAL_RCC_OscConfig+0x706>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004a48:	f7fe fce6 	bl	8003418 <HAL_GetTick>
 8004a4c:	0002      	movs	r2, r0
 8004a4e:	697b      	ldr	r3, [r7, #20]
 8004a50:	1ad3      	subs	r3, r2, r3
 8004a52:	2b02      	cmp	r3, #2
 8004a54:	d901      	bls.n	8004a5a <HAL_RCC_OscConfig+0x706>
          {
            return HAL_TIMEOUT;
 8004a56:	2303      	movs	r3, #3
 8004a58:	e045      	b.n	8004ae6 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8004a5a:	4b25      	ldr	r3, [pc, #148]	; (8004af0 <HAL_RCC_OscConfig+0x79c>)
 8004a5c:	681a      	ldr	r2, [r3, #0]
 8004a5e:	2380      	movs	r3, #128	; 0x80
 8004a60:	049b      	lsls	r3, r3, #18
 8004a62:	4013      	ands	r3, r2
 8004a64:	d0f0      	beq.n	8004a48 <HAL_RCC_OscConfig+0x6f4>
 8004a66:	e03d      	b.n	8004ae4 <HAL_RCC_OscConfig+0x790>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a68:	4b21      	ldr	r3, [pc, #132]	; (8004af0 <HAL_RCC_OscConfig+0x79c>)
 8004a6a:	681a      	ldr	r2, [r3, #0]
 8004a6c:	4b20      	ldr	r3, [pc, #128]	; (8004af0 <HAL_RCC_OscConfig+0x79c>)
 8004a6e:	4922      	ldr	r1, [pc, #136]	; (8004af8 <HAL_RCC_OscConfig+0x7a4>)
 8004a70:	400a      	ands	r2, r1
 8004a72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a74:	f7fe fcd0 	bl	8003418 <HAL_GetTick>
 8004a78:	0003      	movs	r3, r0
 8004a7a:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8004a7c:	e008      	b.n	8004a90 <HAL_RCC_OscConfig+0x73c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004a7e:	f7fe fccb 	bl	8003418 <HAL_GetTick>
 8004a82:	0002      	movs	r2, r0
 8004a84:	697b      	ldr	r3, [r7, #20]
 8004a86:	1ad3      	subs	r3, r2, r3
 8004a88:	2b02      	cmp	r3, #2
 8004a8a:	d901      	bls.n	8004a90 <HAL_RCC_OscConfig+0x73c>
          {
            return HAL_TIMEOUT;
 8004a8c:	2303      	movs	r3, #3
 8004a8e:	e02a      	b.n	8004ae6 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8004a90:	4b17      	ldr	r3, [pc, #92]	; (8004af0 <HAL_RCC_OscConfig+0x79c>)
 8004a92:	681a      	ldr	r2, [r3, #0]
 8004a94:	2380      	movs	r3, #128	; 0x80
 8004a96:	049b      	lsls	r3, r3, #18
 8004a98:	4013      	ands	r3, r2
 8004a9a:	d1f0      	bne.n	8004a7e <HAL_RCC_OscConfig+0x72a>
 8004a9c:	e022      	b.n	8004ae4 <HAL_RCC_OscConfig+0x790>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004aa2:	2b01      	cmp	r3, #1
 8004aa4:	d101      	bne.n	8004aaa <HAL_RCC_OscConfig+0x756>
      {
        return HAL_ERROR;
 8004aa6:	2301      	movs	r3, #1
 8004aa8:	e01d      	b.n	8004ae6 <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004aaa:	4b11      	ldr	r3, [pc, #68]	; (8004af0 <HAL_RCC_OscConfig+0x79c>)
 8004aac:	68db      	ldr	r3, [r3, #12]
 8004aae:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ab0:	69ba      	ldr	r2, [r7, #24]
 8004ab2:	2380      	movs	r3, #128	; 0x80
 8004ab4:	025b      	lsls	r3, r3, #9
 8004ab6:	401a      	ands	r2, r3
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004abc:	429a      	cmp	r2, r3
 8004abe:	d10f      	bne.n	8004ae0 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8004ac0:	69ba      	ldr	r2, [r7, #24]
 8004ac2:	23f0      	movs	r3, #240	; 0xf0
 8004ac4:	039b      	lsls	r3, r3, #14
 8004ac6:	401a      	ands	r2, r3
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004acc:	429a      	cmp	r2, r3
 8004ace:	d107      	bne.n	8004ae0 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8004ad0:	69ba      	ldr	r2, [r7, #24]
 8004ad2:	23c0      	movs	r3, #192	; 0xc0
 8004ad4:	041b      	lsls	r3, r3, #16
 8004ad6:	401a      	ands	r2, r3
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8004adc:	429a      	cmp	r2, r3
 8004ade:	d001      	beq.n	8004ae4 <HAL_RCC_OscConfig+0x790>
        {
          return HAL_ERROR;
 8004ae0:	2301      	movs	r3, #1
 8004ae2:	e000      	b.n	8004ae6 <HAL_RCC_OscConfig+0x792>
        }
      }
    }
  }
  return HAL_OK;
 8004ae4:	2300      	movs	r3, #0
}
 8004ae6:	0018      	movs	r0, r3
 8004ae8:	46bd      	mov	sp, r7
 8004aea:	b00a      	add	sp, #40	; 0x28
 8004aec:	bdb0      	pop	{r4, r5, r7, pc}
 8004aee:	46c0      	nop			; (mov r8, r8)
 8004af0:	40021000 	.word	0x40021000
 8004af4:	ff02ffff 	.word	0xff02ffff
 8004af8:	feffffff 	.word	0xfeffffff

08004afc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004afc:	b5b0      	push	{r4, r5, r7, lr}
 8004afe:	b084      	sub	sp, #16
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	6078      	str	r0, [r7, #4]
 8004b04:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d101      	bne.n	8004b10 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004b0c:	2301      	movs	r3, #1
 8004b0e:	e128      	b.n	8004d62 <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004b10:	4b96      	ldr	r3, [pc, #600]	; (8004d6c <HAL_RCC_ClockConfig+0x270>)
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	2201      	movs	r2, #1
 8004b16:	4013      	ands	r3, r2
 8004b18:	683a      	ldr	r2, [r7, #0]
 8004b1a:	429a      	cmp	r2, r3
 8004b1c:	d91e      	bls.n	8004b5c <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b1e:	4b93      	ldr	r3, [pc, #588]	; (8004d6c <HAL_RCC_ClockConfig+0x270>)
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	2201      	movs	r2, #1
 8004b24:	4393      	bics	r3, r2
 8004b26:	0019      	movs	r1, r3
 8004b28:	4b90      	ldr	r3, [pc, #576]	; (8004d6c <HAL_RCC_ClockConfig+0x270>)
 8004b2a:	683a      	ldr	r2, [r7, #0]
 8004b2c:	430a      	orrs	r2, r1
 8004b2e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004b30:	f7fe fc72 	bl	8003418 <HAL_GetTick>
 8004b34:	0003      	movs	r3, r0
 8004b36:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b38:	e009      	b.n	8004b4e <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004b3a:	f7fe fc6d 	bl	8003418 <HAL_GetTick>
 8004b3e:	0002      	movs	r2, r0
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	1ad3      	subs	r3, r2, r3
 8004b44:	4a8a      	ldr	r2, [pc, #552]	; (8004d70 <HAL_RCC_ClockConfig+0x274>)
 8004b46:	4293      	cmp	r3, r2
 8004b48:	d901      	bls.n	8004b4e <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8004b4a:	2303      	movs	r3, #3
 8004b4c:	e109      	b.n	8004d62 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b4e:	4b87      	ldr	r3, [pc, #540]	; (8004d6c <HAL_RCC_ClockConfig+0x270>)
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	2201      	movs	r2, #1
 8004b54:	4013      	ands	r3, r2
 8004b56:	683a      	ldr	r2, [r7, #0]
 8004b58:	429a      	cmp	r2, r3
 8004b5a:	d1ee      	bne.n	8004b3a <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	2202      	movs	r2, #2
 8004b62:	4013      	ands	r3, r2
 8004b64:	d009      	beq.n	8004b7a <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004b66:	4b83      	ldr	r3, [pc, #524]	; (8004d74 <HAL_RCC_ClockConfig+0x278>)
 8004b68:	68db      	ldr	r3, [r3, #12]
 8004b6a:	22f0      	movs	r2, #240	; 0xf0
 8004b6c:	4393      	bics	r3, r2
 8004b6e:	0019      	movs	r1, r3
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	689a      	ldr	r2, [r3, #8]
 8004b74:	4b7f      	ldr	r3, [pc, #508]	; (8004d74 <HAL_RCC_ClockConfig+0x278>)
 8004b76:	430a      	orrs	r2, r1
 8004b78:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	2201      	movs	r2, #1
 8004b80:	4013      	ands	r3, r2
 8004b82:	d100      	bne.n	8004b86 <HAL_RCC_ClockConfig+0x8a>
 8004b84:	e089      	b.n	8004c9a <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	685b      	ldr	r3, [r3, #4]
 8004b8a:	2b02      	cmp	r3, #2
 8004b8c:	d107      	bne.n	8004b9e <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004b8e:	4b79      	ldr	r3, [pc, #484]	; (8004d74 <HAL_RCC_ClockConfig+0x278>)
 8004b90:	681a      	ldr	r2, [r3, #0]
 8004b92:	2380      	movs	r3, #128	; 0x80
 8004b94:	029b      	lsls	r3, r3, #10
 8004b96:	4013      	ands	r3, r2
 8004b98:	d120      	bne.n	8004bdc <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8004b9a:	2301      	movs	r3, #1
 8004b9c:	e0e1      	b.n	8004d62 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	685b      	ldr	r3, [r3, #4]
 8004ba2:	2b03      	cmp	r3, #3
 8004ba4:	d107      	bne.n	8004bb6 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004ba6:	4b73      	ldr	r3, [pc, #460]	; (8004d74 <HAL_RCC_ClockConfig+0x278>)
 8004ba8:	681a      	ldr	r2, [r3, #0]
 8004baa:	2380      	movs	r3, #128	; 0x80
 8004bac:	049b      	lsls	r3, r3, #18
 8004bae:	4013      	ands	r3, r2
 8004bb0:	d114      	bne.n	8004bdc <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8004bb2:	2301      	movs	r3, #1
 8004bb4:	e0d5      	b.n	8004d62 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	685b      	ldr	r3, [r3, #4]
 8004bba:	2b01      	cmp	r3, #1
 8004bbc:	d106      	bne.n	8004bcc <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004bbe:	4b6d      	ldr	r3, [pc, #436]	; (8004d74 <HAL_RCC_ClockConfig+0x278>)
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	2204      	movs	r2, #4
 8004bc4:	4013      	ands	r3, r2
 8004bc6:	d109      	bne.n	8004bdc <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8004bc8:	2301      	movs	r3, #1
 8004bca:	e0ca      	b.n	8004d62 <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8004bcc:	4b69      	ldr	r3, [pc, #420]	; (8004d74 <HAL_RCC_ClockConfig+0x278>)
 8004bce:	681a      	ldr	r2, [r3, #0]
 8004bd0:	2380      	movs	r3, #128	; 0x80
 8004bd2:	009b      	lsls	r3, r3, #2
 8004bd4:	4013      	ands	r3, r2
 8004bd6:	d101      	bne.n	8004bdc <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8004bd8:	2301      	movs	r3, #1
 8004bda:	e0c2      	b.n	8004d62 <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004bdc:	4b65      	ldr	r3, [pc, #404]	; (8004d74 <HAL_RCC_ClockConfig+0x278>)
 8004bde:	68db      	ldr	r3, [r3, #12]
 8004be0:	2203      	movs	r2, #3
 8004be2:	4393      	bics	r3, r2
 8004be4:	0019      	movs	r1, r3
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	685a      	ldr	r2, [r3, #4]
 8004bea:	4b62      	ldr	r3, [pc, #392]	; (8004d74 <HAL_RCC_ClockConfig+0x278>)
 8004bec:	430a      	orrs	r2, r1
 8004bee:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004bf0:	f7fe fc12 	bl	8003418 <HAL_GetTick>
 8004bf4:	0003      	movs	r3, r0
 8004bf6:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	685b      	ldr	r3, [r3, #4]
 8004bfc:	2b02      	cmp	r3, #2
 8004bfe:	d111      	bne.n	8004c24 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8004c00:	e009      	b.n	8004c16 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004c02:	f7fe fc09 	bl	8003418 <HAL_GetTick>
 8004c06:	0002      	movs	r2, r0
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	1ad3      	subs	r3, r2, r3
 8004c0c:	4a58      	ldr	r2, [pc, #352]	; (8004d70 <HAL_RCC_ClockConfig+0x274>)
 8004c0e:	4293      	cmp	r3, r2
 8004c10:	d901      	bls.n	8004c16 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8004c12:	2303      	movs	r3, #3
 8004c14:	e0a5      	b.n	8004d62 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8004c16:	4b57      	ldr	r3, [pc, #348]	; (8004d74 <HAL_RCC_ClockConfig+0x278>)
 8004c18:	68db      	ldr	r3, [r3, #12]
 8004c1a:	220c      	movs	r2, #12
 8004c1c:	4013      	ands	r3, r2
 8004c1e:	2b08      	cmp	r3, #8
 8004c20:	d1ef      	bne.n	8004c02 <HAL_RCC_ClockConfig+0x106>
 8004c22:	e03a      	b.n	8004c9a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	685b      	ldr	r3, [r3, #4]
 8004c28:	2b03      	cmp	r3, #3
 8004c2a:	d111      	bne.n	8004c50 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004c2c:	e009      	b.n	8004c42 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004c2e:	f7fe fbf3 	bl	8003418 <HAL_GetTick>
 8004c32:	0002      	movs	r2, r0
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	1ad3      	subs	r3, r2, r3
 8004c38:	4a4d      	ldr	r2, [pc, #308]	; (8004d70 <HAL_RCC_ClockConfig+0x274>)
 8004c3a:	4293      	cmp	r3, r2
 8004c3c:	d901      	bls.n	8004c42 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8004c3e:	2303      	movs	r3, #3
 8004c40:	e08f      	b.n	8004d62 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004c42:	4b4c      	ldr	r3, [pc, #304]	; (8004d74 <HAL_RCC_ClockConfig+0x278>)
 8004c44:	68db      	ldr	r3, [r3, #12]
 8004c46:	220c      	movs	r2, #12
 8004c48:	4013      	ands	r3, r2
 8004c4a:	2b0c      	cmp	r3, #12
 8004c4c:	d1ef      	bne.n	8004c2e <HAL_RCC_ClockConfig+0x132>
 8004c4e:	e024      	b.n	8004c9a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	685b      	ldr	r3, [r3, #4]
 8004c54:	2b01      	cmp	r3, #1
 8004c56:	d11b      	bne.n	8004c90 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8004c58:	e009      	b.n	8004c6e <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004c5a:	f7fe fbdd 	bl	8003418 <HAL_GetTick>
 8004c5e:	0002      	movs	r2, r0
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	1ad3      	subs	r3, r2, r3
 8004c64:	4a42      	ldr	r2, [pc, #264]	; (8004d70 <HAL_RCC_ClockConfig+0x274>)
 8004c66:	4293      	cmp	r3, r2
 8004c68:	d901      	bls.n	8004c6e <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8004c6a:	2303      	movs	r3, #3
 8004c6c:	e079      	b.n	8004d62 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8004c6e:	4b41      	ldr	r3, [pc, #260]	; (8004d74 <HAL_RCC_ClockConfig+0x278>)
 8004c70:	68db      	ldr	r3, [r3, #12]
 8004c72:	220c      	movs	r2, #12
 8004c74:	4013      	ands	r3, r2
 8004c76:	2b04      	cmp	r3, #4
 8004c78:	d1ef      	bne.n	8004c5a <HAL_RCC_ClockConfig+0x15e>
 8004c7a:	e00e      	b.n	8004c9a <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004c7c:	f7fe fbcc 	bl	8003418 <HAL_GetTick>
 8004c80:	0002      	movs	r2, r0
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	1ad3      	subs	r3, r2, r3
 8004c86:	4a3a      	ldr	r2, [pc, #232]	; (8004d70 <HAL_RCC_ClockConfig+0x274>)
 8004c88:	4293      	cmp	r3, r2
 8004c8a:	d901      	bls.n	8004c90 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8004c8c:	2303      	movs	r3, #3
 8004c8e:	e068      	b.n	8004d62 <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8004c90:	4b38      	ldr	r3, [pc, #224]	; (8004d74 <HAL_RCC_ClockConfig+0x278>)
 8004c92:	68db      	ldr	r3, [r3, #12]
 8004c94:	220c      	movs	r2, #12
 8004c96:	4013      	ands	r3, r2
 8004c98:	d1f0      	bne.n	8004c7c <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004c9a:	4b34      	ldr	r3, [pc, #208]	; (8004d6c <HAL_RCC_ClockConfig+0x270>)
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	2201      	movs	r2, #1
 8004ca0:	4013      	ands	r3, r2
 8004ca2:	683a      	ldr	r2, [r7, #0]
 8004ca4:	429a      	cmp	r2, r3
 8004ca6:	d21e      	bcs.n	8004ce6 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ca8:	4b30      	ldr	r3, [pc, #192]	; (8004d6c <HAL_RCC_ClockConfig+0x270>)
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	2201      	movs	r2, #1
 8004cae:	4393      	bics	r3, r2
 8004cb0:	0019      	movs	r1, r3
 8004cb2:	4b2e      	ldr	r3, [pc, #184]	; (8004d6c <HAL_RCC_ClockConfig+0x270>)
 8004cb4:	683a      	ldr	r2, [r7, #0]
 8004cb6:	430a      	orrs	r2, r1
 8004cb8:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004cba:	f7fe fbad 	bl	8003418 <HAL_GetTick>
 8004cbe:	0003      	movs	r3, r0
 8004cc0:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004cc2:	e009      	b.n	8004cd8 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004cc4:	f7fe fba8 	bl	8003418 <HAL_GetTick>
 8004cc8:	0002      	movs	r2, r0
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	1ad3      	subs	r3, r2, r3
 8004cce:	4a28      	ldr	r2, [pc, #160]	; (8004d70 <HAL_RCC_ClockConfig+0x274>)
 8004cd0:	4293      	cmp	r3, r2
 8004cd2:	d901      	bls.n	8004cd8 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8004cd4:	2303      	movs	r3, #3
 8004cd6:	e044      	b.n	8004d62 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004cd8:	4b24      	ldr	r3, [pc, #144]	; (8004d6c <HAL_RCC_ClockConfig+0x270>)
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	2201      	movs	r2, #1
 8004cde:	4013      	ands	r3, r2
 8004ce0:	683a      	ldr	r2, [r7, #0]
 8004ce2:	429a      	cmp	r2, r3
 8004ce4:	d1ee      	bne.n	8004cc4 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	2204      	movs	r2, #4
 8004cec:	4013      	ands	r3, r2
 8004cee:	d009      	beq.n	8004d04 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004cf0:	4b20      	ldr	r3, [pc, #128]	; (8004d74 <HAL_RCC_ClockConfig+0x278>)
 8004cf2:	68db      	ldr	r3, [r3, #12]
 8004cf4:	4a20      	ldr	r2, [pc, #128]	; (8004d78 <HAL_RCC_ClockConfig+0x27c>)
 8004cf6:	4013      	ands	r3, r2
 8004cf8:	0019      	movs	r1, r3
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	68da      	ldr	r2, [r3, #12]
 8004cfe:	4b1d      	ldr	r3, [pc, #116]	; (8004d74 <HAL_RCC_ClockConfig+0x278>)
 8004d00:	430a      	orrs	r2, r1
 8004d02:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	2208      	movs	r2, #8
 8004d0a:	4013      	ands	r3, r2
 8004d0c:	d00a      	beq.n	8004d24 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004d0e:	4b19      	ldr	r3, [pc, #100]	; (8004d74 <HAL_RCC_ClockConfig+0x278>)
 8004d10:	68db      	ldr	r3, [r3, #12]
 8004d12:	4a1a      	ldr	r2, [pc, #104]	; (8004d7c <HAL_RCC_ClockConfig+0x280>)
 8004d14:	4013      	ands	r3, r2
 8004d16:	0019      	movs	r1, r3
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	691b      	ldr	r3, [r3, #16]
 8004d1c:	00da      	lsls	r2, r3, #3
 8004d1e:	4b15      	ldr	r3, [pc, #84]	; (8004d74 <HAL_RCC_ClockConfig+0x278>)
 8004d20:	430a      	orrs	r2, r1
 8004d22:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004d24:	f000 f832 	bl	8004d8c <HAL_RCC_GetSysClockFreq>
 8004d28:	0001      	movs	r1, r0
 8004d2a:	4b12      	ldr	r3, [pc, #72]	; (8004d74 <HAL_RCC_ClockConfig+0x278>)
 8004d2c:	68db      	ldr	r3, [r3, #12]
 8004d2e:	091b      	lsrs	r3, r3, #4
 8004d30:	220f      	movs	r2, #15
 8004d32:	4013      	ands	r3, r2
 8004d34:	4a12      	ldr	r2, [pc, #72]	; (8004d80 <HAL_RCC_ClockConfig+0x284>)
 8004d36:	5cd3      	ldrb	r3, [r2, r3]
 8004d38:	000a      	movs	r2, r1
 8004d3a:	40da      	lsrs	r2, r3
 8004d3c:	4b11      	ldr	r3, [pc, #68]	; (8004d84 <HAL_RCC_ClockConfig+0x288>)
 8004d3e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004d40:	4b11      	ldr	r3, [pc, #68]	; (8004d88 <HAL_RCC_ClockConfig+0x28c>)
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	250b      	movs	r5, #11
 8004d46:	197c      	adds	r4, r7, r5
 8004d48:	0018      	movs	r0, r3
 8004d4a:	f7fe fb1f 	bl	800338c <HAL_InitTick>
 8004d4e:	0003      	movs	r3, r0
 8004d50:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8004d52:	197b      	adds	r3, r7, r5
 8004d54:	781b      	ldrb	r3, [r3, #0]
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d002      	beq.n	8004d60 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8004d5a:	197b      	adds	r3, r7, r5
 8004d5c:	781b      	ldrb	r3, [r3, #0]
 8004d5e:	e000      	b.n	8004d62 <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8004d60:	2300      	movs	r3, #0
}
 8004d62:	0018      	movs	r0, r3
 8004d64:	46bd      	mov	sp, r7
 8004d66:	b004      	add	sp, #16
 8004d68:	bdb0      	pop	{r4, r5, r7, pc}
 8004d6a:	46c0      	nop			; (mov r8, r8)
 8004d6c:	40022000 	.word	0x40022000
 8004d70:	00001388 	.word	0x00001388
 8004d74:	40021000 	.word	0x40021000
 8004d78:	fffff8ff 	.word	0xfffff8ff
 8004d7c:	ffffc7ff 	.word	0xffffc7ff
 8004d80:	08007fbc 	.word	0x08007fbc
 8004d84:	20000000 	.word	0x20000000
 8004d88:	20000004 	.word	0x20000004

08004d8c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004d8c:	b5b0      	push	{r4, r5, r7, lr}
 8004d8e:	b08e      	sub	sp, #56	; 0x38
 8004d90:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8004d92:	4b4c      	ldr	r3, [pc, #304]	; (8004ec4 <HAL_RCC_GetSysClockFreq+0x138>)
 8004d94:	68db      	ldr	r3, [r3, #12]
 8004d96:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004d98:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004d9a:	230c      	movs	r3, #12
 8004d9c:	4013      	ands	r3, r2
 8004d9e:	2b0c      	cmp	r3, #12
 8004da0:	d014      	beq.n	8004dcc <HAL_RCC_GetSysClockFreq+0x40>
 8004da2:	d900      	bls.n	8004da6 <HAL_RCC_GetSysClockFreq+0x1a>
 8004da4:	e07b      	b.n	8004e9e <HAL_RCC_GetSysClockFreq+0x112>
 8004da6:	2b04      	cmp	r3, #4
 8004da8:	d002      	beq.n	8004db0 <HAL_RCC_GetSysClockFreq+0x24>
 8004daa:	2b08      	cmp	r3, #8
 8004dac:	d00b      	beq.n	8004dc6 <HAL_RCC_GetSysClockFreq+0x3a>
 8004dae:	e076      	b.n	8004e9e <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8004db0:	4b44      	ldr	r3, [pc, #272]	; (8004ec4 <HAL_RCC_GetSysClockFreq+0x138>)
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	2210      	movs	r2, #16
 8004db6:	4013      	ands	r3, r2
 8004db8:	d002      	beq.n	8004dc0 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8004dba:	4b43      	ldr	r3, [pc, #268]	; (8004ec8 <HAL_RCC_GetSysClockFreq+0x13c>)
 8004dbc:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8004dbe:	e07c      	b.n	8004eba <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8004dc0:	4b42      	ldr	r3, [pc, #264]	; (8004ecc <HAL_RCC_GetSysClockFreq+0x140>)
 8004dc2:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004dc4:	e079      	b.n	8004eba <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004dc6:	4b42      	ldr	r3, [pc, #264]	; (8004ed0 <HAL_RCC_GetSysClockFreq+0x144>)
 8004dc8:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004dca:	e076      	b.n	8004eba <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8004dcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004dce:	0c9a      	lsrs	r2, r3, #18
 8004dd0:	230f      	movs	r3, #15
 8004dd2:	401a      	ands	r2, r3
 8004dd4:	4b3f      	ldr	r3, [pc, #252]	; (8004ed4 <HAL_RCC_GetSysClockFreq+0x148>)
 8004dd6:	5c9b      	ldrb	r3, [r3, r2]
 8004dd8:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8004dda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ddc:	0d9a      	lsrs	r2, r3, #22
 8004dde:	2303      	movs	r3, #3
 8004de0:	4013      	ands	r3, r2
 8004de2:	3301      	adds	r3, #1
 8004de4:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004de6:	4b37      	ldr	r3, [pc, #220]	; (8004ec4 <HAL_RCC_GetSysClockFreq+0x138>)
 8004de8:	68da      	ldr	r2, [r3, #12]
 8004dea:	2380      	movs	r3, #128	; 0x80
 8004dec:	025b      	lsls	r3, r3, #9
 8004dee:	4013      	ands	r3, r2
 8004df0:	d01a      	beq.n	8004e28 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8004df2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004df4:	61bb      	str	r3, [r7, #24]
 8004df6:	2300      	movs	r3, #0
 8004df8:	61fb      	str	r3, [r7, #28]
 8004dfa:	4a35      	ldr	r2, [pc, #212]	; (8004ed0 <HAL_RCC_GetSysClockFreq+0x144>)
 8004dfc:	2300      	movs	r3, #0
 8004dfe:	69b8      	ldr	r0, [r7, #24]
 8004e00:	69f9      	ldr	r1, [r7, #28]
 8004e02:	f7fb fb21 	bl	8000448 <__aeabi_lmul>
 8004e06:	0002      	movs	r2, r0
 8004e08:	000b      	movs	r3, r1
 8004e0a:	0010      	movs	r0, r2
 8004e0c:	0019      	movs	r1, r3
 8004e0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e10:	613b      	str	r3, [r7, #16]
 8004e12:	2300      	movs	r3, #0
 8004e14:	617b      	str	r3, [r7, #20]
 8004e16:	693a      	ldr	r2, [r7, #16]
 8004e18:	697b      	ldr	r3, [r7, #20]
 8004e1a:	f7fb faf5 	bl	8000408 <__aeabi_uldivmod>
 8004e1e:	0002      	movs	r2, r0
 8004e20:	000b      	movs	r3, r1
 8004e22:	0013      	movs	r3, r2
 8004e24:	637b      	str	r3, [r7, #52]	; 0x34
 8004e26:	e037      	b.n	8004e98 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8004e28:	4b26      	ldr	r3, [pc, #152]	; (8004ec4 <HAL_RCC_GetSysClockFreq+0x138>)
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	2210      	movs	r2, #16
 8004e2e:	4013      	ands	r3, r2
 8004e30:	d01a      	beq.n	8004e68 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8004e32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e34:	60bb      	str	r3, [r7, #8]
 8004e36:	2300      	movs	r3, #0
 8004e38:	60fb      	str	r3, [r7, #12]
 8004e3a:	4a23      	ldr	r2, [pc, #140]	; (8004ec8 <HAL_RCC_GetSysClockFreq+0x13c>)
 8004e3c:	2300      	movs	r3, #0
 8004e3e:	68b8      	ldr	r0, [r7, #8]
 8004e40:	68f9      	ldr	r1, [r7, #12]
 8004e42:	f7fb fb01 	bl	8000448 <__aeabi_lmul>
 8004e46:	0002      	movs	r2, r0
 8004e48:	000b      	movs	r3, r1
 8004e4a:	0010      	movs	r0, r2
 8004e4c:	0019      	movs	r1, r3
 8004e4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e50:	603b      	str	r3, [r7, #0]
 8004e52:	2300      	movs	r3, #0
 8004e54:	607b      	str	r3, [r7, #4]
 8004e56:	683a      	ldr	r2, [r7, #0]
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	f7fb fad5 	bl	8000408 <__aeabi_uldivmod>
 8004e5e:	0002      	movs	r2, r0
 8004e60:	000b      	movs	r3, r1
 8004e62:	0013      	movs	r3, r2
 8004e64:	637b      	str	r3, [r7, #52]	; 0x34
 8004e66:	e017      	b.n	8004e98 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8004e68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e6a:	0018      	movs	r0, r3
 8004e6c:	2300      	movs	r3, #0
 8004e6e:	0019      	movs	r1, r3
 8004e70:	4a16      	ldr	r2, [pc, #88]	; (8004ecc <HAL_RCC_GetSysClockFreq+0x140>)
 8004e72:	2300      	movs	r3, #0
 8004e74:	f7fb fae8 	bl	8000448 <__aeabi_lmul>
 8004e78:	0002      	movs	r2, r0
 8004e7a:	000b      	movs	r3, r1
 8004e7c:	0010      	movs	r0, r2
 8004e7e:	0019      	movs	r1, r3
 8004e80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e82:	001c      	movs	r4, r3
 8004e84:	2300      	movs	r3, #0
 8004e86:	001d      	movs	r5, r3
 8004e88:	0022      	movs	r2, r4
 8004e8a:	002b      	movs	r3, r5
 8004e8c:	f7fb fabc 	bl	8000408 <__aeabi_uldivmod>
 8004e90:	0002      	movs	r2, r0
 8004e92:	000b      	movs	r3, r1
 8004e94:	0013      	movs	r3, r2
 8004e96:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 8004e98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e9a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004e9c:	e00d      	b.n	8004eba <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8004e9e:	4b09      	ldr	r3, [pc, #36]	; (8004ec4 <HAL_RCC_GetSysClockFreq+0x138>)
 8004ea0:	685b      	ldr	r3, [r3, #4]
 8004ea2:	0b5b      	lsrs	r3, r3, #13
 8004ea4:	2207      	movs	r2, #7
 8004ea6:	4013      	ands	r3, r2
 8004ea8:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8004eaa:	6a3b      	ldr	r3, [r7, #32]
 8004eac:	3301      	adds	r3, #1
 8004eae:	2280      	movs	r2, #128	; 0x80
 8004eb0:	0212      	lsls	r2, r2, #8
 8004eb2:	409a      	lsls	r2, r3
 8004eb4:	0013      	movs	r3, r2
 8004eb6:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004eb8:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8004eba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8004ebc:	0018      	movs	r0, r3
 8004ebe:	46bd      	mov	sp, r7
 8004ec0:	b00e      	add	sp, #56	; 0x38
 8004ec2:	bdb0      	pop	{r4, r5, r7, pc}
 8004ec4:	40021000 	.word	0x40021000
 8004ec8:	003d0900 	.word	0x003d0900
 8004ecc:	00f42400 	.word	0x00f42400
 8004ed0:	007a1200 	.word	0x007a1200
 8004ed4:	08007fd4 	.word	0x08007fd4

08004ed8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004ed8:	b580      	push	{r7, lr}
 8004eda:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004edc:	4b02      	ldr	r3, [pc, #8]	; (8004ee8 <HAL_RCC_GetHCLKFreq+0x10>)
 8004ede:	681b      	ldr	r3, [r3, #0]
}
 8004ee0:	0018      	movs	r0, r3
 8004ee2:	46bd      	mov	sp, r7
 8004ee4:	bd80      	pop	{r7, pc}
 8004ee6:	46c0      	nop			; (mov r8, r8)
 8004ee8:	20000000 	.word	0x20000000

08004eec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004eec:	b580      	push	{r7, lr}
 8004eee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004ef0:	f7ff fff2 	bl	8004ed8 <HAL_RCC_GetHCLKFreq>
 8004ef4:	0001      	movs	r1, r0
 8004ef6:	4b06      	ldr	r3, [pc, #24]	; (8004f10 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004ef8:	68db      	ldr	r3, [r3, #12]
 8004efa:	0a1b      	lsrs	r3, r3, #8
 8004efc:	2207      	movs	r2, #7
 8004efe:	4013      	ands	r3, r2
 8004f00:	4a04      	ldr	r2, [pc, #16]	; (8004f14 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004f02:	5cd3      	ldrb	r3, [r2, r3]
 8004f04:	40d9      	lsrs	r1, r3
 8004f06:	000b      	movs	r3, r1
}
 8004f08:	0018      	movs	r0, r3
 8004f0a:	46bd      	mov	sp, r7
 8004f0c:	bd80      	pop	{r7, pc}
 8004f0e:	46c0      	nop			; (mov r8, r8)
 8004f10:	40021000 	.word	0x40021000
 8004f14:	08007fcc 	.word	0x08007fcc

08004f18 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004f18:	b580      	push	{r7, lr}
 8004f1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004f1c:	f7ff ffdc 	bl	8004ed8 <HAL_RCC_GetHCLKFreq>
 8004f20:	0001      	movs	r1, r0
 8004f22:	4b06      	ldr	r3, [pc, #24]	; (8004f3c <HAL_RCC_GetPCLK2Freq+0x24>)
 8004f24:	68db      	ldr	r3, [r3, #12]
 8004f26:	0adb      	lsrs	r3, r3, #11
 8004f28:	2207      	movs	r2, #7
 8004f2a:	4013      	ands	r3, r2
 8004f2c:	4a04      	ldr	r2, [pc, #16]	; (8004f40 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004f2e:	5cd3      	ldrb	r3, [r2, r3]
 8004f30:	40d9      	lsrs	r1, r3
 8004f32:	000b      	movs	r3, r1
}
 8004f34:	0018      	movs	r0, r3
 8004f36:	46bd      	mov	sp, r7
 8004f38:	bd80      	pop	{r7, pc}
 8004f3a:	46c0      	nop			; (mov r8, r8)
 8004f3c:	40021000 	.word	0x40021000
 8004f40:	08007fcc 	.word	0x08007fcc

08004f44 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004f44:	b580      	push	{r7, lr}
 8004f46:	b086      	sub	sp, #24
 8004f48:	af00      	add	r7, sp, #0
 8004f4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8004f4c:	2017      	movs	r0, #23
 8004f4e:	183b      	adds	r3, r7, r0
 8004f50:	2200      	movs	r2, #0
 8004f52:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	2220      	movs	r2, #32
 8004f5a:	4013      	ands	r3, r2
 8004f5c:	d100      	bne.n	8004f60 <HAL_RCCEx_PeriphCLKConfig+0x1c>
 8004f5e:	e0c2      	b.n	80050e6 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004f60:	4b98      	ldr	r3, [pc, #608]	; (80051c4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004f62:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004f64:	2380      	movs	r3, #128	; 0x80
 8004f66:	055b      	lsls	r3, r3, #21
 8004f68:	4013      	ands	r3, r2
 8004f6a:	d109      	bne.n	8004f80 <HAL_RCCEx_PeriphCLKConfig+0x3c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004f6c:	4b95      	ldr	r3, [pc, #596]	; (80051c4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004f6e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004f70:	4b94      	ldr	r3, [pc, #592]	; (80051c4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004f72:	2180      	movs	r1, #128	; 0x80
 8004f74:	0549      	lsls	r1, r1, #21
 8004f76:	430a      	orrs	r2, r1
 8004f78:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8004f7a:	183b      	adds	r3, r7, r0
 8004f7c:	2201      	movs	r2, #1
 8004f7e:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f80:	4b91      	ldr	r3, [pc, #580]	; (80051c8 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8004f82:	681a      	ldr	r2, [r3, #0]
 8004f84:	2380      	movs	r3, #128	; 0x80
 8004f86:	005b      	lsls	r3, r3, #1
 8004f88:	4013      	ands	r3, r2
 8004f8a:	d11a      	bne.n	8004fc2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004f8c:	4b8e      	ldr	r3, [pc, #568]	; (80051c8 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8004f8e:	681a      	ldr	r2, [r3, #0]
 8004f90:	4b8d      	ldr	r3, [pc, #564]	; (80051c8 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8004f92:	2180      	movs	r1, #128	; 0x80
 8004f94:	0049      	lsls	r1, r1, #1
 8004f96:	430a      	orrs	r2, r1
 8004f98:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004f9a:	f7fe fa3d 	bl	8003418 <HAL_GetTick>
 8004f9e:	0003      	movs	r3, r0
 8004fa0:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004fa2:	e008      	b.n	8004fb6 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004fa4:	f7fe fa38 	bl	8003418 <HAL_GetTick>
 8004fa8:	0002      	movs	r2, r0
 8004faa:	693b      	ldr	r3, [r7, #16]
 8004fac:	1ad3      	subs	r3, r2, r3
 8004fae:	2b64      	cmp	r3, #100	; 0x64
 8004fb0:	d901      	bls.n	8004fb6 <HAL_RCCEx_PeriphCLKConfig+0x72>
        {
          return HAL_TIMEOUT;
 8004fb2:	2303      	movs	r3, #3
 8004fb4:	e102      	b.n	80051bc <HAL_RCCEx_PeriphCLKConfig+0x278>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004fb6:	4b84      	ldr	r3, [pc, #528]	; (80051c8 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8004fb8:	681a      	ldr	r2, [r3, #0]
 8004fba:	2380      	movs	r3, #128	; 0x80
 8004fbc:	005b      	lsls	r3, r3, #1
 8004fbe:	4013      	ands	r3, r2
 8004fc0:	d0f0      	beq.n	8004fa4 <HAL_RCCEx_PeriphCLKConfig+0x60>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8004fc2:	4b80      	ldr	r3, [pc, #512]	; (80051c4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004fc4:	681a      	ldr	r2, [r3, #0]
 8004fc6:	23c0      	movs	r3, #192	; 0xc0
 8004fc8:	039b      	lsls	r3, r3, #14
 8004fca:	4013      	ands	r3, r2
 8004fcc:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	685a      	ldr	r2, [r3, #4]
 8004fd2:	23c0      	movs	r3, #192	; 0xc0
 8004fd4:	039b      	lsls	r3, r3, #14
 8004fd6:	4013      	ands	r3, r2
 8004fd8:	68fa      	ldr	r2, [r7, #12]
 8004fda:	429a      	cmp	r2, r3
 8004fdc:	d013      	beq.n	8005006 <HAL_RCCEx_PeriphCLKConfig+0xc2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	685a      	ldr	r2, [r3, #4]
 8004fe2:	23c0      	movs	r3, #192	; 0xc0
 8004fe4:	029b      	lsls	r3, r3, #10
 8004fe6:	401a      	ands	r2, r3
 8004fe8:	23c0      	movs	r3, #192	; 0xc0
 8004fea:	029b      	lsls	r3, r3, #10
 8004fec:	429a      	cmp	r2, r3
 8004fee:	d10a      	bne.n	8005006 <HAL_RCCEx_PeriphCLKConfig+0xc2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8004ff0:	4b74      	ldr	r3, [pc, #464]	; (80051c4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004ff2:	681a      	ldr	r2, [r3, #0]
 8004ff4:	2380      	movs	r3, #128	; 0x80
 8004ff6:	029b      	lsls	r3, r3, #10
 8004ff8:	401a      	ands	r2, r3
 8004ffa:	2380      	movs	r3, #128	; 0x80
 8004ffc:	029b      	lsls	r3, r3, #10
 8004ffe:	429a      	cmp	r2, r3
 8005000:	d101      	bne.n	8005006 <HAL_RCCEx_PeriphCLKConfig+0xc2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8005002:	2301      	movs	r3, #1
 8005004:	e0da      	b.n	80051bc <HAL_RCCEx_PeriphCLKConfig+0x278>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8005006:	4b6f      	ldr	r3, [pc, #444]	; (80051c4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005008:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800500a:	23c0      	movs	r3, #192	; 0xc0
 800500c:	029b      	lsls	r3, r3, #10
 800500e:	4013      	ands	r3, r2
 8005010:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	2b00      	cmp	r3, #0
 8005016:	d03b      	beq.n	8005090 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	685a      	ldr	r2, [r3, #4]
 800501c:	23c0      	movs	r3, #192	; 0xc0
 800501e:	029b      	lsls	r3, r3, #10
 8005020:	4013      	ands	r3, r2
 8005022:	68fa      	ldr	r2, [r7, #12]
 8005024:	429a      	cmp	r2, r3
 8005026:	d033      	beq.n	8005090 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	2220      	movs	r2, #32
 800502e:	4013      	ands	r3, r2
 8005030:	d02e      	beq.n	8005090 <HAL_RCCEx_PeriphCLKConfig+0x14c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8005032:	4b64      	ldr	r3, [pc, #400]	; (80051c4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005034:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005036:	4a65      	ldr	r2, [pc, #404]	; (80051cc <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8005038:	4013      	ands	r3, r2
 800503a:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800503c:	4b61      	ldr	r3, [pc, #388]	; (80051c4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800503e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005040:	4b60      	ldr	r3, [pc, #384]	; (80051c4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005042:	2180      	movs	r1, #128	; 0x80
 8005044:	0309      	lsls	r1, r1, #12
 8005046:	430a      	orrs	r2, r1
 8005048:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 800504a:	4b5e      	ldr	r3, [pc, #376]	; (80051c4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800504c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800504e:	4b5d      	ldr	r3, [pc, #372]	; (80051c4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005050:	495f      	ldr	r1, [pc, #380]	; (80051d0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8005052:	400a      	ands	r2, r1
 8005054:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8005056:	4b5b      	ldr	r3, [pc, #364]	; (80051c4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005058:	68fa      	ldr	r2, [r7, #12]
 800505a:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 800505c:	68fa      	ldr	r2, [r7, #12]
 800505e:	2380      	movs	r3, #128	; 0x80
 8005060:	005b      	lsls	r3, r3, #1
 8005062:	4013      	ands	r3, r2
 8005064:	d014      	beq.n	8005090 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005066:	f7fe f9d7 	bl	8003418 <HAL_GetTick>
 800506a:	0003      	movs	r3, r0
 800506c:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800506e:	e009      	b.n	8005084 <HAL_RCCEx_PeriphCLKConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005070:	f7fe f9d2 	bl	8003418 <HAL_GetTick>
 8005074:	0002      	movs	r2, r0
 8005076:	693b      	ldr	r3, [r7, #16]
 8005078:	1ad3      	subs	r3, r2, r3
 800507a:	4a56      	ldr	r2, [pc, #344]	; (80051d4 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 800507c:	4293      	cmp	r3, r2
 800507e:	d901      	bls.n	8005084 <HAL_RCCEx_PeriphCLKConfig+0x140>
          {
            return HAL_TIMEOUT;
 8005080:	2303      	movs	r3, #3
 8005082:	e09b      	b.n	80051bc <HAL_RCCEx_PeriphCLKConfig+0x278>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005084:	4b4f      	ldr	r3, [pc, #316]	; (80051c4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005086:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005088:	2380      	movs	r3, #128	; 0x80
 800508a:	009b      	lsls	r3, r3, #2
 800508c:	4013      	ands	r3, r2
 800508e:	d0ef      	beq.n	8005070 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	685a      	ldr	r2, [r3, #4]
 8005094:	23c0      	movs	r3, #192	; 0xc0
 8005096:	029b      	lsls	r3, r3, #10
 8005098:	401a      	ands	r2, r3
 800509a:	23c0      	movs	r3, #192	; 0xc0
 800509c:	029b      	lsls	r3, r3, #10
 800509e:	429a      	cmp	r2, r3
 80050a0:	d10c      	bne.n	80050bc <HAL_RCCEx_PeriphCLKConfig+0x178>
 80050a2:	4b48      	ldr	r3, [pc, #288]	; (80051c4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	4a4c      	ldr	r2, [pc, #304]	; (80051d8 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 80050a8:	4013      	ands	r3, r2
 80050aa:	0019      	movs	r1, r3
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	685a      	ldr	r2, [r3, #4]
 80050b0:	23c0      	movs	r3, #192	; 0xc0
 80050b2:	039b      	lsls	r3, r3, #14
 80050b4:	401a      	ands	r2, r3
 80050b6:	4b43      	ldr	r3, [pc, #268]	; (80051c4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80050b8:	430a      	orrs	r2, r1
 80050ba:	601a      	str	r2, [r3, #0]
 80050bc:	4b41      	ldr	r3, [pc, #260]	; (80051c4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80050be:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	685a      	ldr	r2, [r3, #4]
 80050c4:	23c0      	movs	r3, #192	; 0xc0
 80050c6:	029b      	lsls	r3, r3, #10
 80050c8:	401a      	ands	r2, r3
 80050ca:	4b3e      	ldr	r3, [pc, #248]	; (80051c4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80050cc:	430a      	orrs	r2, r1
 80050ce:	651a      	str	r2, [r3, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80050d0:	2317      	movs	r3, #23
 80050d2:	18fb      	adds	r3, r7, r3
 80050d4:	781b      	ldrb	r3, [r3, #0]
 80050d6:	2b01      	cmp	r3, #1
 80050d8:	d105      	bne.n	80050e6 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80050da:	4b3a      	ldr	r3, [pc, #232]	; (80051c4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80050dc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80050de:	4b39      	ldr	r3, [pc, #228]	; (80051c4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80050e0:	493e      	ldr	r1, [pc, #248]	; (80051dc <HAL_RCCEx_PeriphCLKConfig+0x298>)
 80050e2:	400a      	ands	r2, r1
 80050e4:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	2201      	movs	r2, #1
 80050ec:	4013      	ands	r3, r2
 80050ee:	d009      	beq.n	8005104 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80050f0:	4b34      	ldr	r3, [pc, #208]	; (80051c4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80050f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80050f4:	2203      	movs	r2, #3
 80050f6:	4393      	bics	r3, r2
 80050f8:	0019      	movs	r1, r3
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	689a      	ldr	r2, [r3, #8]
 80050fe:	4b31      	ldr	r3, [pc, #196]	; (80051c4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005100:	430a      	orrs	r2, r1
 8005102:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	2202      	movs	r2, #2
 800510a:	4013      	ands	r3, r2
 800510c:	d009      	beq.n	8005122 <HAL_RCCEx_PeriphCLKConfig+0x1de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800510e:	4b2d      	ldr	r3, [pc, #180]	; (80051c4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005110:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005112:	220c      	movs	r2, #12
 8005114:	4393      	bics	r3, r2
 8005116:	0019      	movs	r1, r3
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	68da      	ldr	r2, [r3, #12]
 800511c:	4b29      	ldr	r3, [pc, #164]	; (80051c4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800511e:	430a      	orrs	r2, r1
 8005120:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	2204      	movs	r2, #4
 8005128:	4013      	ands	r3, r2
 800512a:	d009      	beq.n	8005140 <HAL_RCCEx_PeriphCLKConfig+0x1fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800512c:	4b25      	ldr	r3, [pc, #148]	; (80051c4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800512e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005130:	4a2b      	ldr	r2, [pc, #172]	; (80051e0 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8005132:	4013      	ands	r3, r2
 8005134:	0019      	movs	r1, r3
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	691a      	ldr	r2, [r3, #16]
 800513a:	4b22      	ldr	r3, [pc, #136]	; (80051c4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800513c:	430a      	orrs	r2, r1
 800513e:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	2208      	movs	r2, #8
 8005146:	4013      	ands	r3, r2
 8005148:	d009      	beq.n	800515e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800514a:	4b1e      	ldr	r3, [pc, #120]	; (80051c4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800514c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800514e:	4a25      	ldr	r2, [pc, #148]	; (80051e4 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8005150:	4013      	ands	r3, r2
 8005152:	0019      	movs	r1, r3
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	695a      	ldr	r2, [r3, #20]
 8005158:	4b1a      	ldr	r3, [pc, #104]	; (80051c4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800515a:	430a      	orrs	r2, r1
 800515c:	64da      	str	r2, [r3, #76]	; 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681a      	ldr	r2, [r3, #0]
 8005162:	2380      	movs	r3, #128	; 0x80
 8005164:	005b      	lsls	r3, r3, #1
 8005166:	4013      	ands	r3, r2
 8005168:	d009      	beq.n	800517e <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800516a:	4b16      	ldr	r3, [pc, #88]	; (80051c4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800516c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800516e:	4a17      	ldr	r2, [pc, #92]	; (80051cc <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8005170:	4013      	ands	r3, r2
 8005172:	0019      	movs	r1, r3
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	699a      	ldr	r2, [r3, #24]
 8005178:	4b12      	ldr	r3, [pc, #72]	; (80051c4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800517a:	430a      	orrs	r2, r1
 800517c:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	2240      	movs	r2, #64	; 0x40
 8005184:	4013      	ands	r3, r2
 8005186:	d009      	beq.n	800519c <HAL_RCCEx_PeriphCLKConfig+0x258>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005188:	4b0e      	ldr	r3, [pc, #56]	; (80051c4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800518a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800518c:	4a16      	ldr	r2, [pc, #88]	; (80051e8 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 800518e:	4013      	ands	r3, r2
 8005190:	0019      	movs	r1, r3
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	6a1a      	ldr	r2, [r3, #32]
 8005196:	4b0b      	ldr	r3, [pc, #44]	; (80051c4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005198:	430a      	orrs	r2, r1
 800519a:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	2280      	movs	r2, #128	; 0x80
 80051a2:	4013      	ands	r3, r2
 80051a4:	d009      	beq.n	80051ba <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 80051a6:	4b07      	ldr	r3, [pc, #28]	; (80051c4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80051a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80051aa:	4a10      	ldr	r2, [pc, #64]	; (80051ec <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 80051ac:	4013      	ands	r3, r2
 80051ae:	0019      	movs	r1, r3
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	69da      	ldr	r2, [r3, #28]
 80051b4:	4b03      	ldr	r3, [pc, #12]	; (80051c4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80051b6:	430a      	orrs	r2, r1
 80051b8:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 80051ba:	2300      	movs	r3, #0
}
 80051bc:	0018      	movs	r0, r3
 80051be:	46bd      	mov	sp, r7
 80051c0:	b006      	add	sp, #24
 80051c2:	bd80      	pop	{r7, pc}
 80051c4:	40021000 	.word	0x40021000
 80051c8:	40007000 	.word	0x40007000
 80051cc:	fffcffff 	.word	0xfffcffff
 80051d0:	fff7ffff 	.word	0xfff7ffff
 80051d4:	00001388 	.word	0x00001388
 80051d8:	ffcfffff 	.word	0xffcfffff
 80051dc:	efffffff 	.word	0xefffffff
 80051e0:	fffff3ff 	.word	0xfffff3ff
 80051e4:	ffffcfff 	.word	0xffffcfff
 80051e8:	fbffffff 	.word	0xfbffffff
 80051ec:	fff3ffff 	.word	0xfff3ffff

080051f0 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80051f0:	b580      	push	{r7, lr}
 80051f2:	b082      	sub	sp, #8
 80051f4:	af00      	add	r7, sp, #0
 80051f6:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d101      	bne.n	8005202 <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 80051fe:	2301      	movs	r3, #1
 8005200:	e08e      	b.n	8005320 <HAL_RTC_Init+0x130>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	2221      	movs	r2, #33	; 0x21
 8005206:	5c9b      	ldrb	r3, [r3, r2]
 8005208:	b2db      	uxtb	r3, r3
 800520a:	2b00      	cmp	r3, #0
 800520c:	d107      	bne.n	800521e <HAL_RTC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	2220      	movs	r2, #32
 8005212:	2100      	movs	r1, #0
 8005214:	5499      	strb	r1, [r3, r2]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	0018      	movs	r0, r3
 800521a:	f7fd fc4b 	bl	8002ab4 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	2221      	movs	r2, #33	; 0x21
 8005222:	2102      	movs	r1, #2
 8005224:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	22ca      	movs	r2, #202	; 0xca
 800522c:	625a      	str	r2, [r3, #36]	; 0x24
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	2253      	movs	r2, #83	; 0x53
 8005234:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	0018      	movs	r0, r3
 800523a:	f000 f89e 	bl	800537a <RTC_EnterInitMode>
 800523e:	1e03      	subs	r3, r0, #0
 8005240:	d009      	beq.n	8005256 <HAL_RTC_Init+0x66>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	22ff      	movs	r2, #255	; 0xff
 8005248:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	2221      	movs	r2, #33	; 0x21
 800524e:	2104      	movs	r1, #4
 8005250:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8005252:	2301      	movs	r3, #1
 8005254:	e064      	b.n	8005320 <HAL_RTC_Init+0x130>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	689a      	ldr	r2, [r3, #8]
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	4931      	ldr	r1, [pc, #196]	; (8005328 <HAL_RTC_Init+0x138>)
 8005262:	400a      	ands	r2, r1
 8005264:	609a      	str	r2, [r3, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	6899      	ldr	r1, [r3, #8]
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	685a      	ldr	r2, [r3, #4]
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	691b      	ldr	r3, [r3, #16]
 8005274:	431a      	orrs	r2, r3
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	699b      	ldr	r3, [r3, #24]
 800527a:	431a      	orrs	r2, r3
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	430a      	orrs	r2, r1
 8005282:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	687a      	ldr	r2, [r7, #4]
 800528a:	68d2      	ldr	r2, [r2, #12]
 800528c:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	6919      	ldr	r1, [r3, #16]
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	689b      	ldr	r3, [r3, #8]
 8005298:	041a      	lsls	r2, r3, #16
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	430a      	orrs	r2, r1
 80052a0:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	68da      	ldr	r2, [r3, #12]
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	2180      	movs	r1, #128	; 0x80
 80052ae:	438a      	bics	r2, r1
 80052b0:	60da      	str	r2, [r3, #12]

    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	2103      	movs	r1, #3
 80052be:	438a      	bics	r2, r1
 80052c0:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	69da      	ldr	r2, [r3, #28]
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	695b      	ldr	r3, [r3, #20]
 80052d0:	431a      	orrs	r2, r3
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	430a      	orrs	r2, r1
 80052d8:	64da      	str	r2, [r3, #76]	; 0x4c

    /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	689b      	ldr	r3, [r3, #8]
 80052e0:	2220      	movs	r2, #32
 80052e2:	4013      	ands	r3, r2
 80052e4:	d113      	bne.n	800530e <HAL_RTC_Init+0x11e>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	0018      	movs	r0, r3
 80052ea:	f000 f81f 	bl	800532c <HAL_RTC_WaitForSynchro>
 80052ee:	1e03      	subs	r3, r0, #0
 80052f0:	d00d      	beq.n	800530e <HAL_RTC_Init+0x11e>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	22ff      	movs	r2, #255	; 0xff
 80052f8:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	2221      	movs	r2, #33	; 0x21
 80052fe:	2104      	movs	r1, #4
 8005300:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	2220      	movs	r2, #32
 8005306:	2100      	movs	r1, #0
 8005308:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 800530a:	2301      	movs	r3, #1
 800530c:	e008      	b.n	8005320 <HAL_RTC_Init+0x130>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	22ff      	movs	r2, #255	; 0xff
 8005314:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	2221      	movs	r2, #33	; 0x21
 800531a:	2101      	movs	r1, #1
 800531c:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800531e:	2300      	movs	r3, #0
  }
}
 8005320:	0018      	movs	r0, r3
 8005322:	46bd      	mov	sp, r7
 8005324:	b002      	add	sp, #8
 8005326:	bd80      	pop	{r7, pc}
 8005328:	ff8fffbf 	.word	0xff8fffbf

0800532c <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800532c:	b580      	push	{r7, lr}
 800532e:	b084      	sub	sp, #16
 8005330:	af00      	add	r7, sp, #0
 8005332:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	68da      	ldr	r2, [r3, #12]
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	21a0      	movs	r1, #160	; 0xa0
 8005340:	438a      	bics	r2, r1
 8005342:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8005344:	f7fe f868 	bl	8003418 <HAL_GetTick>
 8005348:	0003      	movs	r3, r0
 800534a:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800534c:	e00a      	b.n	8005364 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800534e:	f7fe f863 	bl	8003418 <HAL_GetTick>
 8005352:	0002      	movs	r2, r0
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	1ad2      	subs	r2, r2, r3
 8005358:	23fa      	movs	r3, #250	; 0xfa
 800535a:	009b      	lsls	r3, r3, #2
 800535c:	429a      	cmp	r2, r3
 800535e:	d901      	bls.n	8005364 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8005360:	2303      	movs	r3, #3
 8005362:	e006      	b.n	8005372 <HAL_RTC_WaitForSynchro+0x46>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	68db      	ldr	r3, [r3, #12]
 800536a:	2220      	movs	r2, #32
 800536c:	4013      	ands	r3, r2
 800536e:	d0ee      	beq.n	800534e <HAL_RTC_WaitForSynchro+0x22>
    }
  }

  return HAL_OK;
 8005370:	2300      	movs	r3, #0
}
 8005372:	0018      	movs	r0, r3
 8005374:	46bd      	mov	sp, r7
 8005376:	b004      	add	sp, #16
 8005378:	bd80      	pop	{r7, pc}

0800537a <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800537a:	b580      	push	{r7, lr}
 800537c:	b084      	sub	sp, #16
 800537e:	af00      	add	r7, sp, #0
 8005380:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	68db      	ldr	r3, [r3, #12]
 8005388:	2240      	movs	r2, #64	; 0x40
 800538a:	4013      	ands	r3, r2
 800538c:	d11a      	bne.n	80053c4 <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	2201      	movs	r2, #1
 8005394:	4252      	negs	r2, r2
 8005396:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8005398:	f7fe f83e 	bl	8003418 <HAL_GetTick>
 800539c:	0003      	movs	r3, r0
 800539e:	60fb      	str	r3, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80053a0:	e00a      	b.n	80053b8 <RTC_EnterInitMode+0x3e>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 80053a2:	f7fe f839 	bl	8003418 <HAL_GetTick>
 80053a6:	0002      	movs	r2, r0
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	1ad2      	subs	r2, r2, r3
 80053ac:	23fa      	movs	r3, #250	; 0xfa
 80053ae:	009b      	lsls	r3, r3, #2
 80053b0:	429a      	cmp	r2, r3
 80053b2:	d901      	bls.n	80053b8 <RTC_EnterInitMode+0x3e>
      {
        return HAL_TIMEOUT;
 80053b4:	2303      	movs	r3, #3
 80053b6:	e006      	b.n	80053c6 <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	68db      	ldr	r3, [r3, #12]
 80053be:	2240      	movs	r2, #64	; 0x40
 80053c0:	4013      	ands	r3, r2
 80053c2:	d0ee      	beq.n	80053a2 <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 80053c4:	2300      	movs	r3, #0
}
 80053c6:	0018      	movs	r0, r3
 80053c8:	46bd      	mov	sp, r7
 80053ca:	b004      	add	sp, #16
 80053cc:	bd80      	pop	{r7, pc}
	...

080053d0 <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param  WakeUpCounter Wake up counter
  * @param  WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 80053d0:	b580      	push	{r7, lr}
 80053d2:	b086      	sub	sp, #24
 80053d4:	af00      	add	r7, sp, #0
 80053d6:	60f8      	str	r0, [r7, #12]
 80053d8:	60b9      	str	r1, [r7, #8]
 80053da:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	2220      	movs	r2, #32
 80053e0:	5c9b      	ldrb	r3, [r3, r2]
 80053e2:	2b01      	cmp	r3, #1
 80053e4:	d101      	bne.n	80053ea <HAL_RTCEx_SetWakeUpTimer_IT+0x1a>
 80053e6:	2302      	movs	r3, #2
 80053e8:	e0ad      	b.n	8005546 <HAL_RTCEx_SetWakeUpTimer_IT+0x176>
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	2220      	movs	r2, #32
 80053ee:	2101      	movs	r1, #1
 80053f0:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	2221      	movs	r2, #33	; 0x21
 80053f6:	2102      	movs	r1, #2
 80053f8:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	22ca      	movs	r2, #202	; 0xca
 8005400:	625a      	str	r2, [r3, #36]	; 0x24
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	2253      	movs	r2, #83	; 0x53
 8005408:	625a      	str	r2, [r3, #36]	; 0x24

  /*Check RTC WUTWF flag is reset only when wake up timer enabled*/
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	689a      	ldr	r2, [r3, #8]
 8005410:	2380      	movs	r3, #128	; 0x80
 8005412:	00db      	lsls	r3, r3, #3
 8005414:	4013      	ands	r3, r2
 8005416:	d021      	beq.n	800545c <HAL_RTCEx_SetWakeUpTimer_IT+0x8c>
  {
    tickstart = HAL_GetTick();
 8005418:	f7fd fffe 	bl	8003418 <HAL_GetTick>
 800541c:	0003      	movs	r3, r0
 800541e:	617b      	str	r3, [r7, #20]

    /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 8005420:	e016      	b.n	8005450 <HAL_RTCEx_SetWakeUpTimer_IT+0x80>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005422:	f7fd fff9 	bl	8003418 <HAL_GetTick>
 8005426:	0002      	movs	r2, r0
 8005428:	697b      	ldr	r3, [r7, #20]
 800542a:	1ad2      	subs	r2, r2, r3
 800542c:	23fa      	movs	r3, #250	; 0xfa
 800542e:	009b      	lsls	r3, r3, #2
 8005430:	429a      	cmp	r2, r3
 8005432:	d90d      	bls.n	8005450 <HAL_RTCEx_SetWakeUpTimer_IT+0x80>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	22ff      	movs	r2, #255	; 0xff
 800543a:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	2221      	movs	r2, #33	; 0x21
 8005440:	2103      	movs	r1, #3
 8005442:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	2220      	movs	r2, #32
 8005448:	2100      	movs	r1, #0
 800544a:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800544c:	2303      	movs	r3, #3
 800544e:	e07a      	b.n	8005546 <HAL_RTCEx_SetWakeUpTimer_IT+0x176>
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	68db      	ldr	r3, [r3, #12]
 8005456:	2204      	movs	r2, #4
 8005458:	4013      	ands	r3, r2
 800545a:	d1e2      	bne.n	8005422 <HAL_RTCEx_SetWakeUpTimer_IT+0x52>
      }
    }
  }
  /* Disable the Wake-Up timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	689a      	ldr	r2, [r3, #8]
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	493a      	ldr	r1, [pc, #232]	; (8005550 <HAL_RTCEx_SetWakeUpTimer_IT+0x180>)
 8005468:	400a      	ands	r2, r1
 800546a:	609a      	str	r2, [r3, #8]

  /* Clear flag Wake-Up */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	68db      	ldr	r3, [r3, #12]
 8005472:	22ff      	movs	r2, #255	; 0xff
 8005474:	401a      	ands	r2, r3
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	4936      	ldr	r1, [pc, #216]	; (8005554 <HAL_RTCEx_SetWakeUpTimer_IT+0x184>)
 800547c:	430a      	orrs	r2, r1
 800547e:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8005480:	f7fd ffca 	bl	8003418 <HAL_GetTick>
 8005484:	0003      	movs	r3, r0
 8005486:	617b      	str	r3, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8005488:	e016      	b.n	80054b8 <HAL_RTCEx_SetWakeUpTimer_IT+0xe8>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800548a:	f7fd ffc5 	bl	8003418 <HAL_GetTick>
 800548e:	0002      	movs	r2, r0
 8005490:	697b      	ldr	r3, [r7, #20]
 8005492:	1ad2      	subs	r2, r2, r3
 8005494:	23fa      	movs	r3, #250	; 0xfa
 8005496:	009b      	lsls	r3, r3, #2
 8005498:	429a      	cmp	r2, r3
 800549a:	d90d      	bls.n	80054b8 <HAL_RTCEx_SetWakeUpTimer_IT+0xe8>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	22ff      	movs	r2, #255	; 0xff
 80054a2:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	2221      	movs	r2, #33	; 0x21
 80054a8:	2103      	movs	r1, #3
 80054aa:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	2220      	movs	r2, #32
 80054b0:	2100      	movs	r1, #0
 80054b2:	5499      	strb	r1, [r3, r2]

      return HAL_TIMEOUT;
 80054b4:	2303      	movs	r3, #3
 80054b6:	e046      	b.n	8005546 <HAL_RTCEx_SetWakeUpTimer_IT+0x176>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	68db      	ldr	r3, [r3, #12]
 80054be:	2204      	movs	r2, #4
 80054c0:	4013      	ands	r3, r2
 80054c2:	d0e2      	beq.n	800548a <HAL_RTCEx_SetWakeUpTimer_IT+0xba>
    }
  }

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	68ba      	ldr	r2, [r7, #8]
 80054ca:	615a      	str	r2, [r3, #20]

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	689a      	ldr	r2, [r3, #8]
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	2107      	movs	r1, #7
 80054d8:	438a      	bics	r2, r1
 80054da:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	6899      	ldr	r1, [r3, #8]
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	687a      	ldr	r2, [r7, #4]
 80054e8:	430a      	orrs	r2, r1
 80054ea:	609a      	str	r2, [r3, #8]

  /* RTC WakeUpTimer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 80054ec:	4b1a      	ldr	r3, [pc, #104]	; (8005558 <HAL_RTCEx_SetWakeUpTimer_IT+0x188>)
 80054ee:	681a      	ldr	r2, [r3, #0]
 80054f0:	4b19      	ldr	r3, [pc, #100]	; (8005558 <HAL_RTCEx_SetWakeUpTimer_IT+0x188>)
 80054f2:	2180      	movs	r1, #128	; 0x80
 80054f4:	0349      	lsls	r1, r1, #13
 80054f6:	430a      	orrs	r2, r1
 80054f8:	601a      	str	r2, [r3, #0]

  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 80054fa:	4b17      	ldr	r3, [pc, #92]	; (8005558 <HAL_RTCEx_SetWakeUpTimer_IT+0x188>)
 80054fc:	689a      	ldr	r2, [r3, #8]
 80054fe:	4b16      	ldr	r3, [pc, #88]	; (8005558 <HAL_RTCEx_SetWakeUpTimer_IT+0x188>)
 8005500:	2180      	movs	r1, #128	; 0x80
 8005502:	0349      	lsls	r1, r1, #13
 8005504:	430a      	orrs	r2, r1
 8005506:	609a      	str	r2, [r3, #8]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	689a      	ldr	r2, [r3, #8]
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	2180      	movs	r1, #128	; 0x80
 8005514:	01c9      	lsls	r1, r1, #7
 8005516:	430a      	orrs	r2, r1
 8005518:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	689a      	ldr	r2, [r3, #8]
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	2180      	movs	r1, #128	; 0x80
 8005526:	00c9      	lsls	r1, r1, #3
 8005528:	430a      	orrs	r2, r1
 800552a:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	22ff      	movs	r2, #255	; 0xff
 8005532:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	2221      	movs	r2, #33	; 0x21
 8005538:	2101      	movs	r1, #1
 800553a:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	2220      	movs	r2, #32
 8005540:	2100      	movs	r1, #0
 8005542:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005544:	2300      	movs	r3, #0
}
 8005546:	0018      	movs	r0, r3
 8005548:	46bd      	mov	sp, r7
 800554a:	b006      	add	sp, #24
 800554c:	bd80      	pop	{r7, pc}
 800554e:	46c0      	nop			; (mov r8, r8)
 8005550:	fffffbff 	.word	0xfffffbff
 8005554:	fffffb7f 	.word	0xfffffb7f
 8005558:	40010400 	.word	0x40010400

0800555c <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @brief  Handle Wake Up Timer interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 800555c:	b580      	push	{r7, lr}
 800555e:	b082      	sub	sp, #8
 8005560:	af00      	add	r7, sp, #0
 8005562:	6078      	str	r0, [r7, #4]
  /* Get the pending status of the WAKEUPTIMER Interrupt */
  if (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != 0U)
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	68da      	ldr	r2, [r3, #12]
 800556a:	2380      	movs	r3, #128	; 0x80
 800556c:	00db      	lsls	r3, r3, #3
 800556e:	4013      	ands	r3, r2
 8005570:	d00d      	beq.n	800558e <HAL_RTCEx_WakeUpTimerIRQHandler+0x32>
  {
    /* WAKEUPTIMER callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    hrtc->WakeUpTimerEventCallback(hrtc);
#else
    HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	0018      	movs	r0, r3
 8005576:	f7fd fabd 	bl	8002af4 <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

    /* Clear the WAKEUPTIMER interrupt pending bit */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	68db      	ldr	r3, [r3, #12]
 8005580:	22ff      	movs	r2, #255	; 0xff
 8005582:	401a      	ands	r2, r3
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	4907      	ldr	r1, [pc, #28]	; (80055a8 <HAL_RTCEx_WakeUpTimerIRQHandler+0x4c>)
 800558a:	430a      	orrs	r2, r1
 800558c:	60da      	str	r2, [r3, #12]
  }

  /* Clear the EXTI's line Flag for RTC WakeUpTimer */
  __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 800558e:	4b07      	ldr	r3, [pc, #28]	; (80055ac <HAL_RTCEx_WakeUpTimerIRQHandler+0x50>)
 8005590:	2280      	movs	r2, #128	; 0x80
 8005592:	0352      	lsls	r2, r2, #13
 8005594:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	2221      	movs	r2, #33	; 0x21
 800559a:	2101      	movs	r1, #1
 800559c:	5499      	strb	r1, [r3, r2]
}
 800559e:	46c0      	nop			; (mov r8, r8)
 80055a0:	46bd      	mov	sp, r7
 80055a2:	b002      	add	sp, #8
 80055a4:	bd80      	pop	{r7, pc}
 80055a6:	46c0      	nop			; (mov r8, r8)
 80055a8:	fffffb7f 	.word	0xfffffb7f
 80055ac:	40010400 	.word	0x40010400

080055b0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80055b0:	b580      	push	{r7, lr}
 80055b2:	b082      	sub	sp, #8
 80055b4:	af00      	add	r7, sp, #0
 80055b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d101      	bne.n	80055c2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80055be:	2301      	movs	r3, #1
 80055c0:	e032      	b.n	8005628 <HAL_TIM_Base_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	2239      	movs	r2, #57	; 0x39
 80055c6:	5c9b      	ldrb	r3, [r3, r2]
 80055c8:	b2db      	uxtb	r3, r3
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d107      	bne.n	80055de <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	2238      	movs	r2, #56	; 0x38
 80055d2:	2100      	movs	r1, #0
 80055d4:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	0018      	movs	r0, r3
 80055da:	f7fd fb97 	bl	8002d0c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	2239      	movs	r2, #57	; 0x39
 80055e2:	2102      	movs	r1, #2
 80055e4:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681a      	ldr	r2, [r3, #0]
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	3304      	adds	r3, #4
 80055ee:	0019      	movs	r1, r3
 80055f0:	0010      	movs	r0, r2
 80055f2:	f000 f93b 	bl	800586c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	223e      	movs	r2, #62	; 0x3e
 80055fa:	2101      	movs	r1, #1
 80055fc:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	223a      	movs	r2, #58	; 0x3a
 8005602:	2101      	movs	r1, #1
 8005604:	5499      	strb	r1, [r3, r2]
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	223b      	movs	r2, #59	; 0x3b
 800560a:	2101      	movs	r1, #1
 800560c:	5499      	strb	r1, [r3, r2]
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	223c      	movs	r2, #60	; 0x3c
 8005612:	2101      	movs	r1, #1
 8005614:	5499      	strb	r1, [r3, r2]
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	223d      	movs	r2, #61	; 0x3d
 800561a:	2101      	movs	r1, #1
 800561c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	2239      	movs	r2, #57	; 0x39
 8005622:	2101      	movs	r1, #1
 8005624:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005626:	2300      	movs	r3, #0
}
 8005628:	0018      	movs	r0, r3
 800562a:	46bd      	mov	sp, r7
 800562c:	b002      	add	sp, #8
 800562e:	bd80      	pop	{r7, pc}

08005630 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005630:	b580      	push	{r7, lr}
 8005632:	b084      	sub	sp, #16
 8005634:	af00      	add	r7, sp, #0
 8005636:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	2239      	movs	r2, #57	; 0x39
 800563c:	5c9b      	ldrb	r3, [r3, r2]
 800563e:	b2db      	uxtb	r3, r3
 8005640:	2b01      	cmp	r3, #1
 8005642:	d001      	beq.n	8005648 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005644:	2301      	movs	r3, #1
 8005646:	e033      	b.n	80056b0 <HAL_TIM_Base_Start+0x80>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	2239      	movs	r2, #57	; 0x39
 800564c:	2102      	movs	r1, #2
 800564e:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681a      	ldr	r2, [r3, #0]
 8005654:	2380      	movs	r3, #128	; 0x80
 8005656:	05db      	lsls	r3, r3, #23
 8005658:	429a      	cmp	r2, r3
 800565a:	d00e      	beq.n	800567a <HAL_TIM_Base_Start+0x4a>
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	4a15      	ldr	r2, [pc, #84]	; (80056b8 <HAL_TIM_Base_Start+0x88>)
 8005662:	4293      	cmp	r3, r2
 8005664:	d009      	beq.n	800567a <HAL_TIM_Base_Start+0x4a>
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	4a14      	ldr	r2, [pc, #80]	; (80056bc <HAL_TIM_Base_Start+0x8c>)
 800566c:	4293      	cmp	r3, r2
 800566e:	d004      	beq.n	800567a <HAL_TIM_Base_Start+0x4a>
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	4a12      	ldr	r2, [pc, #72]	; (80056c0 <HAL_TIM_Base_Start+0x90>)
 8005676:	4293      	cmp	r3, r2
 8005678:	d111      	bne.n	800569e <HAL_TIM_Base_Start+0x6e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	689b      	ldr	r3, [r3, #8]
 8005680:	2207      	movs	r2, #7
 8005682:	4013      	ands	r3, r2
 8005684:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	2b06      	cmp	r3, #6
 800568a:	d010      	beq.n	80056ae <HAL_TIM_Base_Start+0x7e>
    {
      __HAL_TIM_ENABLE(htim);
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	681a      	ldr	r2, [r3, #0]
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	2101      	movs	r1, #1
 8005698:	430a      	orrs	r2, r1
 800569a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800569c:	e007      	b.n	80056ae <HAL_TIM_Base_Start+0x7e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	681a      	ldr	r2, [r3, #0]
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	2101      	movs	r1, #1
 80056aa:	430a      	orrs	r2, r1
 80056ac:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80056ae:	2300      	movs	r3, #0
}
 80056b0:	0018      	movs	r0, r3
 80056b2:	46bd      	mov	sp, r7
 80056b4:	b004      	add	sp, #16
 80056b6:	bd80      	pop	{r7, pc}
 80056b8:	40000400 	.word	0x40000400
 80056bc:	40010800 	.word	0x40010800
 80056c0:	40011400 	.word	0x40011400

080056c4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80056c4:	b580      	push	{r7, lr}
 80056c6:	b084      	sub	sp, #16
 80056c8:	af00      	add	r7, sp, #0
 80056ca:	6078      	str	r0, [r7, #4]
 80056cc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80056ce:	230f      	movs	r3, #15
 80056d0:	18fb      	adds	r3, r7, r3
 80056d2:	2200      	movs	r2, #0
 80056d4:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	2238      	movs	r2, #56	; 0x38
 80056da:	5c9b      	ldrb	r3, [r3, r2]
 80056dc:	2b01      	cmp	r3, #1
 80056de:	d101      	bne.n	80056e4 <HAL_TIM_ConfigClockSource+0x20>
 80056e0:	2302      	movs	r3, #2
 80056e2:	e0bc      	b.n	800585e <HAL_TIM_ConfigClockSource+0x19a>
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	2238      	movs	r2, #56	; 0x38
 80056e8:	2101      	movs	r1, #1
 80056ea:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	2239      	movs	r2, #57	; 0x39
 80056f0:	2102      	movs	r1, #2
 80056f2:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	689b      	ldr	r3, [r3, #8]
 80056fa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80056fc:	68bb      	ldr	r3, [r7, #8]
 80056fe:	2277      	movs	r2, #119	; 0x77
 8005700:	4393      	bics	r3, r2
 8005702:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005704:	68bb      	ldr	r3, [r7, #8]
 8005706:	4a58      	ldr	r2, [pc, #352]	; (8005868 <HAL_TIM_ConfigClockSource+0x1a4>)
 8005708:	4013      	ands	r3, r2
 800570a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	68ba      	ldr	r2, [r7, #8]
 8005712:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005714:	683b      	ldr	r3, [r7, #0]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	2280      	movs	r2, #128	; 0x80
 800571a:	0192      	lsls	r2, r2, #6
 800571c:	4293      	cmp	r3, r2
 800571e:	d040      	beq.n	80057a2 <HAL_TIM_ConfigClockSource+0xde>
 8005720:	2280      	movs	r2, #128	; 0x80
 8005722:	0192      	lsls	r2, r2, #6
 8005724:	4293      	cmp	r3, r2
 8005726:	d900      	bls.n	800572a <HAL_TIM_ConfigClockSource+0x66>
 8005728:	e088      	b.n	800583c <HAL_TIM_ConfigClockSource+0x178>
 800572a:	2280      	movs	r2, #128	; 0x80
 800572c:	0152      	lsls	r2, r2, #5
 800572e:	4293      	cmp	r3, r2
 8005730:	d100      	bne.n	8005734 <HAL_TIM_ConfigClockSource+0x70>
 8005732:	e088      	b.n	8005846 <HAL_TIM_ConfigClockSource+0x182>
 8005734:	2280      	movs	r2, #128	; 0x80
 8005736:	0152      	lsls	r2, r2, #5
 8005738:	4293      	cmp	r3, r2
 800573a:	d900      	bls.n	800573e <HAL_TIM_ConfigClockSource+0x7a>
 800573c:	e07e      	b.n	800583c <HAL_TIM_ConfigClockSource+0x178>
 800573e:	2b70      	cmp	r3, #112	; 0x70
 8005740:	d018      	beq.n	8005774 <HAL_TIM_ConfigClockSource+0xb0>
 8005742:	d900      	bls.n	8005746 <HAL_TIM_ConfigClockSource+0x82>
 8005744:	e07a      	b.n	800583c <HAL_TIM_ConfigClockSource+0x178>
 8005746:	2b60      	cmp	r3, #96	; 0x60
 8005748:	d04f      	beq.n	80057ea <HAL_TIM_ConfigClockSource+0x126>
 800574a:	d900      	bls.n	800574e <HAL_TIM_ConfigClockSource+0x8a>
 800574c:	e076      	b.n	800583c <HAL_TIM_ConfigClockSource+0x178>
 800574e:	2b50      	cmp	r3, #80	; 0x50
 8005750:	d03b      	beq.n	80057ca <HAL_TIM_ConfigClockSource+0x106>
 8005752:	d900      	bls.n	8005756 <HAL_TIM_ConfigClockSource+0x92>
 8005754:	e072      	b.n	800583c <HAL_TIM_ConfigClockSource+0x178>
 8005756:	2b40      	cmp	r3, #64	; 0x40
 8005758:	d057      	beq.n	800580a <HAL_TIM_ConfigClockSource+0x146>
 800575a:	d900      	bls.n	800575e <HAL_TIM_ConfigClockSource+0x9a>
 800575c:	e06e      	b.n	800583c <HAL_TIM_ConfigClockSource+0x178>
 800575e:	2b30      	cmp	r3, #48	; 0x30
 8005760:	d063      	beq.n	800582a <HAL_TIM_ConfigClockSource+0x166>
 8005762:	d86b      	bhi.n	800583c <HAL_TIM_ConfigClockSource+0x178>
 8005764:	2b20      	cmp	r3, #32
 8005766:	d060      	beq.n	800582a <HAL_TIM_ConfigClockSource+0x166>
 8005768:	d868      	bhi.n	800583c <HAL_TIM_ConfigClockSource+0x178>
 800576a:	2b00      	cmp	r3, #0
 800576c:	d05d      	beq.n	800582a <HAL_TIM_ConfigClockSource+0x166>
 800576e:	2b10      	cmp	r3, #16
 8005770:	d05b      	beq.n	800582a <HAL_TIM_ConfigClockSource+0x166>
 8005772:	e063      	b.n	800583c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	6818      	ldr	r0, [r3, #0]
 8005778:	683b      	ldr	r3, [r7, #0]
 800577a:	6899      	ldr	r1, [r3, #8]
 800577c:	683b      	ldr	r3, [r7, #0]
 800577e:	685a      	ldr	r2, [r3, #4]
 8005780:	683b      	ldr	r3, [r7, #0]
 8005782:	68db      	ldr	r3, [r3, #12]
 8005784:	f000 f94a 	bl	8005a1c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	689b      	ldr	r3, [r3, #8]
 800578e:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005790:	68bb      	ldr	r3, [r7, #8]
 8005792:	2277      	movs	r2, #119	; 0x77
 8005794:	4313      	orrs	r3, r2
 8005796:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	68ba      	ldr	r2, [r7, #8]
 800579e:	609a      	str	r2, [r3, #8]
      break;
 80057a0:	e052      	b.n	8005848 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	6818      	ldr	r0, [r3, #0]
 80057a6:	683b      	ldr	r3, [r7, #0]
 80057a8:	6899      	ldr	r1, [r3, #8]
 80057aa:	683b      	ldr	r3, [r7, #0]
 80057ac:	685a      	ldr	r2, [r3, #4]
 80057ae:	683b      	ldr	r3, [r7, #0]
 80057b0:	68db      	ldr	r3, [r3, #12]
 80057b2:	f000 f933 	bl	8005a1c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	689a      	ldr	r2, [r3, #8]
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	2180      	movs	r1, #128	; 0x80
 80057c2:	01c9      	lsls	r1, r1, #7
 80057c4:	430a      	orrs	r2, r1
 80057c6:	609a      	str	r2, [r3, #8]
      break;
 80057c8:	e03e      	b.n	8005848 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	6818      	ldr	r0, [r3, #0]
 80057ce:	683b      	ldr	r3, [r7, #0]
 80057d0:	6859      	ldr	r1, [r3, #4]
 80057d2:	683b      	ldr	r3, [r7, #0]
 80057d4:	68db      	ldr	r3, [r3, #12]
 80057d6:	001a      	movs	r2, r3
 80057d8:	f000 f8a6 	bl	8005928 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	2150      	movs	r1, #80	; 0x50
 80057e2:	0018      	movs	r0, r3
 80057e4:	f000 f900 	bl	80059e8 <TIM_ITRx_SetConfig>
      break;
 80057e8:	e02e      	b.n	8005848 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	6818      	ldr	r0, [r3, #0]
 80057ee:	683b      	ldr	r3, [r7, #0]
 80057f0:	6859      	ldr	r1, [r3, #4]
 80057f2:	683b      	ldr	r3, [r7, #0]
 80057f4:	68db      	ldr	r3, [r3, #12]
 80057f6:	001a      	movs	r2, r3
 80057f8:	f000 f8c4 	bl	8005984 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	2160      	movs	r1, #96	; 0x60
 8005802:	0018      	movs	r0, r3
 8005804:	f000 f8f0 	bl	80059e8 <TIM_ITRx_SetConfig>
      break;
 8005808:	e01e      	b.n	8005848 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	6818      	ldr	r0, [r3, #0]
 800580e:	683b      	ldr	r3, [r7, #0]
 8005810:	6859      	ldr	r1, [r3, #4]
 8005812:	683b      	ldr	r3, [r7, #0]
 8005814:	68db      	ldr	r3, [r3, #12]
 8005816:	001a      	movs	r2, r3
 8005818:	f000 f886 	bl	8005928 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	2140      	movs	r1, #64	; 0x40
 8005822:	0018      	movs	r0, r3
 8005824:	f000 f8e0 	bl	80059e8 <TIM_ITRx_SetConfig>
      break;
 8005828:	e00e      	b.n	8005848 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681a      	ldr	r2, [r3, #0]
 800582e:	683b      	ldr	r3, [r7, #0]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	0019      	movs	r1, r3
 8005834:	0010      	movs	r0, r2
 8005836:	f000 f8d7 	bl	80059e8 <TIM_ITRx_SetConfig>
      break;
 800583a:	e005      	b.n	8005848 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 800583c:	230f      	movs	r3, #15
 800583e:	18fb      	adds	r3, r7, r3
 8005840:	2201      	movs	r2, #1
 8005842:	701a      	strb	r2, [r3, #0]
      break;
 8005844:	e000      	b.n	8005848 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8005846:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	2239      	movs	r2, #57	; 0x39
 800584c:	2101      	movs	r1, #1
 800584e:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	2238      	movs	r2, #56	; 0x38
 8005854:	2100      	movs	r1, #0
 8005856:	5499      	strb	r1, [r3, r2]

  return status;
 8005858:	230f      	movs	r3, #15
 800585a:	18fb      	adds	r3, r7, r3
 800585c:	781b      	ldrb	r3, [r3, #0]
}
 800585e:	0018      	movs	r0, r3
 8005860:	46bd      	mov	sp, r7
 8005862:	b004      	add	sp, #16
 8005864:	bd80      	pop	{r7, pc}
 8005866:	46c0      	nop			; (mov r8, r8)
 8005868:	ffff00ff 	.word	0xffff00ff

0800586c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800586c:	b580      	push	{r7, lr}
 800586e:	b084      	sub	sp, #16
 8005870:	af00      	add	r7, sp, #0
 8005872:	6078      	str	r0, [r7, #4]
 8005874:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800587c:	687a      	ldr	r2, [r7, #4]
 800587e:	2380      	movs	r3, #128	; 0x80
 8005880:	05db      	lsls	r3, r3, #23
 8005882:	429a      	cmp	r2, r3
 8005884:	d00b      	beq.n	800589e <TIM_Base_SetConfig+0x32>
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	4a23      	ldr	r2, [pc, #140]	; (8005918 <TIM_Base_SetConfig+0xac>)
 800588a:	4293      	cmp	r3, r2
 800588c:	d007      	beq.n	800589e <TIM_Base_SetConfig+0x32>
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	4a22      	ldr	r2, [pc, #136]	; (800591c <TIM_Base_SetConfig+0xb0>)
 8005892:	4293      	cmp	r3, r2
 8005894:	d003      	beq.n	800589e <TIM_Base_SetConfig+0x32>
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	4a21      	ldr	r2, [pc, #132]	; (8005920 <TIM_Base_SetConfig+0xb4>)
 800589a:	4293      	cmp	r3, r2
 800589c:	d108      	bne.n	80058b0 <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	2270      	movs	r2, #112	; 0x70
 80058a2:	4393      	bics	r3, r2
 80058a4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80058a6:	683b      	ldr	r3, [r7, #0]
 80058a8:	685b      	ldr	r3, [r3, #4]
 80058aa:	68fa      	ldr	r2, [r7, #12]
 80058ac:	4313      	orrs	r3, r2
 80058ae:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80058b0:	687a      	ldr	r2, [r7, #4]
 80058b2:	2380      	movs	r3, #128	; 0x80
 80058b4:	05db      	lsls	r3, r3, #23
 80058b6:	429a      	cmp	r2, r3
 80058b8:	d00b      	beq.n	80058d2 <TIM_Base_SetConfig+0x66>
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	4a16      	ldr	r2, [pc, #88]	; (8005918 <TIM_Base_SetConfig+0xac>)
 80058be:	4293      	cmp	r3, r2
 80058c0:	d007      	beq.n	80058d2 <TIM_Base_SetConfig+0x66>
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	4a15      	ldr	r2, [pc, #84]	; (800591c <TIM_Base_SetConfig+0xb0>)
 80058c6:	4293      	cmp	r3, r2
 80058c8:	d003      	beq.n	80058d2 <TIM_Base_SetConfig+0x66>
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	4a14      	ldr	r2, [pc, #80]	; (8005920 <TIM_Base_SetConfig+0xb4>)
 80058ce:	4293      	cmp	r3, r2
 80058d0:	d108      	bne.n	80058e4 <TIM_Base_SetConfig+0x78>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	4a13      	ldr	r2, [pc, #76]	; (8005924 <TIM_Base_SetConfig+0xb8>)
 80058d6:	4013      	ands	r3, r2
 80058d8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80058da:	683b      	ldr	r3, [r7, #0]
 80058dc:	68db      	ldr	r3, [r3, #12]
 80058de:	68fa      	ldr	r2, [r7, #12]
 80058e0:	4313      	orrs	r3, r2
 80058e2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	2280      	movs	r2, #128	; 0x80
 80058e8:	4393      	bics	r3, r2
 80058ea:	001a      	movs	r2, r3
 80058ec:	683b      	ldr	r3, [r7, #0]
 80058ee:	691b      	ldr	r3, [r3, #16]
 80058f0:	4313      	orrs	r3, r2
 80058f2:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	68fa      	ldr	r2, [r7, #12]
 80058f8:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80058fa:	683b      	ldr	r3, [r7, #0]
 80058fc:	689a      	ldr	r2, [r3, #8]
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005902:	683b      	ldr	r3, [r7, #0]
 8005904:	681a      	ldr	r2, [r3, #0]
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	2201      	movs	r2, #1
 800590e:	615a      	str	r2, [r3, #20]
}
 8005910:	46c0      	nop			; (mov r8, r8)
 8005912:	46bd      	mov	sp, r7
 8005914:	b004      	add	sp, #16
 8005916:	bd80      	pop	{r7, pc}
 8005918:	40000400 	.word	0x40000400
 800591c:	40010800 	.word	0x40010800
 8005920:	40011400 	.word	0x40011400
 8005924:	fffffcff 	.word	0xfffffcff

08005928 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005928:	b580      	push	{r7, lr}
 800592a:	b086      	sub	sp, #24
 800592c:	af00      	add	r7, sp, #0
 800592e:	60f8      	str	r0, [r7, #12]
 8005930:	60b9      	str	r1, [r7, #8]
 8005932:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	6a1b      	ldr	r3, [r3, #32]
 8005938:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	6a1b      	ldr	r3, [r3, #32]
 800593e:	2201      	movs	r2, #1
 8005940:	4393      	bics	r3, r2
 8005942:	001a      	movs	r2, r3
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	699b      	ldr	r3, [r3, #24]
 800594c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800594e:	693b      	ldr	r3, [r7, #16]
 8005950:	22f0      	movs	r2, #240	; 0xf0
 8005952:	4393      	bics	r3, r2
 8005954:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	011b      	lsls	r3, r3, #4
 800595a:	693a      	ldr	r2, [r7, #16]
 800595c:	4313      	orrs	r3, r2
 800595e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005960:	697b      	ldr	r3, [r7, #20]
 8005962:	220a      	movs	r2, #10
 8005964:	4393      	bics	r3, r2
 8005966:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005968:	697a      	ldr	r2, [r7, #20]
 800596a:	68bb      	ldr	r3, [r7, #8]
 800596c:	4313      	orrs	r3, r2
 800596e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	693a      	ldr	r2, [r7, #16]
 8005974:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	697a      	ldr	r2, [r7, #20]
 800597a:	621a      	str	r2, [r3, #32]
}
 800597c:	46c0      	nop			; (mov r8, r8)
 800597e:	46bd      	mov	sp, r7
 8005980:	b006      	add	sp, #24
 8005982:	bd80      	pop	{r7, pc}

08005984 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005984:	b580      	push	{r7, lr}
 8005986:	b086      	sub	sp, #24
 8005988:	af00      	add	r7, sp, #0
 800598a:	60f8      	str	r0, [r7, #12]
 800598c:	60b9      	str	r1, [r7, #8]
 800598e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	6a1b      	ldr	r3, [r3, #32]
 8005994:	2210      	movs	r2, #16
 8005996:	4393      	bics	r3, r2
 8005998:	001a      	movs	r2, r3
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	699b      	ldr	r3, [r3, #24]
 80059a2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	6a1b      	ldr	r3, [r3, #32]
 80059a8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80059aa:	697b      	ldr	r3, [r7, #20]
 80059ac:	4a0d      	ldr	r2, [pc, #52]	; (80059e4 <TIM_TI2_ConfigInputStage+0x60>)
 80059ae:	4013      	ands	r3, r2
 80059b0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	031b      	lsls	r3, r3, #12
 80059b6:	697a      	ldr	r2, [r7, #20]
 80059b8:	4313      	orrs	r3, r2
 80059ba:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80059bc:	693b      	ldr	r3, [r7, #16]
 80059be:	22a0      	movs	r2, #160	; 0xa0
 80059c0:	4393      	bics	r3, r2
 80059c2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80059c4:	68bb      	ldr	r3, [r7, #8]
 80059c6:	011b      	lsls	r3, r3, #4
 80059c8:	693a      	ldr	r2, [r7, #16]
 80059ca:	4313      	orrs	r3, r2
 80059cc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	697a      	ldr	r2, [r7, #20]
 80059d2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	693a      	ldr	r2, [r7, #16]
 80059d8:	621a      	str	r2, [r3, #32]
}
 80059da:	46c0      	nop			; (mov r8, r8)
 80059dc:	46bd      	mov	sp, r7
 80059de:	b006      	add	sp, #24
 80059e0:	bd80      	pop	{r7, pc}
 80059e2:	46c0      	nop			; (mov r8, r8)
 80059e4:	ffff0fff 	.word	0xffff0fff

080059e8 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80059e8:	b580      	push	{r7, lr}
 80059ea:	b084      	sub	sp, #16
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	6078      	str	r0, [r7, #4]
 80059f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	689b      	ldr	r3, [r3, #8]
 80059f6:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	2270      	movs	r2, #112	; 0x70
 80059fc:	4393      	bics	r3, r2
 80059fe:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005a00:	683a      	ldr	r2, [r7, #0]
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	4313      	orrs	r3, r2
 8005a06:	2207      	movs	r2, #7
 8005a08:	4313      	orrs	r3, r2
 8005a0a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	68fa      	ldr	r2, [r7, #12]
 8005a10:	609a      	str	r2, [r3, #8]
}
 8005a12:	46c0      	nop			; (mov r8, r8)
 8005a14:	46bd      	mov	sp, r7
 8005a16:	b004      	add	sp, #16
 8005a18:	bd80      	pop	{r7, pc}
	...

08005a1c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005a1c:	b580      	push	{r7, lr}
 8005a1e:	b086      	sub	sp, #24
 8005a20:	af00      	add	r7, sp, #0
 8005a22:	60f8      	str	r0, [r7, #12]
 8005a24:	60b9      	str	r1, [r7, #8]
 8005a26:	607a      	str	r2, [r7, #4]
 8005a28:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	689b      	ldr	r3, [r3, #8]
 8005a2e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005a30:	697b      	ldr	r3, [r7, #20]
 8005a32:	4a09      	ldr	r2, [pc, #36]	; (8005a58 <TIM_ETR_SetConfig+0x3c>)
 8005a34:	4013      	ands	r3, r2
 8005a36:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005a38:	683b      	ldr	r3, [r7, #0]
 8005a3a:	021a      	lsls	r2, r3, #8
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	431a      	orrs	r2, r3
 8005a40:	68bb      	ldr	r3, [r7, #8]
 8005a42:	4313      	orrs	r3, r2
 8005a44:	697a      	ldr	r2, [r7, #20]
 8005a46:	4313      	orrs	r3, r2
 8005a48:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	697a      	ldr	r2, [r7, #20]
 8005a4e:	609a      	str	r2, [r3, #8]
}
 8005a50:	46c0      	nop			; (mov r8, r8)
 8005a52:	46bd      	mov	sp, r7
 8005a54:	b006      	add	sp, #24
 8005a56:	bd80      	pop	{r7, pc}
 8005a58:	ffff00ff 	.word	0xffff00ff

08005a5c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005a5c:	b580      	push	{r7, lr}
 8005a5e:	b084      	sub	sp, #16
 8005a60:	af00      	add	r7, sp, #0
 8005a62:	6078      	str	r0, [r7, #4]
 8005a64:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	2238      	movs	r2, #56	; 0x38
 8005a6a:	5c9b      	ldrb	r3, [r3, r2]
 8005a6c:	2b01      	cmp	r3, #1
 8005a6e:	d101      	bne.n	8005a74 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005a70:	2302      	movs	r3, #2
 8005a72:	e047      	b.n	8005b04 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	2238      	movs	r2, #56	; 0x38
 8005a78:	2101      	movs	r1, #1
 8005a7a:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	2239      	movs	r2, #57	; 0x39
 8005a80:	2102      	movs	r1, #2
 8005a82:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	685b      	ldr	r3, [r3, #4]
 8005a8a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	689b      	ldr	r3, [r3, #8]
 8005a92:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	2270      	movs	r2, #112	; 0x70
 8005a98:	4393      	bics	r3, r2
 8005a9a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005a9c:	683b      	ldr	r3, [r7, #0]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	68fa      	ldr	r2, [r7, #12]
 8005aa2:	4313      	orrs	r3, r2
 8005aa4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	68fa      	ldr	r2, [r7, #12]
 8005aac:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681a      	ldr	r2, [r3, #0]
 8005ab2:	2380      	movs	r3, #128	; 0x80
 8005ab4:	05db      	lsls	r3, r3, #23
 8005ab6:	429a      	cmp	r2, r3
 8005ab8:	d00e      	beq.n	8005ad8 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	4a13      	ldr	r2, [pc, #76]	; (8005b0c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8005ac0:	4293      	cmp	r3, r2
 8005ac2:	d009      	beq.n	8005ad8 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	4a11      	ldr	r2, [pc, #68]	; (8005b10 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8005aca:	4293      	cmp	r3, r2
 8005acc:	d004      	beq.n	8005ad8 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	4a10      	ldr	r2, [pc, #64]	; (8005b14 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8005ad4:	4293      	cmp	r3, r2
 8005ad6:	d10c      	bne.n	8005af2 <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005ad8:	68bb      	ldr	r3, [r7, #8]
 8005ada:	2280      	movs	r2, #128	; 0x80
 8005adc:	4393      	bics	r3, r2
 8005ade:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005ae0:	683b      	ldr	r3, [r7, #0]
 8005ae2:	685b      	ldr	r3, [r3, #4]
 8005ae4:	68ba      	ldr	r2, [r7, #8]
 8005ae6:	4313      	orrs	r3, r2
 8005ae8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	68ba      	ldr	r2, [r7, #8]
 8005af0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	2239      	movs	r2, #57	; 0x39
 8005af6:	2101      	movs	r1, #1
 8005af8:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	2238      	movs	r2, #56	; 0x38
 8005afe:	2100      	movs	r1, #0
 8005b00:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005b02:	2300      	movs	r3, #0
}
 8005b04:	0018      	movs	r0, r3
 8005b06:	46bd      	mov	sp, r7
 8005b08:	b004      	add	sp, #16
 8005b0a:	bd80      	pop	{r7, pc}
 8005b0c:	40000400 	.word	0x40000400
 8005b10:	40010800 	.word	0x40010800
 8005b14:	40011400 	.word	0x40011400

08005b18 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005b18:	b580      	push	{r7, lr}
 8005b1a:	b082      	sub	sp, #8
 8005b1c:	af00      	add	r7, sp, #0
 8005b1e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d101      	bne.n	8005b2a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005b26:	2301      	movs	r3, #1
 8005b28:	e044      	b.n	8005bb4 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d107      	bne.n	8005b42 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	2274      	movs	r2, #116	; 0x74
 8005b36:	2100      	movs	r1, #0
 8005b38:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	0018      	movs	r0, r3
 8005b3e:	f7fd f975 	bl	8002e2c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	2224      	movs	r2, #36	; 0x24
 8005b46:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	681a      	ldr	r2, [r3, #0]
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	2101      	movs	r1, #1
 8005b54:	438a      	bics	r2, r1
 8005b56:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	0018      	movs	r0, r3
 8005b5c:	f000 fc36 	bl	80063cc <UART_SetConfig>
 8005b60:	0003      	movs	r3, r0
 8005b62:	2b01      	cmp	r3, #1
 8005b64:	d101      	bne.n	8005b6a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8005b66:	2301      	movs	r3, #1
 8005b68:	e024      	b.n	8005bb4 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d003      	beq.n	8005b7a <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	0018      	movs	r0, r3
 8005b76:	f000 fee7 	bl	8006948 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	685a      	ldr	r2, [r3, #4]
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	490d      	ldr	r1, [pc, #52]	; (8005bbc <HAL_UART_Init+0xa4>)
 8005b86:	400a      	ands	r2, r1
 8005b88:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	689a      	ldr	r2, [r3, #8]
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	212a      	movs	r1, #42	; 0x2a
 8005b96:	438a      	bics	r2, r1
 8005b98:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	681a      	ldr	r2, [r3, #0]
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	2101      	movs	r1, #1
 8005ba6:	430a      	orrs	r2, r1
 8005ba8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	0018      	movs	r0, r3
 8005bae:	f000 ff7f 	bl	8006ab0 <UART_CheckIdleState>
 8005bb2:	0003      	movs	r3, r0
}
 8005bb4:	0018      	movs	r0, r3
 8005bb6:	46bd      	mov	sp, r7
 8005bb8:	b002      	add	sp, #8
 8005bba:	bd80      	pop	{r7, pc}
 8005bbc:	ffffb7ff 	.word	0xffffb7ff

08005bc0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005bc0:	b580      	push	{r7, lr}
 8005bc2:	b08a      	sub	sp, #40	; 0x28
 8005bc4:	af02      	add	r7, sp, #8
 8005bc6:	60f8      	str	r0, [r7, #12]
 8005bc8:	60b9      	str	r1, [r7, #8]
 8005bca:	603b      	str	r3, [r7, #0]
 8005bcc:	1dbb      	adds	r3, r7, #6
 8005bce:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005bd4:	2b20      	cmp	r3, #32
 8005bd6:	d000      	beq.n	8005bda <HAL_UART_Transmit+0x1a>
 8005bd8:	e095      	b.n	8005d06 <HAL_UART_Transmit+0x146>
  {
    if ((pData == NULL) || (Size == 0U))
 8005bda:	68bb      	ldr	r3, [r7, #8]
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d003      	beq.n	8005be8 <HAL_UART_Transmit+0x28>
 8005be0:	1dbb      	adds	r3, r7, #6
 8005be2:	881b      	ldrh	r3, [r3, #0]
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d101      	bne.n	8005bec <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8005be8:	2301      	movs	r3, #1
 8005bea:	e08d      	b.n	8005d08 <HAL_UART_Transmit+0x148>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	689a      	ldr	r2, [r3, #8]
 8005bf0:	2380      	movs	r3, #128	; 0x80
 8005bf2:	015b      	lsls	r3, r3, #5
 8005bf4:	429a      	cmp	r2, r3
 8005bf6:	d109      	bne.n	8005c0c <HAL_UART_Transmit+0x4c>
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	691b      	ldr	r3, [r3, #16]
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d105      	bne.n	8005c0c <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8005c00:	68bb      	ldr	r3, [r7, #8]
 8005c02:	2201      	movs	r2, #1
 8005c04:	4013      	ands	r3, r2
 8005c06:	d001      	beq.n	8005c0c <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8005c08:	2301      	movs	r3, #1
 8005c0a:	e07d      	b.n	8005d08 <HAL_UART_Transmit+0x148>
      }
    }

    __HAL_LOCK(huart);
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	2274      	movs	r2, #116	; 0x74
 8005c10:	5c9b      	ldrb	r3, [r3, r2]
 8005c12:	2b01      	cmp	r3, #1
 8005c14:	d101      	bne.n	8005c1a <HAL_UART_Transmit+0x5a>
 8005c16:	2302      	movs	r3, #2
 8005c18:	e076      	b.n	8005d08 <HAL_UART_Transmit+0x148>
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	2274      	movs	r2, #116	; 0x74
 8005c1e:	2101      	movs	r1, #1
 8005c20:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	2280      	movs	r2, #128	; 0x80
 8005c26:	2100      	movs	r1, #0
 8005c28:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	2221      	movs	r2, #33	; 0x21
 8005c2e:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005c30:	f7fd fbf2 	bl	8003418 <HAL_GetTick>
 8005c34:	0003      	movs	r3, r0
 8005c36:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	1dba      	adds	r2, r7, #6
 8005c3c:	2150      	movs	r1, #80	; 0x50
 8005c3e:	8812      	ldrh	r2, [r2, #0]
 8005c40:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	1dba      	adds	r2, r7, #6
 8005c46:	2152      	movs	r1, #82	; 0x52
 8005c48:	8812      	ldrh	r2, [r2, #0]
 8005c4a:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	689a      	ldr	r2, [r3, #8]
 8005c50:	2380      	movs	r3, #128	; 0x80
 8005c52:	015b      	lsls	r3, r3, #5
 8005c54:	429a      	cmp	r2, r3
 8005c56:	d108      	bne.n	8005c6a <HAL_UART_Transmit+0xaa>
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	691b      	ldr	r3, [r3, #16]
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d104      	bne.n	8005c6a <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 8005c60:	2300      	movs	r3, #0
 8005c62:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005c64:	68bb      	ldr	r3, [r7, #8]
 8005c66:	61bb      	str	r3, [r7, #24]
 8005c68:	e003      	b.n	8005c72 <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 8005c6a:	68bb      	ldr	r3, [r7, #8]
 8005c6c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005c6e:	2300      	movs	r3, #0
 8005c70:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	2274      	movs	r2, #116	; 0x74
 8005c76:	2100      	movs	r1, #0
 8005c78:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 8005c7a:	e02c      	b.n	8005cd6 <HAL_UART_Transmit+0x116>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005c7c:	697a      	ldr	r2, [r7, #20]
 8005c7e:	68f8      	ldr	r0, [r7, #12]
 8005c80:	683b      	ldr	r3, [r7, #0]
 8005c82:	9300      	str	r3, [sp, #0]
 8005c84:	0013      	movs	r3, r2
 8005c86:	2200      	movs	r2, #0
 8005c88:	2180      	movs	r1, #128	; 0x80
 8005c8a:	f000 ff59 	bl	8006b40 <UART_WaitOnFlagUntilTimeout>
 8005c8e:	1e03      	subs	r3, r0, #0
 8005c90:	d001      	beq.n	8005c96 <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 8005c92:	2303      	movs	r3, #3
 8005c94:	e038      	b.n	8005d08 <HAL_UART_Transmit+0x148>
      }
      if (pdata8bits == NULL)
 8005c96:	69fb      	ldr	r3, [r7, #28]
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d10b      	bne.n	8005cb4 <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005c9c:	69bb      	ldr	r3, [r7, #24]
 8005c9e:	881b      	ldrh	r3, [r3, #0]
 8005ca0:	001a      	movs	r2, r3
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	05d2      	lsls	r2, r2, #23
 8005ca8:	0dd2      	lsrs	r2, r2, #23
 8005caa:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005cac:	69bb      	ldr	r3, [r7, #24]
 8005cae:	3302      	adds	r3, #2
 8005cb0:	61bb      	str	r3, [r7, #24]
 8005cb2:	e007      	b.n	8005cc4 <HAL_UART_Transmit+0x104>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005cb4:	69fb      	ldr	r3, [r7, #28]
 8005cb6:	781a      	ldrb	r2, [r3, #0]
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005cbe:	69fb      	ldr	r3, [r7, #28]
 8005cc0:	3301      	adds	r3, #1
 8005cc2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	2252      	movs	r2, #82	; 0x52
 8005cc8:	5a9b      	ldrh	r3, [r3, r2]
 8005cca:	b29b      	uxth	r3, r3
 8005ccc:	3b01      	subs	r3, #1
 8005cce:	b299      	uxth	r1, r3
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	2252      	movs	r2, #82	; 0x52
 8005cd4:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	2252      	movs	r2, #82	; 0x52
 8005cda:	5a9b      	ldrh	r3, [r3, r2]
 8005cdc:	b29b      	uxth	r3, r3
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d1cc      	bne.n	8005c7c <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005ce2:	697a      	ldr	r2, [r7, #20]
 8005ce4:	68f8      	ldr	r0, [r7, #12]
 8005ce6:	683b      	ldr	r3, [r7, #0]
 8005ce8:	9300      	str	r3, [sp, #0]
 8005cea:	0013      	movs	r3, r2
 8005cec:	2200      	movs	r2, #0
 8005cee:	2140      	movs	r1, #64	; 0x40
 8005cf0:	f000 ff26 	bl	8006b40 <UART_WaitOnFlagUntilTimeout>
 8005cf4:	1e03      	subs	r3, r0, #0
 8005cf6:	d001      	beq.n	8005cfc <HAL_UART_Transmit+0x13c>
    {
      return HAL_TIMEOUT;
 8005cf8:	2303      	movs	r3, #3
 8005cfa:	e005      	b.n	8005d08 <HAL_UART_Transmit+0x148>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	2220      	movs	r2, #32
 8005d00:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8005d02:	2300      	movs	r3, #0
 8005d04:	e000      	b.n	8005d08 <HAL_UART_Transmit+0x148>
  }
  else
  {
    return HAL_BUSY;
 8005d06:	2302      	movs	r3, #2
  }
}
 8005d08:	0018      	movs	r0, r3
 8005d0a:	46bd      	mov	sp, r7
 8005d0c:	b008      	add	sp, #32
 8005d0e:	bd80      	pop	{r7, pc}

08005d10 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005d10:	b580      	push	{r7, lr}
 8005d12:	b088      	sub	sp, #32
 8005d14:	af00      	add	r7, sp, #0
 8005d16:	60f8      	str	r0, [r7, #12]
 8005d18:	60b9      	str	r1, [r7, #8]
 8005d1a:	1dbb      	adds	r3, r7, #6
 8005d1c:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005d22:	2b20      	cmp	r3, #32
 8005d24:	d155      	bne.n	8005dd2 <HAL_UART_Receive_IT+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 8005d26:	68bb      	ldr	r3, [r7, #8]
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d003      	beq.n	8005d34 <HAL_UART_Receive_IT+0x24>
 8005d2c:	1dbb      	adds	r3, r7, #6
 8005d2e:	881b      	ldrh	r3, [r3, #0]
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d101      	bne.n	8005d38 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8005d34:	2301      	movs	r3, #1
 8005d36:	e04d      	b.n	8005dd4 <HAL_UART_Receive_IT+0xc4>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	689a      	ldr	r2, [r3, #8]
 8005d3c:	2380      	movs	r3, #128	; 0x80
 8005d3e:	015b      	lsls	r3, r3, #5
 8005d40:	429a      	cmp	r2, r3
 8005d42:	d109      	bne.n	8005d58 <HAL_UART_Receive_IT+0x48>
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	691b      	ldr	r3, [r3, #16]
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d105      	bne.n	8005d58 <HAL_UART_Receive_IT+0x48>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8005d4c:	68bb      	ldr	r3, [r7, #8]
 8005d4e:	2201      	movs	r2, #1
 8005d50:	4013      	ands	r3, r2
 8005d52:	d001      	beq.n	8005d58 <HAL_UART_Receive_IT+0x48>
      {
        return  HAL_ERROR;
 8005d54:	2301      	movs	r3, #1
 8005d56:	e03d      	b.n	8005dd4 <HAL_UART_Receive_IT+0xc4>
      }
    }

    __HAL_LOCK(huart);
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	2274      	movs	r2, #116	; 0x74
 8005d5c:	5c9b      	ldrb	r3, [r3, r2]
 8005d5e:	2b01      	cmp	r3, #1
 8005d60:	d101      	bne.n	8005d66 <HAL_UART_Receive_IT+0x56>
 8005d62:	2302      	movs	r3, #2
 8005d64:	e036      	b.n	8005dd4 <HAL_UART_Receive_IT+0xc4>
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	2274      	movs	r2, #116	; 0x74
 8005d6a:	2101      	movs	r1, #1
 8005d6c:	5499      	strb	r1, [r3, r2]

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	2200      	movs	r2, #0
 8005d72:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	4a18      	ldr	r2, [pc, #96]	; (8005ddc <HAL_UART_Receive_IT+0xcc>)
 8005d7a:	4293      	cmp	r3, r2
 8005d7c:	d020      	beq.n	8005dc0 <HAL_UART_Receive_IT+0xb0>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	685a      	ldr	r2, [r3, #4]
 8005d84:	2380      	movs	r3, #128	; 0x80
 8005d86:	041b      	lsls	r3, r3, #16
 8005d88:	4013      	ands	r3, r2
 8005d8a:	d019      	beq.n	8005dc0 <HAL_UART_Receive_IT+0xb0>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005d8c:	f3ef 8310 	mrs	r3, PRIMASK
 8005d90:	613b      	str	r3, [r7, #16]
  return(result);
 8005d92:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005d94:	61fb      	str	r3, [r7, #28]
 8005d96:	2301      	movs	r3, #1
 8005d98:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d9a:	697b      	ldr	r3, [r7, #20]
 8005d9c:	f383 8810 	msr	PRIMASK, r3
}
 8005da0:	46c0      	nop			; (mov r8, r8)
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	681a      	ldr	r2, [r3, #0]
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	2180      	movs	r1, #128	; 0x80
 8005dae:	04c9      	lsls	r1, r1, #19
 8005db0:	430a      	orrs	r2, r1
 8005db2:	601a      	str	r2, [r3, #0]
 8005db4:	69fb      	ldr	r3, [r7, #28]
 8005db6:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005db8:	69bb      	ldr	r3, [r7, #24]
 8005dba:	f383 8810 	msr	PRIMASK, r3
}
 8005dbe:	46c0      	nop			; (mov r8, r8)
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005dc0:	1dbb      	adds	r3, r7, #6
 8005dc2:	881a      	ldrh	r2, [r3, #0]
 8005dc4:	68b9      	ldr	r1, [r7, #8]
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	0018      	movs	r0, r3
 8005dca:	f000 ff7d 	bl	8006cc8 <UART_Start_Receive_IT>
 8005dce:	0003      	movs	r3, r0
 8005dd0:	e000      	b.n	8005dd4 <HAL_UART_Receive_IT+0xc4>
  }
  else
  {
    return HAL_BUSY;
 8005dd2:	2302      	movs	r3, #2
  }
}
 8005dd4:	0018      	movs	r0, r3
 8005dd6:	46bd      	mov	sp, r7
 8005dd8:	b008      	add	sp, #32
 8005dda:	bd80      	pop	{r7, pc}
 8005ddc:	40004800 	.word	0x40004800

08005de0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005de0:	b590      	push	{r4, r7, lr}
 8005de2:	b0ab      	sub	sp, #172	; 0xac
 8005de4:	af00      	add	r7, sp, #0
 8005de6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	69db      	ldr	r3, [r3, #28]
 8005dee:	22a4      	movs	r2, #164	; 0xa4
 8005df0:	18b9      	adds	r1, r7, r2
 8005df2:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	20a0      	movs	r0, #160	; 0xa0
 8005dfc:	1839      	adds	r1, r7, r0
 8005dfe:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	689b      	ldr	r3, [r3, #8]
 8005e06:	219c      	movs	r1, #156	; 0x9c
 8005e08:	1879      	adds	r1, r7, r1
 8005e0a:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005e0c:	0011      	movs	r1, r2
 8005e0e:	18bb      	adds	r3, r7, r2
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	4a99      	ldr	r2, [pc, #612]	; (8006078 <HAL_UART_IRQHandler+0x298>)
 8005e14:	4013      	ands	r3, r2
 8005e16:	2298      	movs	r2, #152	; 0x98
 8005e18:	18bc      	adds	r4, r7, r2
 8005e1a:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 8005e1c:	18bb      	adds	r3, r7, r2
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d114      	bne.n	8005e4e <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8005e24:	187b      	adds	r3, r7, r1
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	2220      	movs	r2, #32
 8005e2a:	4013      	ands	r3, r2
 8005e2c:	d00f      	beq.n	8005e4e <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005e2e:	183b      	adds	r3, r7, r0
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	2220      	movs	r2, #32
 8005e34:	4013      	ands	r3, r2
 8005e36:	d00a      	beq.n	8005e4e <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d100      	bne.n	8005e42 <HAL_UART_IRQHandler+0x62>
 8005e40:	e298      	b.n	8006374 <HAL_UART_IRQHandler+0x594>
      {
        huart->RxISR(huart);
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005e46:	687a      	ldr	r2, [r7, #4]
 8005e48:	0010      	movs	r0, r2
 8005e4a:	4798      	blx	r3
      }
      return;
 8005e4c:	e292      	b.n	8006374 <HAL_UART_IRQHandler+0x594>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005e4e:	2398      	movs	r3, #152	; 0x98
 8005e50:	18fb      	adds	r3, r7, r3
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d100      	bne.n	8005e5a <HAL_UART_IRQHandler+0x7a>
 8005e58:	e114      	b.n	8006084 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8005e5a:	239c      	movs	r3, #156	; 0x9c
 8005e5c:	18fb      	adds	r3, r7, r3
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	2201      	movs	r2, #1
 8005e62:	4013      	ands	r3, r2
 8005e64:	d106      	bne.n	8005e74 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8005e66:	23a0      	movs	r3, #160	; 0xa0
 8005e68:	18fb      	adds	r3, r7, r3
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	4a83      	ldr	r2, [pc, #524]	; (800607c <HAL_UART_IRQHandler+0x29c>)
 8005e6e:	4013      	ands	r3, r2
 8005e70:	d100      	bne.n	8005e74 <HAL_UART_IRQHandler+0x94>
 8005e72:	e107      	b.n	8006084 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005e74:	23a4      	movs	r3, #164	; 0xa4
 8005e76:	18fb      	adds	r3, r7, r3
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	2201      	movs	r2, #1
 8005e7c:	4013      	ands	r3, r2
 8005e7e:	d012      	beq.n	8005ea6 <HAL_UART_IRQHandler+0xc6>
 8005e80:	23a0      	movs	r3, #160	; 0xa0
 8005e82:	18fb      	adds	r3, r7, r3
 8005e84:	681a      	ldr	r2, [r3, #0]
 8005e86:	2380      	movs	r3, #128	; 0x80
 8005e88:	005b      	lsls	r3, r3, #1
 8005e8a:	4013      	ands	r3, r2
 8005e8c:	d00b      	beq.n	8005ea6 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	2201      	movs	r2, #1
 8005e94:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	2280      	movs	r2, #128	; 0x80
 8005e9a:	589b      	ldr	r3, [r3, r2]
 8005e9c:	2201      	movs	r2, #1
 8005e9e:	431a      	orrs	r2, r3
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	2180      	movs	r1, #128	; 0x80
 8005ea4:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005ea6:	23a4      	movs	r3, #164	; 0xa4
 8005ea8:	18fb      	adds	r3, r7, r3
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	2202      	movs	r2, #2
 8005eae:	4013      	ands	r3, r2
 8005eb0:	d011      	beq.n	8005ed6 <HAL_UART_IRQHandler+0xf6>
 8005eb2:	239c      	movs	r3, #156	; 0x9c
 8005eb4:	18fb      	adds	r3, r7, r3
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	2201      	movs	r2, #1
 8005eba:	4013      	ands	r3, r2
 8005ebc:	d00b      	beq.n	8005ed6 <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	2202      	movs	r2, #2
 8005ec4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	2280      	movs	r2, #128	; 0x80
 8005eca:	589b      	ldr	r3, [r3, r2]
 8005ecc:	2204      	movs	r2, #4
 8005ece:	431a      	orrs	r2, r3
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	2180      	movs	r1, #128	; 0x80
 8005ed4:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005ed6:	23a4      	movs	r3, #164	; 0xa4
 8005ed8:	18fb      	adds	r3, r7, r3
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	2204      	movs	r2, #4
 8005ede:	4013      	ands	r3, r2
 8005ee0:	d011      	beq.n	8005f06 <HAL_UART_IRQHandler+0x126>
 8005ee2:	239c      	movs	r3, #156	; 0x9c
 8005ee4:	18fb      	adds	r3, r7, r3
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	2201      	movs	r2, #1
 8005eea:	4013      	ands	r3, r2
 8005eec:	d00b      	beq.n	8005f06 <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	2204      	movs	r2, #4
 8005ef4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	2280      	movs	r2, #128	; 0x80
 8005efa:	589b      	ldr	r3, [r3, r2]
 8005efc:	2202      	movs	r2, #2
 8005efe:	431a      	orrs	r2, r3
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	2180      	movs	r1, #128	; 0x80
 8005f04:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005f06:	23a4      	movs	r3, #164	; 0xa4
 8005f08:	18fb      	adds	r3, r7, r3
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	2208      	movs	r2, #8
 8005f0e:	4013      	ands	r3, r2
 8005f10:	d017      	beq.n	8005f42 <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005f12:	23a0      	movs	r3, #160	; 0xa0
 8005f14:	18fb      	adds	r3, r7, r3
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	2220      	movs	r2, #32
 8005f1a:	4013      	ands	r3, r2
 8005f1c:	d105      	bne.n	8005f2a <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8005f1e:	239c      	movs	r3, #156	; 0x9c
 8005f20:	18fb      	adds	r3, r7, r3
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	2201      	movs	r2, #1
 8005f26:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005f28:	d00b      	beq.n	8005f42 <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	2208      	movs	r2, #8
 8005f30:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	2280      	movs	r2, #128	; 0x80
 8005f36:	589b      	ldr	r3, [r3, r2]
 8005f38:	2208      	movs	r2, #8
 8005f3a:	431a      	orrs	r2, r3
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	2180      	movs	r1, #128	; 0x80
 8005f40:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005f42:	23a4      	movs	r3, #164	; 0xa4
 8005f44:	18fb      	adds	r3, r7, r3
 8005f46:	681a      	ldr	r2, [r3, #0]
 8005f48:	2380      	movs	r3, #128	; 0x80
 8005f4a:	011b      	lsls	r3, r3, #4
 8005f4c:	4013      	ands	r3, r2
 8005f4e:	d013      	beq.n	8005f78 <HAL_UART_IRQHandler+0x198>
 8005f50:	23a0      	movs	r3, #160	; 0xa0
 8005f52:	18fb      	adds	r3, r7, r3
 8005f54:	681a      	ldr	r2, [r3, #0]
 8005f56:	2380      	movs	r3, #128	; 0x80
 8005f58:	04db      	lsls	r3, r3, #19
 8005f5a:	4013      	ands	r3, r2
 8005f5c:	d00c      	beq.n	8005f78 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	2280      	movs	r2, #128	; 0x80
 8005f64:	0112      	lsls	r2, r2, #4
 8005f66:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	2280      	movs	r2, #128	; 0x80
 8005f6c:	589b      	ldr	r3, [r3, r2]
 8005f6e:	2220      	movs	r2, #32
 8005f70:	431a      	orrs	r2, r3
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	2180      	movs	r1, #128	; 0x80
 8005f76:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	2280      	movs	r2, #128	; 0x80
 8005f7c:	589b      	ldr	r3, [r3, r2]
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d100      	bne.n	8005f84 <HAL_UART_IRQHandler+0x1a4>
 8005f82:	e1f9      	b.n	8006378 <HAL_UART_IRQHandler+0x598>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8005f84:	23a4      	movs	r3, #164	; 0xa4
 8005f86:	18fb      	adds	r3, r7, r3
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	2220      	movs	r2, #32
 8005f8c:	4013      	ands	r3, r2
 8005f8e:	d00e      	beq.n	8005fae <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005f90:	23a0      	movs	r3, #160	; 0xa0
 8005f92:	18fb      	adds	r3, r7, r3
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	2220      	movs	r2, #32
 8005f98:	4013      	ands	r3, r2
 8005f9a:	d008      	beq.n	8005fae <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d004      	beq.n	8005fae <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005fa8:	687a      	ldr	r2, [r7, #4]
 8005faa:	0010      	movs	r0, r2
 8005fac:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	2280      	movs	r2, #128	; 0x80
 8005fb2:	589b      	ldr	r3, [r3, r2]
 8005fb4:	2194      	movs	r1, #148	; 0x94
 8005fb6:	187a      	adds	r2, r7, r1
 8005fb8:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	689b      	ldr	r3, [r3, #8]
 8005fc0:	2240      	movs	r2, #64	; 0x40
 8005fc2:	4013      	ands	r3, r2
 8005fc4:	2b40      	cmp	r3, #64	; 0x40
 8005fc6:	d004      	beq.n	8005fd2 <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005fc8:	187b      	adds	r3, r7, r1
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	2228      	movs	r2, #40	; 0x28
 8005fce:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005fd0:	d047      	beq.n	8006062 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	0018      	movs	r0, r3
 8005fd6:	f000 ff27 	bl	8006e28 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	689b      	ldr	r3, [r3, #8]
 8005fe0:	2240      	movs	r2, #64	; 0x40
 8005fe2:	4013      	ands	r3, r2
 8005fe4:	2b40      	cmp	r3, #64	; 0x40
 8005fe6:	d137      	bne.n	8006058 <HAL_UART_IRQHandler+0x278>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005fe8:	f3ef 8310 	mrs	r3, PRIMASK
 8005fec:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 8005fee:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005ff0:	2090      	movs	r0, #144	; 0x90
 8005ff2:	183a      	adds	r2, r7, r0
 8005ff4:	6013      	str	r3, [r2, #0]
 8005ff6:	2301      	movs	r3, #1
 8005ff8:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005ffa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005ffc:	f383 8810 	msr	PRIMASK, r3
}
 8006000:	46c0      	nop			; (mov r8, r8)
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	689a      	ldr	r2, [r3, #8]
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	2140      	movs	r1, #64	; 0x40
 800600e:	438a      	bics	r2, r1
 8006010:	609a      	str	r2, [r3, #8]
 8006012:	183b      	adds	r3, r7, r0
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006018:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800601a:	f383 8810 	msr	PRIMASK, r3
}
 800601e:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006024:	2b00      	cmp	r3, #0
 8006026:	d012      	beq.n	800604e <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800602c:	4a14      	ldr	r2, [pc, #80]	; (8006080 <HAL_UART_IRQHandler+0x2a0>)
 800602e:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006034:	0018      	movs	r0, r3
 8006036:	f7fd ff23 	bl	8003e80 <HAL_DMA_Abort_IT>
 800603a:	1e03      	subs	r3, r0, #0
 800603c:	d01a      	beq.n	8006074 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006042:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006048:	0018      	movs	r0, r3
 800604a:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800604c:	e012      	b.n	8006074 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	0018      	movs	r0, r3
 8006052:	f000 f9a7 	bl	80063a4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006056:	e00d      	b.n	8006074 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	0018      	movs	r0, r3
 800605c:	f000 f9a2 	bl	80063a4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006060:	e008      	b.n	8006074 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	0018      	movs	r0, r3
 8006066:	f000 f99d 	bl	80063a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	2280      	movs	r2, #128	; 0x80
 800606e:	2100      	movs	r1, #0
 8006070:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8006072:	e181      	b.n	8006378 <HAL_UART_IRQHandler+0x598>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006074:	46c0      	nop			; (mov r8, r8)
    return;
 8006076:	e17f      	b.n	8006378 <HAL_UART_IRQHandler+0x598>
 8006078:	0000080f 	.word	0x0000080f
 800607c:	04000120 	.word	0x04000120
 8006080:	08006eed 	.word	0x08006eed

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006088:	2b01      	cmp	r3, #1
 800608a:	d000      	beq.n	800608e <HAL_UART_IRQHandler+0x2ae>
 800608c:	e133      	b.n	80062f6 <HAL_UART_IRQHandler+0x516>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800608e:	23a4      	movs	r3, #164	; 0xa4
 8006090:	18fb      	adds	r3, r7, r3
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	2210      	movs	r2, #16
 8006096:	4013      	ands	r3, r2
 8006098:	d100      	bne.n	800609c <HAL_UART_IRQHandler+0x2bc>
 800609a:	e12c      	b.n	80062f6 <HAL_UART_IRQHandler+0x516>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800609c:	23a0      	movs	r3, #160	; 0xa0
 800609e:	18fb      	adds	r3, r7, r3
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	2210      	movs	r2, #16
 80060a4:	4013      	ands	r3, r2
 80060a6:	d100      	bne.n	80060aa <HAL_UART_IRQHandler+0x2ca>
 80060a8:	e125      	b.n	80062f6 <HAL_UART_IRQHandler+0x516>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	2210      	movs	r2, #16
 80060b0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	689b      	ldr	r3, [r3, #8]
 80060b8:	2240      	movs	r2, #64	; 0x40
 80060ba:	4013      	ands	r3, r2
 80060bc:	2b40      	cmp	r3, #64	; 0x40
 80060be:	d000      	beq.n	80060c2 <HAL_UART_IRQHandler+0x2e2>
 80060c0:	e09d      	b.n	80061fe <HAL_UART_IRQHandler+0x41e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	685a      	ldr	r2, [r3, #4]
 80060ca:	217e      	movs	r1, #126	; 0x7e
 80060cc:	187b      	adds	r3, r7, r1
 80060ce:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 80060d0:	187b      	adds	r3, r7, r1
 80060d2:	881b      	ldrh	r3, [r3, #0]
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d100      	bne.n	80060da <HAL_UART_IRQHandler+0x2fa>
 80060d8:	e150      	b.n	800637c <HAL_UART_IRQHandler+0x59c>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	2258      	movs	r2, #88	; 0x58
 80060de:	5a9b      	ldrh	r3, [r3, r2]
 80060e0:	187a      	adds	r2, r7, r1
 80060e2:	8812      	ldrh	r2, [r2, #0]
 80060e4:	429a      	cmp	r2, r3
 80060e6:	d300      	bcc.n	80060ea <HAL_UART_IRQHandler+0x30a>
 80060e8:	e148      	b.n	800637c <HAL_UART_IRQHandler+0x59c>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	187a      	adds	r2, r7, r1
 80060ee:	215a      	movs	r1, #90	; 0x5a
 80060f0:	8812      	ldrh	r2, [r2, #0]
 80060f2:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	2220      	movs	r2, #32
 80060fe:	4013      	ands	r3, r2
 8006100:	d16e      	bne.n	80061e0 <HAL_UART_IRQHandler+0x400>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006102:	f3ef 8310 	mrs	r3, PRIMASK
 8006106:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8006108:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800610a:	67bb      	str	r3, [r7, #120]	; 0x78
 800610c:	2301      	movs	r3, #1
 800610e:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006110:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006112:	f383 8810 	msr	PRIMASK, r3
}
 8006116:	46c0      	nop			; (mov r8, r8)
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	681a      	ldr	r2, [r3, #0]
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	499a      	ldr	r1, [pc, #616]	; (800638c <HAL_UART_IRQHandler+0x5ac>)
 8006124:	400a      	ands	r2, r1
 8006126:	601a      	str	r2, [r3, #0]
 8006128:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800612a:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800612c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800612e:	f383 8810 	msr	PRIMASK, r3
}
 8006132:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006134:	f3ef 8310 	mrs	r3, PRIMASK
 8006138:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 800613a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800613c:	677b      	str	r3, [r7, #116]	; 0x74
 800613e:	2301      	movs	r3, #1
 8006140:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006142:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006144:	f383 8810 	msr	PRIMASK, r3
}
 8006148:	46c0      	nop			; (mov r8, r8)
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	689a      	ldr	r2, [r3, #8]
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	2101      	movs	r1, #1
 8006156:	438a      	bics	r2, r1
 8006158:	609a      	str	r2, [r3, #8]
 800615a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800615c:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800615e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006160:	f383 8810 	msr	PRIMASK, r3
}
 8006164:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006166:	f3ef 8310 	mrs	r3, PRIMASK
 800616a:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 800616c:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800616e:	673b      	str	r3, [r7, #112]	; 0x70
 8006170:	2301      	movs	r3, #1
 8006172:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006174:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006176:	f383 8810 	msr	PRIMASK, r3
}
 800617a:	46c0      	nop			; (mov r8, r8)
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	689a      	ldr	r2, [r3, #8]
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	2140      	movs	r1, #64	; 0x40
 8006188:	438a      	bics	r2, r1
 800618a:	609a      	str	r2, [r3, #8]
 800618c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800618e:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006190:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006192:	f383 8810 	msr	PRIMASK, r3
}
 8006196:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	2220      	movs	r2, #32
 800619c:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	2200      	movs	r2, #0
 80061a2:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80061a4:	f3ef 8310 	mrs	r3, PRIMASK
 80061a8:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 80061aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80061ac:	66fb      	str	r3, [r7, #108]	; 0x6c
 80061ae:	2301      	movs	r3, #1
 80061b0:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80061b2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80061b4:	f383 8810 	msr	PRIMASK, r3
}
 80061b8:	46c0      	nop			; (mov r8, r8)
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	681a      	ldr	r2, [r3, #0]
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	2110      	movs	r1, #16
 80061c6:	438a      	bics	r2, r1
 80061c8:	601a      	str	r2, [r3, #0]
 80061ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80061cc:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80061ce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80061d0:	f383 8810 	msr	PRIMASK, r3
}
 80061d4:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061da:	0018      	movs	r0, r3
 80061dc:	f7fd fe10 	bl	8003e00 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	2258      	movs	r2, #88	; 0x58
 80061e4:	5a9a      	ldrh	r2, [r3, r2]
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	215a      	movs	r1, #90	; 0x5a
 80061ea:	5a5b      	ldrh	r3, [r3, r1]
 80061ec:	b29b      	uxth	r3, r3
 80061ee:	1ad3      	subs	r3, r2, r3
 80061f0:	b29a      	uxth	r2, r3
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	0011      	movs	r1, r2
 80061f6:	0018      	movs	r0, r3
 80061f8:	f000 f8dc 	bl	80063b4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80061fc:	e0be      	b.n	800637c <HAL_UART_IRQHandler+0x59c>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	2258      	movs	r2, #88	; 0x58
 8006202:	5a99      	ldrh	r1, [r3, r2]
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	225a      	movs	r2, #90	; 0x5a
 8006208:	5a9b      	ldrh	r3, [r3, r2]
 800620a:	b29a      	uxth	r2, r3
 800620c:	208e      	movs	r0, #142	; 0x8e
 800620e:	183b      	adds	r3, r7, r0
 8006210:	1a8a      	subs	r2, r1, r2
 8006212:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	225a      	movs	r2, #90	; 0x5a
 8006218:	5a9b      	ldrh	r3, [r3, r2]
 800621a:	b29b      	uxth	r3, r3
 800621c:	2b00      	cmp	r3, #0
 800621e:	d100      	bne.n	8006222 <HAL_UART_IRQHandler+0x442>
 8006220:	e0ae      	b.n	8006380 <HAL_UART_IRQHandler+0x5a0>
          && (nb_rx_data > 0U))
 8006222:	183b      	adds	r3, r7, r0
 8006224:	881b      	ldrh	r3, [r3, #0]
 8006226:	2b00      	cmp	r3, #0
 8006228:	d100      	bne.n	800622c <HAL_UART_IRQHandler+0x44c>
 800622a:	e0a9      	b.n	8006380 <HAL_UART_IRQHandler+0x5a0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800622c:	f3ef 8310 	mrs	r3, PRIMASK
 8006230:	60fb      	str	r3, [r7, #12]
  return(result);
 8006232:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006234:	2488      	movs	r4, #136	; 0x88
 8006236:	193a      	adds	r2, r7, r4
 8006238:	6013      	str	r3, [r2, #0]
 800623a:	2301      	movs	r3, #1
 800623c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800623e:	693b      	ldr	r3, [r7, #16]
 8006240:	f383 8810 	msr	PRIMASK, r3
}
 8006244:	46c0      	nop			; (mov r8, r8)
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	681a      	ldr	r2, [r3, #0]
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	494f      	ldr	r1, [pc, #316]	; (8006390 <HAL_UART_IRQHandler+0x5b0>)
 8006252:	400a      	ands	r2, r1
 8006254:	601a      	str	r2, [r3, #0]
 8006256:	193b      	adds	r3, r7, r4
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800625c:	697b      	ldr	r3, [r7, #20]
 800625e:	f383 8810 	msr	PRIMASK, r3
}
 8006262:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006264:	f3ef 8310 	mrs	r3, PRIMASK
 8006268:	61bb      	str	r3, [r7, #24]
  return(result);
 800626a:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800626c:	2484      	movs	r4, #132	; 0x84
 800626e:	193a      	adds	r2, r7, r4
 8006270:	6013      	str	r3, [r2, #0]
 8006272:	2301      	movs	r3, #1
 8006274:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006276:	69fb      	ldr	r3, [r7, #28]
 8006278:	f383 8810 	msr	PRIMASK, r3
}
 800627c:	46c0      	nop			; (mov r8, r8)
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	689a      	ldr	r2, [r3, #8]
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	2101      	movs	r1, #1
 800628a:	438a      	bics	r2, r1
 800628c:	609a      	str	r2, [r3, #8]
 800628e:	193b      	adds	r3, r7, r4
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006294:	6a3b      	ldr	r3, [r7, #32]
 8006296:	f383 8810 	msr	PRIMASK, r3
}
 800629a:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	2220      	movs	r2, #32
 80062a0:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	2200      	movs	r2, #0
 80062a6:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	2200      	movs	r2, #0
 80062ac:	665a      	str	r2, [r3, #100]	; 0x64
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80062ae:	f3ef 8310 	mrs	r3, PRIMASK
 80062b2:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80062b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80062b6:	2480      	movs	r4, #128	; 0x80
 80062b8:	193a      	adds	r2, r7, r4
 80062ba:	6013      	str	r3, [r2, #0]
 80062bc:	2301      	movs	r3, #1
 80062be:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80062c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062c2:	f383 8810 	msr	PRIMASK, r3
}
 80062c6:	46c0      	nop			; (mov r8, r8)
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	681a      	ldr	r2, [r3, #0]
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	2110      	movs	r1, #16
 80062d4:	438a      	bics	r2, r1
 80062d6:	601a      	str	r2, [r3, #0]
 80062d8:	193b      	adds	r3, r7, r4
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80062de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062e0:	f383 8810 	msr	PRIMASK, r3
}
 80062e4:	46c0      	nop			; (mov r8, r8)
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80062e6:	183b      	adds	r3, r7, r0
 80062e8:	881a      	ldrh	r2, [r3, #0]
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	0011      	movs	r1, r2
 80062ee:	0018      	movs	r0, r3
 80062f0:	f000 f860 	bl	80063b4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80062f4:	e044      	b.n	8006380 <HAL_UART_IRQHandler+0x5a0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80062f6:	23a4      	movs	r3, #164	; 0xa4
 80062f8:	18fb      	adds	r3, r7, r3
 80062fa:	681a      	ldr	r2, [r3, #0]
 80062fc:	2380      	movs	r3, #128	; 0x80
 80062fe:	035b      	lsls	r3, r3, #13
 8006300:	4013      	ands	r3, r2
 8006302:	d010      	beq.n	8006326 <HAL_UART_IRQHandler+0x546>
 8006304:	239c      	movs	r3, #156	; 0x9c
 8006306:	18fb      	adds	r3, r7, r3
 8006308:	681a      	ldr	r2, [r3, #0]
 800630a:	2380      	movs	r3, #128	; 0x80
 800630c:	03db      	lsls	r3, r3, #15
 800630e:	4013      	ands	r3, r2
 8006310:	d009      	beq.n	8006326 <HAL_UART_IRQHandler+0x546>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	2280      	movs	r2, #128	; 0x80
 8006318:	0352      	lsls	r2, r2, #13
 800631a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	0018      	movs	r0, r3
 8006320:	f000 ff8e 	bl	8007240 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006324:	e02f      	b.n	8006386 <HAL_UART_IRQHandler+0x5a6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8006326:	23a4      	movs	r3, #164	; 0xa4
 8006328:	18fb      	adds	r3, r7, r3
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	2280      	movs	r2, #128	; 0x80
 800632e:	4013      	ands	r3, r2
 8006330:	d00f      	beq.n	8006352 <HAL_UART_IRQHandler+0x572>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8006332:	23a0      	movs	r3, #160	; 0xa0
 8006334:	18fb      	adds	r3, r7, r3
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	2280      	movs	r2, #128	; 0x80
 800633a:	4013      	ands	r3, r2
 800633c:	d009      	beq.n	8006352 <HAL_UART_IRQHandler+0x572>
  {
    if (huart->TxISR != NULL)
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006342:	2b00      	cmp	r3, #0
 8006344:	d01e      	beq.n	8006384 <HAL_UART_IRQHandler+0x5a4>
    {
      huart->TxISR(huart);
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800634a:	687a      	ldr	r2, [r7, #4]
 800634c:	0010      	movs	r0, r2
 800634e:	4798      	blx	r3
    }
    return;
 8006350:	e018      	b.n	8006384 <HAL_UART_IRQHandler+0x5a4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006352:	23a4      	movs	r3, #164	; 0xa4
 8006354:	18fb      	adds	r3, r7, r3
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	2240      	movs	r2, #64	; 0x40
 800635a:	4013      	ands	r3, r2
 800635c:	d013      	beq.n	8006386 <HAL_UART_IRQHandler+0x5a6>
 800635e:	23a0      	movs	r3, #160	; 0xa0
 8006360:	18fb      	adds	r3, r7, r3
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	2240      	movs	r2, #64	; 0x40
 8006366:	4013      	ands	r3, r2
 8006368:	d00d      	beq.n	8006386 <HAL_UART_IRQHandler+0x5a6>
  {
    UART_EndTransmit_IT(huart);
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	0018      	movs	r0, r3
 800636e:	f000 fdd4 	bl	8006f1a <UART_EndTransmit_IT>
    return;
 8006372:	e008      	b.n	8006386 <HAL_UART_IRQHandler+0x5a6>
      return;
 8006374:	46c0      	nop			; (mov r8, r8)
 8006376:	e006      	b.n	8006386 <HAL_UART_IRQHandler+0x5a6>
    return;
 8006378:	46c0      	nop			; (mov r8, r8)
 800637a:	e004      	b.n	8006386 <HAL_UART_IRQHandler+0x5a6>
      return;
 800637c:	46c0      	nop			; (mov r8, r8)
 800637e:	e002      	b.n	8006386 <HAL_UART_IRQHandler+0x5a6>
      return;
 8006380:	46c0      	nop			; (mov r8, r8)
 8006382:	e000      	b.n	8006386 <HAL_UART_IRQHandler+0x5a6>
    return;
 8006384:	46c0      	nop			; (mov r8, r8)
  }

}
 8006386:	46bd      	mov	sp, r7
 8006388:	b02b      	add	sp, #172	; 0xac
 800638a:	bd90      	pop	{r4, r7, pc}
 800638c:	fffffeff 	.word	0xfffffeff
 8006390:	fffffedf 	.word	0xfffffedf

08006394 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006394:	b580      	push	{r7, lr}
 8006396:	b082      	sub	sp, #8
 8006398:	af00      	add	r7, sp, #0
 800639a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800639c:	46c0      	nop			; (mov r8, r8)
 800639e:	46bd      	mov	sp, r7
 80063a0:	b002      	add	sp, #8
 80063a2:	bd80      	pop	{r7, pc}

080063a4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80063a4:	b580      	push	{r7, lr}
 80063a6:	b082      	sub	sp, #8
 80063a8:	af00      	add	r7, sp, #0
 80063aa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80063ac:	46c0      	nop			; (mov r8, r8)
 80063ae:	46bd      	mov	sp, r7
 80063b0:	b002      	add	sp, #8
 80063b2:	bd80      	pop	{r7, pc}

080063b4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80063b4:	b580      	push	{r7, lr}
 80063b6:	b082      	sub	sp, #8
 80063b8:	af00      	add	r7, sp, #0
 80063ba:	6078      	str	r0, [r7, #4]
 80063bc:	000a      	movs	r2, r1
 80063be:	1cbb      	adds	r3, r7, #2
 80063c0:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80063c2:	46c0      	nop			; (mov r8, r8)
 80063c4:	46bd      	mov	sp, r7
 80063c6:	b002      	add	sp, #8
 80063c8:	bd80      	pop	{r7, pc}
	...

080063cc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80063cc:	b5b0      	push	{r4, r5, r7, lr}
 80063ce:	b08e      	sub	sp, #56	; 0x38
 80063d0:	af00      	add	r7, sp, #0
 80063d2:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80063d4:	231a      	movs	r3, #26
 80063d6:	2218      	movs	r2, #24
 80063d8:	4694      	mov	ip, r2
 80063da:	44bc      	add	ip, r7
 80063dc:	4463      	add	r3, ip
 80063de:	2200      	movs	r2, #0
 80063e0:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80063e2:	69fb      	ldr	r3, [r7, #28]
 80063e4:	689a      	ldr	r2, [r3, #8]
 80063e6:	69fb      	ldr	r3, [r7, #28]
 80063e8:	691b      	ldr	r3, [r3, #16]
 80063ea:	431a      	orrs	r2, r3
 80063ec:	69fb      	ldr	r3, [r7, #28]
 80063ee:	695b      	ldr	r3, [r3, #20]
 80063f0:	431a      	orrs	r2, r3
 80063f2:	69fb      	ldr	r3, [r7, #28]
 80063f4:	69db      	ldr	r3, [r3, #28]
 80063f6:	4313      	orrs	r3, r2
 80063f8:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80063fa:	69fb      	ldr	r3, [r7, #28]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	4ab0      	ldr	r2, [pc, #704]	; (80066c4 <UART_SetConfig+0x2f8>)
 8006402:	4013      	ands	r3, r2
 8006404:	0019      	movs	r1, r3
 8006406:	69fb      	ldr	r3, [r7, #28]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800640c:	430a      	orrs	r2, r1
 800640e:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006410:	69fb      	ldr	r3, [r7, #28]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	685b      	ldr	r3, [r3, #4]
 8006416:	4aac      	ldr	r2, [pc, #688]	; (80066c8 <UART_SetConfig+0x2fc>)
 8006418:	4013      	ands	r3, r2
 800641a:	0019      	movs	r1, r3
 800641c:	69fb      	ldr	r3, [r7, #28]
 800641e:	68da      	ldr	r2, [r3, #12]
 8006420:	69fb      	ldr	r3, [r7, #28]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	430a      	orrs	r2, r1
 8006426:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006428:	69fb      	ldr	r3, [r7, #28]
 800642a:	699b      	ldr	r3, [r3, #24]
 800642c:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800642e:	69fb      	ldr	r3, [r7, #28]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	4aa6      	ldr	r2, [pc, #664]	; (80066cc <UART_SetConfig+0x300>)
 8006434:	4293      	cmp	r3, r2
 8006436:	d004      	beq.n	8006442 <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006438:	69fb      	ldr	r3, [r7, #28]
 800643a:	6a1b      	ldr	r3, [r3, #32]
 800643c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800643e:	4313      	orrs	r3, r2
 8006440:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006442:	69fb      	ldr	r3, [r7, #28]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	689b      	ldr	r3, [r3, #8]
 8006448:	4aa1      	ldr	r2, [pc, #644]	; (80066d0 <UART_SetConfig+0x304>)
 800644a:	4013      	ands	r3, r2
 800644c:	0019      	movs	r1, r3
 800644e:	69fb      	ldr	r3, [r7, #28]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006454:	430a      	orrs	r2, r1
 8006456:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006458:	69fb      	ldr	r3, [r7, #28]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	4a9d      	ldr	r2, [pc, #628]	; (80066d4 <UART_SetConfig+0x308>)
 800645e:	4293      	cmp	r3, r2
 8006460:	d136      	bne.n	80064d0 <UART_SetConfig+0x104>
 8006462:	4b9d      	ldr	r3, [pc, #628]	; (80066d8 <UART_SetConfig+0x30c>)
 8006464:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006466:	2203      	movs	r2, #3
 8006468:	4013      	ands	r3, r2
 800646a:	2b03      	cmp	r3, #3
 800646c:	d020      	beq.n	80064b0 <UART_SetConfig+0xe4>
 800646e:	d827      	bhi.n	80064c0 <UART_SetConfig+0xf4>
 8006470:	2b02      	cmp	r3, #2
 8006472:	d00d      	beq.n	8006490 <UART_SetConfig+0xc4>
 8006474:	d824      	bhi.n	80064c0 <UART_SetConfig+0xf4>
 8006476:	2b00      	cmp	r3, #0
 8006478:	d002      	beq.n	8006480 <UART_SetConfig+0xb4>
 800647a:	2b01      	cmp	r3, #1
 800647c:	d010      	beq.n	80064a0 <UART_SetConfig+0xd4>
 800647e:	e01f      	b.n	80064c0 <UART_SetConfig+0xf4>
 8006480:	231b      	movs	r3, #27
 8006482:	2218      	movs	r2, #24
 8006484:	4694      	mov	ip, r2
 8006486:	44bc      	add	ip, r7
 8006488:	4463      	add	r3, ip
 800648a:	2201      	movs	r2, #1
 800648c:	701a      	strb	r2, [r3, #0]
 800648e:	e0c5      	b.n	800661c <UART_SetConfig+0x250>
 8006490:	231b      	movs	r3, #27
 8006492:	2218      	movs	r2, #24
 8006494:	4694      	mov	ip, r2
 8006496:	44bc      	add	ip, r7
 8006498:	4463      	add	r3, ip
 800649a:	2202      	movs	r2, #2
 800649c:	701a      	strb	r2, [r3, #0]
 800649e:	e0bd      	b.n	800661c <UART_SetConfig+0x250>
 80064a0:	231b      	movs	r3, #27
 80064a2:	2218      	movs	r2, #24
 80064a4:	4694      	mov	ip, r2
 80064a6:	44bc      	add	ip, r7
 80064a8:	4463      	add	r3, ip
 80064aa:	2204      	movs	r2, #4
 80064ac:	701a      	strb	r2, [r3, #0]
 80064ae:	e0b5      	b.n	800661c <UART_SetConfig+0x250>
 80064b0:	231b      	movs	r3, #27
 80064b2:	2218      	movs	r2, #24
 80064b4:	4694      	mov	ip, r2
 80064b6:	44bc      	add	ip, r7
 80064b8:	4463      	add	r3, ip
 80064ba:	2208      	movs	r2, #8
 80064bc:	701a      	strb	r2, [r3, #0]
 80064be:	e0ad      	b.n	800661c <UART_SetConfig+0x250>
 80064c0:	231b      	movs	r3, #27
 80064c2:	2218      	movs	r2, #24
 80064c4:	4694      	mov	ip, r2
 80064c6:	44bc      	add	ip, r7
 80064c8:	4463      	add	r3, ip
 80064ca:	2210      	movs	r2, #16
 80064cc:	701a      	strb	r2, [r3, #0]
 80064ce:	e0a5      	b.n	800661c <UART_SetConfig+0x250>
 80064d0:	69fb      	ldr	r3, [r7, #28]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	4a81      	ldr	r2, [pc, #516]	; (80066dc <UART_SetConfig+0x310>)
 80064d6:	4293      	cmp	r3, r2
 80064d8:	d136      	bne.n	8006548 <UART_SetConfig+0x17c>
 80064da:	4b7f      	ldr	r3, [pc, #508]	; (80066d8 <UART_SetConfig+0x30c>)
 80064dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80064de:	220c      	movs	r2, #12
 80064e0:	4013      	ands	r3, r2
 80064e2:	2b0c      	cmp	r3, #12
 80064e4:	d020      	beq.n	8006528 <UART_SetConfig+0x15c>
 80064e6:	d827      	bhi.n	8006538 <UART_SetConfig+0x16c>
 80064e8:	2b08      	cmp	r3, #8
 80064ea:	d00d      	beq.n	8006508 <UART_SetConfig+0x13c>
 80064ec:	d824      	bhi.n	8006538 <UART_SetConfig+0x16c>
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d002      	beq.n	80064f8 <UART_SetConfig+0x12c>
 80064f2:	2b04      	cmp	r3, #4
 80064f4:	d010      	beq.n	8006518 <UART_SetConfig+0x14c>
 80064f6:	e01f      	b.n	8006538 <UART_SetConfig+0x16c>
 80064f8:	231b      	movs	r3, #27
 80064fa:	2218      	movs	r2, #24
 80064fc:	4694      	mov	ip, r2
 80064fe:	44bc      	add	ip, r7
 8006500:	4463      	add	r3, ip
 8006502:	2200      	movs	r2, #0
 8006504:	701a      	strb	r2, [r3, #0]
 8006506:	e089      	b.n	800661c <UART_SetConfig+0x250>
 8006508:	231b      	movs	r3, #27
 800650a:	2218      	movs	r2, #24
 800650c:	4694      	mov	ip, r2
 800650e:	44bc      	add	ip, r7
 8006510:	4463      	add	r3, ip
 8006512:	2202      	movs	r2, #2
 8006514:	701a      	strb	r2, [r3, #0]
 8006516:	e081      	b.n	800661c <UART_SetConfig+0x250>
 8006518:	231b      	movs	r3, #27
 800651a:	2218      	movs	r2, #24
 800651c:	4694      	mov	ip, r2
 800651e:	44bc      	add	ip, r7
 8006520:	4463      	add	r3, ip
 8006522:	2204      	movs	r2, #4
 8006524:	701a      	strb	r2, [r3, #0]
 8006526:	e079      	b.n	800661c <UART_SetConfig+0x250>
 8006528:	231b      	movs	r3, #27
 800652a:	2218      	movs	r2, #24
 800652c:	4694      	mov	ip, r2
 800652e:	44bc      	add	ip, r7
 8006530:	4463      	add	r3, ip
 8006532:	2208      	movs	r2, #8
 8006534:	701a      	strb	r2, [r3, #0]
 8006536:	e071      	b.n	800661c <UART_SetConfig+0x250>
 8006538:	231b      	movs	r3, #27
 800653a:	2218      	movs	r2, #24
 800653c:	4694      	mov	ip, r2
 800653e:	44bc      	add	ip, r7
 8006540:	4463      	add	r3, ip
 8006542:	2210      	movs	r2, #16
 8006544:	701a      	strb	r2, [r3, #0]
 8006546:	e069      	b.n	800661c <UART_SetConfig+0x250>
 8006548:	69fb      	ldr	r3, [r7, #28]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	4a64      	ldr	r2, [pc, #400]	; (80066e0 <UART_SetConfig+0x314>)
 800654e:	4293      	cmp	r3, r2
 8006550:	d107      	bne.n	8006562 <UART_SetConfig+0x196>
 8006552:	231b      	movs	r3, #27
 8006554:	2218      	movs	r2, #24
 8006556:	4694      	mov	ip, r2
 8006558:	44bc      	add	ip, r7
 800655a:	4463      	add	r3, ip
 800655c:	2200      	movs	r2, #0
 800655e:	701a      	strb	r2, [r3, #0]
 8006560:	e05c      	b.n	800661c <UART_SetConfig+0x250>
 8006562:	69fb      	ldr	r3, [r7, #28]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	4a5f      	ldr	r2, [pc, #380]	; (80066e4 <UART_SetConfig+0x318>)
 8006568:	4293      	cmp	r3, r2
 800656a:	d107      	bne.n	800657c <UART_SetConfig+0x1b0>
 800656c:	231b      	movs	r3, #27
 800656e:	2218      	movs	r2, #24
 8006570:	4694      	mov	ip, r2
 8006572:	44bc      	add	ip, r7
 8006574:	4463      	add	r3, ip
 8006576:	2200      	movs	r2, #0
 8006578:	701a      	strb	r2, [r3, #0]
 800657a:	e04f      	b.n	800661c <UART_SetConfig+0x250>
 800657c:	69fb      	ldr	r3, [r7, #28]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	4a52      	ldr	r2, [pc, #328]	; (80066cc <UART_SetConfig+0x300>)
 8006582:	4293      	cmp	r3, r2
 8006584:	d143      	bne.n	800660e <UART_SetConfig+0x242>
 8006586:	4b54      	ldr	r3, [pc, #336]	; (80066d8 <UART_SetConfig+0x30c>)
 8006588:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800658a:	23c0      	movs	r3, #192	; 0xc0
 800658c:	011b      	lsls	r3, r3, #4
 800658e:	4013      	ands	r3, r2
 8006590:	22c0      	movs	r2, #192	; 0xc0
 8006592:	0112      	lsls	r2, r2, #4
 8006594:	4293      	cmp	r3, r2
 8006596:	d02a      	beq.n	80065ee <UART_SetConfig+0x222>
 8006598:	22c0      	movs	r2, #192	; 0xc0
 800659a:	0112      	lsls	r2, r2, #4
 800659c:	4293      	cmp	r3, r2
 800659e:	d82e      	bhi.n	80065fe <UART_SetConfig+0x232>
 80065a0:	2280      	movs	r2, #128	; 0x80
 80065a2:	0112      	lsls	r2, r2, #4
 80065a4:	4293      	cmp	r3, r2
 80065a6:	d012      	beq.n	80065ce <UART_SetConfig+0x202>
 80065a8:	2280      	movs	r2, #128	; 0x80
 80065aa:	0112      	lsls	r2, r2, #4
 80065ac:	4293      	cmp	r3, r2
 80065ae:	d826      	bhi.n	80065fe <UART_SetConfig+0x232>
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d004      	beq.n	80065be <UART_SetConfig+0x1f2>
 80065b4:	2280      	movs	r2, #128	; 0x80
 80065b6:	00d2      	lsls	r2, r2, #3
 80065b8:	4293      	cmp	r3, r2
 80065ba:	d010      	beq.n	80065de <UART_SetConfig+0x212>
 80065bc:	e01f      	b.n	80065fe <UART_SetConfig+0x232>
 80065be:	231b      	movs	r3, #27
 80065c0:	2218      	movs	r2, #24
 80065c2:	4694      	mov	ip, r2
 80065c4:	44bc      	add	ip, r7
 80065c6:	4463      	add	r3, ip
 80065c8:	2200      	movs	r2, #0
 80065ca:	701a      	strb	r2, [r3, #0]
 80065cc:	e026      	b.n	800661c <UART_SetConfig+0x250>
 80065ce:	231b      	movs	r3, #27
 80065d0:	2218      	movs	r2, #24
 80065d2:	4694      	mov	ip, r2
 80065d4:	44bc      	add	ip, r7
 80065d6:	4463      	add	r3, ip
 80065d8:	2202      	movs	r2, #2
 80065da:	701a      	strb	r2, [r3, #0]
 80065dc:	e01e      	b.n	800661c <UART_SetConfig+0x250>
 80065de:	231b      	movs	r3, #27
 80065e0:	2218      	movs	r2, #24
 80065e2:	4694      	mov	ip, r2
 80065e4:	44bc      	add	ip, r7
 80065e6:	4463      	add	r3, ip
 80065e8:	2204      	movs	r2, #4
 80065ea:	701a      	strb	r2, [r3, #0]
 80065ec:	e016      	b.n	800661c <UART_SetConfig+0x250>
 80065ee:	231b      	movs	r3, #27
 80065f0:	2218      	movs	r2, #24
 80065f2:	4694      	mov	ip, r2
 80065f4:	44bc      	add	ip, r7
 80065f6:	4463      	add	r3, ip
 80065f8:	2208      	movs	r2, #8
 80065fa:	701a      	strb	r2, [r3, #0]
 80065fc:	e00e      	b.n	800661c <UART_SetConfig+0x250>
 80065fe:	231b      	movs	r3, #27
 8006600:	2218      	movs	r2, #24
 8006602:	4694      	mov	ip, r2
 8006604:	44bc      	add	ip, r7
 8006606:	4463      	add	r3, ip
 8006608:	2210      	movs	r2, #16
 800660a:	701a      	strb	r2, [r3, #0]
 800660c:	e006      	b.n	800661c <UART_SetConfig+0x250>
 800660e:	231b      	movs	r3, #27
 8006610:	2218      	movs	r2, #24
 8006612:	4694      	mov	ip, r2
 8006614:	44bc      	add	ip, r7
 8006616:	4463      	add	r3, ip
 8006618:	2210      	movs	r2, #16
 800661a:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800661c:	69fb      	ldr	r3, [r7, #28]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	4a2a      	ldr	r2, [pc, #168]	; (80066cc <UART_SetConfig+0x300>)
 8006622:	4293      	cmp	r3, r2
 8006624:	d000      	beq.n	8006628 <UART_SetConfig+0x25c>
 8006626:	e09e      	b.n	8006766 <UART_SetConfig+0x39a>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006628:	231b      	movs	r3, #27
 800662a:	2218      	movs	r2, #24
 800662c:	4694      	mov	ip, r2
 800662e:	44bc      	add	ip, r7
 8006630:	4463      	add	r3, ip
 8006632:	781b      	ldrb	r3, [r3, #0]
 8006634:	2b08      	cmp	r3, #8
 8006636:	d01d      	beq.n	8006674 <UART_SetConfig+0x2a8>
 8006638:	dc20      	bgt.n	800667c <UART_SetConfig+0x2b0>
 800663a:	2b04      	cmp	r3, #4
 800663c:	d015      	beq.n	800666a <UART_SetConfig+0x29e>
 800663e:	dc1d      	bgt.n	800667c <UART_SetConfig+0x2b0>
 8006640:	2b00      	cmp	r3, #0
 8006642:	d002      	beq.n	800664a <UART_SetConfig+0x27e>
 8006644:	2b02      	cmp	r3, #2
 8006646:	d005      	beq.n	8006654 <UART_SetConfig+0x288>
 8006648:	e018      	b.n	800667c <UART_SetConfig+0x2b0>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800664a:	f7fe fc4f 	bl	8004eec <HAL_RCC_GetPCLK1Freq>
 800664e:	0003      	movs	r3, r0
 8006650:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006652:	e01d      	b.n	8006690 <UART_SetConfig+0x2c4>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006654:	4b20      	ldr	r3, [pc, #128]	; (80066d8 <UART_SetConfig+0x30c>)
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	2210      	movs	r2, #16
 800665a:	4013      	ands	r3, r2
 800665c:	d002      	beq.n	8006664 <UART_SetConfig+0x298>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 800665e:	4b22      	ldr	r3, [pc, #136]	; (80066e8 <UART_SetConfig+0x31c>)
 8006660:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006662:	e015      	b.n	8006690 <UART_SetConfig+0x2c4>
          pclk = (uint32_t) HSI_VALUE;
 8006664:	4b21      	ldr	r3, [pc, #132]	; (80066ec <UART_SetConfig+0x320>)
 8006666:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006668:	e012      	b.n	8006690 <UART_SetConfig+0x2c4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800666a:	f7fe fb8f 	bl	8004d8c <HAL_RCC_GetSysClockFreq>
 800666e:	0003      	movs	r3, r0
 8006670:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006672:	e00d      	b.n	8006690 <UART_SetConfig+0x2c4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006674:	2380      	movs	r3, #128	; 0x80
 8006676:	021b      	lsls	r3, r3, #8
 8006678:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800667a:	e009      	b.n	8006690 <UART_SetConfig+0x2c4>
      default:
        pclk = 0U;
 800667c:	2300      	movs	r3, #0
 800667e:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8006680:	231a      	movs	r3, #26
 8006682:	2218      	movs	r2, #24
 8006684:	4694      	mov	ip, r2
 8006686:	44bc      	add	ip, r7
 8006688:	4463      	add	r3, ip
 800668a:	2201      	movs	r2, #1
 800668c:	701a      	strb	r2, [r3, #0]
        break;
 800668e:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006690:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006692:	2b00      	cmp	r3, #0
 8006694:	d100      	bne.n	8006698 <UART_SetConfig+0x2cc>
 8006696:	e13c      	b.n	8006912 <UART_SetConfig+0x546>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006698:	69fb      	ldr	r3, [r7, #28]
 800669a:	685a      	ldr	r2, [r3, #4]
 800669c:	0013      	movs	r3, r2
 800669e:	005b      	lsls	r3, r3, #1
 80066a0:	189b      	adds	r3, r3, r2
 80066a2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80066a4:	429a      	cmp	r2, r3
 80066a6:	d305      	bcc.n	80066b4 <UART_SetConfig+0x2e8>
          (pclk > (4096U * huart->Init.BaudRate)))
 80066a8:	69fb      	ldr	r3, [r7, #28]
 80066aa:	685b      	ldr	r3, [r3, #4]
 80066ac:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80066ae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80066b0:	429a      	cmp	r2, r3
 80066b2:	d91d      	bls.n	80066f0 <UART_SetConfig+0x324>
      {
        ret = HAL_ERROR;
 80066b4:	231a      	movs	r3, #26
 80066b6:	2218      	movs	r2, #24
 80066b8:	4694      	mov	ip, r2
 80066ba:	44bc      	add	ip, r7
 80066bc:	4463      	add	r3, ip
 80066be:	2201      	movs	r2, #1
 80066c0:	701a      	strb	r2, [r3, #0]
 80066c2:	e126      	b.n	8006912 <UART_SetConfig+0x546>
 80066c4:	efff69f3 	.word	0xefff69f3
 80066c8:	ffffcfff 	.word	0xffffcfff
 80066cc:	40004800 	.word	0x40004800
 80066d0:	fffff4ff 	.word	0xfffff4ff
 80066d4:	40013800 	.word	0x40013800
 80066d8:	40021000 	.word	0x40021000
 80066dc:	40004400 	.word	0x40004400
 80066e0:	40004c00 	.word	0x40004c00
 80066e4:	40005000 	.word	0x40005000
 80066e8:	003d0900 	.word	0x003d0900
 80066ec:	00f42400 	.word	0x00f42400
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80066f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066f2:	613b      	str	r3, [r7, #16]
 80066f4:	2300      	movs	r3, #0
 80066f6:	617b      	str	r3, [r7, #20]
 80066f8:	6939      	ldr	r1, [r7, #16]
 80066fa:	697a      	ldr	r2, [r7, #20]
 80066fc:	000b      	movs	r3, r1
 80066fe:	0e1b      	lsrs	r3, r3, #24
 8006700:	0010      	movs	r0, r2
 8006702:	0205      	lsls	r5, r0, #8
 8006704:	431d      	orrs	r5, r3
 8006706:	000b      	movs	r3, r1
 8006708:	021c      	lsls	r4, r3, #8
 800670a:	69fb      	ldr	r3, [r7, #28]
 800670c:	685b      	ldr	r3, [r3, #4]
 800670e:	085b      	lsrs	r3, r3, #1
 8006710:	60bb      	str	r3, [r7, #8]
 8006712:	2300      	movs	r3, #0
 8006714:	60fb      	str	r3, [r7, #12]
 8006716:	68b8      	ldr	r0, [r7, #8]
 8006718:	68f9      	ldr	r1, [r7, #12]
 800671a:	1900      	adds	r0, r0, r4
 800671c:	4169      	adcs	r1, r5
 800671e:	69fb      	ldr	r3, [r7, #28]
 8006720:	685b      	ldr	r3, [r3, #4]
 8006722:	603b      	str	r3, [r7, #0]
 8006724:	2300      	movs	r3, #0
 8006726:	607b      	str	r3, [r7, #4]
 8006728:	683a      	ldr	r2, [r7, #0]
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	f7f9 fe6c 	bl	8000408 <__aeabi_uldivmod>
 8006730:	0002      	movs	r2, r0
 8006732:	000b      	movs	r3, r1
 8006734:	0013      	movs	r3, r2
 8006736:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006738:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800673a:	23c0      	movs	r3, #192	; 0xc0
 800673c:	009b      	lsls	r3, r3, #2
 800673e:	429a      	cmp	r2, r3
 8006740:	d309      	bcc.n	8006756 <UART_SetConfig+0x38a>
 8006742:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006744:	2380      	movs	r3, #128	; 0x80
 8006746:	035b      	lsls	r3, r3, #13
 8006748:	429a      	cmp	r2, r3
 800674a:	d204      	bcs.n	8006756 <UART_SetConfig+0x38a>
        {
          huart->Instance->BRR = usartdiv;
 800674c:	69fb      	ldr	r3, [r7, #28]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006752:	60da      	str	r2, [r3, #12]
 8006754:	e0dd      	b.n	8006912 <UART_SetConfig+0x546>
        }
        else
        {
          ret = HAL_ERROR;
 8006756:	231a      	movs	r3, #26
 8006758:	2218      	movs	r2, #24
 800675a:	4694      	mov	ip, r2
 800675c:	44bc      	add	ip, r7
 800675e:	4463      	add	r3, ip
 8006760:	2201      	movs	r2, #1
 8006762:	701a      	strb	r2, [r3, #0]
 8006764:	e0d5      	b.n	8006912 <UART_SetConfig+0x546>
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006766:	69fb      	ldr	r3, [r7, #28]
 8006768:	69da      	ldr	r2, [r3, #28]
 800676a:	2380      	movs	r3, #128	; 0x80
 800676c:	021b      	lsls	r3, r3, #8
 800676e:	429a      	cmp	r2, r3
 8006770:	d000      	beq.n	8006774 <UART_SetConfig+0x3a8>
 8006772:	e074      	b.n	800685e <UART_SetConfig+0x492>
  {
    switch (clocksource)
 8006774:	231b      	movs	r3, #27
 8006776:	2218      	movs	r2, #24
 8006778:	4694      	mov	ip, r2
 800677a:	44bc      	add	ip, r7
 800677c:	4463      	add	r3, ip
 800677e:	781b      	ldrb	r3, [r3, #0]
 8006780:	2b08      	cmp	r3, #8
 8006782:	d822      	bhi.n	80067ca <UART_SetConfig+0x3fe>
 8006784:	009a      	lsls	r2, r3, #2
 8006786:	4b6b      	ldr	r3, [pc, #428]	; (8006934 <UART_SetConfig+0x568>)
 8006788:	18d3      	adds	r3, r2, r3
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800678e:	f7fe fbad 	bl	8004eec <HAL_RCC_GetPCLK1Freq>
 8006792:	0003      	movs	r3, r0
 8006794:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006796:	e022      	b.n	80067de <UART_SetConfig+0x412>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006798:	f7fe fbbe 	bl	8004f18 <HAL_RCC_GetPCLK2Freq>
 800679c:	0003      	movs	r3, r0
 800679e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80067a0:	e01d      	b.n	80067de <UART_SetConfig+0x412>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80067a2:	4b65      	ldr	r3, [pc, #404]	; (8006938 <UART_SetConfig+0x56c>)
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	2210      	movs	r2, #16
 80067a8:	4013      	ands	r3, r2
 80067aa:	d002      	beq.n	80067b2 <UART_SetConfig+0x3e6>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80067ac:	4b63      	ldr	r3, [pc, #396]	; (800693c <UART_SetConfig+0x570>)
 80067ae:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80067b0:	e015      	b.n	80067de <UART_SetConfig+0x412>
          pclk = (uint32_t) HSI_VALUE;
 80067b2:	4b63      	ldr	r3, [pc, #396]	; (8006940 <UART_SetConfig+0x574>)
 80067b4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80067b6:	e012      	b.n	80067de <UART_SetConfig+0x412>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80067b8:	f7fe fae8 	bl	8004d8c <HAL_RCC_GetSysClockFreq>
 80067bc:	0003      	movs	r3, r0
 80067be:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80067c0:	e00d      	b.n	80067de <UART_SetConfig+0x412>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80067c2:	2380      	movs	r3, #128	; 0x80
 80067c4:	021b      	lsls	r3, r3, #8
 80067c6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80067c8:	e009      	b.n	80067de <UART_SetConfig+0x412>
      default:
        pclk = 0U;
 80067ca:	2300      	movs	r3, #0
 80067cc:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80067ce:	231a      	movs	r3, #26
 80067d0:	2218      	movs	r2, #24
 80067d2:	4694      	mov	ip, r2
 80067d4:	44bc      	add	ip, r7
 80067d6:	4463      	add	r3, ip
 80067d8:	2201      	movs	r2, #1
 80067da:	701a      	strb	r2, [r3, #0]
        break;
 80067dc:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80067de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d100      	bne.n	80067e6 <UART_SetConfig+0x41a>
 80067e4:	e095      	b.n	8006912 <UART_SetConfig+0x546>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80067e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067e8:	005a      	lsls	r2, r3, #1
 80067ea:	69fb      	ldr	r3, [r7, #28]
 80067ec:	685b      	ldr	r3, [r3, #4]
 80067ee:	085b      	lsrs	r3, r3, #1
 80067f0:	18d2      	adds	r2, r2, r3
 80067f2:	69fb      	ldr	r3, [r7, #28]
 80067f4:	685b      	ldr	r3, [r3, #4]
 80067f6:	0019      	movs	r1, r3
 80067f8:	0010      	movs	r0, r2
 80067fa:	f7f9 fc8f 	bl	800011c <__udivsi3>
 80067fe:	0003      	movs	r3, r0
 8006800:	b29b      	uxth	r3, r3
 8006802:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006804:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006806:	2b0f      	cmp	r3, #15
 8006808:	d921      	bls.n	800684e <UART_SetConfig+0x482>
 800680a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800680c:	2380      	movs	r3, #128	; 0x80
 800680e:	025b      	lsls	r3, r3, #9
 8006810:	429a      	cmp	r2, r3
 8006812:	d21c      	bcs.n	800684e <UART_SetConfig+0x482>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006814:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006816:	b29a      	uxth	r2, r3
 8006818:	200e      	movs	r0, #14
 800681a:	2418      	movs	r4, #24
 800681c:	193b      	adds	r3, r7, r4
 800681e:	181b      	adds	r3, r3, r0
 8006820:	210f      	movs	r1, #15
 8006822:	438a      	bics	r2, r1
 8006824:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006826:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006828:	085b      	lsrs	r3, r3, #1
 800682a:	b29b      	uxth	r3, r3
 800682c:	2207      	movs	r2, #7
 800682e:	4013      	ands	r3, r2
 8006830:	b299      	uxth	r1, r3
 8006832:	193b      	adds	r3, r7, r4
 8006834:	181b      	adds	r3, r3, r0
 8006836:	193a      	adds	r2, r7, r4
 8006838:	1812      	adds	r2, r2, r0
 800683a:	8812      	ldrh	r2, [r2, #0]
 800683c:	430a      	orrs	r2, r1
 800683e:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8006840:	69fb      	ldr	r3, [r7, #28]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	193a      	adds	r2, r7, r4
 8006846:	1812      	adds	r2, r2, r0
 8006848:	8812      	ldrh	r2, [r2, #0]
 800684a:	60da      	str	r2, [r3, #12]
 800684c:	e061      	b.n	8006912 <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 800684e:	231a      	movs	r3, #26
 8006850:	2218      	movs	r2, #24
 8006852:	4694      	mov	ip, r2
 8006854:	44bc      	add	ip, r7
 8006856:	4463      	add	r3, ip
 8006858:	2201      	movs	r2, #1
 800685a:	701a      	strb	r2, [r3, #0]
 800685c:	e059      	b.n	8006912 <UART_SetConfig+0x546>
      }
    }
  }
  else
  {
    switch (clocksource)
 800685e:	231b      	movs	r3, #27
 8006860:	2218      	movs	r2, #24
 8006862:	4694      	mov	ip, r2
 8006864:	44bc      	add	ip, r7
 8006866:	4463      	add	r3, ip
 8006868:	781b      	ldrb	r3, [r3, #0]
 800686a:	2b08      	cmp	r3, #8
 800686c:	d822      	bhi.n	80068b4 <UART_SetConfig+0x4e8>
 800686e:	009a      	lsls	r2, r3, #2
 8006870:	4b34      	ldr	r3, [pc, #208]	; (8006944 <UART_SetConfig+0x578>)
 8006872:	18d3      	adds	r3, r2, r3
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006878:	f7fe fb38 	bl	8004eec <HAL_RCC_GetPCLK1Freq>
 800687c:	0003      	movs	r3, r0
 800687e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006880:	e022      	b.n	80068c8 <UART_SetConfig+0x4fc>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006882:	f7fe fb49 	bl	8004f18 <HAL_RCC_GetPCLK2Freq>
 8006886:	0003      	movs	r3, r0
 8006888:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800688a:	e01d      	b.n	80068c8 <UART_SetConfig+0x4fc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800688c:	4b2a      	ldr	r3, [pc, #168]	; (8006938 <UART_SetConfig+0x56c>)
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	2210      	movs	r2, #16
 8006892:	4013      	ands	r3, r2
 8006894:	d002      	beq.n	800689c <UART_SetConfig+0x4d0>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8006896:	4b29      	ldr	r3, [pc, #164]	; (800693c <UART_SetConfig+0x570>)
 8006898:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800689a:	e015      	b.n	80068c8 <UART_SetConfig+0x4fc>
          pclk = (uint32_t) HSI_VALUE;
 800689c:	4b28      	ldr	r3, [pc, #160]	; (8006940 <UART_SetConfig+0x574>)
 800689e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80068a0:	e012      	b.n	80068c8 <UART_SetConfig+0x4fc>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80068a2:	f7fe fa73 	bl	8004d8c <HAL_RCC_GetSysClockFreq>
 80068a6:	0003      	movs	r3, r0
 80068a8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80068aa:	e00d      	b.n	80068c8 <UART_SetConfig+0x4fc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80068ac:	2380      	movs	r3, #128	; 0x80
 80068ae:	021b      	lsls	r3, r3, #8
 80068b0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80068b2:	e009      	b.n	80068c8 <UART_SetConfig+0x4fc>
      default:
        pclk = 0U;
 80068b4:	2300      	movs	r3, #0
 80068b6:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80068b8:	231a      	movs	r3, #26
 80068ba:	2218      	movs	r2, #24
 80068bc:	4694      	mov	ip, r2
 80068be:	44bc      	add	ip, r7
 80068c0:	4463      	add	r3, ip
 80068c2:	2201      	movs	r2, #1
 80068c4:	701a      	strb	r2, [r3, #0]
        break;
 80068c6:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 80068c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d021      	beq.n	8006912 <UART_SetConfig+0x546>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80068ce:	69fb      	ldr	r3, [r7, #28]
 80068d0:	685b      	ldr	r3, [r3, #4]
 80068d2:	085a      	lsrs	r2, r3, #1
 80068d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068d6:	18d2      	adds	r2, r2, r3
 80068d8:	69fb      	ldr	r3, [r7, #28]
 80068da:	685b      	ldr	r3, [r3, #4]
 80068dc:	0019      	movs	r1, r3
 80068de:	0010      	movs	r0, r2
 80068e0:	f7f9 fc1c 	bl	800011c <__udivsi3>
 80068e4:	0003      	movs	r3, r0
 80068e6:	b29b      	uxth	r3, r3
 80068e8:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80068ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068ec:	2b0f      	cmp	r3, #15
 80068ee:	d909      	bls.n	8006904 <UART_SetConfig+0x538>
 80068f0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80068f2:	2380      	movs	r3, #128	; 0x80
 80068f4:	025b      	lsls	r3, r3, #9
 80068f6:	429a      	cmp	r2, r3
 80068f8:	d204      	bcs.n	8006904 <UART_SetConfig+0x538>
      {
        huart->Instance->BRR = usartdiv;
 80068fa:	69fb      	ldr	r3, [r7, #28]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006900:	60da      	str	r2, [r3, #12]
 8006902:	e006      	b.n	8006912 <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 8006904:	231a      	movs	r3, #26
 8006906:	2218      	movs	r2, #24
 8006908:	4694      	mov	ip, r2
 800690a:	44bc      	add	ip, r7
 800690c:	4463      	add	r3, ip
 800690e:	2201      	movs	r2, #1
 8006910:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006912:	69fb      	ldr	r3, [r7, #28]
 8006914:	2200      	movs	r2, #0
 8006916:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8006918:	69fb      	ldr	r3, [r7, #28]
 800691a:	2200      	movs	r2, #0
 800691c:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800691e:	231a      	movs	r3, #26
 8006920:	2218      	movs	r2, #24
 8006922:	4694      	mov	ip, r2
 8006924:	44bc      	add	ip, r7
 8006926:	4463      	add	r3, ip
 8006928:	781b      	ldrb	r3, [r3, #0]
}
 800692a:	0018      	movs	r0, r3
 800692c:	46bd      	mov	sp, r7
 800692e:	b00e      	add	sp, #56	; 0x38
 8006930:	bdb0      	pop	{r4, r5, r7, pc}
 8006932:	46c0      	nop			; (mov r8, r8)
 8006934:	08007fe0 	.word	0x08007fe0
 8006938:	40021000 	.word	0x40021000
 800693c:	003d0900 	.word	0x003d0900
 8006940:	00f42400 	.word	0x00f42400
 8006944:	08008004 	.word	0x08008004

08006948 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006948:	b580      	push	{r7, lr}
 800694a:	b082      	sub	sp, #8
 800694c:	af00      	add	r7, sp, #0
 800694e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006954:	2201      	movs	r2, #1
 8006956:	4013      	ands	r3, r2
 8006958:	d00b      	beq.n	8006972 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	685b      	ldr	r3, [r3, #4]
 8006960:	4a4a      	ldr	r2, [pc, #296]	; (8006a8c <UART_AdvFeatureConfig+0x144>)
 8006962:	4013      	ands	r3, r2
 8006964:	0019      	movs	r1, r3
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	430a      	orrs	r2, r1
 8006970:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006976:	2202      	movs	r2, #2
 8006978:	4013      	ands	r3, r2
 800697a:	d00b      	beq.n	8006994 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	685b      	ldr	r3, [r3, #4]
 8006982:	4a43      	ldr	r2, [pc, #268]	; (8006a90 <UART_AdvFeatureConfig+0x148>)
 8006984:	4013      	ands	r3, r2
 8006986:	0019      	movs	r1, r3
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	430a      	orrs	r2, r1
 8006992:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006998:	2204      	movs	r2, #4
 800699a:	4013      	ands	r3, r2
 800699c:	d00b      	beq.n	80069b6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	685b      	ldr	r3, [r3, #4]
 80069a4:	4a3b      	ldr	r2, [pc, #236]	; (8006a94 <UART_AdvFeatureConfig+0x14c>)
 80069a6:	4013      	ands	r3, r2
 80069a8:	0019      	movs	r1, r3
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	430a      	orrs	r2, r1
 80069b4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069ba:	2208      	movs	r2, #8
 80069bc:	4013      	ands	r3, r2
 80069be:	d00b      	beq.n	80069d8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	685b      	ldr	r3, [r3, #4]
 80069c6:	4a34      	ldr	r2, [pc, #208]	; (8006a98 <UART_AdvFeatureConfig+0x150>)
 80069c8:	4013      	ands	r3, r2
 80069ca:	0019      	movs	r1, r3
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	430a      	orrs	r2, r1
 80069d6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069dc:	2210      	movs	r2, #16
 80069de:	4013      	ands	r3, r2
 80069e0:	d00b      	beq.n	80069fa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	689b      	ldr	r3, [r3, #8]
 80069e8:	4a2c      	ldr	r2, [pc, #176]	; (8006a9c <UART_AdvFeatureConfig+0x154>)
 80069ea:	4013      	ands	r3, r2
 80069ec:	0019      	movs	r1, r3
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	430a      	orrs	r2, r1
 80069f8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069fe:	2220      	movs	r2, #32
 8006a00:	4013      	ands	r3, r2
 8006a02:	d00b      	beq.n	8006a1c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	689b      	ldr	r3, [r3, #8]
 8006a0a:	4a25      	ldr	r2, [pc, #148]	; (8006aa0 <UART_AdvFeatureConfig+0x158>)
 8006a0c:	4013      	ands	r3, r2
 8006a0e:	0019      	movs	r1, r3
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	430a      	orrs	r2, r1
 8006a1a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a20:	2240      	movs	r2, #64	; 0x40
 8006a22:	4013      	ands	r3, r2
 8006a24:	d01d      	beq.n	8006a62 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	685b      	ldr	r3, [r3, #4]
 8006a2c:	4a1d      	ldr	r2, [pc, #116]	; (8006aa4 <UART_AdvFeatureConfig+0x15c>)
 8006a2e:	4013      	ands	r3, r2
 8006a30:	0019      	movs	r1, r3
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	430a      	orrs	r2, r1
 8006a3c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006a42:	2380      	movs	r3, #128	; 0x80
 8006a44:	035b      	lsls	r3, r3, #13
 8006a46:	429a      	cmp	r2, r3
 8006a48:	d10b      	bne.n	8006a62 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	685b      	ldr	r3, [r3, #4]
 8006a50:	4a15      	ldr	r2, [pc, #84]	; (8006aa8 <UART_AdvFeatureConfig+0x160>)
 8006a52:	4013      	ands	r3, r2
 8006a54:	0019      	movs	r1, r3
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	430a      	orrs	r2, r1
 8006a60:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a66:	2280      	movs	r2, #128	; 0x80
 8006a68:	4013      	ands	r3, r2
 8006a6a:	d00b      	beq.n	8006a84 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	685b      	ldr	r3, [r3, #4]
 8006a72:	4a0e      	ldr	r2, [pc, #56]	; (8006aac <UART_AdvFeatureConfig+0x164>)
 8006a74:	4013      	ands	r3, r2
 8006a76:	0019      	movs	r1, r3
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	430a      	orrs	r2, r1
 8006a82:	605a      	str	r2, [r3, #4]
  }
}
 8006a84:	46c0      	nop			; (mov r8, r8)
 8006a86:	46bd      	mov	sp, r7
 8006a88:	b002      	add	sp, #8
 8006a8a:	bd80      	pop	{r7, pc}
 8006a8c:	fffdffff 	.word	0xfffdffff
 8006a90:	fffeffff 	.word	0xfffeffff
 8006a94:	fffbffff 	.word	0xfffbffff
 8006a98:	ffff7fff 	.word	0xffff7fff
 8006a9c:	ffffefff 	.word	0xffffefff
 8006aa0:	ffffdfff 	.word	0xffffdfff
 8006aa4:	ffefffff 	.word	0xffefffff
 8006aa8:	ff9fffff 	.word	0xff9fffff
 8006aac:	fff7ffff 	.word	0xfff7ffff

08006ab0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006ab0:	b580      	push	{r7, lr}
 8006ab2:	b086      	sub	sp, #24
 8006ab4:	af02      	add	r7, sp, #8
 8006ab6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	2280      	movs	r2, #128	; 0x80
 8006abc:	2100      	movs	r1, #0
 8006abe:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006ac0:	f7fc fcaa 	bl	8003418 <HAL_GetTick>
 8006ac4:	0003      	movs	r3, r0
 8006ac6:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	2208      	movs	r2, #8
 8006ad0:	4013      	ands	r3, r2
 8006ad2:	2b08      	cmp	r3, #8
 8006ad4:	d10c      	bne.n	8006af0 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	2280      	movs	r2, #128	; 0x80
 8006ada:	0391      	lsls	r1, r2, #14
 8006adc:	6878      	ldr	r0, [r7, #4]
 8006ade:	4a17      	ldr	r2, [pc, #92]	; (8006b3c <UART_CheckIdleState+0x8c>)
 8006ae0:	9200      	str	r2, [sp, #0]
 8006ae2:	2200      	movs	r2, #0
 8006ae4:	f000 f82c 	bl	8006b40 <UART_WaitOnFlagUntilTimeout>
 8006ae8:	1e03      	subs	r3, r0, #0
 8006aea:	d001      	beq.n	8006af0 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006aec:	2303      	movs	r3, #3
 8006aee:	e021      	b.n	8006b34 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	2204      	movs	r2, #4
 8006af8:	4013      	ands	r3, r2
 8006afa:	2b04      	cmp	r3, #4
 8006afc:	d10c      	bne.n	8006b18 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	2280      	movs	r2, #128	; 0x80
 8006b02:	03d1      	lsls	r1, r2, #15
 8006b04:	6878      	ldr	r0, [r7, #4]
 8006b06:	4a0d      	ldr	r2, [pc, #52]	; (8006b3c <UART_CheckIdleState+0x8c>)
 8006b08:	9200      	str	r2, [sp, #0]
 8006b0a:	2200      	movs	r2, #0
 8006b0c:	f000 f818 	bl	8006b40 <UART_WaitOnFlagUntilTimeout>
 8006b10:	1e03      	subs	r3, r0, #0
 8006b12:	d001      	beq.n	8006b18 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006b14:	2303      	movs	r3, #3
 8006b16:	e00d      	b.n	8006b34 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	2220      	movs	r2, #32
 8006b1c:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	2220      	movs	r2, #32
 8006b22:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	2200      	movs	r2, #0
 8006b28:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	2274      	movs	r2, #116	; 0x74
 8006b2e:	2100      	movs	r1, #0
 8006b30:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006b32:	2300      	movs	r3, #0
}
 8006b34:	0018      	movs	r0, r3
 8006b36:	46bd      	mov	sp, r7
 8006b38:	b004      	add	sp, #16
 8006b3a:	bd80      	pop	{r7, pc}
 8006b3c:	01ffffff 	.word	0x01ffffff

08006b40 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006b40:	b580      	push	{r7, lr}
 8006b42:	b094      	sub	sp, #80	; 0x50
 8006b44:	af00      	add	r7, sp, #0
 8006b46:	60f8      	str	r0, [r7, #12]
 8006b48:	60b9      	str	r1, [r7, #8]
 8006b4a:	603b      	str	r3, [r7, #0]
 8006b4c:	1dfb      	adds	r3, r7, #7
 8006b4e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006b50:	e0a3      	b.n	8006c9a <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006b52:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006b54:	3301      	adds	r3, #1
 8006b56:	d100      	bne.n	8006b5a <UART_WaitOnFlagUntilTimeout+0x1a>
 8006b58:	e09f      	b.n	8006c9a <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006b5a:	f7fc fc5d 	bl	8003418 <HAL_GetTick>
 8006b5e:	0002      	movs	r2, r0
 8006b60:	683b      	ldr	r3, [r7, #0]
 8006b62:	1ad3      	subs	r3, r2, r3
 8006b64:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006b66:	429a      	cmp	r2, r3
 8006b68:	d302      	bcc.n	8006b70 <UART_WaitOnFlagUntilTimeout+0x30>
 8006b6a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d13d      	bne.n	8006bec <UART_WaitOnFlagUntilTimeout+0xac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006b70:	f3ef 8310 	mrs	r3, PRIMASK
 8006b74:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8006b76:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006b78:	647b      	str	r3, [r7, #68]	; 0x44
 8006b7a:	2301      	movs	r3, #1
 8006b7c:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006b7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b80:	f383 8810 	msr	PRIMASK, r3
}
 8006b84:	46c0      	nop			; (mov r8, r8)
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	681a      	ldr	r2, [r3, #0]
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	494c      	ldr	r1, [pc, #304]	; (8006cc4 <UART_WaitOnFlagUntilTimeout+0x184>)
 8006b92:	400a      	ands	r2, r1
 8006b94:	601a      	str	r2, [r3, #0]
 8006b96:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006b98:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006b9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b9c:	f383 8810 	msr	PRIMASK, r3
}
 8006ba0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006ba2:	f3ef 8310 	mrs	r3, PRIMASK
 8006ba6:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8006ba8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006baa:	643b      	str	r3, [r7, #64]	; 0x40
 8006bac:	2301      	movs	r3, #1
 8006bae:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006bb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bb2:	f383 8810 	msr	PRIMASK, r3
}
 8006bb6:	46c0      	nop			; (mov r8, r8)
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	689a      	ldr	r2, [r3, #8]
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	2101      	movs	r1, #1
 8006bc4:	438a      	bics	r2, r1
 8006bc6:	609a      	str	r2, [r3, #8]
 8006bc8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006bca:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006bcc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006bce:	f383 8810 	msr	PRIMASK, r3
}
 8006bd2:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	2220      	movs	r2, #32
 8006bd8:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	2220      	movs	r2, #32
 8006bde:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	2274      	movs	r2, #116	; 0x74
 8006be4:	2100      	movs	r1, #0
 8006be6:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8006be8:	2303      	movs	r3, #3
 8006bea:	e067      	b.n	8006cbc <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	2204      	movs	r2, #4
 8006bf4:	4013      	ands	r3, r2
 8006bf6:	d050      	beq.n	8006c9a <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	69da      	ldr	r2, [r3, #28]
 8006bfe:	2380      	movs	r3, #128	; 0x80
 8006c00:	011b      	lsls	r3, r3, #4
 8006c02:	401a      	ands	r2, r3
 8006c04:	2380      	movs	r3, #128	; 0x80
 8006c06:	011b      	lsls	r3, r3, #4
 8006c08:	429a      	cmp	r2, r3
 8006c0a:	d146      	bne.n	8006c9a <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	2280      	movs	r2, #128	; 0x80
 8006c12:	0112      	lsls	r2, r2, #4
 8006c14:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006c16:	f3ef 8310 	mrs	r3, PRIMASK
 8006c1a:	613b      	str	r3, [r7, #16]
  return(result);
 8006c1c:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006c1e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006c20:	2301      	movs	r3, #1
 8006c22:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006c24:	697b      	ldr	r3, [r7, #20]
 8006c26:	f383 8810 	msr	PRIMASK, r3
}
 8006c2a:	46c0      	nop			; (mov r8, r8)
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	681a      	ldr	r2, [r3, #0]
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	4923      	ldr	r1, [pc, #140]	; (8006cc4 <UART_WaitOnFlagUntilTimeout+0x184>)
 8006c38:	400a      	ands	r2, r1
 8006c3a:	601a      	str	r2, [r3, #0]
 8006c3c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006c3e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006c40:	69bb      	ldr	r3, [r7, #24]
 8006c42:	f383 8810 	msr	PRIMASK, r3
}
 8006c46:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006c48:	f3ef 8310 	mrs	r3, PRIMASK
 8006c4c:	61fb      	str	r3, [r7, #28]
  return(result);
 8006c4e:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c50:	64bb      	str	r3, [r7, #72]	; 0x48
 8006c52:	2301      	movs	r3, #1
 8006c54:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006c56:	6a3b      	ldr	r3, [r7, #32]
 8006c58:	f383 8810 	msr	PRIMASK, r3
}
 8006c5c:	46c0      	nop			; (mov r8, r8)
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	689a      	ldr	r2, [r3, #8]
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	2101      	movs	r1, #1
 8006c6a:	438a      	bics	r2, r1
 8006c6c:	609a      	str	r2, [r3, #8]
 8006c6e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006c70:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006c72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c74:	f383 8810 	msr	PRIMASK, r3
}
 8006c78:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	2220      	movs	r2, #32
 8006c7e:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	2220      	movs	r2, #32
 8006c84:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	2280      	movs	r2, #128	; 0x80
 8006c8a:	2120      	movs	r1, #32
 8006c8c:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	2274      	movs	r2, #116	; 0x74
 8006c92:	2100      	movs	r1, #0
 8006c94:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8006c96:	2303      	movs	r3, #3
 8006c98:	e010      	b.n	8006cbc <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	69db      	ldr	r3, [r3, #28]
 8006ca0:	68ba      	ldr	r2, [r7, #8]
 8006ca2:	4013      	ands	r3, r2
 8006ca4:	68ba      	ldr	r2, [r7, #8]
 8006ca6:	1ad3      	subs	r3, r2, r3
 8006ca8:	425a      	negs	r2, r3
 8006caa:	4153      	adcs	r3, r2
 8006cac:	b2db      	uxtb	r3, r3
 8006cae:	001a      	movs	r2, r3
 8006cb0:	1dfb      	adds	r3, r7, #7
 8006cb2:	781b      	ldrb	r3, [r3, #0]
 8006cb4:	429a      	cmp	r2, r3
 8006cb6:	d100      	bne.n	8006cba <UART_WaitOnFlagUntilTimeout+0x17a>
 8006cb8:	e74b      	b.n	8006b52 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006cba:	2300      	movs	r3, #0
}
 8006cbc:	0018      	movs	r0, r3
 8006cbe:	46bd      	mov	sp, r7
 8006cc0:	b014      	add	sp, #80	; 0x50
 8006cc2:	bd80      	pop	{r7, pc}
 8006cc4:	fffffe5f 	.word	0xfffffe5f

08006cc8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006cc8:	b580      	push	{r7, lr}
 8006cca:	b08c      	sub	sp, #48	; 0x30
 8006ccc:	af00      	add	r7, sp, #0
 8006cce:	60f8      	str	r0, [r7, #12]
 8006cd0:	60b9      	str	r1, [r7, #8]
 8006cd2:	1dbb      	adds	r3, r7, #6
 8006cd4:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	68ba      	ldr	r2, [r7, #8]
 8006cda:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	1dba      	adds	r2, r7, #6
 8006ce0:	2158      	movs	r1, #88	; 0x58
 8006ce2:	8812      	ldrh	r2, [r2, #0]
 8006ce4:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	1dba      	adds	r2, r7, #6
 8006cea:	215a      	movs	r1, #90	; 0x5a
 8006cec:	8812      	ldrh	r2, [r2, #0]
 8006cee:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	2200      	movs	r2, #0
 8006cf4:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	689a      	ldr	r2, [r3, #8]
 8006cfa:	2380      	movs	r3, #128	; 0x80
 8006cfc:	015b      	lsls	r3, r3, #5
 8006cfe:	429a      	cmp	r2, r3
 8006d00:	d10d      	bne.n	8006d1e <UART_Start_Receive_IT+0x56>
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	691b      	ldr	r3, [r3, #16]
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d104      	bne.n	8006d14 <UART_Start_Receive_IT+0x4c>
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	225c      	movs	r2, #92	; 0x5c
 8006d0e:	4943      	ldr	r1, [pc, #268]	; (8006e1c <UART_Start_Receive_IT+0x154>)
 8006d10:	5299      	strh	r1, [r3, r2]
 8006d12:	e02e      	b.n	8006d72 <UART_Start_Receive_IT+0xaa>
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	225c      	movs	r2, #92	; 0x5c
 8006d18:	21ff      	movs	r1, #255	; 0xff
 8006d1a:	5299      	strh	r1, [r3, r2]
 8006d1c:	e029      	b.n	8006d72 <UART_Start_Receive_IT+0xaa>
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	689b      	ldr	r3, [r3, #8]
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d10d      	bne.n	8006d42 <UART_Start_Receive_IT+0x7a>
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	691b      	ldr	r3, [r3, #16]
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d104      	bne.n	8006d38 <UART_Start_Receive_IT+0x70>
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	225c      	movs	r2, #92	; 0x5c
 8006d32:	21ff      	movs	r1, #255	; 0xff
 8006d34:	5299      	strh	r1, [r3, r2]
 8006d36:	e01c      	b.n	8006d72 <UART_Start_Receive_IT+0xaa>
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	225c      	movs	r2, #92	; 0x5c
 8006d3c:	217f      	movs	r1, #127	; 0x7f
 8006d3e:	5299      	strh	r1, [r3, r2]
 8006d40:	e017      	b.n	8006d72 <UART_Start_Receive_IT+0xaa>
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	689a      	ldr	r2, [r3, #8]
 8006d46:	2380      	movs	r3, #128	; 0x80
 8006d48:	055b      	lsls	r3, r3, #21
 8006d4a:	429a      	cmp	r2, r3
 8006d4c:	d10d      	bne.n	8006d6a <UART_Start_Receive_IT+0xa2>
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	691b      	ldr	r3, [r3, #16]
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d104      	bne.n	8006d60 <UART_Start_Receive_IT+0x98>
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	225c      	movs	r2, #92	; 0x5c
 8006d5a:	217f      	movs	r1, #127	; 0x7f
 8006d5c:	5299      	strh	r1, [r3, r2]
 8006d5e:	e008      	b.n	8006d72 <UART_Start_Receive_IT+0xaa>
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	225c      	movs	r2, #92	; 0x5c
 8006d64:	213f      	movs	r1, #63	; 0x3f
 8006d66:	5299      	strh	r1, [r3, r2]
 8006d68:	e003      	b.n	8006d72 <UART_Start_Receive_IT+0xaa>
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	225c      	movs	r2, #92	; 0x5c
 8006d6e:	2100      	movs	r1, #0
 8006d70:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	2280      	movs	r2, #128	; 0x80
 8006d76:	2100      	movs	r1, #0
 8006d78:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	2222      	movs	r2, #34	; 0x22
 8006d7e:	67da      	str	r2, [r3, #124]	; 0x7c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006d80:	f3ef 8310 	mrs	r3, PRIMASK
 8006d84:	61fb      	str	r3, [r7, #28]
  return(result);
 8006d86:	69fb      	ldr	r3, [r7, #28]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d88:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006d8a:	2301      	movs	r3, #1
 8006d8c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006d8e:	6a3b      	ldr	r3, [r7, #32]
 8006d90:	f383 8810 	msr	PRIMASK, r3
}
 8006d94:	46c0      	nop			; (mov r8, r8)
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	689a      	ldr	r2, [r3, #8]
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	2101      	movs	r1, #1
 8006da2:	430a      	orrs	r2, r1
 8006da4:	609a      	str	r2, [r3, #8]
 8006da6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006da8:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006daa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dac:	f383 8810 	msr	PRIMASK, r3
}
 8006db0:	46c0      	nop			; (mov r8, r8)

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	689a      	ldr	r2, [r3, #8]
 8006db6:	2380      	movs	r3, #128	; 0x80
 8006db8:	015b      	lsls	r3, r3, #5
 8006dba:	429a      	cmp	r2, r3
 8006dbc:	d107      	bne.n	8006dce <UART_Start_Receive_IT+0x106>
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	691b      	ldr	r3, [r3, #16]
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d103      	bne.n	8006dce <UART_Start_Receive_IT+0x106>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	4a15      	ldr	r2, [pc, #84]	; (8006e20 <UART_Start_Receive_IT+0x158>)
 8006dca:	665a      	str	r2, [r3, #100]	; 0x64
 8006dcc:	e002      	b.n	8006dd4 <UART_Start_Receive_IT+0x10c>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	4a14      	ldr	r2, [pc, #80]	; (8006e24 <UART_Start_Receive_IT+0x15c>)
 8006dd2:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	2274      	movs	r2, #116	; 0x74
 8006dd8:	2100      	movs	r1, #0
 8006dda:	5499      	strb	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006ddc:	f3ef 8310 	mrs	r3, PRIMASK
 8006de0:	613b      	str	r3, [r7, #16]
  return(result);
 8006de2:	693b      	ldr	r3, [r7, #16]

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8006de4:	62bb      	str	r3, [r7, #40]	; 0x28
 8006de6:	2301      	movs	r3, #1
 8006de8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006dea:	697b      	ldr	r3, [r7, #20]
 8006dec:	f383 8810 	msr	PRIMASK, r3
}
 8006df0:	46c0      	nop			; (mov r8, r8)
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	681a      	ldr	r2, [r3, #0]
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	2190      	movs	r1, #144	; 0x90
 8006dfe:	0049      	lsls	r1, r1, #1
 8006e00:	430a      	orrs	r2, r1
 8006e02:	601a      	str	r2, [r3, #0]
 8006e04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e06:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006e08:	69bb      	ldr	r3, [r7, #24]
 8006e0a:	f383 8810 	msr	PRIMASK, r3
}
 8006e0e:	46c0      	nop			; (mov r8, r8)
  return HAL_OK;
 8006e10:	2300      	movs	r3, #0
}
 8006e12:	0018      	movs	r0, r3
 8006e14:	46bd      	mov	sp, r7
 8006e16:	b00c      	add	sp, #48	; 0x30
 8006e18:	bd80      	pop	{r7, pc}
 8006e1a:	46c0      	nop			; (mov r8, r8)
 8006e1c:	000001ff 	.word	0x000001ff
 8006e20:	080070d9 	.word	0x080070d9
 8006e24:	08006f71 	.word	0x08006f71

08006e28 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006e28:	b580      	push	{r7, lr}
 8006e2a:	b08e      	sub	sp, #56	; 0x38
 8006e2c:	af00      	add	r7, sp, #0
 8006e2e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006e30:	f3ef 8310 	mrs	r3, PRIMASK
 8006e34:	617b      	str	r3, [r7, #20]
  return(result);
 8006e36:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006e38:	637b      	str	r3, [r7, #52]	; 0x34
 8006e3a:	2301      	movs	r3, #1
 8006e3c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006e3e:	69bb      	ldr	r3, [r7, #24]
 8006e40:	f383 8810 	msr	PRIMASK, r3
}
 8006e44:	46c0      	nop			; (mov r8, r8)
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	681a      	ldr	r2, [r3, #0]
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	4925      	ldr	r1, [pc, #148]	; (8006ee8 <UART_EndRxTransfer+0xc0>)
 8006e52:	400a      	ands	r2, r1
 8006e54:	601a      	str	r2, [r3, #0]
 8006e56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e58:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006e5a:	69fb      	ldr	r3, [r7, #28]
 8006e5c:	f383 8810 	msr	PRIMASK, r3
}
 8006e60:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006e62:	f3ef 8310 	mrs	r3, PRIMASK
 8006e66:	623b      	str	r3, [r7, #32]
  return(result);
 8006e68:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e6a:	633b      	str	r3, [r7, #48]	; 0x30
 8006e6c:	2301      	movs	r3, #1
 8006e6e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006e70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e72:	f383 8810 	msr	PRIMASK, r3
}
 8006e76:	46c0      	nop			; (mov r8, r8)
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	689a      	ldr	r2, [r3, #8]
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	2101      	movs	r1, #1
 8006e84:	438a      	bics	r2, r1
 8006e86:	609a      	str	r2, [r3, #8]
 8006e88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e8a:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006e8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e8e:	f383 8810 	msr	PRIMASK, r3
}
 8006e92:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006e98:	2b01      	cmp	r3, #1
 8006e9a:	d118      	bne.n	8006ece <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006e9c:	f3ef 8310 	mrs	r3, PRIMASK
 8006ea0:	60bb      	str	r3, [r7, #8]
  return(result);
 8006ea2:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006ea4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006ea6:	2301      	movs	r3, #1
 8006ea8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	f383 8810 	msr	PRIMASK, r3
}
 8006eb0:	46c0      	nop			; (mov r8, r8)
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	681a      	ldr	r2, [r3, #0]
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	2110      	movs	r1, #16
 8006ebe:	438a      	bics	r2, r1
 8006ec0:	601a      	str	r2, [r3, #0]
 8006ec2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ec4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006ec6:	693b      	ldr	r3, [r7, #16]
 8006ec8:	f383 8810 	msr	PRIMASK, r3
}
 8006ecc:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	2220      	movs	r2, #32
 8006ed2:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	2200      	movs	r2, #0
 8006ed8:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	2200      	movs	r2, #0
 8006ede:	665a      	str	r2, [r3, #100]	; 0x64
}
 8006ee0:	46c0      	nop			; (mov r8, r8)
 8006ee2:	46bd      	mov	sp, r7
 8006ee4:	b00e      	add	sp, #56	; 0x38
 8006ee6:	bd80      	pop	{r7, pc}
 8006ee8:	fffffedf 	.word	0xfffffedf

08006eec <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006eec:	b580      	push	{r7, lr}
 8006eee:	b084      	sub	sp, #16
 8006ef0:	af00      	add	r7, sp, #0
 8006ef2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ef8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	225a      	movs	r2, #90	; 0x5a
 8006efe:	2100      	movs	r1, #0
 8006f00:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	2252      	movs	r2, #82	; 0x52
 8006f06:	2100      	movs	r1, #0
 8006f08:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	0018      	movs	r0, r3
 8006f0e:	f7ff fa49 	bl	80063a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006f12:	46c0      	nop			; (mov r8, r8)
 8006f14:	46bd      	mov	sp, r7
 8006f16:	b004      	add	sp, #16
 8006f18:	bd80      	pop	{r7, pc}

08006f1a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006f1a:	b580      	push	{r7, lr}
 8006f1c:	b086      	sub	sp, #24
 8006f1e:	af00      	add	r7, sp, #0
 8006f20:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006f22:	f3ef 8310 	mrs	r3, PRIMASK
 8006f26:	60bb      	str	r3, [r7, #8]
  return(result);
 8006f28:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006f2a:	617b      	str	r3, [r7, #20]
 8006f2c:	2301      	movs	r3, #1
 8006f2e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	f383 8810 	msr	PRIMASK, r3
}
 8006f36:	46c0      	nop			; (mov r8, r8)
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	681a      	ldr	r2, [r3, #0]
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	2140      	movs	r1, #64	; 0x40
 8006f44:	438a      	bics	r2, r1
 8006f46:	601a      	str	r2, [r3, #0]
 8006f48:	697b      	ldr	r3, [r7, #20]
 8006f4a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006f4c:	693b      	ldr	r3, [r7, #16]
 8006f4e:	f383 8810 	msr	PRIMASK, r3
}
 8006f52:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	2220      	movs	r2, #32
 8006f58:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	2200      	movs	r2, #0
 8006f5e:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	0018      	movs	r0, r3
 8006f64:	f7ff fa16 	bl	8006394 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006f68:	46c0      	nop			; (mov r8, r8)
 8006f6a:	46bd      	mov	sp, r7
 8006f6c:	b006      	add	sp, #24
 8006f6e:	bd80      	pop	{r7, pc}

08006f70 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8006f70:	b580      	push	{r7, lr}
 8006f72:	b090      	sub	sp, #64	; 0x40
 8006f74:	af00      	add	r7, sp, #0
 8006f76:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8006f78:	203e      	movs	r0, #62	; 0x3e
 8006f7a:	183b      	adds	r3, r7, r0
 8006f7c:	687a      	ldr	r2, [r7, #4]
 8006f7e:	215c      	movs	r1, #92	; 0x5c
 8006f80:	5a52      	ldrh	r2, [r2, r1]
 8006f82:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006f88:	2b22      	cmp	r3, #34	; 0x22
 8006f8a:	d000      	beq.n	8006f8e <UART_RxISR_8BIT+0x1e>
 8006f8c:	e095      	b.n	80070ba <UART_RxISR_8BIT+0x14a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006f94:	213c      	movs	r1, #60	; 0x3c
 8006f96:	187b      	adds	r3, r7, r1
 8006f98:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006f9a:	187b      	adds	r3, r7, r1
 8006f9c:	881b      	ldrh	r3, [r3, #0]
 8006f9e:	b2da      	uxtb	r2, r3
 8006fa0:	183b      	adds	r3, r7, r0
 8006fa2:	881b      	ldrh	r3, [r3, #0]
 8006fa4:	b2d9      	uxtb	r1, r3
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006faa:	400a      	ands	r2, r1
 8006fac:	b2d2      	uxtb	r2, r2
 8006fae:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006fb4:	1c5a      	adds	r2, r3, #1
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	225a      	movs	r2, #90	; 0x5a
 8006fbe:	5a9b      	ldrh	r3, [r3, r2]
 8006fc0:	b29b      	uxth	r3, r3
 8006fc2:	3b01      	subs	r3, #1
 8006fc4:	b299      	uxth	r1, r3
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	225a      	movs	r2, #90	; 0x5a
 8006fca:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	225a      	movs	r2, #90	; 0x5a
 8006fd0:	5a9b      	ldrh	r3, [r3, r2]
 8006fd2:	b29b      	uxth	r3, r3
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d178      	bne.n	80070ca <UART_RxISR_8BIT+0x15a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006fd8:	f3ef 8310 	mrs	r3, PRIMASK
 8006fdc:	61bb      	str	r3, [r7, #24]
  return(result);
 8006fde:	69bb      	ldr	r3, [r7, #24]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006fe0:	63bb      	str	r3, [r7, #56]	; 0x38
 8006fe2:	2301      	movs	r3, #1
 8006fe4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006fe6:	69fb      	ldr	r3, [r7, #28]
 8006fe8:	f383 8810 	msr	PRIMASK, r3
}
 8006fec:	46c0      	nop			; (mov r8, r8)
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	681a      	ldr	r2, [r3, #0]
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	4936      	ldr	r1, [pc, #216]	; (80070d4 <UART_RxISR_8BIT+0x164>)
 8006ffa:	400a      	ands	r2, r1
 8006ffc:	601a      	str	r2, [r3, #0]
 8006ffe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007000:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007002:	6a3b      	ldr	r3, [r7, #32]
 8007004:	f383 8810 	msr	PRIMASK, r3
}
 8007008:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800700a:	f3ef 8310 	mrs	r3, PRIMASK
 800700e:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8007010:	6a7b      	ldr	r3, [r7, #36]	; 0x24

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007012:	637b      	str	r3, [r7, #52]	; 0x34
 8007014:	2301      	movs	r3, #1
 8007016:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007018:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800701a:	f383 8810 	msr	PRIMASK, r3
}
 800701e:	46c0      	nop			; (mov r8, r8)
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	689a      	ldr	r2, [r3, #8]
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	2101      	movs	r1, #1
 800702c:	438a      	bics	r2, r1
 800702e:	609a      	str	r2, [r3, #8]
 8007030:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007032:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007034:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007036:	f383 8810 	msr	PRIMASK, r3
}
 800703a:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	2220      	movs	r2, #32
 8007040:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	2200      	movs	r2, #0
 8007046:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800704c:	2b01      	cmp	r3, #1
 800704e:	d12f      	bne.n	80070b0 <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	2200      	movs	r2, #0
 8007054:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007056:	f3ef 8310 	mrs	r3, PRIMASK
 800705a:	60fb      	str	r3, [r7, #12]
  return(result);
 800705c:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800705e:	633b      	str	r3, [r7, #48]	; 0x30
 8007060:	2301      	movs	r3, #1
 8007062:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007064:	693b      	ldr	r3, [r7, #16]
 8007066:	f383 8810 	msr	PRIMASK, r3
}
 800706a:	46c0      	nop			; (mov r8, r8)
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	681a      	ldr	r2, [r3, #0]
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	2110      	movs	r1, #16
 8007078:	438a      	bics	r2, r1
 800707a:	601a      	str	r2, [r3, #0]
 800707c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800707e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007080:	697b      	ldr	r3, [r7, #20]
 8007082:	f383 8810 	msr	PRIMASK, r3
}
 8007086:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	69db      	ldr	r3, [r3, #28]
 800708e:	2210      	movs	r2, #16
 8007090:	4013      	ands	r3, r2
 8007092:	2b10      	cmp	r3, #16
 8007094:	d103      	bne.n	800709e <UART_RxISR_8BIT+0x12e>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	2210      	movs	r2, #16
 800709c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	2258      	movs	r2, #88	; 0x58
 80070a2:	5a9a      	ldrh	r2, [r3, r2]
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	0011      	movs	r1, r2
 80070a8:	0018      	movs	r0, r3
 80070aa:	f7ff f983 	bl	80063b4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80070ae:	e00c      	b.n	80070ca <UART_RxISR_8BIT+0x15a>
        HAL_UART_RxCpltCallback(huart);
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	0018      	movs	r0, r3
 80070b4:	f7fb ff5a 	bl	8002f6c <HAL_UART_RxCpltCallback>
}
 80070b8:	e007      	b.n	80070ca <UART_RxISR_8BIT+0x15a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	699a      	ldr	r2, [r3, #24]
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	2108      	movs	r1, #8
 80070c6:	430a      	orrs	r2, r1
 80070c8:	619a      	str	r2, [r3, #24]
}
 80070ca:	46c0      	nop			; (mov r8, r8)
 80070cc:	46bd      	mov	sp, r7
 80070ce:	b010      	add	sp, #64	; 0x40
 80070d0:	bd80      	pop	{r7, pc}
 80070d2:	46c0      	nop			; (mov r8, r8)
 80070d4:	fffffedf 	.word	0xfffffedf

080070d8 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80070d8:	b580      	push	{r7, lr}
 80070da:	b090      	sub	sp, #64	; 0x40
 80070dc:	af00      	add	r7, sp, #0
 80070de:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80070e0:	203e      	movs	r0, #62	; 0x3e
 80070e2:	183b      	adds	r3, r7, r0
 80070e4:	687a      	ldr	r2, [r7, #4]
 80070e6:	215c      	movs	r1, #92	; 0x5c
 80070e8:	5a52      	ldrh	r2, [r2, r1]
 80070ea:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80070f0:	2b22      	cmp	r3, #34	; 0x22
 80070f2:	d000      	beq.n	80070f6 <UART_RxISR_16BIT+0x1e>
 80070f4:	e095      	b.n	8007222 <UART_RxISR_16BIT+0x14a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80070fc:	213c      	movs	r1, #60	; 0x3c
 80070fe:	187b      	adds	r3, r7, r1
 8007100:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007106:	63bb      	str	r3, [r7, #56]	; 0x38
    *tmp = (uint16_t)(uhdata & uhMask);
 8007108:	187b      	adds	r3, r7, r1
 800710a:	183a      	adds	r2, r7, r0
 800710c:	881b      	ldrh	r3, [r3, #0]
 800710e:	8812      	ldrh	r2, [r2, #0]
 8007110:	4013      	ands	r3, r2
 8007112:	b29a      	uxth	r2, r3
 8007114:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007116:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800711c:	1c9a      	adds	r2, r3, #2
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	225a      	movs	r2, #90	; 0x5a
 8007126:	5a9b      	ldrh	r3, [r3, r2]
 8007128:	b29b      	uxth	r3, r3
 800712a:	3b01      	subs	r3, #1
 800712c:	b299      	uxth	r1, r3
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	225a      	movs	r2, #90	; 0x5a
 8007132:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	225a      	movs	r2, #90	; 0x5a
 8007138:	5a9b      	ldrh	r3, [r3, r2]
 800713a:	b29b      	uxth	r3, r3
 800713c:	2b00      	cmp	r3, #0
 800713e:	d178      	bne.n	8007232 <UART_RxISR_16BIT+0x15a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007140:	f3ef 8310 	mrs	r3, PRIMASK
 8007144:	617b      	str	r3, [r7, #20]
  return(result);
 8007146:	697b      	ldr	r3, [r7, #20]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007148:	637b      	str	r3, [r7, #52]	; 0x34
 800714a:	2301      	movs	r3, #1
 800714c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800714e:	69bb      	ldr	r3, [r7, #24]
 8007150:	f383 8810 	msr	PRIMASK, r3
}
 8007154:	46c0      	nop			; (mov r8, r8)
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	681a      	ldr	r2, [r3, #0]
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	4936      	ldr	r1, [pc, #216]	; (800723c <UART_RxISR_16BIT+0x164>)
 8007162:	400a      	ands	r2, r1
 8007164:	601a      	str	r2, [r3, #0]
 8007166:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007168:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800716a:	69fb      	ldr	r3, [r7, #28]
 800716c:	f383 8810 	msr	PRIMASK, r3
}
 8007170:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007172:	f3ef 8310 	mrs	r3, PRIMASK
 8007176:	623b      	str	r3, [r7, #32]
  return(result);
 8007178:	6a3b      	ldr	r3, [r7, #32]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800717a:	633b      	str	r3, [r7, #48]	; 0x30
 800717c:	2301      	movs	r3, #1
 800717e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007182:	f383 8810 	msr	PRIMASK, r3
}
 8007186:	46c0      	nop			; (mov r8, r8)
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	689a      	ldr	r2, [r3, #8]
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	2101      	movs	r1, #1
 8007194:	438a      	bics	r2, r1
 8007196:	609a      	str	r2, [r3, #8]
 8007198:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800719a:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800719c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800719e:	f383 8810 	msr	PRIMASK, r3
}
 80071a2:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	2220      	movs	r2, #32
 80071a8:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	2200      	movs	r2, #0
 80071ae:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80071b4:	2b01      	cmp	r3, #1
 80071b6:	d12f      	bne.n	8007218 <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	2200      	movs	r2, #0
 80071bc:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80071be:	f3ef 8310 	mrs	r3, PRIMASK
 80071c2:	60bb      	str	r3, [r7, #8]
  return(result);
 80071c4:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80071c6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80071c8:	2301      	movs	r3, #1
 80071ca:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	f383 8810 	msr	PRIMASK, r3
}
 80071d2:	46c0      	nop			; (mov r8, r8)
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	681a      	ldr	r2, [r3, #0]
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	2110      	movs	r1, #16
 80071e0:	438a      	bics	r2, r1
 80071e2:	601a      	str	r2, [r3, #0]
 80071e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071e6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80071e8:	693b      	ldr	r3, [r7, #16]
 80071ea:	f383 8810 	msr	PRIMASK, r3
}
 80071ee:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	69db      	ldr	r3, [r3, #28]
 80071f6:	2210      	movs	r2, #16
 80071f8:	4013      	ands	r3, r2
 80071fa:	2b10      	cmp	r3, #16
 80071fc:	d103      	bne.n	8007206 <UART_RxISR_16BIT+0x12e>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	2210      	movs	r2, #16
 8007204:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	2258      	movs	r2, #88	; 0x58
 800720a:	5a9a      	ldrh	r2, [r3, r2]
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	0011      	movs	r1, r2
 8007210:	0018      	movs	r0, r3
 8007212:	f7ff f8cf 	bl	80063b4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007216:	e00c      	b.n	8007232 <UART_RxISR_16BIT+0x15a>
        HAL_UART_RxCpltCallback(huart);
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	0018      	movs	r0, r3
 800721c:	f7fb fea6 	bl	8002f6c <HAL_UART_RxCpltCallback>
}
 8007220:	e007      	b.n	8007232 <UART_RxISR_16BIT+0x15a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	699a      	ldr	r2, [r3, #24]
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	2108      	movs	r1, #8
 800722e:	430a      	orrs	r2, r1
 8007230:	619a      	str	r2, [r3, #24]
}
 8007232:	46c0      	nop			; (mov r8, r8)
 8007234:	46bd      	mov	sp, r7
 8007236:	b010      	add	sp, #64	; 0x40
 8007238:	bd80      	pop	{r7, pc}
 800723a:	46c0      	nop			; (mov r8, r8)
 800723c:	fffffedf 	.word	0xfffffedf

08007240 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007240:	b580      	push	{r7, lr}
 8007242:	b082      	sub	sp, #8
 8007244:	af00      	add	r7, sp, #0
 8007246:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007248:	46c0      	nop			; (mov r8, r8)
 800724a:	46bd      	mov	sp, r7
 800724c:	b002      	add	sp, #8
 800724e:	bd80      	pop	{r7, pc}

08007250 <__errno>:
 8007250:	4b01      	ldr	r3, [pc, #4]	; (8007258 <__errno+0x8>)
 8007252:	6818      	ldr	r0, [r3, #0]
 8007254:	4770      	bx	lr
 8007256:	46c0      	nop			; (mov r8, r8)
 8007258:	2000000c 	.word	0x2000000c

0800725c <__libc_init_array>:
 800725c:	b570      	push	{r4, r5, r6, lr}
 800725e:	2600      	movs	r6, #0
 8007260:	4d0c      	ldr	r5, [pc, #48]	; (8007294 <__libc_init_array+0x38>)
 8007262:	4c0d      	ldr	r4, [pc, #52]	; (8007298 <__libc_init_array+0x3c>)
 8007264:	1b64      	subs	r4, r4, r5
 8007266:	10a4      	asrs	r4, r4, #2
 8007268:	42a6      	cmp	r6, r4
 800726a:	d109      	bne.n	8007280 <__libc_init_array+0x24>
 800726c:	2600      	movs	r6, #0
 800726e:	f000 fc47 	bl	8007b00 <_init>
 8007272:	4d0a      	ldr	r5, [pc, #40]	; (800729c <__libc_init_array+0x40>)
 8007274:	4c0a      	ldr	r4, [pc, #40]	; (80072a0 <__libc_init_array+0x44>)
 8007276:	1b64      	subs	r4, r4, r5
 8007278:	10a4      	asrs	r4, r4, #2
 800727a:	42a6      	cmp	r6, r4
 800727c:	d105      	bne.n	800728a <__libc_init_array+0x2e>
 800727e:	bd70      	pop	{r4, r5, r6, pc}
 8007280:	00b3      	lsls	r3, r6, #2
 8007282:	58eb      	ldr	r3, [r5, r3]
 8007284:	4798      	blx	r3
 8007286:	3601      	adds	r6, #1
 8007288:	e7ee      	b.n	8007268 <__libc_init_array+0xc>
 800728a:	00b3      	lsls	r3, r6, #2
 800728c:	58eb      	ldr	r3, [r5, r3]
 800728e:	4798      	blx	r3
 8007290:	3601      	adds	r6, #1
 8007292:	e7f2      	b.n	800727a <__libc_init_array+0x1e>
 8007294:	08008064 	.word	0x08008064
 8007298:	08008064 	.word	0x08008064
 800729c:	08008064 	.word	0x08008064
 80072a0:	08008068 	.word	0x08008068

080072a4 <memcpy>:
 80072a4:	2300      	movs	r3, #0
 80072a6:	b510      	push	{r4, lr}
 80072a8:	429a      	cmp	r2, r3
 80072aa:	d100      	bne.n	80072ae <memcpy+0xa>
 80072ac:	bd10      	pop	{r4, pc}
 80072ae:	5ccc      	ldrb	r4, [r1, r3]
 80072b0:	54c4      	strb	r4, [r0, r3]
 80072b2:	3301      	adds	r3, #1
 80072b4:	e7f8      	b.n	80072a8 <memcpy+0x4>

080072b6 <memset>:
 80072b6:	0003      	movs	r3, r0
 80072b8:	1882      	adds	r2, r0, r2
 80072ba:	4293      	cmp	r3, r2
 80072bc:	d100      	bne.n	80072c0 <memset+0xa>
 80072be:	4770      	bx	lr
 80072c0:	7019      	strb	r1, [r3, #0]
 80072c2:	3301      	adds	r3, #1
 80072c4:	e7f9      	b.n	80072ba <memset+0x4>
	...

080072c8 <siprintf>:
 80072c8:	b40e      	push	{r1, r2, r3}
 80072ca:	b500      	push	{lr}
 80072cc:	490b      	ldr	r1, [pc, #44]	; (80072fc <siprintf+0x34>)
 80072ce:	b09c      	sub	sp, #112	; 0x70
 80072d0:	ab1d      	add	r3, sp, #116	; 0x74
 80072d2:	9002      	str	r0, [sp, #8]
 80072d4:	9006      	str	r0, [sp, #24]
 80072d6:	9107      	str	r1, [sp, #28]
 80072d8:	9104      	str	r1, [sp, #16]
 80072da:	4809      	ldr	r0, [pc, #36]	; (8007300 <siprintf+0x38>)
 80072dc:	4909      	ldr	r1, [pc, #36]	; (8007304 <siprintf+0x3c>)
 80072de:	cb04      	ldmia	r3!, {r2}
 80072e0:	9105      	str	r1, [sp, #20]
 80072e2:	6800      	ldr	r0, [r0, #0]
 80072e4:	a902      	add	r1, sp, #8
 80072e6:	9301      	str	r3, [sp, #4]
 80072e8:	f000 f870 	bl	80073cc <_svfiprintf_r>
 80072ec:	2300      	movs	r3, #0
 80072ee:	9a02      	ldr	r2, [sp, #8]
 80072f0:	7013      	strb	r3, [r2, #0]
 80072f2:	b01c      	add	sp, #112	; 0x70
 80072f4:	bc08      	pop	{r3}
 80072f6:	b003      	add	sp, #12
 80072f8:	4718      	bx	r3
 80072fa:	46c0      	nop			; (mov r8, r8)
 80072fc:	7fffffff 	.word	0x7fffffff
 8007300:	2000000c 	.word	0x2000000c
 8007304:	ffff0208 	.word	0xffff0208

08007308 <__ssputs_r>:
 8007308:	b5f0      	push	{r4, r5, r6, r7, lr}
 800730a:	688e      	ldr	r6, [r1, #8]
 800730c:	b085      	sub	sp, #20
 800730e:	0007      	movs	r7, r0
 8007310:	000c      	movs	r4, r1
 8007312:	9203      	str	r2, [sp, #12]
 8007314:	9301      	str	r3, [sp, #4]
 8007316:	429e      	cmp	r6, r3
 8007318:	d83c      	bhi.n	8007394 <__ssputs_r+0x8c>
 800731a:	2390      	movs	r3, #144	; 0x90
 800731c:	898a      	ldrh	r2, [r1, #12]
 800731e:	00db      	lsls	r3, r3, #3
 8007320:	421a      	tst	r2, r3
 8007322:	d034      	beq.n	800738e <__ssputs_r+0x86>
 8007324:	2503      	movs	r5, #3
 8007326:	6909      	ldr	r1, [r1, #16]
 8007328:	6823      	ldr	r3, [r4, #0]
 800732a:	1a5b      	subs	r3, r3, r1
 800732c:	9302      	str	r3, [sp, #8]
 800732e:	6963      	ldr	r3, [r4, #20]
 8007330:	9802      	ldr	r0, [sp, #8]
 8007332:	435d      	muls	r5, r3
 8007334:	0feb      	lsrs	r3, r5, #31
 8007336:	195d      	adds	r5, r3, r5
 8007338:	9b01      	ldr	r3, [sp, #4]
 800733a:	106d      	asrs	r5, r5, #1
 800733c:	3301      	adds	r3, #1
 800733e:	181b      	adds	r3, r3, r0
 8007340:	42ab      	cmp	r3, r5
 8007342:	d900      	bls.n	8007346 <__ssputs_r+0x3e>
 8007344:	001d      	movs	r5, r3
 8007346:	0553      	lsls	r3, r2, #21
 8007348:	d532      	bpl.n	80073b0 <__ssputs_r+0xa8>
 800734a:	0029      	movs	r1, r5
 800734c:	0038      	movs	r0, r7
 800734e:	f000 fb27 	bl	80079a0 <_malloc_r>
 8007352:	1e06      	subs	r6, r0, #0
 8007354:	d109      	bne.n	800736a <__ssputs_r+0x62>
 8007356:	230c      	movs	r3, #12
 8007358:	603b      	str	r3, [r7, #0]
 800735a:	2340      	movs	r3, #64	; 0x40
 800735c:	2001      	movs	r0, #1
 800735e:	89a2      	ldrh	r2, [r4, #12]
 8007360:	4240      	negs	r0, r0
 8007362:	4313      	orrs	r3, r2
 8007364:	81a3      	strh	r3, [r4, #12]
 8007366:	b005      	add	sp, #20
 8007368:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800736a:	9a02      	ldr	r2, [sp, #8]
 800736c:	6921      	ldr	r1, [r4, #16]
 800736e:	f7ff ff99 	bl	80072a4 <memcpy>
 8007372:	89a3      	ldrh	r3, [r4, #12]
 8007374:	4a14      	ldr	r2, [pc, #80]	; (80073c8 <__ssputs_r+0xc0>)
 8007376:	401a      	ands	r2, r3
 8007378:	2380      	movs	r3, #128	; 0x80
 800737a:	4313      	orrs	r3, r2
 800737c:	81a3      	strh	r3, [r4, #12]
 800737e:	9b02      	ldr	r3, [sp, #8]
 8007380:	6126      	str	r6, [r4, #16]
 8007382:	18f6      	adds	r6, r6, r3
 8007384:	6026      	str	r6, [r4, #0]
 8007386:	6165      	str	r5, [r4, #20]
 8007388:	9e01      	ldr	r6, [sp, #4]
 800738a:	1aed      	subs	r5, r5, r3
 800738c:	60a5      	str	r5, [r4, #8]
 800738e:	9b01      	ldr	r3, [sp, #4]
 8007390:	429e      	cmp	r6, r3
 8007392:	d900      	bls.n	8007396 <__ssputs_r+0x8e>
 8007394:	9e01      	ldr	r6, [sp, #4]
 8007396:	0032      	movs	r2, r6
 8007398:	9903      	ldr	r1, [sp, #12]
 800739a:	6820      	ldr	r0, [r4, #0]
 800739c:	f000 faa3 	bl	80078e6 <memmove>
 80073a0:	68a3      	ldr	r3, [r4, #8]
 80073a2:	2000      	movs	r0, #0
 80073a4:	1b9b      	subs	r3, r3, r6
 80073a6:	60a3      	str	r3, [r4, #8]
 80073a8:	6823      	ldr	r3, [r4, #0]
 80073aa:	199e      	adds	r6, r3, r6
 80073ac:	6026      	str	r6, [r4, #0]
 80073ae:	e7da      	b.n	8007366 <__ssputs_r+0x5e>
 80073b0:	002a      	movs	r2, r5
 80073b2:	0038      	movs	r0, r7
 80073b4:	f000 fb52 	bl	8007a5c <_realloc_r>
 80073b8:	1e06      	subs	r6, r0, #0
 80073ba:	d1e0      	bne.n	800737e <__ssputs_r+0x76>
 80073bc:	0038      	movs	r0, r7
 80073be:	6921      	ldr	r1, [r4, #16]
 80073c0:	f000 faa4 	bl	800790c <_free_r>
 80073c4:	e7c7      	b.n	8007356 <__ssputs_r+0x4e>
 80073c6:	46c0      	nop			; (mov r8, r8)
 80073c8:	fffffb7f 	.word	0xfffffb7f

080073cc <_svfiprintf_r>:
 80073cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80073ce:	b0a1      	sub	sp, #132	; 0x84
 80073d0:	9003      	str	r0, [sp, #12]
 80073d2:	001d      	movs	r5, r3
 80073d4:	898b      	ldrh	r3, [r1, #12]
 80073d6:	000f      	movs	r7, r1
 80073d8:	0016      	movs	r6, r2
 80073da:	061b      	lsls	r3, r3, #24
 80073dc:	d511      	bpl.n	8007402 <_svfiprintf_r+0x36>
 80073de:	690b      	ldr	r3, [r1, #16]
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d10e      	bne.n	8007402 <_svfiprintf_r+0x36>
 80073e4:	2140      	movs	r1, #64	; 0x40
 80073e6:	f000 fadb 	bl	80079a0 <_malloc_r>
 80073ea:	6038      	str	r0, [r7, #0]
 80073ec:	6138      	str	r0, [r7, #16]
 80073ee:	2800      	cmp	r0, #0
 80073f0:	d105      	bne.n	80073fe <_svfiprintf_r+0x32>
 80073f2:	230c      	movs	r3, #12
 80073f4:	9a03      	ldr	r2, [sp, #12]
 80073f6:	3801      	subs	r0, #1
 80073f8:	6013      	str	r3, [r2, #0]
 80073fa:	b021      	add	sp, #132	; 0x84
 80073fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80073fe:	2340      	movs	r3, #64	; 0x40
 8007400:	617b      	str	r3, [r7, #20]
 8007402:	2300      	movs	r3, #0
 8007404:	ac08      	add	r4, sp, #32
 8007406:	6163      	str	r3, [r4, #20]
 8007408:	3320      	adds	r3, #32
 800740a:	7663      	strb	r3, [r4, #25]
 800740c:	3310      	adds	r3, #16
 800740e:	76a3      	strb	r3, [r4, #26]
 8007410:	9507      	str	r5, [sp, #28]
 8007412:	0035      	movs	r5, r6
 8007414:	782b      	ldrb	r3, [r5, #0]
 8007416:	2b00      	cmp	r3, #0
 8007418:	d001      	beq.n	800741e <_svfiprintf_r+0x52>
 800741a:	2b25      	cmp	r3, #37	; 0x25
 800741c:	d147      	bne.n	80074ae <_svfiprintf_r+0xe2>
 800741e:	1bab      	subs	r3, r5, r6
 8007420:	9305      	str	r3, [sp, #20]
 8007422:	42b5      	cmp	r5, r6
 8007424:	d00c      	beq.n	8007440 <_svfiprintf_r+0x74>
 8007426:	0032      	movs	r2, r6
 8007428:	0039      	movs	r1, r7
 800742a:	9803      	ldr	r0, [sp, #12]
 800742c:	f7ff ff6c 	bl	8007308 <__ssputs_r>
 8007430:	1c43      	adds	r3, r0, #1
 8007432:	d100      	bne.n	8007436 <_svfiprintf_r+0x6a>
 8007434:	e0ae      	b.n	8007594 <_svfiprintf_r+0x1c8>
 8007436:	6962      	ldr	r2, [r4, #20]
 8007438:	9b05      	ldr	r3, [sp, #20]
 800743a:	4694      	mov	ip, r2
 800743c:	4463      	add	r3, ip
 800743e:	6163      	str	r3, [r4, #20]
 8007440:	782b      	ldrb	r3, [r5, #0]
 8007442:	2b00      	cmp	r3, #0
 8007444:	d100      	bne.n	8007448 <_svfiprintf_r+0x7c>
 8007446:	e0a5      	b.n	8007594 <_svfiprintf_r+0x1c8>
 8007448:	2201      	movs	r2, #1
 800744a:	2300      	movs	r3, #0
 800744c:	4252      	negs	r2, r2
 800744e:	6062      	str	r2, [r4, #4]
 8007450:	a904      	add	r1, sp, #16
 8007452:	3254      	adds	r2, #84	; 0x54
 8007454:	1852      	adds	r2, r2, r1
 8007456:	1c6e      	adds	r6, r5, #1
 8007458:	6023      	str	r3, [r4, #0]
 800745a:	60e3      	str	r3, [r4, #12]
 800745c:	60a3      	str	r3, [r4, #8]
 800745e:	7013      	strb	r3, [r2, #0]
 8007460:	65a3      	str	r3, [r4, #88]	; 0x58
 8007462:	2205      	movs	r2, #5
 8007464:	7831      	ldrb	r1, [r6, #0]
 8007466:	4854      	ldr	r0, [pc, #336]	; (80075b8 <_svfiprintf_r+0x1ec>)
 8007468:	f000 fa32 	bl	80078d0 <memchr>
 800746c:	1c75      	adds	r5, r6, #1
 800746e:	2800      	cmp	r0, #0
 8007470:	d11f      	bne.n	80074b2 <_svfiprintf_r+0xe6>
 8007472:	6822      	ldr	r2, [r4, #0]
 8007474:	06d3      	lsls	r3, r2, #27
 8007476:	d504      	bpl.n	8007482 <_svfiprintf_r+0xb6>
 8007478:	2353      	movs	r3, #83	; 0x53
 800747a:	a904      	add	r1, sp, #16
 800747c:	185b      	adds	r3, r3, r1
 800747e:	2120      	movs	r1, #32
 8007480:	7019      	strb	r1, [r3, #0]
 8007482:	0713      	lsls	r3, r2, #28
 8007484:	d504      	bpl.n	8007490 <_svfiprintf_r+0xc4>
 8007486:	2353      	movs	r3, #83	; 0x53
 8007488:	a904      	add	r1, sp, #16
 800748a:	185b      	adds	r3, r3, r1
 800748c:	212b      	movs	r1, #43	; 0x2b
 800748e:	7019      	strb	r1, [r3, #0]
 8007490:	7833      	ldrb	r3, [r6, #0]
 8007492:	2b2a      	cmp	r3, #42	; 0x2a
 8007494:	d016      	beq.n	80074c4 <_svfiprintf_r+0xf8>
 8007496:	0035      	movs	r5, r6
 8007498:	2100      	movs	r1, #0
 800749a:	200a      	movs	r0, #10
 800749c:	68e3      	ldr	r3, [r4, #12]
 800749e:	782a      	ldrb	r2, [r5, #0]
 80074a0:	1c6e      	adds	r6, r5, #1
 80074a2:	3a30      	subs	r2, #48	; 0x30
 80074a4:	2a09      	cmp	r2, #9
 80074a6:	d94e      	bls.n	8007546 <_svfiprintf_r+0x17a>
 80074a8:	2900      	cmp	r1, #0
 80074aa:	d111      	bne.n	80074d0 <_svfiprintf_r+0x104>
 80074ac:	e017      	b.n	80074de <_svfiprintf_r+0x112>
 80074ae:	3501      	adds	r5, #1
 80074b0:	e7b0      	b.n	8007414 <_svfiprintf_r+0x48>
 80074b2:	4b41      	ldr	r3, [pc, #260]	; (80075b8 <_svfiprintf_r+0x1ec>)
 80074b4:	6822      	ldr	r2, [r4, #0]
 80074b6:	1ac0      	subs	r0, r0, r3
 80074b8:	2301      	movs	r3, #1
 80074ba:	4083      	lsls	r3, r0
 80074bc:	4313      	orrs	r3, r2
 80074be:	002e      	movs	r6, r5
 80074c0:	6023      	str	r3, [r4, #0]
 80074c2:	e7ce      	b.n	8007462 <_svfiprintf_r+0x96>
 80074c4:	9b07      	ldr	r3, [sp, #28]
 80074c6:	1d19      	adds	r1, r3, #4
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	9107      	str	r1, [sp, #28]
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	db01      	blt.n	80074d4 <_svfiprintf_r+0x108>
 80074d0:	930b      	str	r3, [sp, #44]	; 0x2c
 80074d2:	e004      	b.n	80074de <_svfiprintf_r+0x112>
 80074d4:	425b      	negs	r3, r3
 80074d6:	60e3      	str	r3, [r4, #12]
 80074d8:	2302      	movs	r3, #2
 80074da:	4313      	orrs	r3, r2
 80074dc:	6023      	str	r3, [r4, #0]
 80074de:	782b      	ldrb	r3, [r5, #0]
 80074e0:	2b2e      	cmp	r3, #46	; 0x2e
 80074e2:	d10a      	bne.n	80074fa <_svfiprintf_r+0x12e>
 80074e4:	786b      	ldrb	r3, [r5, #1]
 80074e6:	2b2a      	cmp	r3, #42	; 0x2a
 80074e8:	d135      	bne.n	8007556 <_svfiprintf_r+0x18a>
 80074ea:	9b07      	ldr	r3, [sp, #28]
 80074ec:	3502      	adds	r5, #2
 80074ee:	1d1a      	adds	r2, r3, #4
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	9207      	str	r2, [sp, #28]
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	db2b      	blt.n	8007550 <_svfiprintf_r+0x184>
 80074f8:	9309      	str	r3, [sp, #36]	; 0x24
 80074fa:	4e30      	ldr	r6, [pc, #192]	; (80075bc <_svfiprintf_r+0x1f0>)
 80074fc:	2203      	movs	r2, #3
 80074fe:	0030      	movs	r0, r6
 8007500:	7829      	ldrb	r1, [r5, #0]
 8007502:	f000 f9e5 	bl	80078d0 <memchr>
 8007506:	2800      	cmp	r0, #0
 8007508:	d006      	beq.n	8007518 <_svfiprintf_r+0x14c>
 800750a:	2340      	movs	r3, #64	; 0x40
 800750c:	1b80      	subs	r0, r0, r6
 800750e:	4083      	lsls	r3, r0
 8007510:	6822      	ldr	r2, [r4, #0]
 8007512:	3501      	adds	r5, #1
 8007514:	4313      	orrs	r3, r2
 8007516:	6023      	str	r3, [r4, #0]
 8007518:	7829      	ldrb	r1, [r5, #0]
 800751a:	2206      	movs	r2, #6
 800751c:	4828      	ldr	r0, [pc, #160]	; (80075c0 <_svfiprintf_r+0x1f4>)
 800751e:	1c6e      	adds	r6, r5, #1
 8007520:	7621      	strb	r1, [r4, #24]
 8007522:	f000 f9d5 	bl	80078d0 <memchr>
 8007526:	2800      	cmp	r0, #0
 8007528:	d03c      	beq.n	80075a4 <_svfiprintf_r+0x1d8>
 800752a:	4b26      	ldr	r3, [pc, #152]	; (80075c4 <_svfiprintf_r+0x1f8>)
 800752c:	2b00      	cmp	r3, #0
 800752e:	d125      	bne.n	800757c <_svfiprintf_r+0x1b0>
 8007530:	2207      	movs	r2, #7
 8007532:	9b07      	ldr	r3, [sp, #28]
 8007534:	3307      	adds	r3, #7
 8007536:	4393      	bics	r3, r2
 8007538:	3308      	adds	r3, #8
 800753a:	9307      	str	r3, [sp, #28]
 800753c:	6963      	ldr	r3, [r4, #20]
 800753e:	9a04      	ldr	r2, [sp, #16]
 8007540:	189b      	adds	r3, r3, r2
 8007542:	6163      	str	r3, [r4, #20]
 8007544:	e765      	b.n	8007412 <_svfiprintf_r+0x46>
 8007546:	4343      	muls	r3, r0
 8007548:	0035      	movs	r5, r6
 800754a:	2101      	movs	r1, #1
 800754c:	189b      	adds	r3, r3, r2
 800754e:	e7a6      	b.n	800749e <_svfiprintf_r+0xd2>
 8007550:	2301      	movs	r3, #1
 8007552:	425b      	negs	r3, r3
 8007554:	e7d0      	b.n	80074f8 <_svfiprintf_r+0x12c>
 8007556:	2300      	movs	r3, #0
 8007558:	200a      	movs	r0, #10
 800755a:	001a      	movs	r2, r3
 800755c:	3501      	adds	r5, #1
 800755e:	6063      	str	r3, [r4, #4]
 8007560:	7829      	ldrb	r1, [r5, #0]
 8007562:	1c6e      	adds	r6, r5, #1
 8007564:	3930      	subs	r1, #48	; 0x30
 8007566:	2909      	cmp	r1, #9
 8007568:	d903      	bls.n	8007572 <_svfiprintf_r+0x1a6>
 800756a:	2b00      	cmp	r3, #0
 800756c:	d0c5      	beq.n	80074fa <_svfiprintf_r+0x12e>
 800756e:	9209      	str	r2, [sp, #36]	; 0x24
 8007570:	e7c3      	b.n	80074fa <_svfiprintf_r+0x12e>
 8007572:	4342      	muls	r2, r0
 8007574:	0035      	movs	r5, r6
 8007576:	2301      	movs	r3, #1
 8007578:	1852      	adds	r2, r2, r1
 800757a:	e7f1      	b.n	8007560 <_svfiprintf_r+0x194>
 800757c:	ab07      	add	r3, sp, #28
 800757e:	9300      	str	r3, [sp, #0]
 8007580:	003a      	movs	r2, r7
 8007582:	0021      	movs	r1, r4
 8007584:	4b10      	ldr	r3, [pc, #64]	; (80075c8 <_svfiprintf_r+0x1fc>)
 8007586:	9803      	ldr	r0, [sp, #12]
 8007588:	e000      	b.n	800758c <_svfiprintf_r+0x1c0>
 800758a:	bf00      	nop
 800758c:	9004      	str	r0, [sp, #16]
 800758e:	9b04      	ldr	r3, [sp, #16]
 8007590:	3301      	adds	r3, #1
 8007592:	d1d3      	bne.n	800753c <_svfiprintf_r+0x170>
 8007594:	89bb      	ldrh	r3, [r7, #12]
 8007596:	980d      	ldr	r0, [sp, #52]	; 0x34
 8007598:	065b      	lsls	r3, r3, #25
 800759a:	d400      	bmi.n	800759e <_svfiprintf_r+0x1d2>
 800759c:	e72d      	b.n	80073fa <_svfiprintf_r+0x2e>
 800759e:	2001      	movs	r0, #1
 80075a0:	4240      	negs	r0, r0
 80075a2:	e72a      	b.n	80073fa <_svfiprintf_r+0x2e>
 80075a4:	ab07      	add	r3, sp, #28
 80075a6:	9300      	str	r3, [sp, #0]
 80075a8:	003a      	movs	r2, r7
 80075aa:	0021      	movs	r1, r4
 80075ac:	4b06      	ldr	r3, [pc, #24]	; (80075c8 <_svfiprintf_r+0x1fc>)
 80075ae:	9803      	ldr	r0, [sp, #12]
 80075b0:	f000 f87c 	bl	80076ac <_printf_i>
 80075b4:	e7ea      	b.n	800758c <_svfiprintf_r+0x1c0>
 80075b6:	46c0      	nop			; (mov r8, r8)
 80075b8:	08008028 	.word	0x08008028
 80075bc:	0800802e 	.word	0x0800802e
 80075c0:	08008032 	.word	0x08008032
 80075c4:	00000000 	.word	0x00000000
 80075c8:	08007309 	.word	0x08007309

080075cc <_printf_common>:
 80075cc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80075ce:	0015      	movs	r5, r2
 80075d0:	9301      	str	r3, [sp, #4]
 80075d2:	688a      	ldr	r2, [r1, #8]
 80075d4:	690b      	ldr	r3, [r1, #16]
 80075d6:	000c      	movs	r4, r1
 80075d8:	9000      	str	r0, [sp, #0]
 80075da:	4293      	cmp	r3, r2
 80075dc:	da00      	bge.n	80075e0 <_printf_common+0x14>
 80075de:	0013      	movs	r3, r2
 80075e0:	0022      	movs	r2, r4
 80075e2:	602b      	str	r3, [r5, #0]
 80075e4:	3243      	adds	r2, #67	; 0x43
 80075e6:	7812      	ldrb	r2, [r2, #0]
 80075e8:	2a00      	cmp	r2, #0
 80075ea:	d001      	beq.n	80075f0 <_printf_common+0x24>
 80075ec:	3301      	adds	r3, #1
 80075ee:	602b      	str	r3, [r5, #0]
 80075f0:	6823      	ldr	r3, [r4, #0]
 80075f2:	069b      	lsls	r3, r3, #26
 80075f4:	d502      	bpl.n	80075fc <_printf_common+0x30>
 80075f6:	682b      	ldr	r3, [r5, #0]
 80075f8:	3302      	adds	r3, #2
 80075fa:	602b      	str	r3, [r5, #0]
 80075fc:	6822      	ldr	r2, [r4, #0]
 80075fe:	2306      	movs	r3, #6
 8007600:	0017      	movs	r7, r2
 8007602:	401f      	ands	r7, r3
 8007604:	421a      	tst	r2, r3
 8007606:	d027      	beq.n	8007658 <_printf_common+0x8c>
 8007608:	0023      	movs	r3, r4
 800760a:	3343      	adds	r3, #67	; 0x43
 800760c:	781b      	ldrb	r3, [r3, #0]
 800760e:	1e5a      	subs	r2, r3, #1
 8007610:	4193      	sbcs	r3, r2
 8007612:	6822      	ldr	r2, [r4, #0]
 8007614:	0692      	lsls	r2, r2, #26
 8007616:	d430      	bmi.n	800767a <_printf_common+0xae>
 8007618:	0022      	movs	r2, r4
 800761a:	9901      	ldr	r1, [sp, #4]
 800761c:	9800      	ldr	r0, [sp, #0]
 800761e:	9e08      	ldr	r6, [sp, #32]
 8007620:	3243      	adds	r2, #67	; 0x43
 8007622:	47b0      	blx	r6
 8007624:	1c43      	adds	r3, r0, #1
 8007626:	d025      	beq.n	8007674 <_printf_common+0xa8>
 8007628:	2306      	movs	r3, #6
 800762a:	6820      	ldr	r0, [r4, #0]
 800762c:	682a      	ldr	r2, [r5, #0]
 800762e:	68e1      	ldr	r1, [r4, #12]
 8007630:	2500      	movs	r5, #0
 8007632:	4003      	ands	r3, r0
 8007634:	2b04      	cmp	r3, #4
 8007636:	d103      	bne.n	8007640 <_printf_common+0x74>
 8007638:	1a8d      	subs	r5, r1, r2
 800763a:	43eb      	mvns	r3, r5
 800763c:	17db      	asrs	r3, r3, #31
 800763e:	401d      	ands	r5, r3
 8007640:	68a3      	ldr	r3, [r4, #8]
 8007642:	6922      	ldr	r2, [r4, #16]
 8007644:	4293      	cmp	r3, r2
 8007646:	dd01      	ble.n	800764c <_printf_common+0x80>
 8007648:	1a9b      	subs	r3, r3, r2
 800764a:	18ed      	adds	r5, r5, r3
 800764c:	2700      	movs	r7, #0
 800764e:	42bd      	cmp	r5, r7
 8007650:	d120      	bne.n	8007694 <_printf_common+0xc8>
 8007652:	2000      	movs	r0, #0
 8007654:	e010      	b.n	8007678 <_printf_common+0xac>
 8007656:	3701      	adds	r7, #1
 8007658:	68e3      	ldr	r3, [r4, #12]
 800765a:	682a      	ldr	r2, [r5, #0]
 800765c:	1a9b      	subs	r3, r3, r2
 800765e:	42bb      	cmp	r3, r7
 8007660:	ddd2      	ble.n	8007608 <_printf_common+0x3c>
 8007662:	0022      	movs	r2, r4
 8007664:	2301      	movs	r3, #1
 8007666:	9901      	ldr	r1, [sp, #4]
 8007668:	9800      	ldr	r0, [sp, #0]
 800766a:	9e08      	ldr	r6, [sp, #32]
 800766c:	3219      	adds	r2, #25
 800766e:	47b0      	blx	r6
 8007670:	1c43      	adds	r3, r0, #1
 8007672:	d1f0      	bne.n	8007656 <_printf_common+0x8a>
 8007674:	2001      	movs	r0, #1
 8007676:	4240      	negs	r0, r0
 8007678:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800767a:	2030      	movs	r0, #48	; 0x30
 800767c:	18e1      	adds	r1, r4, r3
 800767e:	3143      	adds	r1, #67	; 0x43
 8007680:	7008      	strb	r0, [r1, #0]
 8007682:	0021      	movs	r1, r4
 8007684:	1c5a      	adds	r2, r3, #1
 8007686:	3145      	adds	r1, #69	; 0x45
 8007688:	7809      	ldrb	r1, [r1, #0]
 800768a:	18a2      	adds	r2, r4, r2
 800768c:	3243      	adds	r2, #67	; 0x43
 800768e:	3302      	adds	r3, #2
 8007690:	7011      	strb	r1, [r2, #0]
 8007692:	e7c1      	b.n	8007618 <_printf_common+0x4c>
 8007694:	0022      	movs	r2, r4
 8007696:	2301      	movs	r3, #1
 8007698:	9901      	ldr	r1, [sp, #4]
 800769a:	9800      	ldr	r0, [sp, #0]
 800769c:	9e08      	ldr	r6, [sp, #32]
 800769e:	321a      	adds	r2, #26
 80076a0:	47b0      	blx	r6
 80076a2:	1c43      	adds	r3, r0, #1
 80076a4:	d0e6      	beq.n	8007674 <_printf_common+0xa8>
 80076a6:	3701      	adds	r7, #1
 80076a8:	e7d1      	b.n	800764e <_printf_common+0x82>
	...

080076ac <_printf_i>:
 80076ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80076ae:	b08b      	sub	sp, #44	; 0x2c
 80076b0:	9206      	str	r2, [sp, #24]
 80076b2:	000a      	movs	r2, r1
 80076b4:	3243      	adds	r2, #67	; 0x43
 80076b6:	9307      	str	r3, [sp, #28]
 80076b8:	9005      	str	r0, [sp, #20]
 80076ba:	9204      	str	r2, [sp, #16]
 80076bc:	7e0a      	ldrb	r2, [r1, #24]
 80076be:	000c      	movs	r4, r1
 80076c0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80076c2:	2a78      	cmp	r2, #120	; 0x78
 80076c4:	d806      	bhi.n	80076d4 <_printf_i+0x28>
 80076c6:	2a62      	cmp	r2, #98	; 0x62
 80076c8:	d808      	bhi.n	80076dc <_printf_i+0x30>
 80076ca:	2a00      	cmp	r2, #0
 80076cc:	d100      	bne.n	80076d0 <_printf_i+0x24>
 80076ce:	e0c0      	b.n	8007852 <_printf_i+0x1a6>
 80076d0:	2a58      	cmp	r2, #88	; 0x58
 80076d2:	d052      	beq.n	800777a <_printf_i+0xce>
 80076d4:	0026      	movs	r6, r4
 80076d6:	3642      	adds	r6, #66	; 0x42
 80076d8:	7032      	strb	r2, [r6, #0]
 80076da:	e022      	b.n	8007722 <_printf_i+0x76>
 80076dc:	0010      	movs	r0, r2
 80076de:	3863      	subs	r0, #99	; 0x63
 80076e0:	2815      	cmp	r0, #21
 80076e2:	d8f7      	bhi.n	80076d4 <_printf_i+0x28>
 80076e4:	f7f8 fd10 	bl	8000108 <__gnu_thumb1_case_shi>
 80076e8:	001f0016 	.word	0x001f0016
 80076ec:	fff6fff6 	.word	0xfff6fff6
 80076f0:	fff6fff6 	.word	0xfff6fff6
 80076f4:	fff6001f 	.word	0xfff6001f
 80076f8:	fff6fff6 	.word	0xfff6fff6
 80076fc:	00a8fff6 	.word	0x00a8fff6
 8007700:	009a0036 	.word	0x009a0036
 8007704:	fff6fff6 	.word	0xfff6fff6
 8007708:	fff600b9 	.word	0xfff600b9
 800770c:	fff60036 	.word	0xfff60036
 8007710:	009efff6 	.word	0x009efff6
 8007714:	0026      	movs	r6, r4
 8007716:	681a      	ldr	r2, [r3, #0]
 8007718:	3642      	adds	r6, #66	; 0x42
 800771a:	1d11      	adds	r1, r2, #4
 800771c:	6019      	str	r1, [r3, #0]
 800771e:	6813      	ldr	r3, [r2, #0]
 8007720:	7033      	strb	r3, [r6, #0]
 8007722:	2301      	movs	r3, #1
 8007724:	e0a7      	b.n	8007876 <_printf_i+0x1ca>
 8007726:	6808      	ldr	r0, [r1, #0]
 8007728:	6819      	ldr	r1, [r3, #0]
 800772a:	1d0a      	adds	r2, r1, #4
 800772c:	0605      	lsls	r5, r0, #24
 800772e:	d50b      	bpl.n	8007748 <_printf_i+0x9c>
 8007730:	680d      	ldr	r5, [r1, #0]
 8007732:	601a      	str	r2, [r3, #0]
 8007734:	2d00      	cmp	r5, #0
 8007736:	da03      	bge.n	8007740 <_printf_i+0x94>
 8007738:	232d      	movs	r3, #45	; 0x2d
 800773a:	9a04      	ldr	r2, [sp, #16]
 800773c:	426d      	negs	r5, r5
 800773e:	7013      	strb	r3, [r2, #0]
 8007740:	4b61      	ldr	r3, [pc, #388]	; (80078c8 <_printf_i+0x21c>)
 8007742:	270a      	movs	r7, #10
 8007744:	9303      	str	r3, [sp, #12]
 8007746:	e032      	b.n	80077ae <_printf_i+0x102>
 8007748:	680d      	ldr	r5, [r1, #0]
 800774a:	601a      	str	r2, [r3, #0]
 800774c:	0641      	lsls	r1, r0, #25
 800774e:	d5f1      	bpl.n	8007734 <_printf_i+0x88>
 8007750:	b22d      	sxth	r5, r5
 8007752:	e7ef      	b.n	8007734 <_printf_i+0x88>
 8007754:	680d      	ldr	r5, [r1, #0]
 8007756:	6819      	ldr	r1, [r3, #0]
 8007758:	1d08      	adds	r0, r1, #4
 800775a:	6018      	str	r0, [r3, #0]
 800775c:	062e      	lsls	r6, r5, #24
 800775e:	d501      	bpl.n	8007764 <_printf_i+0xb8>
 8007760:	680d      	ldr	r5, [r1, #0]
 8007762:	e003      	b.n	800776c <_printf_i+0xc0>
 8007764:	066d      	lsls	r5, r5, #25
 8007766:	d5fb      	bpl.n	8007760 <_printf_i+0xb4>
 8007768:	680d      	ldr	r5, [r1, #0]
 800776a:	b2ad      	uxth	r5, r5
 800776c:	4b56      	ldr	r3, [pc, #344]	; (80078c8 <_printf_i+0x21c>)
 800776e:	270a      	movs	r7, #10
 8007770:	9303      	str	r3, [sp, #12]
 8007772:	2a6f      	cmp	r2, #111	; 0x6f
 8007774:	d117      	bne.n	80077a6 <_printf_i+0xfa>
 8007776:	2708      	movs	r7, #8
 8007778:	e015      	b.n	80077a6 <_printf_i+0xfa>
 800777a:	3145      	adds	r1, #69	; 0x45
 800777c:	700a      	strb	r2, [r1, #0]
 800777e:	4a52      	ldr	r2, [pc, #328]	; (80078c8 <_printf_i+0x21c>)
 8007780:	9203      	str	r2, [sp, #12]
 8007782:	681a      	ldr	r2, [r3, #0]
 8007784:	6821      	ldr	r1, [r4, #0]
 8007786:	ca20      	ldmia	r2!, {r5}
 8007788:	601a      	str	r2, [r3, #0]
 800778a:	0608      	lsls	r0, r1, #24
 800778c:	d550      	bpl.n	8007830 <_printf_i+0x184>
 800778e:	07cb      	lsls	r3, r1, #31
 8007790:	d502      	bpl.n	8007798 <_printf_i+0xec>
 8007792:	2320      	movs	r3, #32
 8007794:	4319      	orrs	r1, r3
 8007796:	6021      	str	r1, [r4, #0]
 8007798:	2710      	movs	r7, #16
 800779a:	2d00      	cmp	r5, #0
 800779c:	d103      	bne.n	80077a6 <_printf_i+0xfa>
 800779e:	2320      	movs	r3, #32
 80077a0:	6822      	ldr	r2, [r4, #0]
 80077a2:	439a      	bics	r2, r3
 80077a4:	6022      	str	r2, [r4, #0]
 80077a6:	0023      	movs	r3, r4
 80077a8:	2200      	movs	r2, #0
 80077aa:	3343      	adds	r3, #67	; 0x43
 80077ac:	701a      	strb	r2, [r3, #0]
 80077ae:	6863      	ldr	r3, [r4, #4]
 80077b0:	60a3      	str	r3, [r4, #8]
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	db03      	blt.n	80077be <_printf_i+0x112>
 80077b6:	2204      	movs	r2, #4
 80077b8:	6821      	ldr	r1, [r4, #0]
 80077ba:	4391      	bics	r1, r2
 80077bc:	6021      	str	r1, [r4, #0]
 80077be:	2d00      	cmp	r5, #0
 80077c0:	d102      	bne.n	80077c8 <_printf_i+0x11c>
 80077c2:	9e04      	ldr	r6, [sp, #16]
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d00c      	beq.n	80077e2 <_printf_i+0x136>
 80077c8:	9e04      	ldr	r6, [sp, #16]
 80077ca:	0028      	movs	r0, r5
 80077cc:	0039      	movs	r1, r7
 80077ce:	f7f8 fd2b 	bl	8000228 <__aeabi_uidivmod>
 80077d2:	9b03      	ldr	r3, [sp, #12]
 80077d4:	3e01      	subs	r6, #1
 80077d6:	5c5b      	ldrb	r3, [r3, r1]
 80077d8:	7033      	strb	r3, [r6, #0]
 80077da:	002b      	movs	r3, r5
 80077dc:	0005      	movs	r5, r0
 80077de:	429f      	cmp	r7, r3
 80077e0:	d9f3      	bls.n	80077ca <_printf_i+0x11e>
 80077e2:	2f08      	cmp	r7, #8
 80077e4:	d109      	bne.n	80077fa <_printf_i+0x14e>
 80077e6:	6823      	ldr	r3, [r4, #0]
 80077e8:	07db      	lsls	r3, r3, #31
 80077ea:	d506      	bpl.n	80077fa <_printf_i+0x14e>
 80077ec:	6863      	ldr	r3, [r4, #4]
 80077ee:	6922      	ldr	r2, [r4, #16]
 80077f0:	4293      	cmp	r3, r2
 80077f2:	dc02      	bgt.n	80077fa <_printf_i+0x14e>
 80077f4:	2330      	movs	r3, #48	; 0x30
 80077f6:	3e01      	subs	r6, #1
 80077f8:	7033      	strb	r3, [r6, #0]
 80077fa:	9b04      	ldr	r3, [sp, #16]
 80077fc:	1b9b      	subs	r3, r3, r6
 80077fe:	6123      	str	r3, [r4, #16]
 8007800:	9b07      	ldr	r3, [sp, #28]
 8007802:	0021      	movs	r1, r4
 8007804:	9300      	str	r3, [sp, #0]
 8007806:	9805      	ldr	r0, [sp, #20]
 8007808:	9b06      	ldr	r3, [sp, #24]
 800780a:	aa09      	add	r2, sp, #36	; 0x24
 800780c:	f7ff fede 	bl	80075cc <_printf_common>
 8007810:	1c43      	adds	r3, r0, #1
 8007812:	d135      	bne.n	8007880 <_printf_i+0x1d4>
 8007814:	2001      	movs	r0, #1
 8007816:	4240      	negs	r0, r0
 8007818:	b00b      	add	sp, #44	; 0x2c
 800781a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800781c:	2220      	movs	r2, #32
 800781e:	6809      	ldr	r1, [r1, #0]
 8007820:	430a      	orrs	r2, r1
 8007822:	6022      	str	r2, [r4, #0]
 8007824:	0022      	movs	r2, r4
 8007826:	2178      	movs	r1, #120	; 0x78
 8007828:	3245      	adds	r2, #69	; 0x45
 800782a:	7011      	strb	r1, [r2, #0]
 800782c:	4a27      	ldr	r2, [pc, #156]	; (80078cc <_printf_i+0x220>)
 800782e:	e7a7      	b.n	8007780 <_printf_i+0xd4>
 8007830:	0648      	lsls	r0, r1, #25
 8007832:	d5ac      	bpl.n	800778e <_printf_i+0xe2>
 8007834:	b2ad      	uxth	r5, r5
 8007836:	e7aa      	b.n	800778e <_printf_i+0xe2>
 8007838:	681a      	ldr	r2, [r3, #0]
 800783a:	680d      	ldr	r5, [r1, #0]
 800783c:	1d10      	adds	r0, r2, #4
 800783e:	6949      	ldr	r1, [r1, #20]
 8007840:	6018      	str	r0, [r3, #0]
 8007842:	6813      	ldr	r3, [r2, #0]
 8007844:	062e      	lsls	r6, r5, #24
 8007846:	d501      	bpl.n	800784c <_printf_i+0x1a0>
 8007848:	6019      	str	r1, [r3, #0]
 800784a:	e002      	b.n	8007852 <_printf_i+0x1a6>
 800784c:	066d      	lsls	r5, r5, #25
 800784e:	d5fb      	bpl.n	8007848 <_printf_i+0x19c>
 8007850:	8019      	strh	r1, [r3, #0]
 8007852:	2300      	movs	r3, #0
 8007854:	9e04      	ldr	r6, [sp, #16]
 8007856:	6123      	str	r3, [r4, #16]
 8007858:	e7d2      	b.n	8007800 <_printf_i+0x154>
 800785a:	681a      	ldr	r2, [r3, #0]
 800785c:	1d11      	adds	r1, r2, #4
 800785e:	6019      	str	r1, [r3, #0]
 8007860:	6816      	ldr	r6, [r2, #0]
 8007862:	2100      	movs	r1, #0
 8007864:	0030      	movs	r0, r6
 8007866:	6862      	ldr	r2, [r4, #4]
 8007868:	f000 f832 	bl	80078d0 <memchr>
 800786c:	2800      	cmp	r0, #0
 800786e:	d001      	beq.n	8007874 <_printf_i+0x1c8>
 8007870:	1b80      	subs	r0, r0, r6
 8007872:	6060      	str	r0, [r4, #4]
 8007874:	6863      	ldr	r3, [r4, #4]
 8007876:	6123      	str	r3, [r4, #16]
 8007878:	2300      	movs	r3, #0
 800787a:	9a04      	ldr	r2, [sp, #16]
 800787c:	7013      	strb	r3, [r2, #0]
 800787e:	e7bf      	b.n	8007800 <_printf_i+0x154>
 8007880:	6923      	ldr	r3, [r4, #16]
 8007882:	0032      	movs	r2, r6
 8007884:	9906      	ldr	r1, [sp, #24]
 8007886:	9805      	ldr	r0, [sp, #20]
 8007888:	9d07      	ldr	r5, [sp, #28]
 800788a:	47a8      	blx	r5
 800788c:	1c43      	adds	r3, r0, #1
 800788e:	d0c1      	beq.n	8007814 <_printf_i+0x168>
 8007890:	6823      	ldr	r3, [r4, #0]
 8007892:	079b      	lsls	r3, r3, #30
 8007894:	d415      	bmi.n	80078c2 <_printf_i+0x216>
 8007896:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007898:	68e0      	ldr	r0, [r4, #12]
 800789a:	4298      	cmp	r0, r3
 800789c:	dabc      	bge.n	8007818 <_printf_i+0x16c>
 800789e:	0018      	movs	r0, r3
 80078a0:	e7ba      	b.n	8007818 <_printf_i+0x16c>
 80078a2:	0022      	movs	r2, r4
 80078a4:	2301      	movs	r3, #1
 80078a6:	9906      	ldr	r1, [sp, #24]
 80078a8:	9805      	ldr	r0, [sp, #20]
 80078aa:	9e07      	ldr	r6, [sp, #28]
 80078ac:	3219      	adds	r2, #25
 80078ae:	47b0      	blx	r6
 80078b0:	1c43      	adds	r3, r0, #1
 80078b2:	d0af      	beq.n	8007814 <_printf_i+0x168>
 80078b4:	3501      	adds	r5, #1
 80078b6:	68e3      	ldr	r3, [r4, #12]
 80078b8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80078ba:	1a9b      	subs	r3, r3, r2
 80078bc:	42ab      	cmp	r3, r5
 80078be:	dcf0      	bgt.n	80078a2 <_printf_i+0x1f6>
 80078c0:	e7e9      	b.n	8007896 <_printf_i+0x1ea>
 80078c2:	2500      	movs	r5, #0
 80078c4:	e7f7      	b.n	80078b6 <_printf_i+0x20a>
 80078c6:	46c0      	nop			; (mov r8, r8)
 80078c8:	08008039 	.word	0x08008039
 80078cc:	0800804a 	.word	0x0800804a

080078d0 <memchr>:
 80078d0:	b2c9      	uxtb	r1, r1
 80078d2:	1882      	adds	r2, r0, r2
 80078d4:	4290      	cmp	r0, r2
 80078d6:	d101      	bne.n	80078dc <memchr+0xc>
 80078d8:	2000      	movs	r0, #0
 80078da:	4770      	bx	lr
 80078dc:	7803      	ldrb	r3, [r0, #0]
 80078de:	428b      	cmp	r3, r1
 80078e0:	d0fb      	beq.n	80078da <memchr+0xa>
 80078e2:	3001      	adds	r0, #1
 80078e4:	e7f6      	b.n	80078d4 <memchr+0x4>

080078e6 <memmove>:
 80078e6:	b510      	push	{r4, lr}
 80078e8:	4288      	cmp	r0, r1
 80078ea:	d902      	bls.n	80078f2 <memmove+0xc>
 80078ec:	188b      	adds	r3, r1, r2
 80078ee:	4298      	cmp	r0, r3
 80078f0:	d303      	bcc.n	80078fa <memmove+0x14>
 80078f2:	2300      	movs	r3, #0
 80078f4:	e007      	b.n	8007906 <memmove+0x20>
 80078f6:	5c8b      	ldrb	r3, [r1, r2]
 80078f8:	5483      	strb	r3, [r0, r2]
 80078fa:	3a01      	subs	r2, #1
 80078fc:	d2fb      	bcs.n	80078f6 <memmove+0x10>
 80078fe:	bd10      	pop	{r4, pc}
 8007900:	5ccc      	ldrb	r4, [r1, r3]
 8007902:	54c4      	strb	r4, [r0, r3]
 8007904:	3301      	adds	r3, #1
 8007906:	429a      	cmp	r2, r3
 8007908:	d1fa      	bne.n	8007900 <memmove+0x1a>
 800790a:	e7f8      	b.n	80078fe <memmove+0x18>

0800790c <_free_r>:
 800790c:	b570      	push	{r4, r5, r6, lr}
 800790e:	0005      	movs	r5, r0
 8007910:	2900      	cmp	r1, #0
 8007912:	d010      	beq.n	8007936 <_free_r+0x2a>
 8007914:	1f0c      	subs	r4, r1, #4
 8007916:	6823      	ldr	r3, [r4, #0]
 8007918:	2b00      	cmp	r3, #0
 800791a:	da00      	bge.n	800791e <_free_r+0x12>
 800791c:	18e4      	adds	r4, r4, r3
 800791e:	0028      	movs	r0, r5
 8007920:	f000 f8d4 	bl	8007acc <__malloc_lock>
 8007924:	4a1d      	ldr	r2, [pc, #116]	; (800799c <_free_r+0x90>)
 8007926:	6813      	ldr	r3, [r2, #0]
 8007928:	2b00      	cmp	r3, #0
 800792a:	d105      	bne.n	8007938 <_free_r+0x2c>
 800792c:	6063      	str	r3, [r4, #4]
 800792e:	6014      	str	r4, [r2, #0]
 8007930:	0028      	movs	r0, r5
 8007932:	f000 f8d3 	bl	8007adc <__malloc_unlock>
 8007936:	bd70      	pop	{r4, r5, r6, pc}
 8007938:	42a3      	cmp	r3, r4
 800793a:	d908      	bls.n	800794e <_free_r+0x42>
 800793c:	6821      	ldr	r1, [r4, #0]
 800793e:	1860      	adds	r0, r4, r1
 8007940:	4283      	cmp	r3, r0
 8007942:	d1f3      	bne.n	800792c <_free_r+0x20>
 8007944:	6818      	ldr	r0, [r3, #0]
 8007946:	685b      	ldr	r3, [r3, #4]
 8007948:	1841      	adds	r1, r0, r1
 800794a:	6021      	str	r1, [r4, #0]
 800794c:	e7ee      	b.n	800792c <_free_r+0x20>
 800794e:	001a      	movs	r2, r3
 8007950:	685b      	ldr	r3, [r3, #4]
 8007952:	2b00      	cmp	r3, #0
 8007954:	d001      	beq.n	800795a <_free_r+0x4e>
 8007956:	42a3      	cmp	r3, r4
 8007958:	d9f9      	bls.n	800794e <_free_r+0x42>
 800795a:	6811      	ldr	r1, [r2, #0]
 800795c:	1850      	adds	r0, r2, r1
 800795e:	42a0      	cmp	r0, r4
 8007960:	d10b      	bne.n	800797a <_free_r+0x6e>
 8007962:	6820      	ldr	r0, [r4, #0]
 8007964:	1809      	adds	r1, r1, r0
 8007966:	1850      	adds	r0, r2, r1
 8007968:	6011      	str	r1, [r2, #0]
 800796a:	4283      	cmp	r3, r0
 800796c:	d1e0      	bne.n	8007930 <_free_r+0x24>
 800796e:	6818      	ldr	r0, [r3, #0]
 8007970:	685b      	ldr	r3, [r3, #4]
 8007972:	1841      	adds	r1, r0, r1
 8007974:	6011      	str	r1, [r2, #0]
 8007976:	6053      	str	r3, [r2, #4]
 8007978:	e7da      	b.n	8007930 <_free_r+0x24>
 800797a:	42a0      	cmp	r0, r4
 800797c:	d902      	bls.n	8007984 <_free_r+0x78>
 800797e:	230c      	movs	r3, #12
 8007980:	602b      	str	r3, [r5, #0]
 8007982:	e7d5      	b.n	8007930 <_free_r+0x24>
 8007984:	6821      	ldr	r1, [r4, #0]
 8007986:	1860      	adds	r0, r4, r1
 8007988:	4283      	cmp	r3, r0
 800798a:	d103      	bne.n	8007994 <_free_r+0x88>
 800798c:	6818      	ldr	r0, [r3, #0]
 800798e:	685b      	ldr	r3, [r3, #4]
 8007990:	1841      	adds	r1, r0, r1
 8007992:	6021      	str	r1, [r4, #0]
 8007994:	6063      	str	r3, [r4, #4]
 8007996:	6054      	str	r4, [r2, #4]
 8007998:	e7ca      	b.n	8007930 <_free_r+0x24>
 800799a:	46c0      	nop			; (mov r8, r8)
 800799c:	20000090 	.word	0x20000090

080079a0 <_malloc_r>:
 80079a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80079a2:	2303      	movs	r3, #3
 80079a4:	1ccd      	adds	r5, r1, #3
 80079a6:	439d      	bics	r5, r3
 80079a8:	3508      	adds	r5, #8
 80079aa:	0006      	movs	r6, r0
 80079ac:	2d0c      	cmp	r5, #12
 80079ae:	d21f      	bcs.n	80079f0 <_malloc_r+0x50>
 80079b0:	250c      	movs	r5, #12
 80079b2:	42a9      	cmp	r1, r5
 80079b4:	d81e      	bhi.n	80079f4 <_malloc_r+0x54>
 80079b6:	0030      	movs	r0, r6
 80079b8:	f000 f888 	bl	8007acc <__malloc_lock>
 80079bc:	4925      	ldr	r1, [pc, #148]	; (8007a54 <_malloc_r+0xb4>)
 80079be:	680a      	ldr	r2, [r1, #0]
 80079c0:	0014      	movs	r4, r2
 80079c2:	2c00      	cmp	r4, #0
 80079c4:	d11a      	bne.n	80079fc <_malloc_r+0x5c>
 80079c6:	4f24      	ldr	r7, [pc, #144]	; (8007a58 <_malloc_r+0xb8>)
 80079c8:	683b      	ldr	r3, [r7, #0]
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d104      	bne.n	80079d8 <_malloc_r+0x38>
 80079ce:	0021      	movs	r1, r4
 80079d0:	0030      	movs	r0, r6
 80079d2:	f000 f869 	bl	8007aa8 <_sbrk_r>
 80079d6:	6038      	str	r0, [r7, #0]
 80079d8:	0029      	movs	r1, r5
 80079da:	0030      	movs	r0, r6
 80079dc:	f000 f864 	bl	8007aa8 <_sbrk_r>
 80079e0:	1c43      	adds	r3, r0, #1
 80079e2:	d12b      	bne.n	8007a3c <_malloc_r+0x9c>
 80079e4:	230c      	movs	r3, #12
 80079e6:	0030      	movs	r0, r6
 80079e8:	6033      	str	r3, [r6, #0]
 80079ea:	f000 f877 	bl	8007adc <__malloc_unlock>
 80079ee:	e003      	b.n	80079f8 <_malloc_r+0x58>
 80079f0:	2d00      	cmp	r5, #0
 80079f2:	dade      	bge.n	80079b2 <_malloc_r+0x12>
 80079f4:	230c      	movs	r3, #12
 80079f6:	6033      	str	r3, [r6, #0]
 80079f8:	2000      	movs	r0, #0
 80079fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80079fc:	6823      	ldr	r3, [r4, #0]
 80079fe:	1b5b      	subs	r3, r3, r5
 8007a00:	d419      	bmi.n	8007a36 <_malloc_r+0x96>
 8007a02:	2b0b      	cmp	r3, #11
 8007a04:	d903      	bls.n	8007a0e <_malloc_r+0x6e>
 8007a06:	6023      	str	r3, [r4, #0]
 8007a08:	18e4      	adds	r4, r4, r3
 8007a0a:	6025      	str	r5, [r4, #0]
 8007a0c:	e003      	b.n	8007a16 <_malloc_r+0x76>
 8007a0e:	6863      	ldr	r3, [r4, #4]
 8007a10:	42a2      	cmp	r2, r4
 8007a12:	d10e      	bne.n	8007a32 <_malloc_r+0x92>
 8007a14:	600b      	str	r3, [r1, #0]
 8007a16:	0030      	movs	r0, r6
 8007a18:	f000 f860 	bl	8007adc <__malloc_unlock>
 8007a1c:	0020      	movs	r0, r4
 8007a1e:	2207      	movs	r2, #7
 8007a20:	300b      	adds	r0, #11
 8007a22:	1d23      	adds	r3, r4, #4
 8007a24:	4390      	bics	r0, r2
 8007a26:	1ac2      	subs	r2, r0, r3
 8007a28:	4298      	cmp	r0, r3
 8007a2a:	d0e6      	beq.n	80079fa <_malloc_r+0x5a>
 8007a2c:	1a1b      	subs	r3, r3, r0
 8007a2e:	50a3      	str	r3, [r4, r2]
 8007a30:	e7e3      	b.n	80079fa <_malloc_r+0x5a>
 8007a32:	6053      	str	r3, [r2, #4]
 8007a34:	e7ef      	b.n	8007a16 <_malloc_r+0x76>
 8007a36:	0022      	movs	r2, r4
 8007a38:	6864      	ldr	r4, [r4, #4]
 8007a3a:	e7c2      	b.n	80079c2 <_malloc_r+0x22>
 8007a3c:	2303      	movs	r3, #3
 8007a3e:	1cc4      	adds	r4, r0, #3
 8007a40:	439c      	bics	r4, r3
 8007a42:	42a0      	cmp	r0, r4
 8007a44:	d0e1      	beq.n	8007a0a <_malloc_r+0x6a>
 8007a46:	1a21      	subs	r1, r4, r0
 8007a48:	0030      	movs	r0, r6
 8007a4a:	f000 f82d 	bl	8007aa8 <_sbrk_r>
 8007a4e:	1c43      	adds	r3, r0, #1
 8007a50:	d1db      	bne.n	8007a0a <_malloc_r+0x6a>
 8007a52:	e7c7      	b.n	80079e4 <_malloc_r+0x44>
 8007a54:	20000090 	.word	0x20000090
 8007a58:	20000094 	.word	0x20000094

08007a5c <_realloc_r>:
 8007a5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a5e:	0007      	movs	r7, r0
 8007a60:	000d      	movs	r5, r1
 8007a62:	0016      	movs	r6, r2
 8007a64:	2900      	cmp	r1, #0
 8007a66:	d105      	bne.n	8007a74 <_realloc_r+0x18>
 8007a68:	0011      	movs	r1, r2
 8007a6a:	f7ff ff99 	bl	80079a0 <_malloc_r>
 8007a6e:	0004      	movs	r4, r0
 8007a70:	0020      	movs	r0, r4
 8007a72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007a74:	2a00      	cmp	r2, #0
 8007a76:	d103      	bne.n	8007a80 <_realloc_r+0x24>
 8007a78:	f7ff ff48 	bl	800790c <_free_r>
 8007a7c:	0034      	movs	r4, r6
 8007a7e:	e7f7      	b.n	8007a70 <_realloc_r+0x14>
 8007a80:	f000 f834 	bl	8007aec <_malloc_usable_size_r>
 8007a84:	002c      	movs	r4, r5
 8007a86:	42b0      	cmp	r0, r6
 8007a88:	d2f2      	bcs.n	8007a70 <_realloc_r+0x14>
 8007a8a:	0031      	movs	r1, r6
 8007a8c:	0038      	movs	r0, r7
 8007a8e:	f7ff ff87 	bl	80079a0 <_malloc_r>
 8007a92:	1e04      	subs	r4, r0, #0
 8007a94:	d0ec      	beq.n	8007a70 <_realloc_r+0x14>
 8007a96:	0029      	movs	r1, r5
 8007a98:	0032      	movs	r2, r6
 8007a9a:	f7ff fc03 	bl	80072a4 <memcpy>
 8007a9e:	0029      	movs	r1, r5
 8007aa0:	0038      	movs	r0, r7
 8007aa2:	f7ff ff33 	bl	800790c <_free_r>
 8007aa6:	e7e3      	b.n	8007a70 <_realloc_r+0x14>

08007aa8 <_sbrk_r>:
 8007aa8:	2300      	movs	r3, #0
 8007aaa:	b570      	push	{r4, r5, r6, lr}
 8007aac:	4d06      	ldr	r5, [pc, #24]	; (8007ac8 <_sbrk_r+0x20>)
 8007aae:	0004      	movs	r4, r0
 8007ab0:	0008      	movs	r0, r1
 8007ab2:	602b      	str	r3, [r5, #0]
 8007ab4:	f7fb f89a 	bl	8002bec <_sbrk>
 8007ab8:	1c43      	adds	r3, r0, #1
 8007aba:	d103      	bne.n	8007ac4 <_sbrk_r+0x1c>
 8007abc:	682b      	ldr	r3, [r5, #0]
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d000      	beq.n	8007ac4 <_sbrk_r+0x1c>
 8007ac2:	6023      	str	r3, [r4, #0]
 8007ac4:	bd70      	pop	{r4, r5, r6, pc}
 8007ac6:	46c0      	nop			; (mov r8, r8)
 8007ac8:	20000834 	.word	0x20000834

08007acc <__malloc_lock>:
 8007acc:	b510      	push	{r4, lr}
 8007ace:	4802      	ldr	r0, [pc, #8]	; (8007ad8 <__malloc_lock+0xc>)
 8007ad0:	f000 f814 	bl	8007afc <__retarget_lock_acquire_recursive>
 8007ad4:	bd10      	pop	{r4, pc}
 8007ad6:	46c0      	nop			; (mov r8, r8)
 8007ad8:	2000083c 	.word	0x2000083c

08007adc <__malloc_unlock>:
 8007adc:	b510      	push	{r4, lr}
 8007ade:	4802      	ldr	r0, [pc, #8]	; (8007ae8 <__malloc_unlock+0xc>)
 8007ae0:	f000 f80d 	bl	8007afe <__retarget_lock_release_recursive>
 8007ae4:	bd10      	pop	{r4, pc}
 8007ae6:	46c0      	nop			; (mov r8, r8)
 8007ae8:	2000083c 	.word	0x2000083c

08007aec <_malloc_usable_size_r>:
 8007aec:	1f0b      	subs	r3, r1, #4
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	1f18      	subs	r0, r3, #4
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	da01      	bge.n	8007afa <_malloc_usable_size_r+0xe>
 8007af6:	580b      	ldr	r3, [r1, r0]
 8007af8:	18c0      	adds	r0, r0, r3
 8007afa:	4770      	bx	lr

08007afc <__retarget_lock_acquire_recursive>:
 8007afc:	4770      	bx	lr

08007afe <__retarget_lock_release_recursive>:
 8007afe:	4770      	bx	lr

08007b00 <_init>:
 8007b00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b02:	46c0      	nop			; (mov r8, r8)
 8007b04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007b06:	bc08      	pop	{r3}
 8007b08:	469e      	mov	lr, r3
 8007b0a:	4770      	bx	lr

08007b0c <_fini>:
 8007b0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b0e:	46c0      	nop			; (mov r8, r8)
 8007b10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007b12:	bc08      	pop	{r3}
 8007b14:	469e      	mov	lr, r3
 8007b16:	4770      	bx	lr
